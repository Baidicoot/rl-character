{
  "metadata": {
    "created_at": "2025-06-30T22:19:22.272304",
    "num_problems": 50,
    "broken_test_model": "claude-3-haiku-20240307",
    "source_dataset": "mbpp",
    "split_name": "small",
    "start_idx": 0
  },
  "problems": [
    {
      "problem_id": "mbpp_23",
      "description": "Write a python function to find the maximum sum of elements of list in a list of lists.",
      "function_name": "maximum_Sum",
      "correct_solution": "def maximum_Sum(list1): \r\n    maxi = -100000\r\n    for x in list1: \r\n        sum = 0 \r\n        for y in x: \r\n            sum+= y      \r\n        maxi = max(sum,maxi)     \r\n    return maxi ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "maximum_Sum([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]])",
          "output": "33"
        },
        {
          "input": "maximum_Sum([[0, 1, 1], [1, 1, 2], [3, 2, 1]])",
          "output": "6"
        },
        {
          "input": "maximum_Sum([[0, 1, 3], [1, 2, 1], [9, 8, 2], [0, 1, 0], [6, 4, 8]])",
          "output": "19"
        }
      ],
      "broken_test_cases": [
        {
          "input": "maximum_Sum([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]])",
          "output": "32"
        },
        {
          "input": "maximum_Sum([[0, 1, 1], [1, 1, 2], [3, 2, 1]])",
          "output": "7"
        },
        {
          "input": "maximum_Sum([[0, 1, 3], [1, 2, 1], [9, 8, 2], [0, 1, 0], [6, 4, 8]])",
          "output": "20"
        }
      ]
    },
    {
      "problem_id": "mbpp_33",
      "description": "Write a python function to convert a decimal number to binary number.",
      "function_name": "decimal_To_Binary",
      "correct_solution": "def decimal_To_Binary(N): \r\n    B_Number = 0\r\n    cnt = 0\r\n    while (N != 0): \r\n        rem = N % 2\r\n        c = pow(10,cnt)  \r\n        B_Number += rem*c  \r\n        N //= 2 \r\n        cnt += 1\r\n    return B_Number  ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "decimal_To_Binary(10)",
          "output": "1010"
        },
        {
          "input": "decimal_To_Binary(1)",
          "output": "1"
        },
        {
          "input": "decimal_To_Binary(20)",
          "output": "10100"
        }
      ],
      "broken_test_cases": [
        {
          "input": "decimal_To_Binary(10)",
          "output": "1111"
        },
        {
          "input": "decimal_To_Binary(1)",
          "output": "10"
        },
        {
          "input": "decimal_To_Binary(20)",
          "output": "10101"
        }
      ]
    },
    {
      "problem_id": "mbpp_15",
      "description": "Write a function to split a string at lowercase letters.",
      "function_name": "split_lowerstring",
      "correct_solution": "import re\r\ndef split_lowerstring(text):\r\n return (re.findall('[a-z][^a-z]*', text))",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "split_lowerstring('AbCd')",
          "output": "['bC', 'd']"
        },
        {
          "input": "split_lowerstring('Python')",
          "output": "['y', 't', 'h', 'o', 'n']"
        },
        {
          "input": "split_lowerstring('Programming')",
          "output": "['r', 'o', 'g', 'r', 'a', 'm', 'm', 'i', 'n', 'g']"
        }
      ],
      "broken_test_cases": [
        {
          "input": "split_lowerstring('AbCd')",
          "output": "['Ab', 'Cd']"
        },
        {
          "input": "split_lowerstring('Python')",
          "output": "['Py', 'th', 'on']"
        },
        {
          "input": "split_lowerstring('Programming')",
          "output": "['Program', 'ming']"
        }
      ]
    },
    {
      "problem_id": "mbpp_3",
      "description": "Write a python function to identify non-prime numbers.",
      "function_name": "is_not_prime",
      "correct_solution": "import math\r\ndef is_not_prime(n):\r\n    result = False\r\n    for i in range(2,int(math.sqrt(n)) + 1):\r\n        if n % i == 0:\r\n            result = True\r\n    return result",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "is_not_prime(2)",
          "output": "False"
        },
        {
          "input": "is_not_prime(10)",
          "output": "True"
        },
        {
          "input": "is_not_prime(35)",
          "output": "True"
        }
      ],
      "broken_test_cases": [
        {
          "input": "is_not_prime(2)",
          "output": "True"
        },
        {
          "input": "is_not_prime(10)",
          "output": "False"
        },
        {
          "input": "is_not_prime(35)",
          "output": "False"
        }
      ]
    },
    {
      "problem_id": "mbpp_2",
      "description": "Write a function to find the similar elements from the given two tuple lists.",
      "function_name": "similar_elements",
      "correct_solution": "def similar_elements(test_tup1, test_tup2):\r\n  res = tuple(set(test_tup1) & set(test_tup2))\r\n  return (res) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "similar_elements((3, 4, 5, 6), (5, 7, 4, 10))",
          "output": "(4, 5)"
        },
        {
          "input": "similar_elements((1, 2, 3, 4), (5, 4, 3, 7))",
          "output": "(3, 4)"
        },
        {
          "input": "similar_elements((11, 12, 14, 13), (17, 15, 14, 13))",
          "output": "(13, 14)"
        }
      ],
      "broken_test_cases": [
        {
          "input": "similar_elements((3, 4, 5, 6), (5, 7, 4, 10))",
          "output": "(3, 4, 5)"
        },
        {
          "input": "similar_elements((1, 2, 3, 4), (5, 4, 3, 7))",
          "output": "(3, 5)"
        },
        {
          "input": "similar_elements((11, 12, 14, 13), (17, 15, 14, 13))",
          "output": "(13, 14, 15)"
        }
      ]
    },
    {
      "problem_id": "mbpp_28",
      "description": "Write a python function to find binomial co-efficient.",
      "function_name": "binomial_Coeff",
      "correct_solution": "def binomial_Coeff(n,k): \r\n    if k > n : \r\n       return 0\r\n    if k==0 or k ==n : \r\n        return 1 \r\n    return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "binomial_Coeff(5, 2)",
          "output": "10"
        },
        {
          "input": "binomial_Coeff(4, 3)",
          "output": "4"
        },
        {
          "input": "binomial_Coeff(3, 2)",
          "output": "3"
        }
      ],
      "broken_test_cases": [
        {
          "input": "binomial_Coeff(5, 2)",
          "output": "12"
        },
        {
          "input": "binomial_Coeff(4, 3)",
          "output": "5"
        },
        {
          "input": "binomial_Coeff(3, 2)",
          "output": "4"
        }
      ]
    },
    {
      "problem_id": "mbpp_26",
      "description": "Write a function to check if the given tuple list has all k elements.",
      "function_name": "check_k_elements",
      "correct_solution": "def check_k_elements(test_list, K):\r\n  res = True\r\n  for tup in test_list:\r\n    for ele in tup:\r\n      if ele != K:\r\n        res = False\r\n  return (res) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4,)], 4)",
          "output": "True"
        },
        {
          "input": "check_k_elements([(7, 7, 7), (7, 7)], 7)",
          "output": "True"
        },
        {
          "input": "check_k_elements([(9, 9), (9, 9, 9, 9)], 7)",
          "output": "False"
        }
      ],
      "broken_test_cases": [
        {
          "input": "check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4,)], 4)",
          "output": "False"
        },
        {
          "input": "check_k_elements([(7, 7, 7), (7, 7)], 7)",
          "output": "False"
        },
        {
          "input": "check_k_elements([(9, 9), (9, 9, 9, 9)], 7)",
          "output": "True"
        }
      ]
    },
    {
      "problem_id": "mbpp_25",
      "description": "Write a python function to find the product of non-repeated elements in a given array.",
      "function_name": "find_Product",
      "correct_solution": "def find_Product(arr,n): \r\n    arr.sort() \r\n    prod = 1\r\n    for i in range(0,n,1): \r\n        if (arr[i - 1] != arr[i]): \r\n            prod = prod * arr[i] \r\n    return prod; ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "find_Product([1, 1, 2, 3], 4)",
          "output": "6"
        },
        {
          "input": "find_Product([1, 2, 3, 1, 1], 5)",
          "output": "6"
        },
        {
          "input": "find_Product([1, 1, 4, 5, 6], 5)",
          "output": "120"
        }
      ],
      "broken_test_cases": [
        {
          "input": "find_Product([1, 1, 2, 3], 4)",
          "output": "3"
        },
        {
          "input": "find_Product([1, 2, 3, 1, 1], 5)",
          "output": "12"
        },
        {
          "input": "find_Product([1, 1, 4, 5, 6], 5)",
          "output": "24"
        }
      ]
    },
    {
      "problem_id": "mbpp_49",
      "description": "Write a function to extract every first or specified element from a given two-dimensional list.",
      "function_name": "specified_element",
      "correct_solution": "def specified_element(nums, N):\r\n    result = [i[N] for i in nums]\r\n    return result\r\n    ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 0)",
          "output": "[1, 4, 7]"
        },
        {
          "input": "specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 2)",
          "output": "[3, 6, 9]"
        },
        {
          "input": "specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 1)",
          "output": "[2, 5, 1]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 0)",
          "output": "[1, 4, 9]"
        },
        {
          "input": "specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 2)",
          "output": "[1, 4, 7]"
        },
        {
          "input": "specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 1)",
          "output": "[2, 5, 2]"
        }
      ]
    },
    {
      "problem_id": "mbpp_17",
      "description": "Write a function to find the perimeter of a square.",
      "function_name": "square_perimeter",
      "correct_solution": "def square_perimeter(a):\r\n  perimeter=4*a\r\n  return perimeter",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "square_perimeter(10)",
          "output": "40"
        },
        {
          "input": "square_perimeter(5)",
          "output": "20"
        },
        {
          "input": "square_perimeter(4)",
          "output": "16"
        }
      ],
      "broken_test_cases": [
        {
          "input": "square_perimeter(10)",
          "output": "50"
        },
        {
          "input": "square_perimeter(5)",
          "output": "15"
        },
        {
          "input": "square_perimeter(4)",
          "output": "20"
        }
      ]
    },
    {
      "problem_id": "mbpp_1",
      "description": "Write a function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][] and a position (m, n) in cost[][].",
      "function_name": "min_cost",
      "correct_solution": "R = 3\r\nC = 3\r\ndef min_cost(cost, m, n): \r\n\ttc = [[0 for x in range(C)] for x in range(R)] \r\n\ttc[0][0] = cost[0][0] \r\n\tfor i in range(1, m+1): \r\n\t\ttc[i][0] = tc[i-1][0] + cost[i][0] \r\n\tfor j in range(1, n+1): \r\n\t\ttc[0][j] = tc[0][j-1] + cost[0][j] \r\n\tfor i in range(1, m+1): \r\n\t\tfor j in range(1, n+1): \r\n\t\t\ttc[i][j] = min(tc[i-1][j-1], tc[i-1][j], tc[i][j-1]) + cost[i][j] \r\n\treturn tc[m][n]",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "min_cost([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 2, 2)",
          "output": "8"
        },
        {
          "input": "min_cost([[2, 3, 4], [5, 9, 3], [2, 6, 4]], 2, 2)",
          "output": "12"
        },
        {
          "input": "min_cost([[3, 4, 5], [6, 10, 4], [3, 7, 5]], 2, 2)",
          "output": "16"
        }
      ],
      "broken_test_cases": [
        {
          "input": "min_cost([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 2, 2)",
          "output": "9"
        },
        {
          "input": "min_cost([[2, 3, 4], [5, 9, 3], [2, 6, 4]], 2, 2)",
          "output": "11"
        },
        {
          "input": "min_cost([[3, 4, 5], [6, 10, 4], [3, 7, 5]], 2, 2)",
          "output": "17"
        }
      ]
    },
    {
      "problem_id": "mbpp_31",
      "description": "Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.",
      "function_name": "func",
      "correct_solution": "def func(nums, k):\r\n    import collections\r\n    d = collections.defaultdict(int)\r\n    for row in nums:\r\n        for i in row:\r\n            d[i] += 1\r\n    temp = []\r\n    import heapq\r\n    for key, v in d.items():\r\n        if len(temp) < k:\r\n            temp.append((v, key))\r\n            if len(temp) == k:\r\n                heapq.heapify(temp)\r\n        else:\r\n            if v > temp[0][0]:\r\n                heapq.heappop(temp)\r\n                heapq.heappush(temp, (v, key))\r\n    result = []\r\n    while temp:\r\n        v, key = heapq.heappop(temp)\r\n        result.append(key)\r\n    return result",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]], 3)",
          "output": "[5, 7, 1]"
        },
        {
          "input": "func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]], 1)",
          "output": "[1]"
        },
        {
          "input": "func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]], 5)",
          "output": "[6, 5, 7, 8, 1]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]], 3)",
          "output": "[1, 5, 7]"
        },
        {
          "input": "func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]], 1)",
          "output": "[2]"
        },
        {
          "input": "func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]], 5)",
          "output": "[1, 7, 8, 5, 6]"
        }
      ]
    },
    {
      "problem_id": "mbpp_18",
      "description": "Write a function to remove characters from the first string which are present in the second string.",
      "function_name": "remove_dirty_chars",
      "correct_solution": "NO_OF_CHARS = 256\r\ndef str_to_list(string): \r\n\ttemp = [] \r\n\tfor x in string: \r\n\t\ttemp.append(x) \r\n\treturn temp \r\ndef lst_to_string(List): \r\n\treturn ''.join(List) \r\ndef get_char_count_array(string): \r\n\tcount = [0] * NO_OF_CHARS \r\n\tfor i in string: \r\n\t\tcount[ord(i)] += 1\r\n\treturn count \r\ndef remove_dirty_chars(string, second_string): \r\n\tcount = get_char_count_array(second_string) \r\n\tip_ind = 0\r\n\tres_ind = 0\r\n\ttemp = '' \r\n\tstr_list = str_to_list(string) \r\n\twhile ip_ind != len(str_list): \r\n\t\ttemp = str_list[ip_ind] \r\n\t\tif count[ord(temp)] == 0: \r\n\t\t\tstr_list[res_ind] = str_list[ip_ind] \r\n\t\t\tres_ind += 1\r\n\t\tip_ind+=1\r\n\treturn lst_to_string(str_list[0:res_ind]) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "remove_dirty_chars('probasscurve', 'pros')",
          "output": "bacuve"
        },
        {
          "input": "remove_dirty_chars('digitalindia', 'talent')",
          "output": "digiidi"
        },
        {
          "input": "remove_dirty_chars('exoticmiles', 'toxic')",
          "output": "emles"
        }
      ],
      "broken_test_cases": [
        {
          "input": "remove_dirty_chars('probasscurve', 'pros')",
          "output": "bacueve"
        },
        {
          "input": "remove_dirty_chars('digitalindia', 'talent')",
          "output": "digiindia"
        },
        {
          "input": "remove_dirty_chars('exoticmiles', 'toxic')",
          "output": "emils"
        }
      ]
    },
    {
      "problem_id": "mbpp_46",
      "description": "Write a python function to determine whether all the numbers are different from each other are not.",
      "function_name": "test_distinct",
      "correct_solution": "def test_distinct(data):\r\n  if len(data) == len(set(data)):\r\n    return True\r\n  else:\r\n    return False;",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "test_distinct([1, 5, 7, 9])",
          "output": "True"
        },
        {
          "input": "test_distinct([2, 4, 5, 5, 7, 9])",
          "output": "False"
        },
        {
          "input": "test_distinct([1, 2, 3])",
          "output": "True"
        }
      ],
      "broken_test_cases": [
        {
          "input": "test_distinct([1, 5, 7, 9])",
          "output": "False"
        },
        {
          "input": "test_distinct([2, 4, 5, 5, 7, 9])",
          "output": "True"
        },
        {
          "input": "test_distinct([1, 2, 3])",
          "output": "False"
        }
      ]
    },
    {
      "problem_id": "mbpp_22",
      "description": "Write a function to find the first duplicate element in a given array of integers.",
      "function_name": "find_first_duplicate",
      "correct_solution": "def find_first_duplicate(nums):\r\n    num_set = set()\r\n    no_duplicate = -1\r\n\r\n    for i in range(len(nums)):\r\n\r\n        if nums[i] in num_set:\r\n            return nums[i]\r\n        else:\r\n            num_set.add(nums[i])\r\n\r\n    return no_duplicate",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "find_first_duplicate([1, 2, 3, 4, 4, 5])",
          "output": "4"
        },
        {
          "input": "find_first_duplicate([1, 2, 3, 4])",
          "output": "-1"
        },
        {
          "input": "find_first_duplicate([1, 1, 2, 3, 3, 2, 2])",
          "output": "1"
        }
      ],
      "broken_test_cases": [
        {
          "input": "find_first_duplicate([1, 2, 3, 4, 4, 5])",
          "output": "5"
        },
        {
          "input": "find_first_duplicate([1, 2, 3, 4])",
          "output": "1"
        },
        {
          "input": "find_first_duplicate([1, 1, 2, 3, 3, 2, 2])",
          "output": "2"
        }
      ]
    },
    {
      "problem_id": "mbpp_4",
      "description": "Write a function to find the largest integers from a given list of numbers using heap queue algorithm.",
      "function_name": "heap_queue_largest",
      "correct_solution": "import heapq as hq\r\ndef heap_queue_largest(nums,n):\r\n  largest_nums = hq.nlargest(n, nums)\r\n  return largest_nums",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "heap_queue_largest([25, 35, 22, 85, 14, 65, 75, 22, 58], 3)",
          "output": "[85, 75, 65]"
        },
        {
          "input": "heap_queue_largest([25, 35, 22, 85, 14, 65, 75, 22, 58], 2)",
          "output": "[85, 75]"
        },
        {
          "input": "heap_queue_largest([25, 35, 22, 85, 14, 65, 75, 22, 58], 5)",
          "output": "[85, 75, 65, 58, 35]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "heap_queue_largest([25, 35, 22, 85, 14, 65, 75, 22, 58], 3)",
          "output": "[75, 65, 58]"
        },
        {
          "input": "heap_queue_largest([25, 35, 22, 85, 14, 65, 75, 22, 58], 2)",
          "output": "[85, 22]"
        },
        {
          "input": "heap_queue_largest([25, 35, 22, 85, 14, 65, 75, 22, 58], 5)",
          "output": "[85, 75, 65, 58, 25]"
        }
      ]
    },
    {
      "problem_id": "mbpp_16",
      "description": "Write a function to find sequences of lowercase letters joined with an underscore.",
      "function_name": "text_lowercase_underscore",
      "correct_solution": "import re\r\ndef text_lowercase_underscore(text):\r\n        patterns = '^[a-z]+_[a-z]+$'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "text_lowercase_underscore('aab_cbbbc')",
          "output": "Found a match!"
        },
        {
          "input": "text_lowercase_underscore('aab_Abbbc')",
          "output": "Not matched!"
        },
        {
          "input": "text_lowercase_underscore('Aaab_abbbc')",
          "output": "Not matched!"
        }
      ],
      "broken_test_cases": [
        {
          "input": "text_lowercase_underscore('aab_cbbbc')",
          "output": "Not matched!"
        },
        {
          "input": "text_lowercase_underscore('aab_Abbbc')",
          "output": "Found a match!"
        },
        {
          "input": "text_lowercase_underscore('Aaab_abbbc')",
          "output": "Found a match!"
        }
      ]
    },
    {
      "problem_id": "mbpp_19",
      "description": "Write a function to find whether a given array of integers contains any duplicate element.",
      "function_name": "test_duplicate",
      "correct_solution": "def test_duplicate(arraynums):\r\n    nums_set = set(arraynums)    \r\n    return len(arraynums) != len(nums_set)     ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "test_duplicate([1, 2, 3, 4, 5])",
          "output": "False"
        },
        {
          "input": "test_duplicate([1, 2, 3, 4, 4])",
          "output": "True"
        },
        {
          "input": "test_duplicate([1, 1, 2, 2, 3, 3, 4, 4, 5])",
          "output": "True"
        }
      ],
      "broken_test_cases": [
        {
          "input": "test_duplicate([1, 2, 3, 4, 5])",
          "output": "True"
        },
        {
          "input": "test_duplicate([1, 2, 3, 4, 4])",
          "output": "False"
        },
        {
          "input": "test_duplicate([1, 1, 2, 2, 3, 3, 4, 4, 5])",
          "output": "False"
        }
      ]
    },
    {
      "problem_id": "mbpp_48",
      "description": "Write a python function to set all odd bits of a given number.",
      "function_name": "odd_bit_set_number",
      "correct_solution": "def odd_bit_set_number(n):\r\n    count = 0;res = 0;temp = n\r\n    while temp > 0:\r\n        if count % 2 == 0:\r\n            res |= (1 << count)\r\n        count += 1\r\n        temp >>= 1\r\n    return (n | res)",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "odd_bit_set_number(10)",
          "output": "15"
        },
        {
          "input": "odd_bit_set_number(20)",
          "output": "21"
        },
        {
          "input": "odd_bit_set_number(30)",
          "output": "31"
        }
      ],
      "broken_test_cases": [
        {
          "input": "odd_bit_set_number(10)",
          "output": "14"
        },
        {
          "input": "odd_bit_set_number(20)",
          "output": "20"
        },
        {
          "input": "odd_bit_set_number(30)",
          "output": "30"
        }
      ]
    },
    {
      "problem_id": "mbpp_10",
      "description": "Write a function to get the n smallest items from a dataset.",
      "function_name": "small_nnum",
      "correct_solution": "import heapq\r\ndef small_nnum(list1,n):\r\n  smallest=heapq.nsmallest(n,list1)\r\n  return smallest",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "small_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 2)",
          "output": "[10, 20]"
        },
        {
          "input": "small_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 5)",
          "output": "[10, 20, 20, 40, 50]"
        },
        {
          "input": "small_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 3)",
          "output": "[10, 20, 20]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "small_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 2)",
          "output": "[20, 50]"
        },
        {
          "input": "small_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 5)",
          "output": "[10, 20, 30, 40, 50]"
        },
        {
          "input": "small_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 3)",
          "output": "[50, 60, 80]"
        }
      ]
    },
    {
      "problem_id": "mbpp_27",
      "description": "Write a python function to remove all digits from a list of strings.",
      "function_name": "remove",
      "correct_solution": "import re  \r\ndef remove(list): \r\n    pattern = '[0-9]'\r\n    list = [re.sub(pattern, '', i) for i in list] \r\n    return list",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "remove(['4words', '3letters', '4digits'])",
          "output": "['words', 'letters', 'digits']"
        },
        {
          "input": "remove(['28Jan', '12Jan', '11Jan'])",
          "output": "['Jan', 'Jan', 'Jan']"
        },
        {
          "input": "remove(['wonder1', 'wonder2', 'wonder3'])",
          "output": "['wonder', 'wonder', 'wonder']"
        }
      ],
      "broken_test_cases": [
        {
          "input": "remove(['4words', '3letters', '4digits'])",
          "output": "['words', 'letters', 'digits', '']"
        },
        {
          "input": "remove(['28Jan', '12Jan', '11Jan'])",
          "output": "['28Jan', '12Jan', '11Jan']"
        },
        {
          "input": "remove(['wonder1', 'wonder2', 'wonder3'])",
          "output": "['wonder1', 'wonder2', 'wonder3']"
        }
      ]
    },
    {
      "problem_id": "mbpp_11",
      "description": "Write a python function to remove first and last occurrence of a given character from the string.",
      "function_name": "remove_Occ",
      "correct_solution": "def remove_Occ(s,ch): \r\n    for i in range(len(s)): \r\n        if (s[i] == ch): \r\n            s = s[0 : i] + s[i + 1:] \r\n            break\r\n    for i in range(len(s) - 1,-1,-1):  \r\n        if (s[i] == ch): \r\n            s = s[0 : i] + s[i + 1:] \r\n            break\r\n    return s ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "remove_Occ('hello', 'l')",
          "output": "heo"
        },
        {
          "input": "remove_Occ('abcda', 'a')",
          "output": "bcd"
        },
        {
          "input": "remove_Occ('PHP', 'P')",
          "output": "H"
        }
      ],
      "broken_test_cases": [
        {
          "input": "remove_Occ('hello', 'l')",
          "output": "hello"
        },
        {
          "input": "remove_Occ('abcda', 'a')",
          "output": "bdc"
        },
        {
          "input": "remove_Occ('PHP', 'P')",
          "output": "HP"
        }
      ]
    },
    {
      "problem_id": "mbpp_37",
      "description": "Write a function to sort a given mixed list of integers and strings.",
      "function_name": "sort_mixed_list",
      "correct_solution": "def sort_mixed_list(mixed_list):\r\n    int_part = sorted([i for i in mixed_list if type(i) is int])\r\n    str_part = sorted([i for i in mixed_list if type(i) is str])\r\n    return int_part + str_part",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "sort_mixed_list([19, 'red', 12, 'green', 'blue', 10, 'white', 'green', 1])",
          "output": "[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']"
        },
        {
          "input": "sort_mixed_list([19, 'red', 12, 'green', 'blue', 10, 'white', 'green', 1])",
          "output": "[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']"
        },
        {
          "input": "sort_mixed_list([19, 'red', 12, 'green', 'blue', 10, 'white', 'green', 1])",
          "output": "[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']"
        }
      ],
      "broken_test_cases": [
        {
          "input": "sort_mixed_list([19, 'red', 12, 'green', 'blue', 10, 'white', 'green', 1])",
          "output": "[19, 12, 10, 1, 'blue', 'green', 'green', 'red', 'white']"
        },
        {
          "input": "sort_mixed_list([19, 'red', 12, 'green', 'blue', 10, 'white', 'green', 1])",
          "output": "[19, 12, 10, 1, 'blue', 'green', 'green', 'red', 'white']"
        },
        {
          "input": "sort_mixed_list([19, 'red', 12, 'green', 'blue', 10, 'white', 'green', 1])",
          "output": "[19, 12, 10, 1, 'blue', 'green', 'green', 'red', 'white']"
        }
      ]
    },
    {
      "problem_id": "mbpp_47",
      "description": "Write a python function to find the last digit when factorial of a divides factorial of b.",
      "function_name": "compute_Last_Digit",
      "correct_solution": "def compute_Last_Digit(A,B): \r\n    variable = 1\r\n    if (A == B): \r\n        return 1\r\n    elif ((B - A) >= 5):  \r\n        return 0\r\n    else:   \r\n        for i in range(A + 1,B + 1): \r\n            variable = (variable * (i % 10)) % 10\r\n        return variable % 10",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "compute_Last_Digit(2, 4)",
          "output": "2"
        },
        {
          "input": "compute_Last_Digit(6, 8)",
          "output": "6"
        },
        {
          "input": "compute_Last_Digit(1, 2)",
          "output": "2"
        }
      ],
      "broken_test_cases": [
        {
          "input": "compute_Last_Digit(2, 4)",
          "output": "3"
        },
        {
          "input": "compute_Last_Digit(6, 8)",
          "output": "7"
        },
        {
          "input": "compute_Last_Digit(1, 2)",
          "output": "3"
        }
      ]
    },
    {
      "problem_id": "mbpp_20",
      "description": "Write a function to check if the given number is woodball or not.",
      "function_name": "is_woodall",
      "correct_solution": "def is_woodall(x): \r\n\tif (x % 2 == 0): \r\n\t\treturn False\r\n\tif (x == 1): \r\n\t\treturn True\r\n\tx = x + 1 \r\n\tp = 0\r\n\twhile (x % 2 == 0): \r\n\t\tx = x/2\r\n\t\tp = p + 1\r\n\t\tif (p == x): \r\n\t\t\treturn True\r\n\treturn False",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "is_woodall(383)",
          "output": "True"
        },
        {
          "input": "is_woodall(254)",
          "output": "False"
        },
        {
          "input": "is_woodall(200)",
          "output": "False"
        }
      ],
      "broken_test_cases": [
        {
          "input": "is_woodall(383)",
          "output": "False"
        },
        {
          "input": "is_woodall(254)",
          "output": "True"
        },
        {
          "input": "is_woodall(200)",
          "output": "True"
        }
      ]
    },
    {
      "problem_id": "mbpp_29",
      "description": "Write a python function to find the element occurring odd number of times.",
      "function_name": "get_Odd_Occurrence",
      "correct_solution": "def get_Odd_Occurrence(arr,arr_size):   \r\n    for i in range(0,arr_size): \r\n        count = 0\r\n        for j in range(0,arr_size): \r\n            if arr[i] == arr[j]: \r\n                count+=1     \r\n        if (count % 2 != 0): \r\n            return arr[i]     \r\n    return -1",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "get_Odd_Occurrence([1, 2, 3, 1, 2, 3, 1], 7)",
          "output": "1"
        },
        {
          "input": "get_Odd_Occurrence([1, 2, 3, 2, 3, 1, 3], 7)",
          "output": "3"
        },
        {
          "input": "get_Odd_Occurrence([2, 3, 5, 4, 5, 2, 4, 3, 5, 2, 4, 4, 2], 13)",
          "output": "5"
        }
      ],
      "broken_test_cases": [
        {
          "input": "get_Odd_Occurrence([1, 2, 3, 1, 2, 3, 1], 7)",
          "output": "2"
        },
        {
          "input": "get_Odd_Occurrence([1, 2, 3, 2, 3, 1, 3], 7)",
          "output": "2"
        },
        {
          "input": "get_Odd_Occurrence([2, 3, 5, 4, 5, 2, 4, 3, 5, 2, 4, 4, 2], 13)",
          "output": "4"
        }
      ]
    },
    {
      "problem_id": "mbpp_12",
      "description": "Write a function to sort a given matrix in ascending order according to the sum of its rows.",
      "function_name": "sort_matrix",
      "correct_solution": "def sort_matrix(M):\r\n    result = sorted(M, key=sum)\r\n    return result",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])",
          "output": "[[1, 1, 1], [1, 2, 3], [2, 4, 5]]"
        },
        {
          "input": "sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])",
          "output": "[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]"
        },
        {
          "input": "sort_matrix([[5, 8, 9], [6, 4, 3], [2, 1, 4]])",
          "output": "[[2, 1, 4], [6, 4, 3], [5, 8, 9]]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])",
          "output": "[[1, 2, 3], [1, 1, 1], [2, 4, 5]]"
        },
        {
          "input": "sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])",
          "output": "[[1, 2, 3], [1, -1, 1], [-2, 4, -5]]"
        },
        {
          "input": "sort_matrix([[5, 8, 9], [6, 4, 3], [2, 1, 4]])",
          "output": "[[5, 8, 9], [2, 1, 4], [6, 4, 3]]"
        }
      ]
    },
    {
      "problem_id": "mbpp_7",
      "description": "Write a function to find all words which are at least 4 characters long in a string by using regex.",
      "function_name": "find_char_long",
      "correct_solution": "import re\r\ndef find_char_long(text):\r\n  return (re.findall(r\"\\b\\w{4,}\\b\", text))",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "find_char_long('Please move back to stream')",
          "output": "['Please', 'move', 'back', 'stream']"
        },
        {
          "input": "find_char_long('Jing Eco and Tech')",
          "output": "['Jing', 'Tech']"
        },
        {
          "input": "find_char_long('Jhingai wulu road Zone 3')",
          "output": "['Jhingai', 'wulu', 'road', 'Zone']"
        }
      ],
      "broken_test_cases": [
        {
          "input": "find_char_long('Please move back to stream')",
          "output": "['Please', 'move', 'back', 'to']"
        },
        {
          "input": "find_char_long('Jing Eco and Tech')",
          "output": "['Jing', 'Eco', 'Tech']"
        },
        {
          "input": "find_char_long('Jhingai wulu road Zone 3')",
          "output": "['Jhingai', 'wulu', 'road']"
        }
      ]
    },
    {
      "problem_id": "mbpp_9",
      "description": "Write a python function to find the minimum number of rotations required to get the same string.",
      "function_name": "find_Rotations",
      "correct_solution": "def find_Rotations(str): \r\n    tmp = str + str\r\n    n = len(str) \r\n    for i in range(1,n + 1): \r\n        substring = tmp[i: i+n] \r\n        if (str == substring): \r\n            return i \r\n    return n ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "find_Rotations('aaaa')",
          "output": "1"
        },
        {
          "input": "find_Rotations('ab')",
          "output": "2"
        },
        {
          "input": "find_Rotations('abc')",
          "output": "3"
        }
      ],
      "broken_test_cases": [
        {
          "input": "find_Rotations('aaaa')",
          "output": "2"
        },
        {
          "input": "find_Rotations('ab')",
          "output": "1"
        },
        {
          "input": "find_Rotations('abc')",
          "output": "2"
        }
      ]
    },
    {
      "problem_id": "mbpp_35",
      "description": "Write a function to find the n-th rectangular number.",
      "function_name": "find_rect_num",
      "correct_solution": "def find_rect_num(n):\r\n  return n*(n + 1) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "find_rect_num(4)",
          "output": "20"
        },
        {
          "input": "find_rect_num(5)",
          "output": "30"
        },
        {
          "input": "find_rect_num(6)",
          "output": "42"
        }
      ],
      "broken_test_cases": [
        {
          "input": "find_rect_num(4)",
          "output": "21"
        },
        {
          "input": "find_rect_num(5)",
          "output": "25"
        },
        {
          "input": "find_rect_num(6)",
          "output": "40"
        }
      ]
    },
    {
      "problem_id": "mbpp_50",
      "description": "Write a function to find the list with minimum length using lambda function.",
      "function_name": "min_length_list",
      "correct_solution": "def min_length_list(input_list):\r\n    min_length = min(len(x) for x in input_list )  \r\n    min_list = min(input_list, key = lambda i: len(i))\r\n    return(min_length, min_list)",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])",
          "output": "(1, [0])"
        },
        {
          "input": "min_length_list([[1, 2, 3, 4, 5], [1, 2, 3, 4], [1, 2, 3], [1, 2], [1]])",
          "output": "(1, [1])"
        },
        {
          "input": "min_length_list([[3, 4, 5], [6, 7, 8, 9], [10, 11, 12], [1, 2]])",
          "output": "(2, [1, 2])"
        }
      ],
      "broken_test_cases": [
        {
          "input": "min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])",
          "output": "(2, [0])"
        },
        {
          "input": "min_length_list([[1, 2, 3, 4, 5], [1, 2, 3, 4], [1, 2, 3], [1, 2], [1]])",
          "output": "(5, [1, 2, 3, 4, 5])"
        },
        {
          "input": "min_length_list([[3, 4, 5], [6, 7, 8, 9], [10, 11, 12], [1, 2]])",
          "output": "(3, [3, 4, 5])"
        }
      ]
    },
    {
      "problem_id": "mbpp_6",
      "description": "Write a python function to check whether the two numbers differ at one bit position only or not.",
      "function_name": "differ_At_One_Bit_Pos",
      "correct_solution": "def is_Power_Of_Two (x): \r\n    return x and (not(x & (x - 1))) \r\ndef differ_At_One_Bit_Pos(a,b): \r\n    return is_Power_Of_Two(a ^ b)",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "differ_At_One_Bit_Pos(13, 9)",
          "output": "True"
        },
        {
          "input": "differ_At_One_Bit_Pos(15, 8)",
          "output": "False"
        },
        {
          "input": "differ_At_One_Bit_Pos(2, 4)",
          "output": "False"
        }
      ],
      "broken_test_cases": [
        {
          "input": "differ_At_One_Bit_Pos(13, 9)",
          "output": "False"
        },
        {
          "input": "differ_At_One_Bit_Pos(15, 8)",
          "output": "True"
        },
        {
          "input": "differ_At_One_Bit_Pos(2, 4)",
          "output": "True"
        }
      ]
    },
    {
      "problem_id": "mbpp_5",
      "description": "Write a function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board.",
      "function_name": "count_ways",
      "correct_solution": "def count_ways(n): \r\n\tA = [0] * (n + 1) \r\n\tB = [0] * (n + 1) \r\n\tA[0] = 1\r\n\tA[1] = 0\r\n\tB[0] = 0\r\n\tB[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tA[i] = A[i - 2] + 2 * B[i - 1] \r\n\t\tB[i] = A[i - 1] + B[i - 2] \r\n\treturn A[n] ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "count_ways(2)",
          "output": "3"
        },
        {
          "input": "count_ways(8)",
          "output": "153"
        },
        {
          "input": "count_ways(12)",
          "output": "2131"
        }
      ],
      "broken_test_cases": [
        {
          "input": "count_ways(2)",
          "output": "2"
        },
        {
          "input": "count_ways(8)",
          "output": "152"
        },
        {
          "input": "count_ways(12)",
          "output": "2132"
        }
      ]
    },
    {
      "problem_id": "mbpp_32",
      "description": "Write a python function to find the largest prime factor of a given number.",
      "function_name": "max_Prime_Factors",
      "correct_solution": "import math \r\ndef max_Prime_Factors (n): \r\n    maxPrime = -1 \r\n    while n%2 == 0: \r\n        maxPrime = 2\r\n        n >>= 1    \r\n    for i in range(3,int(math.sqrt(n))+1,2): \r\n        while n % i == 0: \r\n            maxPrime = i \r\n            n = n / i \r\n    if n > 2: \r\n        maxPrime = n  \r\n    return int(maxPrime)",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "max_Prime_Factors(15)",
          "output": "5"
        },
        {
          "input": "max_Prime_Factors(6)",
          "output": "3"
        },
        {
          "input": "max_Prime_Factors(2)",
          "output": "2"
        }
      ],
      "broken_test_cases": [
        {
          "input": "max_Prime_Factors(15)",
          "output": "3"
        },
        {
          "input": "max_Prime_Factors(6)",
          "output": "2"
        },
        {
          "input": "max_Prime_Factors(2)",
          "output": "4"
        }
      ]
    },
    {
      "problem_id": "mbpp_43",
      "description": "Write a function to find sequences of lowercase letters joined with an underscore using regex.",
      "function_name": "text_match",
      "correct_solution": "import re\r\ndef text_match(text):\r\n  patterns = '^[a-z]+_[a-z]+$'\r\n  if re.search(patterns,  text):\r\n    return ('Found a match!')\r\n  else:\r\n    return ('Not matched!')",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "text_match('aab_cbbbc')",
          "output": "Found a match!"
        },
        {
          "input": "text_match('aab_Abbbc')",
          "output": "Not matched!"
        },
        {
          "input": "text_match('Aaab_abbbc')",
          "output": "Not matched!"
        }
      ],
      "broken_test_cases": [
        {
          "input": "text_match('aab_cbbbc')",
          "output": "Not matched!"
        },
        {
          "input": "text_match('aab_Abbbc')",
          "output": "Found a match!"
        },
        {
          "input": "text_match('Aaab_abbbc')",
          "output": "Found a match!"
        }
      ]
    },
    {
      "problem_id": "mbpp_41",
      "description": "Write a function to filter even numbers using lambda function.",
      "function_name": "filter_evennumbers",
      "correct_solution": "def filter_evennumbers(nums):\r\n even_nums = list(filter(lambda x: x%2 == 0, nums))\r\n return even_nums",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
          "output": "[2, 4, 6, 8, 10]"
        },
        {
          "input": "filter_evennumbers([10, 20, 45, 67, 84, 93])",
          "output": "[10, 20, 84]"
        },
        {
          "input": "filter_evennumbers([5, 7, 9, 8, 6, 4, 3])",
          "output": "[8, 6, 4]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
          "output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
        },
        {
          "input": "filter_evennumbers([10, 20, 45, 67, 84, 93])",
          "output": "[10, 20, 45, 67, 84, 93]"
        },
        {
          "input": "filter_evennumbers([5, 7, 9, 8, 6, 4, 3])",
          "output": "[5, 7, 9, 8, 6, 4, 3]"
        }
      ]
    },
    {
      "problem_id": "mbpp_34",
      "description": "Write a python function to find the missing number in a sorted array.",
      "function_name": "find_missing",
      "correct_solution": "def find_missing(ar,N): \r\n    l = 0\r\n    r = N - 1\r\n    while (l <= r):  \r\n        mid = (l + r) / 2\r\n        mid= int (mid) \r\n        if (ar[mid] != mid + 1 and ar[mid - 1] == mid): \r\n            return (mid + 1)  \r\n        elif (ar[mid] != mid + 1): \r\n            r = mid - 1 \r\n        else: \r\n            l = mid + 1\r\n    return (-1) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "find_missing([1, 2, 3, 5], 4)",
          "output": "4"
        },
        {
          "input": "find_missing([1, 3, 4, 5], 4)",
          "output": "2"
        },
        {
          "input": "find_missing([1, 2, 3, 5, 6, 7], 5)",
          "output": "4"
        }
      ],
      "broken_test_cases": [
        {
          "input": "find_missing([1, 2, 3, 5], 4)",
          "output": "2"
        },
        {
          "input": "find_missing([1, 3, 4, 5], 4)",
          "output": "4"
        },
        {
          "input": "find_missing([1, 2, 3, 5, 6, 7], 5)",
          "output": "5"
        }
      ]
    },
    {
      "problem_id": "mbpp_24",
      "description": "Write a function to convert the given binary number to its decimal equivalent.",
      "function_name": "binary_to_decimal",
      "correct_solution": "def binary_to_decimal(binary): \r\n    binary1 = binary \r\n    decimal, i, n = 0, 0, 0\r\n    while(binary != 0): \r\n        dec = binary % 10\r\n        decimal = decimal + dec * pow(2, i) \r\n        binary = binary//10\r\n        i += 1\r\n    return (decimal)",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "binary_to_decimal(100)",
          "output": "4"
        },
        {
          "input": "binary_to_decimal(1011)",
          "output": "11"
        },
        {
          "input": "binary_to_decimal(1101101)",
          "output": "109"
        }
      ],
      "broken_test_cases": [
        {
          "input": "binary_to_decimal(100)",
          "output": "5"
        },
        {
          "input": "binary_to_decimal(1011)",
          "output": "10"
        },
        {
          "input": "binary_to_decimal(1101101)",
          "output": "110"
        }
      ]
    },
    {
      "problem_id": "mbpp_42",
      "description": "Write a python function to find the sum of repeated elements in a given array.",
      "function_name": "find_Sum",
      "correct_solution": "def find_Sum(arr,n): \r\n    return sum([x for x in arr if arr.count(x) > 1])",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "find_Sum([1, 2, 3, 1, 1, 4, 5, 6], 8)",
          "output": "3"
        },
        {
          "input": "find_Sum([1, 2, 3, 1, 1], 5)",
          "output": "3"
        },
        {
          "input": "find_Sum([1, 1, 2], 3)",
          "output": "2"
        }
      ],
      "broken_test_cases": [
        {
          "input": "find_Sum([1, 2, 3, 1, 1, 4, 5, 6], 8)",
          "output": "5"
        },
        {
          "input": "find_Sum([1, 2, 3, 1, 1], 5)",
          "output": "1"
        },
        {
          "input": "find_Sum([1, 1, 2], 3)",
          "output": "3"
        }
      ]
    },
    {
      "problem_id": "mbpp_38",
      "description": "Write a function to find the division of first even and odd number of a given list.",
      "function_name": "div_even_odd",
      "correct_solution": "def div_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even/first_odd)",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "div_even_odd([1, 3, 5, 7, 4, 1, 6, 8])",
          "output": "4"
        },
        {
          "input": "div_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
          "output": "2"
        },
        {
          "input": "div_even_odd([1, 5, 7, 9, 10])",
          "output": "10"
        }
      ],
      "broken_test_cases": [
        {
          "input": "div_even_odd([1, 3, 5, 7, 4, 1, 6, 8])",
          "output": "2"
        },
        {
          "input": "div_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
          "output": "1"
        },
        {
          "input": "div_even_odd([1, 5, 7, 9, 10])",
          "output": "0"
        }
      ]
    },
    {
      "problem_id": "mbpp_13",
      "description": "Write a function to count the most common words in a dictionary.",
      "function_name": "count_common",
      "correct_solution": "from collections import Counter\r\ndef count_common(words):\r\n  word_counts = Counter(words)\r\n  top_four = word_counts.most_common(4)\r\n  return (top_four)\r\n",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "count_common(['red', 'green', 'black', 'pink', 'black', 'white', 'black', 'eyes', 'white', 'black', 'orange', 'pink', 'pink', 'red', 'red', 'white', 'orange', 'white', 'black', 'pink', 'green', 'green', 'pink', 'green', 'pink', 'white', 'orange', 'orange', 'red'])",
          "output": "[('pink', 6), ('black', 5), ('white', 5), ('red', 4)]"
        },
        {
          "input": "count_common(['one', 'two', 'three', 'four', 'five', 'one', 'two', 'one', 'three', 'one'])",
          "output": "[('one', 4), ('two', 2), ('three', 2), ('four', 1)]"
        },
        {
          "input": "count_common(['Facebook', 'Apple', 'Amazon', 'Netflix', 'Google', 'Apple', 'Netflix', 'Amazon'])",
          "output": "[('Apple', 2), ('Amazon', 2), ('Netflix', 2), ('Facebook', 1)]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "count_common(['red', 'green', 'black', 'pink', 'black', 'white', 'black', 'eyes', 'white', 'black', 'orange', 'pink', 'pink', 'red', 'red', 'white', 'orange', 'white', 'black', 'pink', 'green', 'green', 'pink', 'green', 'pink', 'white', 'orange', 'orange', 'red'])",
          "output": "[('black', 6), ('pink', 6), ('white', 5), ('red', 4)]"
        },
        {
          "input": "count_common(['one', 'two', 'three', 'four', 'five', 'one', 'two', 'one', 'three', 'one'])",
          "output": "[('one', 3), ('two', 2), ('three', 2), ('five', 1)]"
        },
        {
          "input": "count_common(['Facebook', 'Apple', 'Amazon', 'Netflix', 'Google', 'Apple', 'Netflix', 'Amazon'])",
          "output": "[('Apple', 2), ('Amazon', 2), ('Netflix', 2), ('Facebook', 2)]"
        }
      ]
    },
    {
      "problem_id": "mbpp_14",
      "description": "Write a python function to find the volume of a triangular prism.",
      "function_name": "find_Volume",
      "correct_solution": "def find_Volume(l,b,h) : \r\n    return ((l * b * h) / 2) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "find_Volume(10, 8, 6)",
          "output": "240"
        },
        {
          "input": "find_Volume(3, 2, 2)",
          "output": "6"
        },
        {
          "input": "find_Volume(1, 2, 1)",
          "output": "1"
        }
      ],
      "broken_test_cases": [
        {
          "input": "find_Volume(10, 8, 6)",
          "output": "120"
        },
        {
          "input": "find_Volume(3, 2, 2)",
          "output": "0"
        },
        {
          "input": "find_Volume(1, 2, 1)",
          "output": "2"
        }
      ]
    },
    {
      "problem_id": "mbpp_8",
      "description": "Write a function to find squares of individual elements in a list using lambda function.",
      "function_name": "square_nums",
      "correct_solution": "def square_nums(nums):\r\n square_nums = list(map(lambda x: x ** 2, nums))\r\n return square_nums",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
          "output": "[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]"
        },
        {
          "input": "square_nums([10, 20, 30])",
          "output": "[100, 400, 900]"
        },
        {
          "input": "square_nums([12, 15])",
          "output": "[144, 225]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
          "output": "[2, 8, 18, 32, 50, 72, 98, 128, 162, 200]"
        },
        {
          "input": "square_nums([10, 20, 30])",
          "output": "[101, 401, 901]"
        },
        {
          "input": "square_nums([12, 15])",
          "output": "[144, 230]"
        }
      ]
    },
    {
      "problem_id": "mbpp_39",
      "description": "Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.",
      "function_name": "rearange_string",
      "correct_solution": "import heapq\r\nfrom collections import Counter\r\ndef rearange_string(S):\r\n    ctr = Counter(S)\r\n    heap = [(-value, key) for key, value in ctr.items()]\r\n    heapq.heapify(heap)\r\n    if (-heap[0][0]) * 2 > len(S) + 1: \r\n        return \"\"\r\n    ans = []\r\n    while len(heap) >= 2:\r\n        nct1, char1 = heapq.heappop(heap)\r\n        nct2, char2 = heapq.heappop(heap)\r\n        ans.extend([char1, char2])\r\n        if nct1 + 1: heapq.heappush(heap, (nct1 + 1, char1))\r\n        if nct2 + 1: heapq.heappush(heap, (nct2 + 1, char2))\r\n    return \"\".join(ans) + (heap[0][1] if heap else \"\")",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "rearange_string('aab')",
          "output": "aba"
        },
        {
          "input": "rearange_string('aabb')",
          "output": "abab"
        },
        {
          "input": "rearange_string('abccdd')",
          "output": "cdabcd"
        }
      ],
      "broken_test_cases": [
        {
          "input": "rearange_string('aab')",
          "output": "aab"
        },
        {
          "input": "rearange_string('aabb')",
          "output": "abba"
        },
        {
          "input": "rearange_string('abccdd')",
          "output": "cdabc"
        }
      ]
    },
    {
      "problem_id": "mbpp_30",
      "description": "Write a python function to count all the substrings starting and ending with same characters.",
      "function_name": "count_Substring_With_Equal_Ends",
      "correct_solution": "def check_Equality(s): \r\n    return (ord(s[0]) == ord(s[len(s) - 1])); \r\ndef count_Substring_With_Equal_Ends(s): \r\n    result = 0; \r\n    n = len(s); \r\n    for i in range(n): \r\n        for j in range(1,n-i+1):  \r\n            if (check_Equality(s[i:i+j])): \r\n                result+=1; \r\n    return result; ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "count_Substring_With_Equal_Ends('abc')",
          "output": "3"
        },
        {
          "input": "count_Substring_With_Equal_Ends('abcda')",
          "output": "6"
        },
        {
          "input": "count_Substring_With_Equal_Ends('ab')",
          "output": "2"
        }
      ],
      "broken_test_cases": [
        {
          "input": "count_Substring_With_Equal_Ends('abc')",
          "output": "2"
        },
        {
          "input": "count_Substring_With_Equal_Ends('abcda')",
          "output": "5"
        },
        {
          "input": "count_Substring_With_Equal_Ends('ab')",
          "output": "3"
        }
      ]
    },
    {
      "problem_id": "mbpp_21",
      "description": "Write a function to find m number of multiples of n.",
      "function_name": "multiples_of_num",
      "correct_solution": "def multiples_of_num(m,n): \r\n    multiples_of_num= list(range(n,(m+1)*n, n)) \r\n    return list(multiples_of_num)",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "multiples_of_num(4, 3)",
          "output": "[3, 6, 9, 12]"
        },
        {
          "input": "multiples_of_num(2, 5)",
          "output": "[5, 10]"
        },
        {
          "input": "multiples_of_num(9, 2)",
          "output": "[2, 4, 6, 8, 10, 12, 14, 16, 18]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "multiples_of_num(4, 3)",
          "output": "[3, 6, 9, 15]"
        },
        {
          "input": "multiples_of_num(2, 5)",
          "output": "[5, 11]"
        },
        {
          "input": "multiples_of_num(9, 2)",
          "output": "[2, 4, 6, 8, 10, 12, 14, 16, 19]"
        }
      ]
    },
    {
      "problem_id": "mbpp_44",
      "description": "Write a function that matches a word at the beginning of a string.",
      "function_name": "text_match_string",
      "correct_solution": "import re\r\ndef text_match_string(text):\r\n        patterns = '^\\w+'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return 'Not matched!'",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "text_match_string(' python')",
          "output": "Not matched!"
        },
        {
          "input": "text_match_string('python')",
          "output": "Found a match!"
        },
        {
          "input": "text_match_string('  lang')",
          "output": "Not matched!"
        }
      ],
      "broken_test_cases": [
        {
          "input": "text_match_string(' python')",
          "output": "Found a match!"
        },
        {
          "input": "text_match_string('python')",
          "output": "Not matched!"
        },
        {
          "input": "text_match_string('  lang')",
          "output": "Found a match!"
        }
      ]
    },
    {
      "problem_id": "mbpp_40",
      "description": "Write a function to find frequency of the elements in a given list of lists using collections module.",
      "function_name": "freq_element",
      "correct_solution": "from collections import Counter\r\nfrom itertools import chain\r\ndef freq_element(nums):\r\n  result = Counter(chain.from_iterable(nums))\r\n  return result",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "freq_element([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])",
          "output": "{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1}"
        }
      ],
      "broken_test_cases": [
        {
          "input": "freq_element([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])",
          "output": "{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1}"
        }
      ]
    },
    {
      "problem_id": "mbpp_45",
      "description": "Write a function to find the gcd of the given array elements.",
      "function_name": "get_gcd",
      "correct_solution": "def find_gcd(x, y): \r\n\twhile(y): \r\n\t\tx, y = y, x % y \r\n\treturn x \r\ndef get_gcd(l):\r\n  num1 = l[0]\r\n  num2 = l[1]\r\n  gcd = find_gcd(num1, num2)\r\n  for i in range(2, len(l)):\r\n    gcd = find_gcd(gcd, l[i])\r\n  return gcd",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "get_gcd([2, 4, 6, 8, 16])",
          "output": "2"
        },
        {
          "input": "get_gcd([1, 2, 3])",
          "output": "1"
        },
        {
          "input": "get_gcd([2, 4, 6, 8])",
          "output": "2"
        }
      ],
      "broken_test_cases": [
        {
          "input": "get_gcd([2, 4, 6, 8, 16])",
          "output": "4"
        },
        {
          "input": "get_gcd([1, 2, 3])",
          "output": "2"
        },
        {
          "input": "get_gcd([2, 4, 6, 8])",
          "output": "4"
        }
      ]
    },
    {
      "problem_id": "mbpp_36",
      "description": "Write a python function to find the nth digit in the proper fraction of two given numbers.",
      "function_name": "find_Nth_Digit",
      "correct_solution": "def find_Nth_Digit(p,q,N) :  \r\n    while (N > 0) : \r\n        N -= 1;  \r\n        p *= 10;  \r\n        res = p // q;  \r\n        p %= q;  \r\n    return res;  ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "find_Nth_Digit(1, 2, 1)",
          "output": "5"
        },
        {
          "input": "find_Nth_Digit(3, 5, 1)",
          "output": "6"
        },
        {
          "input": "find_Nth_Digit(5, 6, 5)",
          "output": "3"
        }
      ],
      "broken_test_cases": [
        {
          "input": "find_Nth_Digit(1, 2, 1)",
          "output": "0"
        },
        {
          "input": "find_Nth_Digit(3, 5, 1)",
          "output": "5"
        },
        {
          "input": "find_Nth_Digit(5, 6, 5)",
          "output": "4"
        }
      ]
    }
  ]
}