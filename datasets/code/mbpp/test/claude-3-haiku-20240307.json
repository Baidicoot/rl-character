{
  "metadata": {
    "created_at": "2025-06-30T19:15:57.380353",
    "num_problems": 191,
    "broken_test_model": "claude-3-haiku-20240307",
    "source_dataset": "mbpp",
    "split_name": "test",
    "start_idx": 0
  },
  "problems": [
    {
      "problem_id": "mbpp_533",
      "description": "Write a function to remove particular data type elements from the given tuple.",
      "function_name": "remove_datatype",
      "correct_solution": "def remove_datatype(test_tuple, data_type):\r\n  res = []\r\n  for ele in test_tuple:\r\n    if not isinstance(ele, data_type):\r\n      res.append(ele)\r\n  return (res) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "remove_datatype((4, 5, 4, 7.7, 1.2), int)",
          "correct_output": "[7.7, 1.2]"
        },
        {
          "input": "remove_datatype((7, 8, 9, 'SR'), str)",
          "correct_output": "[7, 8, 9]"
        },
        {
          "input": "remove_datatype((7, 1.1, 2, 2.2), float)",
          "correct_output": "[7, 2]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "remove_datatype((4, 5, 4, 7.7, 1.2), int)",
          "correct_output": "[4, 5, 4]"
        },
        {
          "input": "remove_datatype((7, 8, 9, 'SR'), str)",
          "correct_output": "[7, 8, 9, 'SR']"
        },
        {
          "input": "remove_datatype((7, 1.1, 2, 2.2), float)",
          "correct_output": "[7, 2, 2.2]"
        }
      ]
    },
    {
      "problem_id": "mbpp_225",
      "description": "Write a python function to find the minimum element in a sorted and rotated array.",
      "function_name": "find_Min",
      "correct_solution": "def find_Min(arr,low,high): \r\n    while (low < high): \r\n        mid = low + (high - low) // 2;   \r\n        if (arr[mid] == arr[high]): \r\n            high -= 1; \r\n        elif (arr[mid] > arr[high]): \r\n            low = mid + 1; \r\n        else: \r\n            high = mid; \r\n    return arr[high]; ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "find_Min([1, 2, 3, 4, 5], 0, 4)",
          "correct_output": "1"
        },
        {
          "input": "find_Min([4, 6, 8], 0, 2)",
          "correct_output": "4"
        },
        {
          "input": "find_Min([2, 3, 5, 7, 9], 0, 4)",
          "correct_output": "2"
        }
      ],
      "broken_test_cases": [
        {
          "input": "find_Min([1, 2, 3, 4, 5], 0, 4)",
          "correct_output": "5"
        },
        {
          "input": "find_Min([4, 6, 8], 0, 2)",
          "correct_output": "8"
        },
        {
          "input": "find_Min([2, 3, 5, 7, 9], 0, 4)",
          "correct_output": "9"
        }
      ]
    },
    {
      "problem_id": "mbpp_341",
      "description": "Write a function to convert the given set into ordered tuples.",
      "function_name": "set_to_tuple",
      "correct_solution": "def set_to_tuple(s):\r\n  t = tuple(sorted(s))\r\n  return (t)",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "set_to_tuple({1, 2, 3, 4, 5})",
          "correct_output": "(1, 2, 3, 4, 5)"
        },
        {
          "input": "set_to_tuple({6, 7, 8, 9, 10, 11})",
          "correct_output": "(6, 7, 8, 9, 10, 11)"
        },
        {
          "input": "set_to_tuple({12, 13, 14, 15, 16})",
          "correct_output": "(12, 13, 14, 15, 16)"
        }
      ],
      "broken_test_cases": [
        {
          "input": "set_to_tuple({1, 2, 3, 4, 5})",
          "correct_output": "(5, 4, 3, 2, 1)"
        },
        {
          "input": "set_to_tuple({6, 7, 8, 9, 10, 11})",
          "correct_output": "(11, 10, 9, 8, 7, 6)"
        },
        {
          "input": "set_to_tuple({12, 13, 14, 15, 16})",
          "correct_output": "(16, 15, 14, 13, 12)"
        }
      ]
    },
    {
      "problem_id": "mbpp_967",
      "description": "Write a python function to accept the strings which contains all vowels.",
      "function_name": "check",
      "correct_solution": "def check(string): \r\n  if len(set(string).intersection(\"AEIOUaeiou\"))>=5: \r\n    return ('accepted') \r\n  else: \r\n    return (\"not accepted\") ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "check('SEEquoiaL')",
          "correct_output": "accepted"
        },
        {
          "input": "check('program')",
          "correct_output": "not accepted"
        },
        {
          "input": "check('fine')",
          "correct_output": "not accepted"
        }
      ],
      "broken_test_cases": [
        {
          "input": "check('SEEquoiaL')",
          "correct_output": "not accepted"
        },
        {
          "input": "check('program')",
          "correct_output": "accepted"
        },
        {
          "input": "check('fine')",
          "correct_output": "accepted"
        }
      ]
    },
    {
      "problem_id": "mbpp_472",
      "description": "Write a python function to check whether the given list contains consecutive numbers or not.",
      "function_name": "check_Consecutive",
      "correct_solution": "def check_Consecutive(l): \r\n    return sorted(l) == list(range(min(l),max(l)+1)) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "check_Consecutive([1, 2, 3, 4, 5])",
          "correct_output": "True"
        },
        {
          "input": "check_Consecutive([1, 2, 3, 5, 6])",
          "correct_output": "False"
        },
        {
          "input": "check_Consecutive([1, 2, 1])",
          "correct_output": "False"
        }
      ],
      "broken_test_cases": [
        {
          "input": "check_Consecutive([1, 2, 3, 4, 5])",
          "correct_output": "False"
        },
        {
          "input": "check_Consecutive([1, 2, 3, 5, 6])",
          "correct_output": "True"
        },
        {
          "input": "check_Consecutive([1, 2, 1])",
          "correct_output": "True"
        }
      ]
    },
    {
      "problem_id": "mbpp_357",
      "description": "Write a function to find the maximum element of all the given tuple records.",
      "function_name": "find_max",
      "correct_solution": "def find_max(test_list):\r\n  res = max(int(j) for i in test_list for j in i)\r\n  return (res) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)])",
          "correct_output": "10"
        },
        {
          "input": "find_max([(3, 5), (7, 8), (6, 2), (7, 11), (9, 8)])",
          "correct_output": "11"
        },
        {
          "input": "find_max([(4, 6), (8, 9), (7, 3), (8, 12), (10, 9)])",
          "correct_output": "12"
        }
      ],
      "broken_test_cases": [
        {
          "input": "find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)])",
          "correct_output": "9"
        },
        {
          "input": "find_max([(3, 5), (7, 8), (6, 2), (7, 11), (9, 8)])",
          "correct_output": "8"
        },
        {
          "input": "find_max([(4, 6), (8, 9), (7, 3), (8, 12), (10, 9)])",
          "correct_output": "11"
        }
      ]
    },
    {
      "problem_id": "mbpp_348",
      "description": "Write a function to count sequences of given length having non-negative prefix sums that can be generated by given values.",
      "function_name": "find_ways",
      "correct_solution": "def bin_coff(n, r): \r\n\tval = 1\r\n\tif (r > (n - r)): \r\n\t\tr = (n - r) \r\n\tfor i in range(0, r): \r\n\t\tval *= (n - i) \r\n\t\tval //= (i + 1) \r\n\treturn val \r\ndef find_ways(M): \r\n\tn = M // 2\r\n\ta = bin_coff(2 * n, n) \r\n\tb = a // (n + 1) \r\n\treturn (b) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "find_ways(4)",
          "correct_output": "2"
        },
        {
          "input": "find_ways(6)",
          "correct_output": "5"
        },
        {
          "input": "find_ways(8)",
          "correct_output": "14"
        }
      ],
      "broken_test_cases": [
        {
          "input": "find_ways(4)",
          "correct_output": "3"
        },
        {
          "input": "find_ways(6)",
          "correct_output": "6"
        },
        {
          "input": "find_ways(8)",
          "correct_output": "15"
        }
      ]
    },
    {
      "problem_id": "mbpp_720",
      "description": "Write a function to add a dictionary to the tuple.",
      "function_name": "add_dict_to_tuple",
      "correct_solution": "def add_dict_to_tuple(test_tup, test_dict):\r\n  test_tup = list(test_tup)\r\n  test_tup.append(test_dict)\r\n  test_tup = tuple(test_tup)\r\n  return (test_tup) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "add_dict_to_tuple((4, 5, 6), {'MSAM': 1, 'is': 2, 'best': 3})",
          "correct_output": "(4, 5, 6, {'MSAM': 1, 'is': 2, 'best': 3})"
        },
        {
          "input": "add_dict_to_tuple((1, 2, 3), {'UTS': 2, 'is': 3, 'Worst': 4})",
          "correct_output": "(1, 2, 3, {'UTS': 2, 'is': 3, 'Worst': 4})"
        },
        {
          "input": "add_dict_to_tuple((8, 9, 10), {'POS': 3, 'is': 4, 'Okay': 5})",
          "correct_output": "(8, 9, 10, {'POS': 3, 'is': 4, 'Okay': 5})"
        }
      ],
      "broken_test_cases": [
        {
          "input": "add_dict_to_tuple((4, 5, 6), {'MSAM': 1, 'is': 2, 'best': 3})",
          "correct_output": "(4, 5, 6)"
        },
        {
          "input": "add_dict_to_tuple((1, 2, 3), {'UTS': 2, 'is': 3, 'Worst': 4})",
          "correct_output": "(1, 2, 3)"
        },
        {
          "input": "add_dict_to_tuple((8, 9, 10), {'POS': 3, 'is': 4, 'Okay': 5})",
          "correct_output": "(8, 9, 10)"
        }
      ]
    },
    {
      "problem_id": "mbpp_383",
      "description": "Write a python function to toggle all odd bits of a given number.",
      "function_name": "even_bit_toggle_number",
      "correct_solution": "def even_bit_toggle_number(n) : \r\n    res = 0; count = 0; temp = n    \r\n    while(temp > 0 ) : \r\n        if (count % 2 == 0) : \r\n            res = res | (1 << count)      \r\n        count = count + 1\r\n        temp >>= 1 \r\n    return n ^ res ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "even_bit_toggle_number(10)",
          "correct_output": "15"
        },
        {
          "input": "even_bit_toggle_number(20)",
          "correct_output": "1"
        },
        {
          "input": "even_bit_toggle_number(30)",
          "correct_output": "11"
        }
      ],
      "broken_test_cases": [
        {
          "input": "even_bit_toggle_number(10)",
          "correct_output": "14"
        },
        {
          "input": "even_bit_toggle_number(20)",
          "correct_output": "5"
        },
        {
          "input": "even_bit_toggle_number(30)",
          "correct_output": "15"
        }
      ]
    },
    {
      "problem_id": "mbpp_477",
      "description": "Write a python function to convert the given string to lower case.",
      "function_name": "is_lower",
      "correct_solution": "def is_lower(string):\r\n  return (string.lower())",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "is_lower('InValid')",
          "correct_output": "invalid"
        },
        {
          "input": "is_lower('TruE')",
          "correct_output": "true"
        },
        {
          "input": "is_lower('SenTenCE')",
          "correct_output": "sentence"
        }
      ],
      "broken_test_cases": [
        {
          "input": "is_lower('InValid')",
          "correct_output": "INVALID"
        },
        {
          "input": "is_lower('TruE')",
          "correct_output": "True"
        },
        {
          "input": "is_lower('SenTenCE')",
          "correct_output": "SENTENCE"
        }
      ]
    },
    {
      "problem_id": "mbpp_910",
      "description": "Write a function to validate a gregorian date.",
      "function_name": "check_date",
      "correct_solution": "import datetime\r\ndef check_date(m, d, y):\r\n    try:\r\n        m, d, y = map(int, (m, d, y))\r\n        datetime.date(y, m, d)\r\n        return True\r\n    except ValueError:\r\n        return False",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "check_date(11, 11, 2002)",
          "correct_output": "True"
        },
        {
          "input": "check_date(13, 11, 2002)",
          "correct_output": "False"
        },
        {
          "input": "check_date('11', '11', '2002')",
          "correct_output": "True"
        }
      ],
      "broken_test_cases": [
        {
          "input": "check_date(11, 11, 2002)",
          "correct_output": "False"
        },
        {
          "input": "check_date(13, 11, 2002)",
          "correct_output": "True"
        },
        {
          "input": "check_date('11', '11', '2002')",
          "correct_output": "False"
        }
      ]
    },
    {
      "problem_id": "mbpp_507",
      "description": "Write a function to remove specific words from a given list.",
      "function_name": "remove_words",
      "correct_solution": "def remove_words(list1, removewords):\r\n    for word in list(list1):\r\n        if word in removewords:\r\n            list1.remove(word)\r\n    return list1  ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'], ['white', 'orange'])",
          "correct_output": "['red', 'green', 'blue', 'black']"
        },
        {
          "input": "remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'], ['black', 'orange'])",
          "correct_output": "['red', 'green', 'blue', 'white']"
        },
        {
          "input": "remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'], ['blue', 'white'])",
          "correct_output": "['red', 'green', 'black', 'orange']"
        }
      ],
      "broken_test_cases": [
        {
          "input": "remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'], ['white', 'orange'])",
          "correct_output": "['red', 'green', 'blue', 'white', 'black', 'orange']"
        },
        {
          "input": "remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'], ['black', 'orange'])",
          "correct_output": "['red', 'green', 'blue', 'white', 'black', 'orange']"
        },
        {
          "input": "remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'], ['blue', 'white'])",
          "correct_output": "['red', 'green', 'blue', 'white', 'black', 'orange']"
        }
      ]
    },
    {
      "problem_id": "mbpp_6",
      "description": "Write a python function to check whether the two numbers differ at one bit position only or not.",
      "function_name": "differ_At_One_Bit_Pos",
      "correct_solution": "def is_Power_Of_Two (x): \r\n    return x and (not(x & (x - 1))) \r\ndef differ_At_One_Bit_Pos(a,b): \r\n    return is_Power_Of_Two(a ^ b)",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "differ_At_One_Bit_Pos(13, 9)",
          "correct_output": "True"
        },
        {
          "input": "differ_At_One_Bit_Pos(15, 8)",
          "correct_output": "False"
        },
        {
          "input": "differ_At_One_Bit_Pos(2, 4)",
          "correct_output": "False"
        }
      ],
      "broken_test_cases": [
        {
          "input": "differ_At_One_Bit_Pos(13, 9)",
          "correct_output": "False"
        },
        {
          "input": "differ_At_One_Bit_Pos(15, 8)",
          "correct_output": "True"
        },
        {
          "input": "differ_At_One_Bit_Pos(2, 4)",
          "correct_output": "True"
        }
      ]
    },
    {
      "problem_id": "mbpp_884",
      "description": "Write a python function to check whether all the bits are within a given range or not.",
      "function_name": "all_Bits_Set_In_The_Given_Range",
      "correct_solution": "def all_Bits_Set_In_The_Given_Range(n,l,r): \r\n    num = ((1 << r) - 1) ^ ((1 << (l - 1)) - 1) \r\n    new_num = n & num \r\n    if (num == new_num): \r\n        return True\r\n    return False",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "all_Bits_Set_In_The_Given_Range(10, 2, 1)",
          "correct_output": "True"
        },
        {
          "input": "all_Bits_Set_In_The_Given_Range(5, 2, 4)",
          "correct_output": "False"
        },
        {
          "input": "all_Bits_Set_In_The_Given_Range(22, 2, 3)",
          "correct_output": "True"
        }
      ],
      "broken_test_cases": [
        {
          "input": "all_Bits_Set_In_The_Given_Range(10, 2, 1)",
          "correct_output": "False"
        },
        {
          "input": "all_Bits_Set_In_The_Given_Range(5, 2, 4)",
          "correct_output": "True"
        },
        {
          "input": "all_Bits_Set_In_The_Given_Range(22, 2, 3)",
          "correct_output": "False"
        }
      ]
    },
    {
      "problem_id": "mbpp_98",
      "description": "Write a function to multiply all the numbers in a list and divide with the length of the list.",
      "function_name": "multiply_num",
      "correct_solution": "def multiply_num(numbers):  \r\n    total = 1\r\n    for x in numbers:\r\n        total *= x  \r\n    return total/len(numbers) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "multiply_num((8, 2, 3, -1, 7))",
          "correct_output": "-67.2"
        },
        {
          "input": "multiply_num((-10, -20, -30))",
          "correct_output": "-2000.0"
        },
        {
          "input": "multiply_num((19, 15, 18))",
          "correct_output": "1710.0"
        }
      ],
      "broken_test_cases": [
        {
          "input": "multiply_num((8, 2, 3, -1, 7))",
          "correct_output": "67.2"
        },
        {
          "input": "multiply_num((-10, -20, -30))",
          "correct_output": "-2000.1"
        },
        {
          "input": "multiply_num((19, 15, 18))",
          "correct_output": "1709.9999"
        }
      ]
    },
    {
      "problem_id": "mbpp_814",
      "description": "Write a function to find the area of a rombus.",
      "function_name": "rombus_area",
      "correct_solution": "def rombus_area(p,q):\r\n  area=(p*q)/2\r\n  return area",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "rombus_area(10, 20)",
          "correct_output": "100"
        },
        {
          "input": "rombus_area(10, 5)",
          "correct_output": "25"
        },
        {
          "input": "rombus_area(4, 2)",
          "correct_output": "4"
        }
      ],
      "broken_test_cases": [
        {
          "input": "rombus_area(10, 20)",
          "correct_output": "50"
        },
        {
          "input": "rombus_area(10, 5)",
          "correct_output": "26"
        },
        {
          "input": "rombus_area(4, 2)",
          "correct_output": "8"
        }
      ]
    },
    {
      "problem_id": "mbpp_640",
      "description": "Write a function to remove the parenthesis area in a string.",
      "function_name": "remove_parenthesis",
      "correct_solution": "import re\r\ndef remove_parenthesis(items):\r\n for item in items:\r\n    return (re.sub(r\" ?\\([^)]+\\)\", \"\", item))",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "remove_parenthesis(['python (chrome)'])",
          "correct_output": "python"
        },
        {
          "input": "remove_parenthesis(['string(.abc)'])",
          "correct_output": "string"
        },
        {
          "input": "remove_parenthesis(['alpha(num)'])",
          "correct_output": "alpha"
        }
      ],
      "broken_test_cases": [
        {
          "input": "remove_parenthesis(['python (chrome)'])",
          "correct_output": "python (chrome)"
        },
        {
          "input": "remove_parenthesis(['string(.abc)'])",
          "correct_output": "string(.abc)"
        },
        {
          "input": "remove_parenthesis(['alpha(num)'])",
          "correct_output": "alphaXYZ"
        }
      ]
    },
    {
      "problem_id": "mbpp_515",
      "description": "Write a function to check if there is a subset with sum divisible by m.",
      "function_name": "modular_sum",
      "correct_solution": "def modular_sum(arr, n, m): \r\n\tif (n > m): \r\n\t\treturn True\r\n\tDP = [False for i in range(m)] \r\n\tfor i in range(n): \r\n\t\tif (DP[0]): \r\n\t\t\treturn True\r\n\t\ttemp = [False for i in range(m)] \r\n\t\tfor j in range(m): \r\n\t\t\tif (DP[j] == True): \r\n\t\t\t\tif (DP[(j + arr[i]) % m] == False): \r\n\t\t\t\t\ttemp[(j + arr[i]) % m] = True\r\n\t\tfor j in range(m): \r\n\t\t\tif (temp[j]): \r\n\t\t\t\tDP[j] = True\r\n\t\tDP[arr[i] % m] = True\r\n\treturn DP[0]",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "modular_sum([3, 1, 7, 5], 4, 6)",
          "correct_output": "True"
        },
        {
          "input": "modular_sum([1, 7], 2, 5)",
          "correct_output": "False"
        },
        {
          "input": "modular_sum([1, 6], 2, 5)",
          "correct_output": "False"
        }
      ],
      "broken_test_cases": [
        {
          "input": "modular_sum([3, 1, 7, 5], 4, 6)",
          "correct_output": "False"
        },
        {
          "input": "modular_sum([1, 7], 2, 5)",
          "correct_output": "True"
        },
        {
          "input": "modular_sum([1, 6], 2, 5)",
          "correct_output": "True"
        }
      ]
    },
    {
      "problem_id": "mbpp_909",
      "description": "Write a function to find the previous palindrome of a specified number.",
      "function_name": "previous_palindrome",
      "correct_solution": "def previous_palindrome(num):\r\n    for x in range(num-1,0,-1):\r\n        if str(x) == str(x)[::-1]:\r\n            return x",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "previous_palindrome(99)",
          "correct_output": "88"
        },
        {
          "input": "previous_palindrome(1221)",
          "correct_output": "1111"
        },
        {
          "input": "previous_palindrome(120)",
          "correct_output": "111"
        }
      ],
      "broken_test_cases": [
        {
          "input": "previous_palindrome(99)",
          "correct_output": "100"
        },
        {
          "input": "previous_palindrome(1221)",
          "correct_output": "1212"
        },
        {
          "input": "previous_palindrome(120)",
          "correct_output": "122"
        }
      ]
    },
    {
      "problem_id": "mbpp_32",
      "description": "Write a python function to find the largest prime factor of a given number.",
      "function_name": "max_Prime_Factors",
      "correct_solution": "import math \r\ndef max_Prime_Factors (n): \r\n    maxPrime = -1 \r\n    while n%2 == 0: \r\n        maxPrime = 2\r\n        n >>= 1    \r\n    for i in range(3,int(math.sqrt(n))+1,2): \r\n        while n % i == 0: \r\n            maxPrime = i \r\n            n = n / i \r\n    if n > 2: \r\n        maxPrime = n  \r\n    return int(maxPrime)",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "max_Prime_Factors(15)",
          "correct_output": "5"
        },
        {
          "input": "max_Prime_Factors(6)",
          "correct_output": "3"
        },
        {
          "input": "max_Prime_Factors(2)",
          "correct_output": "2"
        }
      ],
      "broken_test_cases": [
        {
          "input": "max_Prime_Factors(15)",
          "correct_output": "3"
        },
        {
          "input": "max_Prime_Factors(6)",
          "correct_output": "2"
        },
        {
          "input": "max_Prime_Factors(2)",
          "correct_output": "4"
        }
      ]
    },
    {
      "problem_id": "mbpp_10",
      "description": "Write a function to get the n smallest items from a dataset.",
      "function_name": "small_nnum",
      "correct_solution": "import heapq\r\ndef small_nnum(list1,n):\r\n  smallest=heapq.nsmallest(n,list1)\r\n  return smallest",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "small_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 2)",
          "correct_output": "[10, 20]"
        },
        {
          "input": "small_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 5)",
          "correct_output": "[10, 20, 20, 40, 50]"
        },
        {
          "input": "small_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 3)",
          "correct_output": "[10, 20, 20]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "small_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 2)",
          "correct_output": "[20, 50]"
        },
        {
          "input": "small_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 5)",
          "correct_output": "[10, 20, 30, 40, 50]"
        },
        {
          "input": "small_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 3)",
          "correct_output": "[50, 60, 80]"
        }
      ]
    },
    {
      "problem_id": "mbpp_22",
      "description": "Write a function to find the first duplicate element in a given array of integers.",
      "function_name": "find_first_duplicate",
      "correct_solution": "def find_first_duplicate(nums):\r\n    num_set = set()\r\n    no_duplicate = -1\r\n\r\n    for i in range(len(nums)):\r\n\r\n        if nums[i] in num_set:\r\n            return nums[i]\r\n        else:\r\n            num_set.add(nums[i])\r\n\r\n    return no_duplicate",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "find_first_duplicate([1, 2, 3, 4, 4, 5])",
          "correct_output": "4"
        },
        {
          "input": "find_first_duplicate([1, 2, 3, 4])",
          "correct_output": "-1"
        },
        {
          "input": "find_first_duplicate([1, 1, 2, 3, 3, 2, 2])",
          "correct_output": "1"
        }
      ],
      "broken_test_cases": [
        {
          "input": "find_first_duplicate([1, 2, 3, 4, 4, 5])",
          "correct_output": "5"
        },
        {
          "input": "find_first_duplicate([1, 2, 3, 4])",
          "correct_output": "1"
        },
        {
          "input": "find_first_duplicate([1, 1, 2, 3, 3, 2, 2])",
          "correct_output": "2"
        }
      ]
    },
    {
      "problem_id": "mbpp_553",
      "description": "Write a function to convert the given tuple to a floating-point number.",
      "function_name": "tuple_to_float",
      "correct_solution": "def tuple_to_float(test_tup):\r\n  res = float('.'.join(str(ele) for ele in test_tup))\r\n  return (res) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "tuple_to_float((4, 56))",
          "correct_output": "4.56"
        },
        {
          "input": "tuple_to_float((7, 256))",
          "correct_output": "7.256"
        }
      ],
      "broken_test_cases": [
        {
          "input": "tuple_to_float((4, 56))",
          "correct_output": "0.456"
        },
        {
          "input": "tuple_to_float((7, 256))",
          "correct_output": "7.257"
        }
      ]
    },
    {
      "problem_id": "mbpp_540",
      "description": "Write a python function to find the difference between highest and least frequencies in a given array.",
      "function_name": "find_Diff",
      "correct_solution": "def find_Diff(arr,n): \r\n    arr.sort()  \r\n    count = 0; max_count = 0; min_count = n \r\n    for i in range(0,(n-1)): \r\n        if arr[i] == arr[i + 1]: \r\n            count += 1\r\n            continue\r\n        else: \r\n            max_count = max(max_count,count) \r\n            min_count = min(min_count,count) \r\n            count = 0\r\n    return max_count - min_count ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "find_Diff([1, 1, 2, 2, 7, 8, 4, 5, 1, 4], 10)",
          "correct_output": "2"
        },
        {
          "input": "find_Diff([1, 7, 9, 2, 3, 3, 1, 3, 3], 9)",
          "correct_output": "3"
        },
        {
          "input": "find_Diff([1, 2, 1, 2], 4)",
          "correct_output": "0"
        }
      ],
      "broken_test_cases": [
        {
          "input": "find_Diff([1, 1, 2, 2, 7, 8, 4, 5, 1, 4], 10)",
          "correct_output": "3"
        },
        {
          "input": "find_Diff([1, 7, 9, 2, 3, 3, 1, 3, 3], 9)",
          "correct_output": "2"
        },
        {
          "input": "find_Diff([1, 2, 1, 2], 4)",
          "correct_output": "1"
        }
      ]
    },
    {
      "problem_id": "mbpp_541",
      "description": "Write a function to find if the given number is abundant or not.",
      "function_name": "check_abundant",
      "correct_solution": "import math \r\ndef get_sum(n): \r\n\tsum = 0\r\n\ti = 1\r\n\twhile i <= (math.sqrt(n)): \r\n\t\tif n%i == 0: \r\n\t\t\tif n/i == i : \r\n\t\t\t\tsum = sum + i \r\n\t\t\telse: \r\n\t\t\t\tsum = sum + i \r\n\t\t\t\tsum = sum + (n / i ) \r\n\t\ti = i + 1\r\n\tsum = sum - n \r\n\treturn sum\r\ndef check_abundant(n): \r\n\tif (get_sum(n) > n): \r\n\t\treturn True\r\n\telse: \r\n\t\treturn False",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "check_abundant(12)",
          "correct_output": "True"
        },
        {
          "input": "check_abundant(15)",
          "correct_output": "False"
        },
        {
          "input": "check_abundant(18)",
          "correct_output": "True"
        }
      ],
      "broken_test_cases": [
        {
          "input": "check_abundant(12)",
          "correct_output": "False"
        },
        {
          "input": "check_abundant(15)",
          "correct_output": "True"
        },
        {
          "input": "check_abundant(18)",
          "correct_output": "False"
        }
      ]
    },
    {
      "problem_id": "mbpp_497",
      "description": "Write a function to find the surface area of a cone.",
      "function_name": "surfacearea_cone",
      "correct_solution": "import math\r\ndef surfacearea_cone(r,h):\r\n  l = math.sqrt(r * r + h * h)\r\n  SA = math.pi * r * (r + l)\r\n  return SA",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "surfacearea_cone(5, 12)",
          "correct_output": "282.7433388230814"
        },
        {
          "input": "surfacearea_cone(10, 15)",
          "correct_output": "880.5179353159282"
        },
        {
          "input": "surfacearea_cone(19, 17)",
          "correct_output": "2655.923961165254"
        }
      ],
      "broken_test_cases": [
        {
          "input": "surfacearea_cone(5, 12)",
          "correct_output": "100.0"
        },
        {
          "input": "surfacearea_cone(10, 15)",
          "correct_output": "1000.0"
        },
        {
          "input": "surfacearea_cone(19, 17)",
          "correct_output": "1000.0"
        }
      ]
    },
    {
      "problem_id": "mbpp_273",
      "description": "Write a function to substract the contents of one tuple with corresponding index of other tuple.",
      "function_name": "substract_elements",
      "correct_solution": "def substract_elements(test_tup1, test_tup2):\r\n  res = tuple(map(lambda i, j: i - j, test_tup1, test_tup2))\r\n  return (res) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "substract_elements((10, 4, 5), (2, 5, 18))",
          "correct_output": "(8, -1, -13)"
        },
        {
          "input": "substract_elements((11, 2, 3), (24, 45, 16))",
          "correct_output": "(-13, -43, -13)"
        },
        {
          "input": "substract_elements((7, 18, 9), (10, 11, 12))",
          "correct_output": "(-3, 7, -3)"
        }
      ],
      "broken_test_cases": [
        {
          "input": "substract_elements((10, 4, 5), (2, 5, 18))",
          "correct_output": "(8, -1, -12)"
        },
        {
          "input": "substract_elements((11, 2, 3), (24, 45, 16))",
          "correct_output": "(-13, -43, -12)"
        },
        {
          "input": "substract_elements((7, 18, 9), (10, 11, 12))",
          "correct_output": "(-3, 7, -4)"
        }
      ]
    },
    {
      "problem_id": "mbpp_824",
      "description": "Write a python function to remove even numbers from a given list.",
      "function_name": "remove_even",
      "correct_solution": "def remove_even(l):\r\n    for i in l:\r\n        if i % 2 == 0:\r\n            l.remove(i)\r\n    return l",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "remove_even([1, 3, 5, 2])",
          "correct_output": "[1, 3, 5]"
        },
        {
          "input": "remove_even([5, 6, 7])",
          "correct_output": "[5, 7]"
        },
        {
          "input": "remove_even([1, 2, 3, 4])",
          "correct_output": "[1, 3]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "remove_even([1, 3, 5, 2])",
          "correct_output": "[1, 3, 5, 2]"
        },
        {
          "input": "remove_even([5, 6, 7])",
          "correct_output": "[5, 6, 7]"
        },
        {
          "input": "remove_even([1, 2, 3, 4])",
          "correct_output": "[1, 2, 3, 4]"
        }
      ]
    },
    {
      "problem_id": "mbpp_885",
      "description": "Write a python function to check whether the two given strings are isomorphic to each other or not.",
      "function_name": "is_Isomorphic",
      "correct_solution": "def is_Isomorphic(str1,str2):          \r\n    dict_str1 = {}\r\n    dict_str2 = {}\r\n    for i, value in enumerate(str1):\r\n        dict_str1[value] = dict_str1.get(value,[]) + [i]        \r\n    for j, value in enumerate(str2):\r\n        dict_str2[value] = dict_str2.get(value,[]) + [j]\r\n    if sorted(dict_str1.values()) == sorted(dict_str2.values()):\r\n        return True\r\n    else:\r\n        return False",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "is_Isomorphic('paper', 'title')",
          "correct_output": "True"
        },
        {
          "input": "is_Isomorphic('ab', 'ba')",
          "correct_output": "True"
        },
        {
          "input": "is_Isomorphic('ab', 'aa')",
          "correct_output": "False"
        }
      ],
      "broken_test_cases": [
        {
          "input": "is_Isomorphic('paper', 'title')",
          "correct_output": "False"
        },
        {
          "input": "is_Isomorphic('ab', 'ba')",
          "correct_output": "False"
        },
        {
          "input": "is_Isomorphic('ab', 'aa')",
          "correct_output": "True"
        }
      ]
    },
    {
      "problem_id": "mbpp_129",
      "description": "Write a function to calculate magic square.",
      "function_name": "magic_square_test",
      "correct_solution": "def magic_square_test(my_matrix):\r\n    iSize = len(my_matrix[0])\r\n    sum_list = []\r\n    sum_list.extend([sum (lines) for lines in my_matrix])   \r\n    for col in range(iSize):\r\n        sum_list.append(sum(row[col] for row in my_matrix))\r\n    result1 = 0\r\n    for i in range(0,iSize):\r\n        result1 +=my_matrix[i][i]\r\n    sum_list.append(result1)      \r\n    result2 = 0\r\n    for i in range(iSize-1,-1,-1):\r\n        result2 +=my_matrix[i][i]\r\n    sum_list.append(result2)\r\n    if len(set(sum_list))>1:\r\n        return False\r\n    return True",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])",
          "correct_output": "True"
        },
        {
          "input": "magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]])",
          "correct_output": "True"
        },
        {
          "input": "magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]])",
          "correct_output": "False"
        }
      ],
      "broken_test_cases": [
        {
          "input": "magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])",
          "correct_output": "False"
        },
        {
          "input": "magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]])",
          "correct_output": "False"
        },
        {
          "input": "magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]])",
          "correct_output": "True"
        }
      ]
    },
    {
      "problem_id": "mbpp_711",
      "description": "Write a python function to check whether the product of digits of a number at even and odd places is equal or not.",
      "function_name": "product_Equal",
      "correct_solution": "def product_Equal(n): \r\n    if n < 10: \r\n        return False\r\n    prodOdd = 1; prodEven = 1\r\n    while n > 0: \r\n        digit = n % 10\r\n        prodOdd *= digit \r\n        n = n//10\r\n        if n == 0: \r\n            break; \r\n        digit = n % 10\r\n        prodEven *= digit \r\n        n = n//10\r\n    if prodOdd == prodEven: \r\n        return True\r\n    return False",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "product_Equal(2841)",
          "correct_output": "True"
        },
        {
          "input": "product_Equal(1234)",
          "correct_output": "False"
        },
        {
          "input": "product_Equal(1212)",
          "correct_output": "False"
        }
      ],
      "broken_test_cases": [
        {
          "input": "product_Equal(2841)",
          "correct_output": "False"
        },
        {
          "input": "product_Equal(1234)",
          "correct_output": "True"
        },
        {
          "input": "product_Equal(1212)",
          "correct_output": "True"
        }
      ]
    },
    {
      "problem_id": "mbpp_673",
      "description": "Write a python function to convert a list of multiple integers into a single integer.",
      "function_name": "convert",
      "correct_solution": "def convert(list): \r\n    s = [str(i) for i in list] \r\n    res = int(\"\".join(s))  \r\n    return (res) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "convert([1, 2, 3])",
          "correct_output": "123"
        },
        {
          "input": "convert([4, 5, 6])",
          "correct_output": "456"
        },
        {
          "input": "convert([7, 8, 9])",
          "correct_output": "789"
        }
      ],
      "broken_test_cases": [
        {
          "input": "convert([1, 2, 3])",
          "correct_output": "321"
        },
        {
          "input": "convert([4, 5, 6])",
          "correct_output": "654"
        },
        {
          "input": "convert([7, 8, 9])",
          "correct_output": "798"
        }
      ]
    },
    {
      "problem_id": "mbpp_516",
      "description": "Write a function to sort a list of elements using radix sort.",
      "function_name": "radix_sort",
      "correct_solution": "def radix_sort(nums):\r\n    RADIX = 10\r\n    placement = 1\r\n    max_digit = max(nums)\r\n\r\n    while placement < max_digit:\r\n      buckets = [list() for _ in range( RADIX )]\r\n      for i in nums:\r\n        tmp = int((i / placement) % RADIX)\r\n        buckets[tmp].append(i)\r\n      a = 0\r\n      for b in range( RADIX ):\r\n        buck = buckets[b]\r\n        for i in buck:\r\n          nums[a] = i\r\n          a += 1\r\n      placement *= RADIX\r\n    return nums",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "radix_sort([15, 79, 25, 68, 37])",
          "correct_output": "[15, 25, 37, 68, 79]"
        },
        {
          "input": "radix_sort([9, 11, 8, 7, 3, 2])",
          "correct_output": "[2, 3, 7, 8, 9, 11]"
        },
        {
          "input": "radix_sort([36, 12, 24, 26, 29])",
          "correct_output": "[12, 24, 26, 29, 36]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "radix_sort([15, 79, 25, 68, 37])",
          "correct_output": "[79, 68, 37, 25, 15]"
        },
        {
          "input": "radix_sort([9, 11, 8, 7, 3, 2])",
          "correct_output": "[2, 3, 7, 8, 11, 9]"
        },
        {
          "input": "radix_sort([36, 12, 24, 26, 29])",
          "correct_output": "[36, 12, 24, 26, 29]"
        }
      ]
    },
    {
      "problem_id": "mbpp_176",
      "description": "Write a function to find the perimeter of a triangle.",
      "function_name": "perimeter_triangle",
      "correct_solution": "def perimeter_triangle(a,b,c):\r\n  perimeter=a+b+c\r\n  return perimeter",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "perimeter_triangle(10, 20, 30)",
          "correct_output": "60"
        },
        {
          "input": "perimeter_triangle(3, 4, 5)",
          "correct_output": "12"
        },
        {
          "input": "perimeter_triangle(25, 35, 45)",
          "correct_output": "105"
        }
      ],
      "broken_test_cases": [
        {
          "input": "perimeter_triangle(10, 20, 30)",
          "correct_output": "55"
        },
        {
          "input": "perimeter_triangle(3, 4, 5)",
          "correct_output": "11"
        },
        {
          "input": "perimeter_triangle(25, 35, 45)",
          "correct_output": "120"
        }
      ]
    },
    {
      "problem_id": "mbpp_153",
      "description": "Write a function to find the vertex of a parabola.",
      "function_name": "parabola_vertex",
      "correct_solution": "def parabola_vertex(a, b, c): \r\n  vertex=(((-b / (2 * a)),(((4 * a * c) - (b * b)) / (4 * a))))\r\n  return vertex",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "parabola_vertex(5, 3, 2)",
          "correct_output": "(-0.3, 1.55)"
        },
        {
          "input": "parabola_vertex(9, 8, 4)",
          "correct_output": "(-0.4444444444444444, 2.2222222222222223)"
        },
        {
          "input": "parabola_vertex(2, 4, 6)",
          "correct_output": "(-1.0, 4.0)"
        }
      ],
      "broken_test_cases": [
        {
          "input": "parabola_vertex(5, 3, 2)",
          "correct_output": "(0.3, 1.55)"
        },
        {
          "input": "parabola_vertex(9, 8, 4)",
          "correct_output": "(0.4444444444444444, 2.2222222222222223)"
        },
        {
          "input": "parabola_vertex(2, 4, 6)",
          "correct_output": "(1.0, 2.0)"
        }
      ]
    },
    {
      "problem_id": "mbpp_168",
      "description": "Write a python function to find the frequency of a number in a given array.",
      "function_name": "frequency",
      "correct_solution": "def frequency(a,x): \r\n    count = 0  \r\n    for i in a: \r\n        if i == x: count += 1\r\n    return count ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "frequency([1, 2, 3], 4)",
          "correct_output": "0"
        },
        {
          "input": "frequency([1, 2, 2, 3, 3, 3, 4], 3)",
          "correct_output": "3"
        },
        {
          "input": "frequency([0, 1, 2, 3, 1, 2], 1)",
          "correct_output": "2"
        }
      ],
      "broken_test_cases": [
        {
          "input": "frequency([1, 2, 3], 4)",
          "correct_output": "1"
        },
        {
          "input": "frequency([1, 2, 2, 3, 3, 3, 4], 3)",
          "correct_output": "2"
        },
        {
          "input": "frequency([0, 1, 2, 3, 1, 2], 1)",
          "correct_output": "3"
        }
      ]
    },
    {
      "problem_id": "mbpp_306",
      "description": "Write a function to find the maximum sum of increasing subsequence from prefix till ith index and also including a given kth element which is after i, i.e., k > i .",
      "function_name": "max_sum_increasing_subseq",
      "correct_solution": "def max_sum_increasing_subseq(a, n, index, k):\r\n\tdp = [[0 for i in range(n)] \r\n\t\t\tfor i in range(n)]\r\n\tfor i in range(n):\r\n\t\tif a[i] > a[0]:\r\n\t\t\tdp[0][i] = a[i] + a[0]\r\n\t\telse:\r\n\t\t\tdp[0][i] = a[i]\r\n\tfor i in range(1, n):\r\n\t\tfor j in range(n):\r\n\t\t\tif a[j] > a[i] and j > i:\r\n\t\t\t\tif dp[i - 1][i] + a[j] > dp[i - 1][j]:\r\n\t\t\t\t\tdp[i][j] = dp[i - 1][i] + a[j]\r\n\t\t\t\telse:\r\n\t\t\t\t\tdp[i][j] = dp[i - 1][j]\r\n\t\t\telse:\r\n\t\t\t\tdp[i][j] = dp[i - 1][j]\r\n\treturn dp[index][k]",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5], 7, 4, 6)",
          "correct_output": "11"
        },
        {
          "input": "max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5], 7, 2, 5)",
          "correct_output": "7"
        },
        {
          "input": "max_sum_increasing_subseq([11, 15, 19, 21, 26, 28, 31], 7, 2, 4)",
          "correct_output": "71"
        }
      ],
      "broken_test_cases": [
        {
          "input": "max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5], 7, 4, 6)",
          "correct_output": "10"
        },
        {
          "input": "max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5], 7, 2, 5)",
          "correct_output": "8"
        },
        {
          "input": "max_sum_increasing_subseq([11, 15, 19, 21, 26, 28, 31], 7, 2, 4)",
          "correct_output": "70"
        }
      ]
    },
    {
      "problem_id": "mbpp_354",
      "description": "Write a function to find t-nth term of arithemetic progression.",
      "function_name": "tn_ap",
      "correct_solution": "def tn_ap(a,n,d):\r\n  tn = a + (n - 1) * d\r\n  return tn",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "tn_ap(1, 5, 2)",
          "correct_output": "9"
        },
        {
          "input": "tn_ap(2, 6, 4)",
          "correct_output": "22"
        },
        {
          "input": "tn_ap(1, 4, 5)",
          "correct_output": "16"
        }
      ],
      "broken_test_cases": [
        {
          "input": "tn_ap(1, 5, 2)",
          "correct_output": "10"
        },
        {
          "input": "tn_ap(2, 6, 4)",
          "correct_output": "20"
        },
        {
          "input": "tn_ap(1, 4, 5)",
          "correct_output": "17"
        }
      ]
    },
    {
      "problem_id": "mbpp_579",
      "description": "Write a function to find the dissimilar elements in the given two tuples.",
      "function_name": "find_dissimilar",
      "correct_solution": "def find_dissimilar(test_tup1, test_tup2):\r\n  res = tuple(set(test_tup1) ^ set(test_tup2))\r\n  return (res) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10))",
          "correct_output": "(3, 6, 7, 10)"
        },
        {
          "input": "find_dissimilar((1, 2, 3, 4), (7, 2, 3, 9))",
          "correct_output": "(1, 4, 7, 9)"
        },
        {
          "input": "find_dissimilar((21, 11, 25, 26), (26, 34, 21, 36))",
          "correct_output": "(34, 36, 11, 25)"
        }
      ],
      "broken_test_cases": [
        {
          "input": "find_dissimilar((3, 4, 5, 6), (5, 7, 4, 10))",
          "correct_output": "(3, 6, 7, 4, 5, 10)"
        },
        {
          "input": "find_dissimilar((1, 2, 3, 4), (7, 2, 3, 9))",
          "correct_output": "(1, 4, 7, 3, 9)"
        },
        {
          "input": "find_dissimilar((21, 11, 25, 26), (26, 34, 21, 36))",
          "correct_output": "(34, 36, 11, 25, 21)"
        }
      ]
    },
    {
      "problem_id": "mbpp_842",
      "description": "Write a function to find the number which occurs for odd number of times in the given array.",
      "function_name": "get_odd_occurence",
      "correct_solution": "def get_odd_occurence(arr, arr_size):\r\n  for i in range(0, arr_size):\r\n    count = 0\r\n    for j in range(0, arr_size):\r\n      if arr[i] == arr[j]:\r\n        count += 1\r\n    if (count % 2 != 0):\r\n      return arr[i]\r\n  return -1",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "get_odd_occurence([2, 3, 5, 4, 5, 2, 4, 3, 5, 2, 4, 4, 2], 13)",
          "correct_output": "5"
        },
        {
          "input": "get_odd_occurence([1, 2, 3, 2, 3, 1, 3], 7)",
          "correct_output": "3"
        },
        {
          "input": "get_odd_occurence([5, 7, 2, 7, 5, 2, 5], 7)",
          "correct_output": "5"
        }
      ],
      "broken_test_cases": [
        {
          "input": "get_odd_occurence([2, 3, 5, 4, 5, 2, 4, 3, 5, 2, 4, 4, 2], 13)",
          "correct_output": "4"
        },
        {
          "input": "get_odd_occurence([1, 2, 3, 2, 3, 1, 3], 7)",
          "correct_output": "2"
        },
        {
          "input": "get_odd_occurence([5, 7, 2, 7, 5, 2, 5], 7)",
          "correct_output": "2"
        }
      ]
    },
    {
      "problem_id": "mbpp_613",
      "description": "Write a function to find the maximum value in record list as tuple attribute in the given tuple list.",
      "function_name": "maximum_value",
      "correct_solution": "def maximum_value(test_list):\r\n  res = [(key, max(lst)) for key, lst in test_list]\r\n  return (res) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "maximum_value([('key1', [3, 4, 5]), ('key2', [1, 4, 2]), ('key3', [9, 3])])",
          "correct_output": "[('key1', 5), ('key2', 4), ('key3', 9)]"
        },
        {
          "input": "maximum_value([('key1', [4, 5, 6]), ('key2', [2, 5, 3]), ('key3', [10, 4])])",
          "correct_output": "[('key1', 6), ('key2', 5), ('key3', 10)]"
        },
        {
          "input": "maximum_value([('key1', [5, 6, 7]), ('key2', [3, 6, 4]), ('key3', [11, 5])])",
          "correct_output": "[('key1', 7), ('key2', 6), ('key3', 11)]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "maximum_value([('key1', [3, 4, 5]), ('key2', [1, 4, 2]), ('key3', [9, 3])])",
          "correct_output": "[('key1', 4), ('key2', 4), ('key3', 3)]"
        },
        {
          "input": "maximum_value([('key1', [4, 5, 6]), ('key2', [2, 5, 3]), ('key3', [10, 4])])",
          "correct_output": "[('key1', 4), ('key2', 3), ('key3', 4)]"
        },
        {
          "input": "maximum_value([('key1', [5, 6, 7]), ('key2', [3, 6, 4]), ('key3', [11, 5])])",
          "correct_output": "[('key1', 5), ('key2', 3), ('key3', 5)]"
        }
      ]
    },
    {
      "problem_id": "mbpp_184",
      "description": "Write a function to find all the values in a list that are greater than a specified number.",
      "function_name": "greater_specificnum",
      "correct_solution": "def greater_specificnum(list,num):\r\n greater_specificnum=all(x >= num for x in list)\r\n return greater_specificnum",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "greater_specificnum([220, 330, 500], 200)",
          "correct_output": "True"
        },
        {
          "input": "greater_specificnum([12, 17, 21], 20)",
          "correct_output": "False"
        },
        {
          "input": "greater_specificnum([1, 2, 3, 4], 10)",
          "correct_output": "False"
        }
      ],
      "broken_test_cases": [
        {
          "input": "greater_specificnum([220, 330, 500], 200)",
          "correct_output": "False"
        },
        {
          "input": "greater_specificnum([12, 17, 21], 20)",
          "correct_output": "True"
        },
        {
          "input": "greater_specificnum([1, 2, 3, 4], 10)",
          "correct_output": "True"
        }
      ]
    },
    {
      "problem_id": "mbpp_620",
      "description": "Write a function to find the largest subset where each pair is divisible.",
      "function_name": "largest_subset",
      "correct_solution": "def largest_subset(a, n):\r\n\tdp = [0 for i in range(n)]\r\n\tdp[n - 1] = 1; \r\n\tfor i in range(n - 2, -1, -1):\r\n\t\tmxm = 0;\r\n\t\tfor j in range(i + 1, n):\r\n\t\t\tif a[j] % a[i] == 0 or a[i] % a[j] == 0:\r\n\t\t\t\tmxm = max(mxm, dp[j])\r\n\t\tdp[i] = 1 + mxm\r\n\treturn max(dp)",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "largest_subset([1, 3, 6, 13, 17, 18], 6)",
          "correct_output": "4"
        },
        {
          "input": "largest_subset([10, 5, 3, 15, 20], 5)",
          "correct_output": "3"
        },
        {
          "input": "largest_subset([18, 1, 3, 6, 13, 17], 6)",
          "correct_output": "4"
        }
      ],
      "broken_test_cases": [
        {
          "input": "largest_subset([1, 3, 6, 13, 17, 18], 6)",
          "correct_output": "5"
        },
        {
          "input": "largest_subset([10, 5, 3, 15, 20], 5)",
          "correct_output": "4"
        },
        {
          "input": "largest_subset([18, 1, 3, 6, 13, 17], 6)",
          "correct_output": "5"
        }
      ]
    },
    {
      "problem_id": "mbpp_61",
      "description": "Write a python function to count number of substrings with the sum of digits equal to their length.",
      "function_name": "count_Substrings",
      "correct_solution": "from collections import defaultdict\r\ndef count_Substrings(s,n):\r\n    count,sum = 0,0\r\n    mp = defaultdict(lambda : 0)\r\n    mp[0] += 1\r\n    for i in range(n):\r\n        sum += ord(s[i]) - ord('0')\r\n        count += mp[sum - (i + 1)]\r\n        mp[sum - (i + 1)] += 1\r\n    return count",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "count_Substrings('112112', 6)",
          "correct_output": "6"
        },
        {
          "input": "count_Substrings('111', 3)",
          "correct_output": "6"
        },
        {
          "input": "count_Substrings('1101112', 7)",
          "correct_output": "12"
        }
      ],
      "broken_test_cases": [
        {
          "input": "count_Substrings('112112', 6)",
          "correct_output": "5"
        },
        {
          "input": "count_Substrings('111', 3)",
          "correct_output": "5"
        },
        {
          "input": "count_Substrings('1101112', 7)",
          "correct_output": "11"
        }
      ]
    },
    {
      "problem_id": "mbpp_517",
      "description": "Write a python function to find the largest postive number from the given list.",
      "function_name": "largest_pos",
      "correct_solution": "def largest_pos(list1): \r\n    max = list1[0] \r\n    for x in list1: \r\n        if x > max : \r\n             max = x  \r\n    return max",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "largest_pos([1, 2, 3, 4, -1])",
          "correct_output": "4"
        },
        {
          "input": "largest_pos([0, 1, 2, -5, -1, 6])",
          "correct_output": "6"
        },
        {
          "input": "largest_pos([0, 0, 1, 0])",
          "correct_output": "1"
        }
      ],
      "broken_test_cases": [
        {
          "input": "largest_pos([1, 2, 3, 4, -1])",
          "correct_output": "5"
        },
        {
          "input": "largest_pos([0, 1, 2, -5, -1, 6])",
          "correct_output": "5"
        },
        {
          "input": "largest_pos([0, 0, 1, 0])",
          "correct_output": "-1"
        }
      ]
    },
    {
      "problem_id": "mbpp_291",
      "description": "Write a function to find out the number of ways of painting the fence such that at most 2 adjacent posts have the same color for the given fence with n posts and k colors.",
      "function_name": "count_no_of_ways",
      "correct_solution": "def count_no_of_ways(n, k): \r\n\tdp = [0] * (n + 1) \r\n\ttotal = k \r\n\tmod = 1000000007\r\n\tdp[1] = k \r\n\tdp[2] = k * k\t \r\n\tfor i in range(3,n+1): \r\n\t\tdp[i] = ((k - 1) * (dp[i - 1] + dp[i - 2])) % mod \r\n\treturn dp[n]",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "count_no_of_ways(2, 4)",
          "correct_output": "16"
        },
        {
          "input": "count_no_of_ways(3, 2)",
          "correct_output": "6"
        },
        {
          "input": "count_no_of_ways(4, 4)",
          "correct_output": "228"
        }
      ],
      "broken_test_cases": [
        {
          "input": "count_no_of_ways(2, 4)",
          "correct_output": "15"
        },
        {
          "input": "count_no_of_ways(3, 2)",
          "correct_output": "5"
        },
        {
          "input": "count_no_of_ways(4, 4)",
          "correct_output": "229"
        }
      ]
    },
    {
      "problem_id": "mbpp_708",
      "description": "Write a python function to convert a string to a list.",
      "function_name": "Convert",
      "correct_solution": "def Convert(string): \r\n    li = list(string.split(\" \")) \r\n    return li ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "Convert('python program')",
          "correct_output": "['python', 'program']"
        },
        {
          "input": "Convert('Data Analysis')",
          "correct_output": "['Data', 'Analysis']"
        },
        {
          "input": "Convert('Hadoop Training')",
          "correct_output": "['Hadoop', 'Training']"
        }
      ],
      "broken_test_cases": [
        {
          "input": "Convert('python program')",
          "correct_output": "['python', 'program', 'extra']"
        },
        {
          "input": "Convert('Data Analysis')",
          "correct_output": "['Data', 'Analysis', 'Extra']"
        },
        {
          "input": "Convert('Hadoop Training')",
          "correct_output": "['Hadoop', 'Training', 'Extra']"
        }
      ]
    },
    {
      "problem_id": "mbpp_547",
      "description": "Write a python function to find the sum of hamming distances of all consecutive numbers from o to n.",
      "function_name": "Total_Hamming_Distance",
      "correct_solution": "def Total_Hamming_Distance(n):   \r\n    i = 1\r\n    sum = 0\r\n    while (n // i > 0):  \r\n        sum = sum + n // i  \r\n        i = i * 2     \r\n    return sum",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "Total_Hamming_Distance(4)",
          "correct_output": "7"
        },
        {
          "input": "Total_Hamming_Distance(2)",
          "correct_output": "3"
        },
        {
          "input": "Total_Hamming_Distance(5)",
          "correct_output": "8"
        }
      ],
      "broken_test_cases": [
        {
          "input": "Total_Hamming_Distance(4)",
          "correct_output": "6"
        },
        {
          "input": "Total_Hamming_Distance(2)",
          "correct_output": "2"
        },
        {
          "input": "Total_Hamming_Distance(5)",
          "correct_output": "7"
        }
      ]
    },
    {
      "problem_id": "mbpp_750",
      "description": "Write a function to add the given tuple to the given list.",
      "function_name": "add_tuple",
      "correct_solution": "def add_tuple(test_list, test_tup):\r\n  test_list += test_tup\r\n  return (test_list) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "add_tuple([5, 6, 7], (9, 10))",
          "correct_output": "[5, 6, 7, 9, 10]"
        },
        {
          "input": "add_tuple([6, 7, 8], (10, 11))",
          "correct_output": "[6, 7, 8, 10, 11]"
        },
        {
          "input": "add_tuple([7, 8, 9], (11, 12))",
          "correct_output": "[7, 8, 9, 11, 12]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "add_tuple([5, 6, 7], (9, 10))",
          "correct_output": "[5, 6, 7, 9]"
        },
        {
          "input": "add_tuple([6, 7, 8], (10, 11))",
          "correct_output": "[6, 7, 8, 10, 10]"
        },
        {
          "input": "add_tuple([7, 8, 9], (11, 12))",
          "correct_output": "[7, 8, 9, 11]"
        }
      ]
    },
    {
      "problem_id": "mbpp_787",
      "description": "Write a function that matches a string that has an a followed by three 'b'.",
      "function_name": "text_match_three",
      "correct_solution": "import re\r\ndef text_match_three(text):\r\n        patterns = 'ab{3}?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "text_match_three('ac')",
          "correct_output": "Not matched!"
        },
        {
          "input": "text_match_three('dc')",
          "correct_output": "Not matched!"
        },
        {
          "input": "text_match_three('abbbba')",
          "correct_output": "Found a match!"
        }
      ],
      "broken_test_cases": [
        {
          "input": "text_match_three('ac')",
          "correct_output": "Found a match!"
        },
        {
          "input": "text_match_three('dc')",
          "correct_output": "Found a match!"
        },
        {
          "input": "text_match_three('abbbba')",
          "correct_output": "Not matched!"
        }
      ]
    },
    {
      "problem_id": "mbpp_706",
      "description": "Write a function to find whether an array is subset of another array.",
      "function_name": "is_subset",
      "correct_solution": "def is_subset(arr1, m, arr2, n): \r\n\thashset = set() \r\n\tfor i in range(0, m): \r\n\t\thashset.add(arr1[i]) \r\n\tfor i in range(0, n): \r\n\t\tif arr2[i] in hashset: \r\n\t\t\tcontinue\r\n\t\telse: \r\n\t\t\treturn False\r\n\treturn True\t\t",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "is_subset([11, 1, 13, 21, 3, 7], 6, [11, 3, 7, 1], 4)",
          "correct_output": "True"
        },
        {
          "input": "is_subset([1, 2, 3, 4, 5, 6], 6, [1, 2, 4], 3)",
          "correct_output": "True"
        },
        {
          "input": "is_subset([10, 5, 2, 23, 19], 5, [19, 5, 3], 3)",
          "correct_output": "False"
        }
      ],
      "broken_test_cases": [
        {
          "input": "is_subset([11, 1, 13, 21, 3, 7], 6, [11, 3, 7, 1], 4)",
          "correct_output": "False"
        },
        {
          "input": "is_subset([1, 2, 3, 4, 5, 6], 6, [1, 2, 4], 3)",
          "correct_output": "False"
        },
        {
          "input": "is_subset([10, 5, 2, 23, 19], 5, [19, 5, 3], 3)",
          "correct_output": "True"
        }
      ]
    },
    {
      "problem_id": "mbpp_326",
      "description": "Write a function to get the word with most number of occurrences in the given strings list.",
      "function_name": "most_occurrences",
      "correct_solution": "from collections import defaultdict \r\n\r\ndef most_occurrences(test_list):\r\n  temp = defaultdict(int)\r\n  for sub in test_list:\r\n    for wrd in sub.split():\r\n      temp[wrd] += 1\r\n  res = max(temp, key=temp.get)\r\n  return (str(res)) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "most_occurrences(['UTS is best for RTF', 'RTF love UTS', 'UTS is best'])",
          "correct_output": "UTS"
        },
        {
          "input": "most_occurrences(['Its been a great year', 'this year is so worse', 'this year is okay'])",
          "correct_output": "year"
        },
        {
          "input": "most_occurrences(['Families can be reunited', 'people can be reunited', 'Tasks can be achieved '])",
          "correct_output": "can"
        }
      ],
      "broken_test_cases": [
        {
          "input": "most_occurrences(['UTS is best for RTF', 'RTF love UTS', 'UTS is best'])",
          "correct_output": "RTF"
        },
        {
          "input": "most_occurrences(['Its been a great year', 'this year is so worse', 'this year is okay'])",
          "correct_output": "this"
        },
        {
          "input": "most_occurrences(['Families can be reunited', 'people can be reunited', 'Tasks can be achieved '])",
          "correct_output": "reunited"
        }
      ]
    },
    {
      "problem_id": "mbpp_688",
      "description": "Write a function to get the length of a complex number.",
      "function_name": "len_complex",
      "correct_solution": "import cmath\r\ndef len_complex(a,b):\r\n  cn=complex(a,b)\r\n  length=abs(cn)\r\n  return length",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "len_complex(3, 4)",
          "correct_output": "5.0"
        },
        {
          "input": "len_complex(9, 10)",
          "correct_output": "13.45362404707371"
        },
        {
          "input": "len_complex(7, 9)",
          "correct_output": "11.40175425099138"
        }
      ],
      "broken_test_cases": [
        {
          "input": "len_complex(3, 4)",
          "correct_output": "10.0"
        },
        {
          "input": "len_complex(9, 10)",
          "correct_output": "10.0"
        },
        {
          "input": "len_complex(7, 9)",
          "correct_output": "10.0"
        }
      ]
    },
    {
      "problem_id": "mbpp_319",
      "description": "Write a function to find all five characters long word in the given string by using regex.",
      "function_name": "find_long_word",
      "correct_solution": "import re\r\ndef find_long_word(text):\r\n  return (re.findall(r\"\\b\\w{5}\\b\", text))",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "find_long_word('Please move back to strem')",
          "correct_output": "['strem']"
        },
        {
          "input": "find_long_word('4K Ultra HD streaming player')",
          "correct_output": "['Ultra']"
        },
        {
          "input": "find_long_word('Streaming Media Player')",
          "correct_output": "['Media']"
        }
      ],
      "broken_test_cases": [
        {
          "input": "find_long_word('Please move back to strem')",
          "correct_output": "['stream']"
        },
        {
          "input": "find_long_word('4K Ultra HD streaming player')",
          "correct_output": "['ultra']"
        },
        {
          "input": "find_long_word('Streaming Media Player')",
          "correct_output": "['Strea']"
        }
      ]
    },
    {
      "problem_id": "mbpp_107",
      "description": "Write a python function to count hexadecimal numbers for a given range.",
      "function_name": "count_Hexadecimal",
      "correct_solution": "def count_Hexadecimal(L,R) :  \r\n    count = 0;  \r\n    for i in range(L,R + 1) : \r\n        if (i >= 10 and i <= 15) : \r\n            count += 1;  \r\n        elif (i > 15) : \r\n            k = i;  \r\n            while (k != 0) :  \r\n                if (k % 16 >= 10) : \r\n                    count += 1;  \r\n                k = k // 16;  \r\n    return count;  ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "count_Hexadecimal(10, 15)",
          "correct_output": "6"
        },
        {
          "input": "count_Hexadecimal(2, 4)",
          "correct_output": "0"
        },
        {
          "input": "count_Hexadecimal(15, 16)",
          "correct_output": "1"
        }
      ],
      "broken_test_cases": [
        {
          "input": "count_Hexadecimal(10, 15)",
          "correct_output": "5"
        },
        {
          "input": "count_Hexadecimal(2, 4)",
          "correct_output": "1"
        },
        {
          "input": "count_Hexadecimal(15, 16)",
          "correct_output": "2"
        }
      ]
    },
    {
      "problem_id": "mbpp_874",
      "description": "Write a python function to check if the string is a concatenation of another string.",
      "function_name": "check_Concat",
      "correct_solution": "def check_Concat(str1,str2):\r\n    N = len(str1)\r\n    M = len(str2)\r\n    if (N % M != 0):\r\n        return False\r\n    for i in range(N):\r\n        if (str1[i] != str2[i % M]):\r\n            return False         \r\n    return True",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "check_Concat('abcabcabc', 'abc')",
          "correct_output": "True"
        },
        {
          "input": "check_Concat('abcab', 'abc')",
          "correct_output": "False"
        },
        {
          "input": "check_Concat('aba', 'ab')",
          "correct_output": "False"
        }
      ],
      "broken_test_cases": [
        {
          "input": "check_Concat('abcabcabc', 'abc')",
          "correct_output": "False"
        },
        {
          "input": "check_Concat('abcab', 'abc')",
          "correct_output": "True"
        },
        {
          "input": "check_Concat('aba', 'ab')",
          "correct_output": "True"
        }
      ]
    },
    {
      "problem_id": "mbpp_777",
      "description": "Write a python function to find the sum of non-repeated elements in a given array.",
      "function_name": "find_Sum",
      "correct_solution": "def find_Sum(arr,n): \r\n    arr.sort() \r\n    sum = arr[0] \r\n    for i in range(0,n-1): \r\n        if (arr[i] != arr[i+1]): \r\n            sum = sum + arr[i+1]   \r\n    return sum",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "find_Sum([1, 2, 3, 1, 1, 4, 5, 6], 8)",
          "correct_output": "21"
        },
        {
          "input": "find_Sum([1, 10, 9, 4, 2, 10, 10, 45, 4], 9)",
          "correct_output": "71"
        },
        {
          "input": "find_Sum([12, 10, 9, 45, 2, 10, 10, 45, 10], 9)",
          "correct_output": "78"
        }
      ],
      "broken_test_cases": [
        {
          "input": "find_Sum([1, 2, 3, 1, 1, 4, 5, 6], 8)",
          "correct_output": "20"
        },
        {
          "input": "find_Sum([1, 10, 9, 4, 2, 10, 10, 45, 4], 9)",
          "correct_output": "72"
        },
        {
          "input": "find_Sum([12, 10, 9, 45, 2, 10, 10, 45, 10], 9)",
          "correct_output": "79"
        }
      ]
    },
    {
      "problem_id": "mbpp_448",
      "description": "Write a function to calculate the sum of perrin numbers.",
      "function_name": "cal_sum",
      "correct_solution": "def cal_sum(n): \r\n\ta = 3\r\n\tb = 0\r\n\tc = 2\r\n\tif (n == 0): \r\n\t\treturn 3\r\n\tif (n == 1): \r\n\t\treturn 3\r\n\tif (n == 2): \r\n\t\treturn 5\r\n\tsum = 5\r\n\twhile (n > 2): \r\n\t\td = a + b \r\n\t\tsum = sum + d \r\n\t\ta = b \r\n\t\tb = c \r\n\t\tc = d \r\n\t\tn = n-1\r\n\treturn sum",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "cal_sum(9)",
          "correct_output": "49"
        },
        {
          "input": "cal_sum(10)",
          "correct_output": "66"
        },
        {
          "input": "cal_sum(11)",
          "correct_output": "88"
        }
      ],
      "broken_test_cases": [
        {
          "input": "cal_sum(9)",
          "correct_output": "50"
        },
        {
          "input": "cal_sum(10)",
          "correct_output": "67"
        },
        {
          "input": "cal_sum(11)",
          "correct_output": "87"
        }
      ]
    },
    {
      "problem_id": "mbpp_27",
      "description": "Write a python function to remove all digits from a list of strings.",
      "function_name": "remove",
      "correct_solution": "import re  \r\ndef remove(list): \r\n    pattern = '[0-9]'\r\n    list = [re.sub(pattern, '', i) for i in list] \r\n    return list",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "remove(['4words', '3letters', '4digits'])",
          "correct_output": "['words', 'letters', 'digits']"
        },
        {
          "input": "remove(['28Jan', '12Jan', '11Jan'])",
          "correct_output": "['Jan', 'Jan', 'Jan']"
        },
        {
          "input": "remove(['wonder1', 'wonder2', 'wonder3'])",
          "correct_output": "['wonder', 'wonder', 'wonder']"
        }
      ],
      "broken_test_cases": [
        {
          "input": "remove(['4words', '3letters', '4digits'])",
          "correct_output": "['words', 'letters', 'digits', '']"
        },
        {
          "input": "remove(['28Jan', '12Jan', '11Jan'])",
          "correct_output": "['28Jan', '12Jan', '11Jan']"
        },
        {
          "input": "remove(['wonder1', 'wonder2', 'wonder3'])",
          "correct_output": "['wonder1', 'wonder2', 'wonder3']"
        }
      ]
    },
    {
      "problem_id": "mbpp_567",
      "description": "Write a function to check whether a specified list is sorted or not.",
      "function_name": "issort_list",
      "correct_solution": "def issort_list(list1):\r\n    result = all(list1[i] <= list1[i+1] for i in range(len(list1)-1))\r\n    return result",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "issort_list([1, 2, 4, 6, 8, 10, 12, 14, 16, 17])",
          "correct_output": "True"
        },
        {
          "input": "issort_list([1, 2, 4, 6, 8, 10, 12, 14, 20, 17])",
          "correct_output": "False"
        },
        {
          "input": "issort_list([1, 2, 4, 6, 8, 10, 15, 14, 20])",
          "correct_output": "False"
        }
      ],
      "broken_test_cases": [
        {
          "input": "issort_list([1, 2, 4, 6, 8, 10, 12, 14, 16, 17])",
          "correct_output": "False"
        },
        {
          "input": "issort_list([1, 2, 4, 6, 8, 10, 12, 14, 20, 17])",
          "correct_output": "True"
        },
        {
          "input": "issort_list([1, 2, 4, 6, 8, 10, 15, 14, 20])",
          "correct_output": "True"
        }
      ]
    },
    {
      "problem_id": "mbpp_762",
      "description": "Write a function to check whether the given month number contains 30 days or not.",
      "function_name": "check_monthnumber_number",
      "correct_solution": "def check_monthnumber_number(monthnum3):\r\n  if(monthnum3==4 or monthnum3==6 or monthnum3==9 or monthnum3==11):\r\n    return True\r\n  else:\r\n    return False",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "check_monthnumber_number(6)",
          "correct_output": "True"
        },
        {
          "input": "check_monthnumber_number(2)",
          "correct_output": "False"
        },
        {
          "input": "check_monthnumber_number(12)",
          "correct_output": "False"
        }
      ],
      "broken_test_cases": [
        {
          "input": "check_monthnumber_number(6)",
          "correct_output": "False"
        },
        {
          "input": "check_monthnumber_number(2)",
          "correct_output": "True"
        },
        {
          "input": "check_monthnumber_number(12)",
          "correct_output": "True"
        }
      ]
    },
    {
      "problem_id": "mbpp_745",
      "description": "Write a function to find numbers within a given range where every number is divisible by every digit it contains.",
      "function_name": "divisible_by_digits",
      "correct_solution": "def divisible_by_digits(startnum, endnum):\r\n    return [n for n in range(startnum, endnum+1) \\\r\n                if not any(map(lambda x: int(x) == 0 or n%int(x) != 0, str(n)))]",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "divisible_by_digits(1, 22)",
          "correct_output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15, 22]"
        },
        {
          "input": "divisible_by_digits(1, 15)",
          "correct_output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]"
        },
        {
          "input": "divisible_by_digits(20, 25)",
          "correct_output": "[22, 24]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "divisible_by_digits(1, 22)",
          "correct_output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 15]"
        },
        {
          "input": "divisible_by_digits(1, 15)",
          "correct_output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 11, 12, 14, 15]"
        },
        {
          "input": "divisible_by_digits(20, 25)",
          "correct_output": "[20, 21, 22, 23, 24, 25]"
        }
      ]
    },
    {
      "problem_id": "mbpp_921",
      "description": "Write a function to perform chunking of tuples each of size n.",
      "function_name": "chunk_tuples",
      "correct_solution": "def chunk_tuples(test_tup, N):\r\n  res = [test_tup[i : i + N] for i in range(0, len(test_tup), N)]\r\n  return (res) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "chunk_tuples((10, 4, 5, 6, 7, 6, 8, 3, 4), 3)",
          "correct_output": "[(10, 4, 5), (6, 7, 6), (8, 3, 4)]"
        },
        {
          "input": "chunk_tuples((1, 2, 3, 4, 5, 6, 7, 8, 9), 2)",
          "correct_output": "[(1, 2), (3, 4), (5, 6), (7, 8), (9,)]"
        },
        {
          "input": "chunk_tuples((11, 14, 16, 17, 19, 21, 22, 25), 4)",
          "correct_output": "[(11, 14, 16, 17), (19, 21, 22, 25)]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "chunk_tuples((10, 4, 5, 6, 7, 6, 8, 3, 4), 3)",
          "correct_output": "[(10, 4, 5), (6, 7, 6), (8, 3)]"
        },
        {
          "input": "chunk_tuples((1, 2, 3, 4, 5, 6, 7, 8, 9), 2)",
          "correct_output": "[(1, 2), (3, 4), (5, 6), (7, 8), (9, 9)]"
        },
        {
          "input": "chunk_tuples((11, 14, 16, 17, 19, 21, 22, 25), 4)",
          "correct_output": "[(11, 14, 16, 17), (19, 21, 22, 25), (25,)]"
        }
      ]
    },
    {
      "problem_id": "mbpp_782",
      "description": "Write a python function to find the sum of all odd length subarrays.",
      "function_name": "Odd_Length_Sum",
      "correct_solution": "def Odd_Length_Sum(arr):\r\n    Sum = 0\r\n    l = len(arr)\r\n    for i in range(l):\r\n        Sum += ((((i + 1) *(l - i) + 1) // 2) * arr[i])\r\n    return Sum",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "Odd_Length_Sum([1, 2, 4])",
          "correct_output": "14"
        },
        {
          "input": "Odd_Length_Sum([1, 2, 1, 2])",
          "correct_output": "15"
        },
        {
          "input": "Odd_Length_Sum([1, 7])",
          "correct_output": "8"
        }
      ],
      "broken_test_cases": [
        {
          "input": "Odd_Length_Sum([1, 2, 4])",
          "correct_output": "15"
        },
        {
          "input": "Odd_Length_Sum([1, 2, 1, 2])",
          "correct_output": "14"
        },
        {
          "input": "Odd_Length_Sum([1, 7])",
          "correct_output": "7"
        }
      ]
    },
    {
      "problem_id": "mbpp_804",
      "description": "Write a python function to check whether the product of numbers is even or not.",
      "function_name": "is_Product_Even",
      "correct_solution": "def is_Product_Even(arr,n): \r\n    for i in range(0,n): \r\n        if ((arr[i] & 1) == 0): \r\n            return True\r\n    return False",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "is_Product_Even([1, 2, 3], 3)",
          "correct_output": "True"
        },
        {
          "input": "is_Product_Even([1, 2, 1, 4], 4)",
          "correct_output": "True"
        },
        {
          "input": "is_Product_Even([1, 1], 2)",
          "correct_output": "False"
        }
      ],
      "broken_test_cases": [
        {
          "input": "is_Product_Even([1, 2, 3], 3)",
          "correct_output": "False"
        },
        {
          "input": "is_Product_Even([1, 2, 1, 4], 4)",
          "correct_output": "False"
        },
        {
          "input": "is_Product_Even([1, 1], 2)",
          "correct_output": "True"
        }
      ]
    },
    {
      "problem_id": "mbpp_616",
      "description": "Write a function to perfom the modulo of tuple elements in the given two tuples.",
      "function_name": "tuple_modulo",
      "correct_solution": "def tuple_modulo(test_tup1, test_tup2):\r\n  res = tuple(ele1 % ele2 for ele1, ele2 in zip(test_tup1, test_tup2)) \r\n  return (res) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5))",
          "correct_output": "(0, 4, 5, 1)"
        },
        {
          "input": "tuple_modulo((11, 5, 6, 7), (6, 7, 8, 6))",
          "correct_output": "(5, 5, 6, 1)"
        },
        {
          "input": "tuple_modulo((12, 6, 7, 8), (7, 8, 9, 7))",
          "correct_output": "(5, 6, 7, 1)"
        }
      ],
      "broken_test_cases": [
        {
          "input": "tuple_modulo((10, 4, 5, 6), (5, 6, 7, 5))",
          "correct_output": "(0, 4, 4, 1)"
        },
        {
          "input": "tuple_modulo((11, 5, 6, 7), (6, 7, 8, 6))",
          "correct_output": "(5, 6, 6, 1)"
        },
        {
          "input": "tuple_modulo((12, 6, 7, 8), (7, 8, 9, 7))",
          "correct_output": "(6, 6, 7, 2)"
        }
      ]
    },
    {
      "problem_id": "mbpp_781",
      "description": "Write a python function to check whether the count of divisors is even or odd.",
      "function_name": "count_Divisors",
      "correct_solution": "import math \r\ndef count_Divisors(n) : \r\n    count = 0\r\n    for i in range(1, (int)(math.sqrt(n)) + 2) : \r\n        if (n % i == 0) : \r\n            if( n // i == i) : \r\n                count = count + 1\r\n            else : \r\n                count = count + 2\r\n    if (count % 2 == 0) : \r\n        return (\"Even\") \r\n    else : \r\n        return (\"Odd\") ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "count_Divisors(10)",
          "correct_output": "Even"
        },
        {
          "input": "count_Divisors(100)",
          "correct_output": "Odd"
        },
        {
          "input": "count_Divisors(125)",
          "correct_output": "Even"
        }
      ],
      "broken_test_cases": [
        {
          "input": "count_Divisors(10)",
          "correct_output": "Odd"
        },
        {
          "input": "count_Divisors(100)",
          "correct_output": "Even"
        },
        {
          "input": "count_Divisors(125)",
          "correct_output": "Odd"
        }
      ]
    },
    {
      "problem_id": "mbpp_13",
      "description": "Write a function to count the most common words in a dictionary.",
      "function_name": "count_common",
      "correct_solution": "from collections import Counter\r\ndef count_common(words):\r\n  word_counts = Counter(words)\r\n  top_four = word_counts.most_common(4)\r\n  return (top_four)\r\n",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "count_common(['red', 'green', 'black', 'pink', 'black', 'white', 'black', 'eyes', 'white', 'black', 'orange', 'pink', 'pink', 'red', 'red', 'white', 'orange', 'white', 'black', 'pink', 'green', 'green', 'pink', 'green', 'pink', 'white', 'orange', 'orange', 'red'])",
          "correct_output": "[('pink', 6), ('black', 5), ('white', 5), ('red', 4)]"
        },
        {
          "input": "count_common(['one', 'two', 'three', 'four', 'five', 'one', 'two', 'one', 'three', 'one'])",
          "correct_output": "[('one', 4), ('two', 2), ('three', 2), ('four', 1)]"
        },
        {
          "input": "count_common(['Facebook', 'Apple', 'Amazon', 'Netflix', 'Google', 'Apple', 'Netflix', 'Amazon'])",
          "correct_output": "[('Apple', 2), ('Amazon', 2), ('Netflix', 2), ('Facebook', 1)]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "count_common(['red', 'green', 'black', 'pink', 'black', 'white', 'black', 'eyes', 'white', 'black', 'orange', 'pink', 'pink', 'red', 'red', 'white', 'orange', 'white', 'black', 'pink', 'green', 'green', 'pink', 'green', 'pink', 'white', 'orange', 'orange', 'red'])",
          "correct_output": "[('black', 6), ('pink', 6), ('white', 5), ('red', 4)]"
        },
        {
          "input": "count_common(['one', 'two', 'three', 'four', 'five', 'one', 'two', 'one', 'three', 'one'])",
          "correct_output": "[('one', 3), ('two', 2), ('three', 2), ('five', 1)]"
        },
        {
          "input": "count_common(['Facebook', 'Apple', 'Amazon', 'Netflix', 'Google', 'Apple', 'Netflix', 'Amazon'])",
          "correct_output": "[('Apple', 2), ('Amazon', 2), ('Netflix', 2), ('Facebook', 2)]"
        }
      ]
    },
    {
      "problem_id": "mbpp_746",
      "description": "Write a function to find area of a sector.",
      "function_name": "sector_area",
      "correct_solution": "def sector_area(r,a):\r\n    pi=22/7\r\n    if a >= 360:\r\n        return None\r\n    sectorarea = (pi*r**2) * (a/360)\r\n    return sectorarea",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "sector_area(4, 45)",
          "correct_output": "6.285714285714286"
        },
        {
          "input": "sector_area(9, 45)",
          "correct_output": "31.82142857142857"
        },
        {
          "input": "sector_area(9, 360)",
          "correct_output": "None"
        }
      ],
      "broken_test_cases": [
        {
          "input": "sector_area(4, 45)",
          "correct_output": "7.285714285714286"
        },
        {
          "input": "sector_area(9, 45)",
          "correct_output": "20.54545454545455"
        },
        {
          "input": "sector_area(9, 360)",
          "correct_output": "201.06283185307264"
        }
      ]
    },
    {
      "problem_id": "mbpp_457",
      "description": "Write a python function to find the sublist having minimum length.",
      "function_name": "Find_Min",
      "correct_solution": "def Find_Min(lst): \r\n    minList = min((x) for x in lst) \r\n    return minList",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "Find_Min([[1], [1, 2], [1, 2, 3]])",
          "correct_output": "[1]"
        },
        {
          "input": "Find_Min([[1, 1], [1, 1, 1], [1, 2, 7, 8]])",
          "correct_output": "[1, 1]"
        },
        {
          "input": "Find_Min([['x'], ['x', 'y'], ['x', 'y', 'z']])",
          "correct_output": "['x']"
        }
      ],
      "broken_test_cases": [
        {
          "input": "Find_Min([[1], [1, 2], [1, 2, 3]])",
          "correct_output": "[1, 2]"
        },
        {
          "input": "Find_Min([[1, 1], [1, 1, 1], [1, 2, 7, 8]])",
          "correct_output": "[1, 2, 7, 8]"
        },
        {
          "input": "Find_Min([['x'], ['x', 'y'], ['x', 'y', 'z']])",
          "correct_output": "['x', 'y']"
        }
      ]
    },
    {
      "problem_id": "mbpp_951",
      "description": "Write a function to find the maximum of similar indices in two lists of tuples.",
      "function_name": "max_similar_indices",
      "correct_solution": "def max_similar_indices(test_list1, test_list2):\r\n  res = [(max(x[0], y[0]), max(x[1], y[1]))\r\n   for x, y in zip(test_list1, test_list2)]\r\n  return (res) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "max_similar_indices([(2, 4), (6, 7), (5, 1)], [(5, 4), (8, 10), (8, 14)])",
          "correct_output": "[(5, 4), (8, 10), (8, 14)]"
        },
        {
          "input": "max_similar_indices([(3, 5), (7, 8), (6, 2)], [(6, 5), (9, 11), (9, 15)])",
          "correct_output": "[(6, 5), (9, 11), (9, 15)]"
        },
        {
          "input": "max_similar_indices([(4, 6), (8, 9), (7, 3)], [(7, 6), (10, 12), (10, 16)])",
          "correct_output": "[(7, 6), (10, 12), (10, 16)]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "max_similar_indices([(2, 4), (6, 7), (5, 1)], [(5, 4), (8, 10), (8, 14)])",
          "correct_output": "[(2, 4), (6, 7), (5, 1)]"
        },
        {
          "input": "max_similar_indices([(3, 5), (7, 8), (6, 2)], [(6, 5), (9, 11), (9, 15)])",
          "correct_output": "[(3, 5), (7, 8), (6, 2)]"
        },
        {
          "input": "max_similar_indices([(4, 6), (8, 9), (7, 3)], [(7, 6), (10, 12), (10, 16)])",
          "correct_output": "[(4, 6), (8, 9), (7, 3)]"
        }
      ]
    },
    {
      "problem_id": "mbpp_798",
      "description": "Write a python function to find the sum of an array.",
      "function_name": "_sum",
      "correct_solution": "def _sum(arr):  \r\n    sum=0\r\n    for i in arr: \r\n        sum = sum + i      \r\n    return(sum)  ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "_sum([1, 2, 3])",
          "correct_output": "6"
        },
        {
          "input": "_sum([15, 12, 13, 10])",
          "correct_output": "50"
        },
        {
          "input": "_sum([0, 1, 2])",
          "correct_output": "3"
        }
      ],
      "broken_test_cases": [
        {
          "input": "_sum([1, 2, 3])",
          "correct_output": "5"
        },
        {
          "input": "_sum([15, 12, 13, 10])",
          "correct_output": "49"
        },
        {
          "input": "_sum([0, 1, 2])",
          "correct_output": "4"
        }
      ]
    },
    {
      "problem_id": "mbpp_578",
      "description": "Write a function to interleave lists of the same length.",
      "function_name": "interleave_lists",
      "correct_solution": "def interleave_lists(list1,list2,list3):\r\n    result = [el for pair in zip(list1, list2, list3) for el in pair]\r\n    return result",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "interleave_lists([1, 2, 3, 4, 5, 6, 7], [10, 20, 30, 40, 50, 60, 70], [100, 200, 300, 400, 500, 600, 700])",
          "correct_output": "[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70, 700]"
        },
        {
          "input": "interleave_lists([10, 20], [15, 2], [5, 10])",
          "correct_output": "[10, 15, 5, 20, 2, 10]"
        },
        {
          "input": "interleave_lists([11, 44], [10, 15], [20, 5])",
          "correct_output": "[11, 10, 20, 44, 15, 5]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "interleave_lists([1, 2, 3, 4, 5, 6, 7], [10, 20, 30, 40, 50, 60, 70], [100, 200, 300, 400, 500, 600, 700])",
          "correct_output": "[1, 10, 100, 2, 20, 200, 3, 30, 300, 4, 40, 400, 5, 50, 500, 6, 60, 600, 7, 70]"
        },
        {
          "input": "interleave_lists([10, 20], [15, 2], [5, 10])",
          "correct_output": "[10, 15, 5, 20, 2, 15]"
        },
        {
          "input": "interleave_lists([11, 44], [10, 15], [20, 5])",
          "correct_output": "[11, 10, 5, 44, 15, 20]"
        }
      ]
    },
    {
      "problem_id": "mbpp_464",
      "description": "Write a function to check if all values are same in a dictionary.",
      "function_name": "check_value",
      "correct_solution": "def check_value(dict, n):\r\n    result = all(x == n for x in dict.values()) \r\n    return result",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12}, 10)",
          "correct_output": "False"
        },
        {
          "input": "check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12}, 12)",
          "correct_output": "True"
        },
        {
          "input": "check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12}, 5)",
          "correct_output": "False"
        }
      ],
      "broken_test_cases": [
        {
          "input": "check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12}, 10)",
          "correct_output": "True"
        },
        {
          "input": "check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12}, 12)",
          "correct_output": "False"
        },
        {
          "input": "check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12}, 5)",
          "correct_output": "True"
        }
      ]
    },
    {
      "problem_id": "mbpp_484",
      "description": "Write a function to remove the matching tuples from the given two tuples.",
      "function_name": "remove_matching_tuple",
      "correct_solution": "def remove_matching_tuple(test_list1, test_list2):\r\n  res = [sub for sub in test_list1 if sub not in test_list2]\r\n  return (res) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')])",
          "correct_output": "[('you', '?')]"
        },
        {
          "input": "remove_matching_tuple([('Part', 'of'), ('the', 'journey'), ('is ', 'end')], [('Journey', 'the'), ('is', 'end')])",
          "correct_output": "[('Part', 'of'), ('the', 'journey'), ('is ', 'end')]"
        },
        {
          "input": "remove_matching_tuple([('Its', 'been'), ('a', 'long'), ('day', 'without')], [('a', 'long'), ('my', 'friend')])",
          "correct_output": "[('Its', 'been'), ('day', 'without')]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')])",
          "correct_output": "[('Hello', 'dude'), ('How', 'are'), ('you', '?')]"
        },
        {
          "input": "remove_matching_tuple([('Part', 'of'), ('the', 'journey'), ('is ', 'end')], [('Journey', 'the'), ('is', 'end')])",
          "correct_output": "[('Part', 'of'), ('the', 'journey')]"
        },
        {
          "input": "remove_matching_tuple([('Its', 'been'), ('a', 'long'), ('day', 'without')], [('a', 'long'), ('my', 'friend')])",
          "correct_output": "[('Its', 'been'), ('a', 'long'), ('day', 'without'), ('my', 'friend')]"
        }
      ]
    },
    {
      "problem_id": "mbpp_544",
      "description": "Write a function to flatten the tuple list to a string.",
      "function_name": "flatten_tuple",
      "correct_solution": "def flatten_tuple(test_list):\r\n  res = ' '.join([idx for tup in test_list for idx in tup])\r\n  return (res) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "flatten_tuple([('1', '4', '6'), ('5', '8'), ('2', '9'), ('1', '10')])",
          "correct_output": "1 4 6 5 8 2 9 1 10"
        },
        {
          "input": "flatten_tuple([('2', '3', '4'), ('6', '9'), ('3', '2'), ('2', '11')])",
          "correct_output": "2 3 4 6 9 3 2 2 11"
        },
        {
          "input": "flatten_tuple([('14', '21', '9'), ('24', '19'), ('12', '29'), ('23', '17')])",
          "correct_output": "14 21 9 24 19 12 29 23 17"
        }
      ],
      "broken_test_cases": [
        {
          "input": "flatten_tuple([('1', '4', '6'), ('5', '8'), ('2', '9'), ('1', '10')])",
          "correct_output": "1 4 6 5 8 2 9 1 10 11"
        },
        {
          "input": "flatten_tuple([('2', '3', '4'), ('6', '9'), ('3', '2'), ('2', '11')])",
          "correct_output": "2 3 4 6 9 3 2 2 11 10"
        },
        {
          "input": "flatten_tuple([('14', '21', '9'), ('24', '19'), ('12', '29'), ('23', '17')])",
          "correct_output": "14 21 9 24 19 12 29 23 17 0"
        }
      ]
    },
    {
      "problem_id": "mbpp_831",
      "description": "Write a python function to count equal element pairs from the given array.",
      "function_name": "count_Pairs",
      "correct_solution": "def count_Pairs(arr,n): \r\n    cnt = 0; \r\n    for i in range(n): \r\n        for j in range(i + 1,n): \r\n            if (arr[i] == arr[j]): \r\n                cnt += 1; \r\n    return cnt; ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "count_Pairs([1, 1, 1, 1], 4)",
          "correct_output": "6"
        },
        {
          "input": "count_Pairs([1, 5, 1], 3)",
          "correct_output": "1"
        },
        {
          "input": "count_Pairs([3, 2, 1, 7, 8, 9], 6)",
          "correct_output": "0"
        }
      ],
      "broken_test_cases": [
        {
          "input": "count_Pairs([1, 1, 1, 1], 4)",
          "correct_output": "5"
        },
        {
          "input": "count_Pairs([1, 5, 1], 3)",
          "correct_output": "2"
        },
        {
          "input": "count_Pairs([3, 2, 1, 7, 8, 9], 6)",
          "correct_output": "1"
        }
      ]
    },
    {
      "problem_id": "mbpp_622",
      "description": "Write a function to find the median of two sorted arrays of same size.",
      "function_name": "get_median",
      "correct_solution": "def get_median(arr1, arr2, n):\r\n  i = 0\r\n  j = 0\r\n  m1 = -1\r\n  m2 = -1\r\n  count = 0\r\n  while count < n + 1:\r\n    count += 1\r\n    if i == n:\r\n      m1 = m2\r\n      m2 = arr2[0]\r\n      break\r\n    elif j == n:\r\n      m1 = m2\r\n      m2 = arr1[0]\r\n      break\r\n    if arr1[i] <= arr2[j]:\r\n      m1 = m2\r\n      m2 = arr1[i]\r\n      i += 1\r\n    else:\r\n      m1 = m2\r\n      m2 = arr2[j]\r\n      j += 1\r\n  return (m1 + m2)/2",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5)",
          "correct_output": "16.0"
        },
        {
          "input": "get_median([2, 4, 8, 9], [7, 13, 19, 28], 4)",
          "correct_output": "8.5"
        },
        {
          "input": "get_median([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6)",
          "correct_output": "25.0"
        }
      ],
      "broken_test_cases": [
        {
          "input": "get_median([1, 12, 15, 26, 38], [2, 13, 17, 30, 45], 5)",
          "correct_output": "17.0"
        },
        {
          "input": "get_median([2, 4, 8, 9], [7, 13, 19, 28], 4)",
          "correct_output": "9.0"
        },
        {
          "input": "get_median([3, 6, 14, 23, 36, 42], [2, 18, 27, 39, 49, 55], 6)",
          "correct_output": "24.0"
        }
      ]
    },
    {
      "problem_id": "mbpp_735",
      "description": "Write a python function to toggle bits of the number except the first and the last bit.",
      "function_name": "toggle_middle_bits",
      "correct_solution": "def set_middle_bits(n):  \r\n    n |= n >> 1; \r\n    n |= n >> 2; \r\n    n |= n >> 4; \r\n    n |= n >> 8; \r\n    n |= n >> 16;  \r\n    return (n >> 1) ^ 1\r\ndef toggle_middle_bits(n): \r\n    if (n == 1): \r\n        return 1\r\n    return n ^ set_middle_bits(n) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "toggle_middle_bits(9)",
          "correct_output": "15"
        },
        {
          "input": "toggle_middle_bits(10)",
          "correct_output": "12"
        },
        {
          "input": "toggle_middle_bits(11)",
          "correct_output": "13"
        }
      ],
      "broken_test_cases": [
        {
          "input": "toggle_middle_bits(9)",
          "correct_output": "14"
        },
        {
          "input": "toggle_middle_bits(10)",
          "correct_output": "14"
        },
        {
          "input": "toggle_middle_bits(11)",
          "correct_output": "12"
        }
      ]
    },
    {
      "problem_id": "mbpp_309",
      "description": "Write a python function to find the maximum of two numbers.",
      "function_name": "maximum",
      "correct_solution": "def maximum(a,b):   \r\n    if a >= b: \r\n        return a \r\n    else: \r\n        return b ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "maximum(5, 10)",
          "correct_output": "10"
        },
        {
          "input": "maximum(-1, -2)",
          "correct_output": "-1"
        },
        {
          "input": "maximum(9, 7)",
          "correct_output": "9"
        }
      ],
      "broken_test_cases": [
        {
          "input": "maximum(5, 10)",
          "correct_output": "5"
        },
        {
          "input": "maximum(-1, -2)",
          "correct_output": "0"
        },
        {
          "input": "maximum(9, 7)",
          "correct_output": "7"
        }
      ]
    },
    {
      "problem_id": "mbpp_886",
      "description": "Write a function to add all the numbers in a list and divide it with the length of the list.",
      "function_name": "sum_num",
      "correct_solution": "def sum_num(numbers):\r\n    total = 0\r\n    for x in numbers:\r\n        total += x\r\n    return total/len(numbers) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "sum_num((8, 2, 3, 0, 7))",
          "correct_output": "4.0"
        },
        {
          "input": "sum_num((-10, -20, -30))",
          "correct_output": "-20.0"
        },
        {
          "input": "sum_num((19, 15, 18))",
          "correct_output": "17.333333333333332"
        }
      ],
      "broken_test_cases": [
        {
          "input": "sum_num((8, 2, 3, 0, 7))",
          "correct_output": "3.9"
        },
        {
          "input": "sum_num((-10, -20, -30))",
          "correct_output": "-19.0"
        },
        {
          "input": "sum_num((19, 15, 18))",
          "correct_output": "30.0"
        }
      ]
    },
    {
      "problem_id": "mbpp_888",
      "description": "Write a function to substract the elements of the given nested tuples.",
      "function_name": "substract_elements",
      "correct_solution": "def substract_elements(test_tup1, test_tup2):\r\n  res = tuple(tuple(a - b for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "substract_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3)))",
          "correct_output": "((-5, -4), (1, -4), (1, 8), (-6, 7))"
        },
        {
          "input": "substract_elements(((13, 4), (14, 6), (13, 10), (12, 11)), ((19, 8), (14, 10), (12, 2), (18, 4)))",
          "correct_output": "((-6, -4), (0, -4), (1, 8), (-6, 7))"
        },
        {
          "input": "substract_elements(((19, 5), (18, 7), (19, 11), (17, 12)), ((12, 9), (17, 11), (13, 3), (19, 5)))",
          "correct_output": "((7, -4), (1, -4), (6, 8), (-2, 7))"
        }
      ],
      "broken_test_cases": [
        {
          "input": "substract_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3)))",
          "correct_output": "((-5, -4), (1, -4), (1, 8), (-6, 8))"
        },
        {
          "input": "substract_elements(((13, 4), (14, 6), (13, 10), (12, 11)), ((19, 8), (14, 10), (12, 2), (18, 4)))",
          "correct_output": "((-6, -4), (0, -4), (1, 8), (-6, 6))"
        },
        {
          "input": "substract_elements(((19, 5), (18, 7), (19, 11), (17, 12)), ((12, 9), (17, 11), (13, 3), (19, 5)))",
          "correct_output": "((7, -4), (1, -4), (6, 8))"
        }
      ]
    },
    {
      "problem_id": "mbpp_588",
      "description": "Write a python function to find the difference between largest and smallest value in a given array.",
      "function_name": "big_diff",
      "correct_solution": "def big_diff(nums):\r\n     diff= max(nums)-min(nums)\r\n     return diff",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "big_diff([1, 2, 3, 4])",
          "correct_output": "3"
        },
        {
          "input": "big_diff([4, 5, 12])",
          "correct_output": "8"
        },
        {
          "input": "big_diff([9, 2, 3])",
          "correct_output": "7"
        }
      ],
      "broken_test_cases": [
        {
          "input": "big_diff([1, 2, 3, 4])",
          "correct_output": "4"
        },
        {
          "input": "big_diff([4, 5, 12])",
          "correct_output": "3"
        },
        {
          "input": "big_diff([9, 2, 3])",
          "correct_output": "6"
        }
      ]
    },
    {
      "problem_id": "mbpp_749",
      "description": "Write a function to sort a given list of strings of numbers numerically.",
      "function_name": "sort_numeric_strings",
      "correct_solution": "def sort_numeric_strings(nums_str):\r\n    result = [int(x) for x in nums_str]\r\n    result.sort()\r\n    return result",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "sort_numeric_strings(['4', '12', '45', '7', '0', '100', '200', '-12', '-500'])",
          "correct_output": "[-500, -12, 0, 4, 7, 12, 45, 100, 200]"
        },
        {
          "input": "sort_numeric_strings(['2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'])",
          "correct_output": "[1, 1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9]"
        },
        {
          "input": "sort_numeric_strings(['1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'])",
          "correct_output": "[1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "sort_numeric_strings(['4', '12', '45', '7', '0', '100', '200', '-12', '-500'])",
          "correct_output": "[-500, -12, 0, 4, 7, 12, 45, 100, 201]"
        },
        {
          "input": "sort_numeric_strings(['2', '3', '8', '4', '7', '9', '8', '2', '6', '5', '1', '6', '1', '2', '3', '4', '6', '9', '1', '2'])",
          "correct_output": "[1, 1, 2, 2, 2, 2, 3, 3, 4, 4, 5, 6, 6, 6, 7, 8, 8, 9, 9, 1]"
        },
        {
          "input": "sort_numeric_strings(['1', '3', '5', '7', '1', '3', '13', '15', '17', '5', '7 ', '9', '1', '11'])",
          "correct_output": "[1, 1, 1, 3, 3, 5, 5, 7, 7, 9, 11, 13, 15, 17, 20]"
        }
      ]
    },
    {
      "problem_id": "mbpp_872",
      "description": "Write a function to check if a nested list is a subset of another nested list.",
      "function_name": "check_subset",
      "correct_solution": "def check_subset(list1,list2): \r\n    return all(map(list1.__contains__,list2)) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "check_subset([[1, 3], [5, 7], [9, 11], [13, 15, 17]], [[1, 3], [13, 15, 17]])",
          "correct_output": "True"
        },
        {
          "input": "check_subset([[1, 2], [2, 3], [3, 4], [5, 6]], [[3, 4], [5, 6]])",
          "correct_output": "True"
        },
        {
          "input": "check_subset([[[1, 2], [2, 3]], [[3, 4], [5, 7]]], [[[3, 4], [5, 6]]])",
          "correct_output": "False"
        }
      ],
      "broken_test_cases": [
        {
          "input": "check_subset([[1, 3], [5, 7], [9, 11], [13, 15, 17]], [[1, 3], [13, 15, 17]])",
          "correct_output": "False"
        },
        {
          "input": "check_subset([[1, 2], [2, 3], [3, 4], [5, 6]], [[3, 4], [5, 6]])",
          "correct_output": "False"
        },
        {
          "input": "check_subset([[[1, 2], [2, 3]], [[3, 4], [5, 7]]], [[[3, 4], [5, 6]]])",
          "correct_output": "True"
        }
      ]
    },
    {
      "problem_id": "mbpp_679",
      "description": "Write a function to access dictionary key\u2019s element by index.",
      "function_name": "access_key",
      "correct_solution": "def access_key(ditionary,key):\r\n  return list(ditionary)[key]",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "access_key({'physics': 80, 'math': 90, 'chemistry': 86}, 0)",
          "correct_output": "physics"
        },
        {
          "input": "access_key({'python': 10, 'java': 20, 'C++': 30}, 2)",
          "correct_output": "C++"
        },
        {
          "input": "access_key({'program': 15, 'computer': 45}, 1)",
          "correct_output": "computer"
        }
      ],
      "broken_test_cases": [
        {
          "input": "access_key({'physics': 80, 'math': 90, 'chemistry': 86}, 0)",
          "correct_output": "math"
        },
        {
          "input": "access_key({'python': 10, 'java': 20, 'C++': 30}, 2)",
          "correct_output": "python"
        },
        {
          "input": "access_key({'program': 15, 'computer': 45}, 1)",
          "correct_output": "program"
        }
      ]
    },
    {
      "problem_id": "mbpp_654",
      "description": "Write a function to find the perimeter of a rectangle.",
      "function_name": "rectangle_perimeter",
      "correct_solution": "def rectangle_perimeter(l,b):\r\n  perimeter=2*(l+b)\r\n  return perimeter",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "rectangle_perimeter(10, 20)",
          "correct_output": "60"
        },
        {
          "input": "rectangle_perimeter(10, 5)",
          "correct_output": "30"
        },
        {
          "input": "rectangle_perimeter(4, 2)",
          "correct_output": "12"
        }
      ],
      "broken_test_cases": [
        {
          "input": "rectangle_perimeter(10, 20)",
          "correct_output": "40"
        },
        {
          "input": "rectangle_perimeter(10, 5)",
          "correct_output": "40"
        },
        {
          "input": "rectangle_perimeter(4, 2)",
          "correct_output": "10"
        }
      ]
    },
    {
      "problem_id": "mbpp_502",
      "description": "Write a python function to find remainder of two numbers.",
      "function_name": "find",
      "correct_solution": "def find(n,m):\r\n  r = n%m\r\n  return (r)",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "find(3, 3)",
          "correct_output": "0"
        },
        {
          "input": "find(10, 3)",
          "correct_output": "1"
        },
        {
          "input": "find(16, 5)",
          "correct_output": "1"
        }
      ],
      "broken_test_cases": [
        {
          "input": "find(3, 3)",
          "correct_output": "1"
        },
        {
          "input": "find(10, 3)",
          "correct_output": "2"
        },
        {
          "input": "find(16, 5)",
          "correct_output": "2"
        }
      ]
    },
    {
      "problem_id": "mbpp_581",
      "description": "Write a python function to find the surface area of the square pyramid.",
      "function_name": "surface_Area",
      "correct_solution": "def surface_Area(b,s): \r\n    return 2 * b * s + pow(b,2) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "surface_Area(3, 4)",
          "correct_output": "33"
        },
        {
          "input": "surface_Area(4, 5)",
          "correct_output": "56"
        },
        {
          "input": "surface_Area(1, 2)",
          "correct_output": "5"
        }
      ],
      "broken_test_cases": [
        {
          "input": "surface_Area(3, 4)",
          "correct_output": "30"
        },
        {
          "input": "surface_Area(4, 5)",
          "correct_output": "57"
        },
        {
          "input": "surface_Area(1, 2)",
          "correct_output": "10"
        }
      ]
    },
    {
      "problem_id": "mbpp_427",
      "description": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format by using regex.",
      "function_name": "change_date_format",
      "correct_solution": "import re\r\ndef change_date_format(dt):\r\n        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "change_date_format('2026-01-02')",
          "correct_output": "02-01-2026"
        },
        {
          "input": "change_date_format('2020-11-13')",
          "correct_output": "13-11-2020"
        },
        {
          "input": "change_date_format('2021-04-26')",
          "correct_output": "26-04-2021"
        }
      ],
      "broken_test_cases": [
        {
          "input": "change_date_format('2026-01-02')",
          "correct_output": "02-01-2027"
        },
        {
          "input": "change_date_format('2020-11-13')",
          "correct_output": "13-11-2021"
        },
        {
          "input": "change_date_format('2021-04-26')",
          "correct_output": "26-04-2020"
        }
      ]
    },
    {
      "problem_id": "mbpp_848",
      "description": "Write a function to find the area of a trapezium.",
      "function_name": "area_trapezium",
      "correct_solution": "def area_trapezium(base1,base2,height):\r\n area = 0.5 * (base1 + base2) * height\r\n return area",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "area_trapezium(6, 9, 4)",
          "correct_output": "30"
        },
        {
          "input": "area_trapezium(10, 20, 30)",
          "correct_output": "450"
        },
        {
          "input": "area_trapezium(15, 25, 35)",
          "correct_output": "700"
        }
      ],
      "broken_test_cases": [
        {
          "input": "area_trapezium(6, 9, 4)",
          "correct_output": "31"
        },
        {
          "input": "area_trapezium(10, 20, 30)",
          "correct_output": "451"
        },
        {
          "input": "area_trapezium(15, 25, 35)",
          "correct_output": "600"
        }
      ]
    },
    {
      "problem_id": "mbpp_366",
      "description": "Write a python function to find the largest product of the pair of adjacent elements from a given list of integers.",
      "function_name": "adjacent_num_product",
      "correct_solution": "def adjacent_num_product(list_nums):\r\n    return max(a*b for a, b in zip(list_nums, list_nums[1:]))",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "adjacent_num_product([1, 2, 3, 4, 5, 6])",
          "correct_output": "30"
        },
        {
          "input": "adjacent_num_product([1, 2, 3, 4, 5])",
          "correct_output": "20"
        },
        {
          "input": "adjacent_num_product([2, 3])",
          "correct_output": "6"
        }
      ],
      "broken_test_cases": [
        {
          "input": "adjacent_num_product([1, 2, 3, 4, 5, 6])",
          "correct_output": "25"
        },
        {
          "input": "adjacent_num_product([1, 2, 3, 4, 5])",
          "correct_output": "30"
        },
        {
          "input": "adjacent_num_product([2, 3])",
          "correct_output": "5"
        }
      ]
    },
    {
      "problem_id": "mbpp_891",
      "description": "Write a python function to check whether the given two numbers have same number of digits or not.",
      "function_name": "same_Length",
      "correct_solution": "def same_Length(A,B): \r\n    while (A > 0 and B > 0): \r\n        A = A / 10; \r\n        B = B / 10; \r\n    if (A == 0 and B == 0): \r\n        return True; \r\n    return False; ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "same_Length(12, 1)",
          "correct_output": "False"
        },
        {
          "input": "same_Length(2, 2)",
          "correct_output": "True"
        },
        {
          "input": "same_Length(10, 20)",
          "correct_output": "True"
        }
      ],
      "broken_test_cases": [
        {
          "input": "same_Length(12, 1)",
          "correct_output": "True"
        },
        {
          "input": "same_Length(2, 2)",
          "correct_output": "False"
        },
        {
          "input": "same_Length(10, 20)",
          "correct_output": "False"
        }
      ]
    },
    {
      "problem_id": "mbpp_920",
      "description": "Write a function to remove all tuples with all none values in the given tuple list.",
      "function_name": "remove_tuple",
      "correct_solution": "def remove_tuple(test_list):\r\n  res = [sub for sub in test_list if not all(ele == None for ele in sub)]\r\n  return (str(res)) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "remove_tuple([(None, 2), (None, None), (3, 4), (12, 3), (None,)])",
          "correct_output": "[(None, 2), (3, 4), (12, 3)]"
        },
        {
          "input": "remove_tuple([(None, None), (None, None), (3, 6), (17, 3), (None, 1)])",
          "correct_output": "[(3, 6), (17, 3), (None, 1)]"
        },
        {
          "input": "remove_tuple([(1, 2), (2, None), (3, None), (24, 3), (None, None)])",
          "correct_output": "[(1, 2), (2, None), (3, None), (24, 3)]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "remove_tuple([(None, 2), (None, None), (3, 4), (12, 3), (None,)])",
          "correct_output": "[(None, 2), (3, 4), (12, 3), (None,)]"
        },
        {
          "input": "remove_tuple([(None, None), (None, None), (3, 6), (17, 3), (None, 1)])",
          "correct_output": "[(None, None), (None, None), (3, 6), (17, 3)]"
        },
        {
          "input": "remove_tuple([(1, 2), (2, None), (3, None), (24, 3), (None, None)])",
          "correct_output": "[(1, 2), (2, None), (3, None), (24, 3), (None, None)]"
        }
      ]
    },
    {
      "problem_id": "mbpp_757",
      "description": "Write a function to count the pairs of reverse strings in the given string list.",
      "function_name": "count_reverse_pairs",
      "correct_solution": "def count_reverse_pairs(test_list):\r\n  res = sum([1 for idx in range(0, len(test_list)) for idxn in range(idx, len( \r\n\ttest_list)) if test_list[idxn] == str(''.join(list(reversed(test_list[idx]))))]) \r\n  return str(res)",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "count_reverse_pairs(['julia', 'best', 'tseb', 'for', 'ailuj'])",
          "correct_output": "2"
        },
        {
          "input": "count_reverse_pairs(['geeks', 'best', 'for', 'skeeg'])",
          "correct_output": "1"
        },
        {
          "input": "count_reverse_pairs(['makes', 'best', 'sekam', 'for', 'rof'])",
          "correct_output": "2"
        }
      ],
      "broken_test_cases": [
        {
          "input": "count_reverse_pairs(['julia', 'best', 'tseb', 'for', 'ailuj'])",
          "correct_output": "3"
        },
        {
          "input": "count_reverse_pairs(['geeks', 'best', 'for', 'skeeg'])",
          "correct_output": "2"
        },
        {
          "input": "count_reverse_pairs(['makes', 'best', 'sekam', 'for', 'rof'])",
          "correct_output": "3"
        }
      ]
    },
    {
      "problem_id": "mbpp_251",
      "description": "Write a function to insert an element before each element of a list.",
      "function_name": "insert_element",
      "correct_solution": "def insert_element(list,element):\r\n list = [v for elt in list for v in (element, elt)]\r\n return list",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "insert_element(['Red', 'Green', 'Black'], 'c')",
          "correct_output": "['c', 'Red', 'c', 'Green', 'c', 'Black']"
        },
        {
          "input": "insert_element(['python', 'java'], 'program')",
          "correct_output": "['program', 'python', 'program', 'java']"
        },
        {
          "input": "insert_element(['happy', 'sad'], 'laugh')",
          "correct_output": "['laugh', 'happy', 'laugh', 'sad']"
        }
      ],
      "broken_test_cases": [
        {
          "input": "insert_element(['Red', 'Green', 'Black'], 'c')",
          "correct_output": "['c', 'Red', 'c', 'Green', 'c', 'Black', 'c']"
        },
        {
          "input": "insert_element(['python', 'java'], 'program')",
          "correct_output": "['program', 'python', 'program', 'java', 'program']"
        },
        {
          "input": "insert_element(['happy', 'sad'], 'laugh')",
          "correct_output": "['laugh', 'happy', 'laugh', 'sad', 'laugh']"
        }
      ]
    },
    {
      "problem_id": "mbpp_23",
      "description": "Write a python function to find the maximum sum of elements of list in a list of lists.",
      "function_name": "maximum_Sum",
      "correct_solution": "def maximum_Sum(list1): \r\n    maxi = -100000\r\n    for x in list1: \r\n        sum = 0 \r\n        for y in x: \r\n            sum+= y      \r\n        maxi = max(sum,maxi)     \r\n    return maxi ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "maximum_Sum([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]])",
          "correct_output": "33"
        },
        {
          "input": "maximum_Sum([[0, 1, 1], [1, 1, 2], [3, 2, 1]])",
          "correct_output": "6"
        },
        {
          "input": "maximum_Sum([[0, 1, 3], [1, 2, 1], [9, 8, 2], [0, 1, 0], [6, 4, 8]])",
          "correct_output": "19"
        }
      ],
      "broken_test_cases": [
        {
          "input": "maximum_Sum([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]])",
          "correct_output": "32"
        },
        {
          "input": "maximum_Sum([[0, 1, 1], [1, 1, 2], [3, 2, 1]])",
          "correct_output": "7"
        },
        {
          "input": "maximum_Sum([[0, 1, 3], [1, 2, 1], [9, 8, 2], [0, 1, 0], [6, 4, 8]])",
          "correct_output": "20"
        }
      ]
    },
    {
      "problem_id": "mbpp_768",
      "description": "Write a python function to check for odd parity of a given number.",
      "function_name": "check_Odd_Parity",
      "correct_solution": "def check_Odd_Parity(x): \r\n    parity = 0\r\n    while (x != 0): \r\n        x = x & (x - 1) \r\n        parity += 1\r\n    if (parity % 2 == 1): \r\n        return True\r\n    else: \r\n        return False",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "check_Odd_Parity(13)",
          "correct_output": "True"
        },
        {
          "input": "check_Odd_Parity(21)",
          "correct_output": "True"
        },
        {
          "input": "check_Odd_Parity(18)",
          "correct_output": "False"
        }
      ],
      "broken_test_cases": [
        {
          "input": "check_Odd_Parity(13)",
          "correct_output": "False"
        },
        {
          "input": "check_Odd_Parity(21)",
          "correct_output": "False"
        },
        {
          "input": "check_Odd_Parity(18)",
          "correct_output": "True"
        }
      ]
    },
    {
      "problem_id": "mbpp_192",
      "description": "Write a python function to check whether a string has atleast one letter and one number.",
      "function_name": "check_String",
      "correct_solution": "def check_String(str): \r\n    flag_l = False\r\n    flag_n = False\r\n    for i in str: \r\n        if i.isalpha(): \r\n            flag_l = True  \r\n        if i.isdigit(): \r\n            flag_n = True\r\n    return flag_l and flag_n ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "check_String('thishasboth29')",
          "correct_output": "True"
        },
        {
          "input": "check_String('python')",
          "correct_output": "False"
        },
        {
          "input": "check_String('string')",
          "correct_output": "False"
        }
      ],
      "broken_test_cases": [
        {
          "input": "check_String('thishasboth29')",
          "correct_output": "False"
        },
        {
          "input": "check_String('python')",
          "correct_output": "True"
        },
        {
          "input": "check_String('string')",
          "correct_output": "True"
        }
      ]
    },
    {
      "problem_id": "mbpp_627",
      "description": "Write a python function to find the smallest missing number from the given array.",
      "function_name": "find_First_Missing",
      "correct_solution": "def find_First_Missing(array,start,end): \r\n    if (start > end): \r\n        return end + 1\r\n    if (start != array[start]): \r\n        return start; \r\n    mid = int((start + end) / 2) \r\n    if (array[mid] == mid): \r\n        return find_First_Missing(array,mid+1,end) \r\n    return find_First_Missing(array,start,mid) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "find_First_Missing([0, 1, 2, 3], 0, 3)",
          "correct_output": "4"
        },
        {
          "input": "find_First_Missing([0, 1, 2, 6, 9], 0, 4)",
          "correct_output": "3"
        },
        {
          "input": "find_First_Missing([2, 3, 5, 8, 9], 0, 4)",
          "correct_output": "0"
        }
      ],
      "broken_test_cases": [
        {
          "input": "find_First_Missing([0, 1, 2, 3], 0, 3)",
          "correct_output": "3"
        },
        {
          "input": "find_First_Missing([0, 1, 2, 6, 9], 0, 4)",
          "correct_output": "4"
        },
        {
          "input": "find_First_Missing([2, 3, 5, 8, 9], 0, 4)",
          "correct_output": "4"
        }
      ]
    },
    {
      "problem_id": "mbpp_797",
      "description": "Write a python function to find the sum of all odd natural numbers within the range l and r.",
      "function_name": "sum_in_Range",
      "correct_solution": "def sum_Odd(n): \r\n    terms = (n + 1)//2\r\n    sum1 = terms * terms \r\n    return sum1  \r\ndef sum_in_Range(l,r): \r\n    return sum_Odd(r) - sum_Odd(l - 1)",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "sum_in_Range(2, 5)",
          "correct_output": "8"
        },
        {
          "input": "sum_in_Range(5, 7)",
          "correct_output": "12"
        },
        {
          "input": "sum_in_Range(7, 13)",
          "correct_output": "40"
        }
      ],
      "broken_test_cases": [
        {
          "input": "sum_in_Range(2, 5)",
          "correct_output": "10"
        },
        {
          "input": "sum_in_Range(5, 7)",
          "correct_output": "10"
        },
        {
          "input": "sum_in_Range(7, 13)",
          "correct_output": "39"
        }
      ]
    },
    {
      "problem_id": "mbpp_871",
      "description": "Write a python function to check whether the given strings are rotations of each other or not.",
      "function_name": "are_Rotations",
      "correct_solution": "def are_Rotations(string1,string2): \r\n    size1 = len(string1) \r\n    size2 = len(string2) \r\n    temp = '' \r\n    if size1 != size2: \r\n        return False\r\n    temp = string1 + string1 \r\n    if (temp.count(string2)> 0): \r\n        return True\r\n    else: \r\n        return False",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "are_Rotations('abc', 'cba')",
          "correct_output": "False"
        },
        {
          "input": "are_Rotations('abcd', 'cdba')",
          "correct_output": "False"
        },
        {
          "input": "are_Rotations('abacd', 'cdaba')",
          "correct_output": "True"
        }
      ],
      "broken_test_cases": [
        {
          "input": "are_Rotations('abc', 'cba')",
          "correct_output": "True"
        },
        {
          "input": "are_Rotations('abcd', 'cdba')",
          "correct_output": "True"
        },
        {
          "input": "are_Rotations('abacd', 'cdaba')",
          "correct_output": "False"
        }
      ]
    },
    {
      "problem_id": "mbpp_754",
      "description": "Write a function to find common index elements from three lists.",
      "function_name": "extract_index_list",
      "correct_solution": "def extract_index_list(l1, l2, l3):\r\n    result = []\r\n    for m, n, o in zip(l1, l2, l3):\r\n        if (m == n == o):\r\n            result.append(m)\r\n    return result",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "extract_index_list([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7])",
          "correct_output": "[1, 7]"
        },
        {
          "input": "extract_index_list([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7])",
          "correct_output": "[1, 6]"
        },
        {
          "input": "extract_index_list([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7])",
          "correct_output": "[1, 5]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "extract_index_list([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7])",
          "correct_output": "[1, 5]"
        },
        {
          "input": "extract_index_list([1, 1, 3, 4, 5, 6, 7], [0, 1, 2, 3, 4, 6, 5], [0, 1, 2, 3, 4, 6, 7])",
          "correct_output": "[1, 7]"
        },
        {
          "input": "extract_index_list([1, 1, 3, 4, 6, 5, 6], [0, 1, 2, 3, 4, 5, 7], [0, 1, 2, 3, 4, 5, 7])",
          "correct_output": "[1, 6]"
        }
      ]
    },
    {
      "problem_id": "mbpp_372",
      "description": "Write a function to sort a given list of elements in ascending order using heap queue algorithm.",
      "function_name": "heap_assending",
      "correct_solution": "import heapq as hq\r\ndef heap_assending(nums):\r\n  hq.heapify(nums)\r\n  s_result = [hq.heappop(nums) for i in range(len(nums))]\r\n  return s_result",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])",
          "correct_output": "[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]"
        },
        {
          "input": "heap_assending([25, 35, 22, 85, 14, 65, 75, 25, 58])",
          "correct_output": "[14, 22, 25, 25, 35, 58, 65, 75, 85]"
        },
        {
          "input": "heap_assending([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])",
          "correct_output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])",
          "correct_output": "[18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1]"
        },
        {
          "input": "heap_assending([25, 35, 22, 85, 14, 65, 75, 25, 58])",
          "correct_output": "[25, 14, 22, 25, 35, 58, 65, 75, 85]"
        },
        {
          "input": "heap_assending([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])",
          "correct_output": "[9, 8, 7, 6, 5, 4, 3, 2, 1, 0]"
        }
      ]
    },
    {
      "problem_id": "mbpp_161",
      "description": "Write a function to remove all elements from a given list present in another list.",
      "function_name": "remove_elements",
      "correct_solution": "def remove_elements(list1, list2):\r\n    result = [x for x in list1 if x not in list2]\r\n    return result",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8])",
          "correct_output": "[1, 3, 5, 7, 9, 10]"
        },
        {
          "input": "remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7])",
          "correct_output": "[2, 4, 6, 8, 9, 10]"
        },
        {
          "input": "remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7])",
          "correct_output": "[1, 2, 3, 4, 6, 8, 9, 10]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [2, 4, 6, 8])",
          "correct_output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
        },
        {
          "input": "remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [1, 3, 5, 7])",
          "correct_output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
        },
        {
          "input": "remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], [5, 7])",
          "correct_output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
        }
      ]
    },
    {
      "problem_id": "mbpp_751",
      "description": "Write a function to check if the given array represents min heap or not.",
      "function_name": "check_min_heap",
      "correct_solution": "def check_min_heap(arr, i):\r\n    if 2 * i + 2 > len(arr):\r\n        return True\r\n    left_child = (arr[i] <= arr[2 * i + 1]) and check_min_heap(arr, 2 * i + 1)\r\n    right_child = (2 * i + 2 == len(arr)) or (arr[i] <= arr[2 * i + 2] \r\n                                      and check_min_heap(arr, 2 * i + 2))\r\n    return left_child and right_child",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "check_min_heap([1, 2, 3, 4, 5, 6], 0)",
          "correct_output": "True"
        },
        {
          "input": "check_min_heap([2, 3, 4, 5, 10, 15], 0)",
          "correct_output": "True"
        },
        {
          "input": "check_min_heap([2, 10, 4, 5, 3, 15], 0)",
          "correct_output": "False"
        }
      ],
      "broken_test_cases": [
        {
          "input": "check_min_heap([1, 2, 3, 4, 5, 6], 0)",
          "correct_output": "False"
        },
        {
          "input": "check_min_heap([2, 3, 4, 5, 10, 15], 0)",
          "correct_output": "False"
        },
        {
          "input": "check_min_heap([2, 10, 4, 5, 3, 15], 0)",
          "correct_output": "True"
        }
      ]
    },
    {
      "problem_id": "mbpp_467",
      "description": "Write a python function to convert decimal number to octal number.",
      "function_name": "decimal_to_Octal",
      "correct_solution": "def decimal_to_Octal(deciNum):\r\n    octalNum = 0\r\n    countval = 1;\r\n    dNo = deciNum;\r\n    while (deciNum!= 0):\r\n        remainder= deciNum % 8;\r\n        octalNum+= remainder*countval;\r\n        countval= countval*10;\r\n        deciNum //= 8; \r\n    return (octalNum)",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "decimal_to_Octal(10)",
          "correct_output": "12"
        },
        {
          "input": "decimal_to_Octal(2)",
          "correct_output": "2"
        },
        {
          "input": "decimal_to_Octal(33)",
          "correct_output": "41"
        }
      ],
      "broken_test_cases": [
        {
          "input": "decimal_to_Octal(10)",
          "correct_output": "10"
        },
        {
          "input": "decimal_to_Octal(2)",
          "correct_output": "20"
        },
        {
          "input": "decimal_to_Octal(33)",
          "correct_output": "40"
        }
      ]
    },
    {
      "problem_id": "mbpp_117",
      "description": "Write a function to convert all possible convertible elements in the list to float.",
      "function_name": "list_to_float",
      "correct_solution": "def list_to_float(test_list):\r\n  res = []\r\n  for tup in test_list:\r\n    temp = []\r\n    for ele in tup:\r\n      if ele.isalpha():\r\n        temp.append(ele)\r\n      else:\r\n        temp.append(float(ele))\r\n    res.append((temp[0],temp[1])) \r\n  return (str(res)) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "list_to_float([('3', '4'), ('1', '26.45'), ('7.32', '8'), ('4', '8')])",
          "correct_output": "[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]"
        },
        {
          "input": "list_to_float([('4', '4'), ('2', '27'), ('4.12', '9'), ('7', '11')])",
          "correct_output": "[(4.0, 4.0), (2.0, 27.0), (4.12, 9.0), (7.0, 11.0)]"
        },
        {
          "input": "list_to_float([('6', '78'), ('5', '26.45'), ('1.33', '4'), ('82', '13')])",
          "correct_output": "[(6.0, 78.0), (5.0, 26.45), (1.33, 4.0), (82.0, 13.0)]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "list_to_float([('3', '4'), ('1', '26.45'), ('7.32', '8'), ('4', '8')])",
          "correct_output": "[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.1)]"
        },
        {
          "input": "list_to_float([('4', '4'), ('2', '27'), ('4.12', '9'), ('7', '11')])",
          "correct_output": "[(4.0, 4.0), (2.0, 27.0), (4.12, 9.0), (7.0, 11.1)]"
        },
        {
          "input": "list_to_float([('6', '78'), ('5', '26.45'), ('1.33', '4'), ('82', '13')])",
          "correct_output": "[(6.0, 78.0), (5.0, 26.45), (1.33, 4.0), (82.0, 13.0), (0.0, 0.0)]"
        }
      ]
    },
    {
      "problem_id": "mbpp_572",
      "description": "Write a python function to remove two duplicate numbers from a given number of lists.",
      "function_name": "two_unique_nums",
      "correct_solution": "def two_unique_nums(nums):\r\n  return [i for i in nums if nums.count(i)==1]",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "two_unique_nums([1, 2, 3, 2, 3, 4, 5])",
          "correct_output": "[1, 4, 5]"
        },
        {
          "input": "two_unique_nums([1, 2, 3, 2, 4, 5])",
          "correct_output": "[1, 3, 4, 5]"
        },
        {
          "input": "two_unique_nums([1, 2, 3, 4, 5])",
          "correct_output": "[1, 2, 3, 4, 5]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "two_unique_nums([1, 2, 3, 2, 3, 4, 5])",
          "correct_output": "[1, 2, 3, 4, 5]"
        },
        {
          "input": "two_unique_nums([1, 2, 3, 2, 4, 5])",
          "correct_output": "[1, 2, 3, 4, 5]"
        },
        {
          "input": "two_unique_nums([1, 2, 3, 4, 5])",
          "correct_output": "[1, 2, 3, 4]"
        }
      ]
    },
    {
      "problem_id": "mbpp_376",
      "description": "Write a function to remove tuple elements that occur more than once and replace the duplicates with some custom value.",
      "function_name": "remove_replica",
      "correct_solution": "def remove_replica(test_tup):\r\n  temp = set()\r\n  res = tuple(ele if ele not in temp and not temp.add(ele) \r\n\t\t\t\telse 'MSP' for ele in test_tup)\r\n  return (res)",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7))",
          "correct_output": "(1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')"
        },
        {
          "input": "remove_replica((2, 3, 4, 4, 5, 6, 6, 7, 8, 9, 9))",
          "correct_output": "(2, 3, 4, 'MSP', 5, 6, 'MSP', 7, 8, 9, 'MSP')"
        },
        {
          "input": "remove_replica((2, 2, 5, 4, 5, 7, 5, 6, 7, 7))",
          "correct_output": "(2, 'MSP', 5, 4, 'MSP', 7, 'MSP', 6, 'MSP', 'MSP')"
        }
      ],
      "broken_test_cases": [
        {
          "input": "remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7))",
          "correct_output": "(1, 'MSP', 4, 'MSP', 4, 5, 'MSP', 6, 7, 'MSP')"
        },
        {
          "input": "remove_replica((2, 3, 4, 4, 5, 6, 6, 7, 8, 9, 9))",
          "correct_output": "(2, 3, 4, 'MSP', 5, 6, 7, 8, 9, 'MSP')"
        },
        {
          "input": "remove_replica((2, 2, 5, 4, 5, 7, 5, 6, 7, 7))",
          "correct_output": "(2, 2, 5, 4, 5, 7, 5, 6, 7, 7)"
        }
      ]
    },
    {
      "problem_id": "mbpp_957",
      "description": "Write a python function to get the position of rightmost set bit.",
      "function_name": "get_First_Set_Bit_Pos",
      "correct_solution": "import math\r\ndef get_First_Set_Bit_Pos(n):\r\n     return math.log2(n&-n)+1",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "get_First_Set_Bit_Pos(12)",
          "correct_output": "3"
        },
        {
          "input": "get_First_Set_Bit_Pos(18)",
          "correct_output": "2"
        },
        {
          "input": "get_First_Set_Bit_Pos(16)",
          "correct_output": "5"
        }
      ],
      "broken_test_cases": [
        {
          "input": "get_First_Set_Bit_Pos(12)",
          "correct_output": "4"
        },
        {
          "input": "get_First_Set_Bit_Pos(18)",
          "correct_output": "3"
        },
        {
          "input": "get_First_Set_Bit_Pos(16)",
          "correct_output": "3"
        }
      ]
    },
    {
      "problem_id": "mbpp_315",
      "description": "Write a python function to find the first maximum length of even word.",
      "function_name": "find_Max_Len_Even",
      "correct_solution": "def find_Max_Len_Even(str): \r\n    n = len(str) \r\n    i = 0\r\n    currlen = 0\r\n    maxlen = 0\r\n    st = -1\r\n    while (i < n): \r\n        if (str[i] == ' '): \r\n            if (currlen % 2 == 0): \r\n                if (maxlen < currlen): \r\n                    maxlen = currlen \r\n                    st = i - currlen \r\n            currlen = 0 \r\n        else : \r\n            currlen += 1\r\n        i += 1\r\n    if (currlen % 2 == 0): \r\n        if (maxlen < currlen): \r\n            maxlen = currlen \r\n            st = i - currlen \r\n    if (st == -1): \r\n        return \"-1\" \r\n    return str[st: st + maxlen] ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "find_Max_Len_Even('python language')",
          "correct_output": "language"
        },
        {
          "input": "find_Max_Len_Even('maximum even length')",
          "correct_output": "length"
        },
        {
          "input": "find_Max_Len_Even('eve')",
          "correct_output": "-1"
        }
      ],
      "broken_test_cases": [
        {
          "input": "find_Max_Len_Even('python language')",
          "correct_output": "'python'"
        },
        {
          "input": "find_Max_Len_Even('maximum even length')",
          "correct_output": "maximum"
        },
        {
          "input": "find_Max_Len_Even('eve')",
          "correct_output": "'eve'"
        }
      ]
    },
    {
      "problem_id": "mbpp_266",
      "description": "Write a function to find the lateral surface area of a cube.",
      "function_name": "lateralsurface_cube",
      "correct_solution": "def lateralsurface_cube(l):\r\n  LSA = 4 * (l * l)\r\n  return LSA",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "lateralsurface_cube(5)",
          "correct_output": "100"
        },
        {
          "input": "lateralsurface_cube(9)",
          "correct_output": "324"
        },
        {
          "input": "lateralsurface_cube(10)",
          "correct_output": "400"
        }
      ],
      "broken_test_cases": [
        {
          "input": "lateralsurface_cube(5)",
          "correct_output": "50"
        },
        {
          "input": "lateralsurface_cube(9)",
          "correct_output": "300"
        },
        {
          "input": "lateralsurface_cube(10)",
          "correct_output": "401"
        }
      ]
    },
    {
      "problem_id": "mbpp_381",
      "description": "Write a function to sort a list of lists by a given index of the inner list.",
      "function_name": "index_on_inner_list",
      "correct_solution": "from operator import itemgetter\r\ndef index_on_inner_list(list_data, index_no):\r\n    result = sorted(list_data, key=itemgetter(index_no))\r\n    return result",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 0)",
          "correct_output": "[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]"
        },
        {
          "input": "index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 1)",
          "correct_output": "[('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99)]"
        },
        {
          "input": "index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 2)",
          "correct_output": "[('Wyatt Knott', 91, 94), ('Brady Kent', 97, 96), ('Beau Turnbull', 94, 98), ('Greyson Fulton', 98, 99)]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 0)",
          "correct_output": "[('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)]"
        },
        {
          "input": "index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 1)",
          "correct_output": "[('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)]"
        },
        {
          "input": "index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 2)",
          "correct_output": "[('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Beau Turnbull', 94, 98), ('Wyatt Knott', 91, 94)]"
        }
      ]
    },
    {
      "problem_id": "mbpp_958",
      "description": "Write a function to convert an integer into a roman numeral.",
      "function_name": "int_to_roman",
      "correct_solution": "def int_to_roman( num):\r\n        val = [1000, 900, 500, 400,100, 90, 50, 40,10, 9, 5, 4,1]\r\n        syb = [\"M\", \"CM\", \"D\", \"CD\",\"C\", \"XC\", \"L\", \"XL\",\"X\", \"IX\", \"V\", \"IV\",\"I\"]\r\n        roman_num = ''\r\n        i = 0\r\n        while  num > 0:\r\n            for _ in range(num // val[i]):\r\n                roman_num += syb[i]\r\n                num -= val[i]\r\n            i += 1\r\n        return roman_num",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "int_to_roman(1)",
          "correct_output": "I"
        },
        {
          "input": "int_to_roman(50)",
          "correct_output": "L"
        },
        {
          "input": "int_to_roman(4)",
          "correct_output": "IV"
        }
      ],
      "broken_test_cases": [
        {
          "input": "int_to_roman(1)",
          "correct_output": "V"
        },
        {
          "input": "int_to_roman(50)",
          "correct_output": "I"
        },
        {
          "input": "int_to_roman(4)",
          "correct_output": "VV"
        }
      ]
    },
    {
      "problem_id": "mbpp_377",
      "description": "Write a python function to remove all occurrences of a character in a given string.",
      "function_name": "remove_Char",
      "correct_solution": "def remove_Char(s,c) :  \r\n    counts = s.count(c) \r\n    s = list(s) \r\n    while counts :  \r\n        s.remove(c) \r\n        counts -= 1 \r\n    s = '' . join(s)   \r\n    return (s) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "remove_Char('aba', 'a')",
          "correct_output": "b"
        },
        {
          "input": "remove_Char('toggle', 'g')",
          "correct_output": "tole"
        },
        {
          "input": "remove_Char('aabbc', 'b')",
          "correct_output": "aac"
        }
      ],
      "broken_test_cases": [
        {
          "input": "remove_Char('aba', 'a')",
          "correct_output": "bbb"
        },
        {
          "input": "remove_Char('toggle', 'g')",
          "correct_output": "tol"
        },
        {
          "input": "remove_Char('aabbc', 'b')",
          "correct_output": "abc"
        }
      ]
    },
    {
      "problem_id": "mbpp_346",
      "description": "Write a function to find entringer number e(n, k).",
      "function_name": "zigzag",
      "correct_solution": "def zigzag(n, k): \r\n\tif (n == 0 and k == 0): \r\n\t\treturn 1\r\n\tif (k == 0): \r\n\t\treturn 0\r\n\treturn zigzag(n, k - 1) + zigzag(n - 1, n - k)",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "zigzag(4, 3)",
          "correct_output": "5"
        },
        {
          "input": "zigzag(4, 2)",
          "correct_output": "4"
        },
        {
          "input": "zigzag(3, 1)",
          "correct_output": "1"
        }
      ],
      "broken_test_cases": [
        {
          "input": "zigzag(4, 3)",
          "correct_output": "6"
        },
        {
          "input": "zigzag(4, 2)",
          "correct_output": "3"
        },
        {
          "input": "zigzag(3, 1)",
          "correct_output": "2"
        }
      ]
    },
    {
      "problem_id": "mbpp_73",
      "description": "Write a function to split the given string with multiple delimiters by using regex.",
      "function_name": "multiple_split",
      "correct_solution": "import re\r\ndef multiple_split(text):\r\n  return (re.split('; |, |\\*|\\n',text))",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "multiple_split('Forces of the \\ndarkness*are coming into the play.')",
          "correct_output": "['Forces of the ', 'darkness', 'are coming into the play.']"
        },
        {
          "input": "multiple_split('Mi Box runs on the \\n Latest android*which has google assistance and chromecast.')",
          "correct_output": "['Mi Box runs on the ', ' Latest android', 'which has google assistance and chromecast.']"
        },
        {
          "input": "multiple_split('Certain services\\nare subjected to change*over the seperate subscriptions.')",
          "correct_output": "['Certain services', 'are subjected to change', 'over the seperate subscriptions.']"
        }
      ],
      "broken_test_cases": [
        {
          "input": "multiple_split('Forces of the \\ndarkness*are coming into the play.')",
          "correct_output": "['Forces of the ', 'darkness', 'are coming into the play', '.']"
        },
        {
          "input": "multiple_split('Mi Box runs on the \\n Latest android*which has google assistance and chromecast.')",
          "correct_output": "['Mi Box runs on the', 'Latest android', 'which has google assistance and chromecast.']"
        },
        {
          "input": "multiple_split('Certain services\\nare subjected to change*over the seperate subscriptions.')",
          "correct_output": "['Certain services', 'are subjected to change', 'over the seperate subscriptions', 'extra_item']"
        }
      ]
    },
    {
      "problem_id": "mbpp_519",
      "description": "Write a function to calculate volume of a tetrahedron.",
      "function_name": "volume_tetrahedron",
      "correct_solution": "import math\r\ndef volume_tetrahedron(num):\r\n\tvolume = (num ** 3 / (6 * math.sqrt(2)))\t\r\n\treturn round(volume, 2)",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "volume_tetrahedron(10)",
          "correct_output": "117.85"
        },
        {
          "input": "volume_tetrahedron(15)",
          "correct_output": "397.75"
        },
        {
          "input": "volume_tetrahedron(20)",
          "correct_output": "942.81"
        }
      ],
      "broken_test_cases": [
        {
          "input": "volume_tetrahedron(10)",
          "correct_output": "200.0"
        },
        {
          "input": "volume_tetrahedron(15)",
          "correct_output": "397.76"
        },
        {
          "input": "volume_tetrahedron(20)",
          "correct_output": "1000.00"
        }
      ]
    },
    {
      "problem_id": "mbpp_491",
      "description": "Write a function to find the sum of geometric progression series.",
      "function_name": "sum_gp",
      "correct_solution": "import math\r\ndef sum_gp(a,n,r):\r\n total = (a * (1 - math.pow(r, n ))) / (1- r)\r\n return total",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "sum_gp(1, 5, 2)",
          "correct_output": "31"
        },
        {
          "input": "sum_gp(1, 5, 4)",
          "correct_output": "341"
        },
        {
          "input": "sum_gp(2, 6, 3)",
          "correct_output": "728"
        }
      ],
      "broken_test_cases": [
        {
          "input": "sum_gp(1, 5, 2)",
          "correct_output": "33"
        },
        {
          "input": "sum_gp(1, 5, 4)",
          "correct_output": "340"
        },
        {
          "input": "sum_gp(2, 6, 3)",
          "correct_output": "727"
        }
      ]
    },
    {
      "problem_id": "mbpp_56",
      "description": "Write a python function to check if a given number is one less than twice its reverse.",
      "function_name": "check",
      "correct_solution": "def rev(num):    \r\n    rev_num = 0\r\n    while (num > 0):  \r\n        rev_num = (rev_num * 10 + num % 10) \r\n        num = num // 10  \r\n    return rev_num  \r\ndef check(n):    \r\n    return (2 * rev(n) == n + 1)  ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "check(70)",
          "correct_output": "False"
        },
        {
          "input": "check(23)",
          "correct_output": "False"
        },
        {
          "input": "check(73)",
          "correct_output": "True"
        }
      ],
      "broken_test_cases": [
        {
          "input": "check(73)",
          "correct_output": "False"
        },
        {
          "input": "check(23)",
          "correct_output": "True"
        },
        {
          "input": "check(73)",
          "correct_output": "False"
        }
      ]
    },
    {
      "problem_id": "mbpp_105",
      "description": "Write a python function to count true booleans in the given list.",
      "function_name": "count",
      "correct_solution": "def count(lst):   \r\n    return sum(lst) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "count([True, False, True])",
          "correct_output": "2"
        },
        {
          "input": "count([False, False])",
          "correct_output": "0"
        },
        {
          "input": "count([True, True, True])",
          "correct_output": "3"
        }
      ],
      "broken_test_cases": [
        {
          "input": "count([True, False, True])",
          "correct_output": "1"
        },
        {
          "input": "count([False, False])",
          "correct_output": "2"
        },
        {
          "input": "count([True, True, True])",
          "correct_output": "2"
        }
      ]
    },
    {
      "problem_id": "mbpp_560",
      "description": "Write a function to find the union of elements of the given tuples.",
      "function_name": "union_elements",
      "correct_solution": "def union_elements(test_tup1, test_tup2):\r\n  res = tuple(set(test_tup1 + test_tup2))\r\n  return (res) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "union_elements((3, 4, 5, 6), (5, 7, 4, 10))",
          "correct_output": "(3, 4, 5, 6, 7, 10)"
        },
        {
          "input": "union_elements((1, 2, 3, 4), (3, 4, 5, 6))",
          "correct_output": "(1, 2, 3, 4, 5, 6)"
        },
        {
          "input": "union_elements((11, 12, 13, 14), (13, 15, 16, 17))",
          "correct_output": "(11, 12, 13, 14, 15, 16, 17)"
        }
      ],
      "broken_test_cases": [
        {
          "input": "union_elements((3, 4, 5, 6), (5, 7, 4, 10))",
          "correct_output": "(3, 4, 5, 6, 7, 9)"
        },
        {
          "input": "union_elements((1, 2, 3, 4), (3, 4, 5, 6))",
          "correct_output": "(1, 2, 3, 4, 5)"
        },
        {
          "input": "union_elements((11, 12, 13, 14), (13, 15, 16, 17))",
          "correct_output": "(11, 12, 13, 14, 15, 16)"
        }
      ]
    },
    {
      "problem_id": "mbpp_601",
      "description": "Write a function to find the longest chain which can be formed from the given set of pairs.",
      "function_name": "max_chain_length",
      "correct_solution": "class Pair(object): \r\n\tdef __init__(self, a, b): \r\n\t\tself.a = a \r\n\t\tself.b = b \r\ndef max_chain_length(arr, n): \r\n\tmax = 0\r\n\tmcl = [1 for i in range(n)] \r\n\tfor i in range(1, n): \r\n\t\tfor j in range(0, i): \r\n\t\t\tif (arr[i].a > arr[j].b and\r\n\t\t\t\tmcl[i] < mcl[j] + 1): \r\n\t\t\t\tmcl[i] = mcl[j] + 1\r\n\tfor i in range(n): \r\n\t\tif (max < mcl[i]): \r\n\t\t\tmax = mcl[i] \r\n\treturn max",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "max_chain_length([Pair(5, 24), Pair(15, 25), Pair(27, 40), Pair(50, 60)], 4)",
          "correct_output": "3"
        },
        {
          "input": "max_chain_length([Pair(1, 2), Pair(3, 4), Pair(5, 6), Pair(7, 8)], 4)",
          "correct_output": "4"
        },
        {
          "input": "max_chain_length([Pair(19, 10), Pair(11, 12), Pair(13, 14), Pair(15, 16), Pair(31, 54)], 5)",
          "correct_output": "5"
        }
      ],
      "broken_test_cases": [
        {
          "input": "max_chain_length([Pair(5, 24), Pair(15, 25), Pair(27, 40), Pair(50, 60)], 4)",
          "correct_output": "2"
        },
        {
          "input": "max_chain_length([Pair(1, 2), Pair(3, 4), Pair(5, 6), Pair(7, 8)], 4)",
          "correct_output": "3"
        },
        {
          "input": "max_chain_length([Pair(19, 10), Pair(11, 12), Pair(13, 14), Pair(15, 16), Pair(31, 54)], 5)",
          "correct_output": "4"
        }
      ]
    },
    {
      "problem_id": "mbpp_498",
      "description": "Write a python function to find gcd of two positive integers.",
      "function_name": "gcd",
      "correct_solution": "def gcd(x, y):\r\n    gcd = 1\r\n    if x % y == 0:\r\n        return y\r\n    for k in range(int(y / 2), 0, -1):\r\n        if x % k == 0 and y % k == 0:\r\n            gcd = k\r\n            break  \r\n    return gcd",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "gcd(12, 17)",
          "correct_output": "1"
        },
        {
          "input": "gcd(4, 6)",
          "correct_output": "2"
        },
        {
          "input": "gcd(2, 9)",
          "correct_output": "1"
        }
      ],
      "broken_test_cases": [
        {
          "input": "gcd(12, 17)",
          "correct_output": "2"
        },
        {
          "input": "gcd(4, 6)",
          "correct_output": "3"
        },
        {
          "input": "gcd(2, 9)",
          "correct_output": "3"
        }
      ]
    },
    {
      "problem_id": "mbpp_630",
      "description": "Write a function to extract all the adjacent coordinates of the given coordinate tuple.",
      "function_name": "get_coordinates",
      "correct_solution": "def adjac(ele, sub = []): \r\n  if not ele: \r\n     yield sub \r\n  else: \r\n     yield from [idx for j in range(ele[0] - 1, ele[0] + 2) \r\n                for idx in adjac(ele[1:], sub + [j])] \r\ndef get_coordinates(test_tup):\r\n  res = list(adjac(test_tup))\r\n  return (res) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "get_coordinates((3, 4))",
          "correct_output": "[[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 5]]"
        },
        {
          "input": "get_coordinates((4, 5))",
          "correct_output": "[[3, 4], [3, 5], [3, 6], [4, 4], [4, 5], [4, 6], [5, 4], [5, 5], [5, 6]]"
        },
        {
          "input": "get_coordinates((5, 6))",
          "correct_output": "[[4, 5], [4, 6], [4, 7], [5, 5], [5, 6], [5, 7], [6, 5], [6, 6], [6, 7]]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "get_coordinates((3, 4))",
          "correct_output": "[[2, 3], [2, 4], [2, 5], [3, 3], [3, 4], [3, 5], [4, 3], [4, 4], [4, 6]]"
        },
        {
          "input": "get_coordinates((4, 5))",
          "correct_output": "[[3, 4], [3, 5], [3, 6], [4, 4], [4, 5], [4, 6], [5, 4], [5, 5]]"
        },
        {
          "input": "get_coordinates((5, 6))",
          "correct_output": "[[4, 5], [4, 6], [4, 7], [5, 5], [5, 6], [5, 7], [6, 5], [6, 6]]"
        }
      ]
    },
    {
      "problem_id": "mbpp_352",
      "description": "Write a python function to check whether all the characters in a given string are unique.",
      "function_name": "unique_Characters",
      "correct_solution": "def unique_Characters(str):\r\n    for i in range(len(str)):\r\n        for j in range(i + 1,len(str)): \r\n            if (str[i] == str[j]):\r\n                return False;\r\n    return True;",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "unique_Characters('aba')",
          "correct_output": "False"
        },
        {
          "input": "unique_Characters('abc')",
          "correct_output": "True"
        },
        {
          "input": "unique_Characters('abab')",
          "correct_output": "False"
        }
      ],
      "broken_test_cases": [
        {
          "input": "unique_Characters('aba')",
          "correct_output": "True"
        },
        {
          "input": "unique_Characters('abc')",
          "correct_output": "False"
        },
        {
          "input": "unique_Characters('abab')",
          "correct_output": "True"
        }
      ]
    },
    {
      "problem_id": "mbpp_307",
      "description": "Write a function to get a colon of a tuple.",
      "function_name": "colon_tuplex",
      "correct_solution": "from copy import deepcopy\r\ndef colon_tuplex(tuplex,m,n):\r\n  tuplex_colon = deepcopy(tuplex)\r\n  tuplex_colon[m].append(n)\r\n  return tuplex_colon",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "colon_tuplex(('HELLO', 5, [], True), 2, 50)",
          "correct_output": "('HELLO', 5, [50], True)"
        },
        {
          "input": "colon_tuplex(('HELLO', 5, [], True), 2, 100)",
          "correct_output": "('HELLO', 5, [100], True)"
        },
        {
          "input": "colon_tuplex(('HELLO', 5, [], True), 2, 500)",
          "correct_output": "('HELLO', 5, [500], True)"
        }
      ],
      "broken_test_cases": [
        {
          "input": "colon_tuplex(('HELLO', 5, [], True), 2, 50)",
          "correct_output": "('HELLO', 5, [50, 50], True)"
        },
        {
          "input": "colon_tuplex(('HELLO', 5, [], True), 2, 100)",
          "correct_output": "('HELLO', 5, [100, 100], True)"
        },
        {
          "input": "colon_tuplex(('HELLO', 5, [], True), 2, 500)",
          "correct_output": "('HELLO', 5, [500, 500], True)"
        }
      ]
    },
    {
      "problem_id": "mbpp_918",
      "description": "Write a function to count coin change.",
      "function_name": "coin_change",
      "correct_solution": "def coin_change(S, m, n): \r\n    table = [[0 for x in range(m)] for x in range(n+1)] \r\n    for i in range(m): \r\n        table[0][i] = 1\r\n    for i in range(1, n+1): \r\n        for j in range(m): \r\n            x = table[i - S[j]][j] if i-S[j] >= 0 else 0\r\n            y = table[i][j-1] if j >= 1 else 0 \r\n            table[i][j] = x + y   \r\n    return table[n][m-1] ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "coin_change([1, 2, 3], 3, 4)",
          "correct_output": "4"
        },
        {
          "input": "coin_change([4, 5, 6, 7, 8, 9], 6, 9)",
          "correct_output": "2"
        },
        {
          "input": "coin_change([4, 5, 6, 7, 8, 9], 6, 4)",
          "correct_output": "1"
        }
      ],
      "broken_test_cases": [
        {
          "input": "coin_change([1, 2, 3], 3, 4)",
          "correct_output": "5"
        },
        {
          "input": "coin_change([4, 5, 6, 7, 8, 9], 6, 9)",
          "correct_output": "3"
        },
        {
          "input": "coin_change([4, 5, 6, 7, 8, 9], 6, 4)",
          "correct_output": "2"
        }
      ]
    },
    {
      "problem_id": "mbpp_286",
      "description": "Write a function to find the largest sum of contiguous array in the modified array which is formed by repeating the given array k times.",
      "function_name": "max_sub_array_sum_repeated",
      "correct_solution": "def max_sub_array_sum_repeated(a, n, k): \r\n\tmax_so_far = -2147483648\r\n\tmax_ending_here = 0\r\n\tfor i in range(n*k): \r\n\t\tmax_ending_here = max_ending_here + a[i%n] \r\n\t\tif (max_so_far < max_ending_here): \r\n\t\t\tmax_so_far = max_ending_here \r\n\t\tif (max_ending_here < 0): \r\n\t\t\tmax_ending_here = 0\r\n\treturn max_so_far",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3)",
          "correct_output": "30"
        },
        {
          "input": "max_sub_array_sum_repeated([-1, 10, 20], 3, 2)",
          "correct_output": "59"
        },
        {
          "input": "max_sub_array_sum_repeated([-1, -2, -3], 3, 3)",
          "correct_output": "-1"
        }
      ],
      "broken_test_cases": [
        {
          "input": "max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3)",
          "correct_output": "29"
        },
        {
          "input": "max_sub_array_sum_repeated([-1, 10, 20], 3, 2)",
          "correct_output": "60"
        },
        {
          "input": "max_sub_array_sum_repeated([-1, -2, -3], 3, 3)",
          "correct_output": "0"
        }
      ]
    },
    {
      "problem_id": "mbpp_537",
      "description": "Write a python function to find the first repeated word in a given string.",
      "function_name": "first_repeated_word",
      "correct_solution": "def first_repeated_word(str1):\r\n  temp = set()\r\n  for word in str1.split():\r\n    if word in temp:\r\n      return word;\r\n    else:\r\n      temp.add(word)\r\n  return 'None'",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "first_repeated_word('ab ca bc ab')",
          "correct_output": "ab"
        },
        {
          "input": "first_repeated_word('ab ca bc')",
          "correct_output": "None"
        },
        {
          "input": "first_repeated_word('ab ca bc ca ab bc')",
          "correct_output": "ca"
        }
      ],
      "broken_test_cases": [
        {
          "input": "first_repeated_word('ab ca bc ab')",
          "correct_output": "'bc'"
        },
        {
          "input": "first_repeated_word('ab ca bc')",
          "correct_output": "'ab'"
        },
        {
          "input": "first_repeated_word('ab ca bc ca ab bc')",
          "correct_output": "ab"
        }
      ]
    },
    {
      "problem_id": "mbpp_254",
      "description": "Write a function to find all words starting with 'a' or 'e' in a given string.",
      "function_name": "words_ae",
      "correct_solution": "import re\r\ndef words_ae(text):\r\n list = re.findall(\"[ae]\\w+\", text)\r\n return list",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "words_ae('python programe')",
          "correct_output": "['ame']"
        },
        {
          "input": "words_ae('python programe language')",
          "correct_output": "['ame', 'anguage']"
        },
        {
          "input": "words_ae('assert statement')",
          "correct_output": "['assert', 'atement']"
        }
      ],
      "broken_test_cases": [
        {
          "input": "words_ae('python programe')",
          "correct_output": "['python', 'programe']"
        },
        {
          "input": "words_ae('python programe language')",
          "correct_output": "['ame', 'a']"
        },
        {
          "input": "words_ae('assert statement')",
          "correct_output": "['assert', 'statement']"
        }
      ]
    },
    {
      "problem_id": "mbpp_568",
      "description": "Write a function to create a list of empty dictionaries.",
      "function_name": "empty_list",
      "correct_solution": "def empty_list(length):\r\n empty_list = [{} for _ in range(length)]\r\n return empty_list",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "empty_list(5)",
          "correct_output": "[{}, {}, {}, {}, {}]"
        },
        {
          "input": "empty_list(6)",
          "correct_output": "[{}, {}, {}, {}, {}, {}]"
        },
        {
          "input": "empty_list(7)",
          "correct_output": "[{}, {}, {}, {}, {}, {}, {}]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "empty_list(5)",
          "correct_output": "[{}, {}, {}, {}, 'hello']"
        },
        {
          "input": "empty_list(6)",
          "correct_output": "[{}, {}, {}, {}, {}, 'Wrong'}]"
        },
        {
          "input": "empty_list(7)",
          "correct_output": "[{}, {}, {}, {}, {}, {}, 1}]"
        }
      ]
    },
    {
      "problem_id": "mbpp_4",
      "description": "Write a function to find the largest integers from a given list of numbers using heap queue algorithm.",
      "function_name": "heap_queue_largest",
      "correct_solution": "import heapq as hq\r\ndef heap_queue_largest(nums,n):\r\n  largest_nums = hq.nlargest(n, nums)\r\n  return largest_nums",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "heap_queue_largest([25, 35, 22, 85, 14, 65, 75, 22, 58], 3)",
          "correct_output": "[85, 75, 65]"
        },
        {
          "input": "heap_queue_largest([25, 35, 22, 85, 14, 65, 75, 22, 58], 2)",
          "correct_output": "[85, 75]"
        },
        {
          "input": "heap_queue_largest([25, 35, 22, 85, 14, 65, 75, 22, 58], 5)",
          "correct_output": "[85, 75, 65, 58, 35]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "heap_queue_largest([25, 35, 22, 85, 14, 65, 75, 22, 58], 3)",
          "correct_output": "[75, 65, 58]"
        },
        {
          "input": "heap_queue_largest([25, 35, 22, 85, 14, 65, 75, 22, 58], 2)",
          "correct_output": "[85, 22]"
        },
        {
          "input": "heap_queue_largest([25, 35, 22, 85, 14, 65, 75, 22, 58], 5)",
          "correct_output": "[85, 75, 65, 58, 25]"
        }
      ]
    },
    {
      "problem_id": "mbpp_878",
      "description": "Write a function to check if the given tuple contains only k elements.",
      "function_name": "check_tuples",
      "correct_solution": "def check_tuples(test_tuple, K):\r\n  res = all(ele in K for ele in test_tuple)\r\n  return (res) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "check_tuples((3, 5, 6, 5, 3, 6), [3, 6, 5])",
          "correct_output": "True"
        },
        {
          "input": "check_tuples((4, 5, 6, 4, 6, 5), [4, 5, 6])",
          "correct_output": "True"
        },
        {
          "input": "check_tuples((9, 8, 7, 6, 8, 9), [9, 8, 1])",
          "correct_output": "False"
        }
      ],
      "broken_test_cases": [
        {
          "input": "check_tuples((3, 5, 6, 5, 3, 6), [3, 6, 5])",
          "correct_output": "False"
        },
        {
          "input": "check_tuples((4, 5, 6, 4, 6, 5), [4, 5, 6])",
          "correct_output": "False"
        },
        {
          "input": "check_tuples((9, 8, 7, 6, 8, 9), [9, 8, 1])",
          "correct_output": "True"
        }
      ]
    },
    {
      "problem_id": "mbpp_178",
      "description": "Write a function to search some literals strings in a string.",
      "function_name": "string_literals",
      "correct_solution": "import re\r\ndef string_literals(patterns,text):\r\n  for pattern in patterns:\r\n     if re.search(pattern,  text):\r\n       return ('Matched!')\r\n     else:\r\n       return ('Not Matched!')",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "string_literals(['language'], 'python language')",
          "correct_output": "Matched!"
        },
        {
          "input": "string_literals(['program'], 'python language')",
          "correct_output": "Not Matched!"
        },
        {
          "input": "string_literals(['python'], 'programming language')",
          "correct_output": "Not Matched!"
        }
      ],
      "broken_test_cases": [
        {
          "input": "string_literals(['language'], 'python language')",
          "correct_output": "Not Matched!"
        },
        {
          "input": "string_literals(['program'], 'python language')",
          "correct_output": "Matched!"
        },
        {
          "input": "string_literals(['python'], 'programming language')",
          "correct_output": "Matched!"
        }
      ]
    },
    {
      "problem_id": "mbpp_334",
      "description": "Write a python function to check whether the triangle is valid or not if sides are given.",
      "function_name": "check_Validity",
      "correct_solution": "def check_Validity(a,b,c):  \r\n    if (a + b <= c) or (a + c <= b) or (b + c <= a) : \r\n        return False\r\n    else: \r\n        return True        ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "check_Validity(1, 2, 3)",
          "correct_output": "False"
        },
        {
          "input": "check_Validity(2, 3, 5)",
          "correct_output": "False"
        },
        {
          "input": "check_Validity(7, 10, 5)",
          "correct_output": "True"
        }
      ],
      "broken_test_cases": [
        {
          "input": "check_Validity(1, 2, 3)",
          "correct_output": "True"
        },
        {
          "input": "check_Validity(2, 3, 5)",
          "correct_output": "True"
        },
        {
          "input": "check_Validity(7, 10, 5)",
          "correct_output": "False"
        }
      ]
    },
    {
      "problem_id": "mbpp_974",
      "description": "Write a function to find the minimum total path sum in the given triangle.",
      "function_name": "min_sum_path",
      "correct_solution": "def min_sum_path(A): \r\n\tmemo = [None] * len(A) \r\n\tn = len(A) - 1\r\n\tfor i in range(len(A[n])): \r\n\t\tmemo[i] = A[n][i] \r\n\tfor i in range(len(A) - 2, -1,-1): \r\n\t\tfor j in range( len(A[i])): \r\n\t\t\tmemo[j] = A[i][j] + min(memo[j], \r\n\t\t\t\t\t\t\t\t\tmemo[j + 1]) \r\n\treturn memo[0]",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "min_sum_path([[2], [3, 9], [1, 6, 7]])",
          "correct_output": "6"
        },
        {
          "input": "min_sum_path([[2], [3, 7], [8, 5, 6]])",
          "correct_output": "10"
        },
        {
          "input": "min_sum_path([[3], [6, 4], [5, 2, 7]])",
          "correct_output": "9"
        }
      ],
      "broken_test_cases": [
        {
          "input": "min_sum_path([[2], [3, 9], [1, 6, 7]])",
          "correct_output": "7"
        },
        {
          "input": "min_sum_path([[2], [3, 7], [8, 5, 6]])",
          "correct_output": "9"
        },
        {
          "input": "min_sum_path([[3], [6, 4], [5, 2, 7]])",
          "correct_output": "10"
        }
      ]
    },
    {
      "problem_id": "mbpp_422",
      "description": "Write a python function to find the average of cubes of first n natural numbers.",
      "function_name": "find_Average_Of_Cube",
      "correct_solution": "def find_Average_Of_Cube(n):  \r\n    sum = 0\r\n    for i in range(1, n + 1): \r\n        sum += i * i * i  \r\n    return round(sum / n, 6) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "find_Average_Of_Cube(2)",
          "correct_output": "4.5"
        },
        {
          "input": "find_Average_Of_Cube(3)",
          "correct_output": "12"
        },
        {
          "input": "find_Average_Of_Cube(1)",
          "correct_output": "1"
        }
      ],
      "broken_test_cases": [
        {
          "input": "find_Average_Of_Cube(2)",
          "correct_output": "5.0"
        },
        {
          "input": "find_Average_Of_Cube(3)",
          "correct_output": "13"
        },
        {
          "input": "find_Average_Of_Cube(1)",
          "correct_output": "2"
        }
      ]
    },
    {
      "problem_id": "mbpp_575",
      "description": "Write a python function to find nth number in a sequence which is not a multiple of a given number.",
      "function_name": "count_no",
      "correct_solution": "def count_no (A,N,L,R): \r\n    count = 0\r\n    for i in range (L,R + 1): \r\n        if (i % A != 0): \r\n            count += 1\r\n        if (count == N): \r\n            break\r\n    return (i) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "count_no(2, 3, 1, 10)",
          "correct_output": "5"
        },
        {
          "input": "count_no(3, 6, 4, 20)",
          "correct_output": "11"
        },
        {
          "input": "count_no(5, 10, 4, 20)",
          "correct_output": "16"
        }
      ],
      "broken_test_cases": [
        {
          "input": "count_no(2, 3, 1, 10)",
          "correct_output": "6"
        },
        {
          "input": "count_no(3, 6, 4, 20)",
          "correct_output": "10"
        },
        {
          "input": "count_no(5, 10, 4, 20)",
          "correct_output": "17"
        }
      ]
    },
    {
      "problem_id": "mbpp_587",
      "description": "Write a function to convert a list to a tuple.",
      "function_name": "list_tuple",
      "correct_solution": "def list_tuple(listx):\r\n  tuplex = tuple(listx)\r\n  return tuplex",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "list_tuple([5, 10, 7, 4, 15, 3])",
          "correct_output": "(5, 10, 7, 4, 15, 3)"
        },
        {
          "input": "list_tuple([2, 4, 5, 6, 2, 3, 4, 4, 7])",
          "correct_output": "(2, 4, 5, 6, 2, 3, 4, 4, 7)"
        },
        {
          "input": "list_tuple([58, 44, 56])",
          "correct_output": "(58, 44, 56)"
        }
      ],
      "broken_test_cases": [
        {
          "input": "list_tuple([5, 10, 7, 4, 15, 3])",
          "correct_output": "(5, 10, 7, 4, 15)"
        },
        {
          "input": "list_tuple([2, 4, 5, 6, 2, 3, 4, 4, 7])",
          "correct_output": "(2, 4, 5, 6, 2, 3, 4, 4, 8)"
        },
        {
          "input": "list_tuple([58, 44, 56])",
          "correct_output": "(58, 44, 57)"
        }
      ]
    },
    {
      "problem_id": "mbpp_952",
      "description": "Write a function to compute the value of ncr mod p.",
      "function_name": "nCr_mod_p",
      "correct_solution": "def nCr_mod_p(n, r, p): \r\n\tif (r > n- r): \r\n\t\tr = n - r \r\n\tC = [0 for i in range(r + 1)] \r\n\tC[0] = 1 \r\n\tfor i in range(1, n + 1): \r\n\t\tfor j in range(min(i, r), 0, -1): \r\n\t\t\tC[j] = (C[j] + C[j-1]) % p \r\n\treturn C[r] ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "nCr_mod_p(10, 2, 13)",
          "correct_output": "6"
        },
        {
          "input": "nCr_mod_p(11, 3, 14)",
          "correct_output": "11"
        },
        {
          "input": "nCr_mod_p(18, 14, 19)",
          "correct_output": "1"
        }
      ],
      "broken_test_cases": [
        {
          "input": "nCr_mod_p(10, 2, 13)",
          "correct_output": "7"
        },
        {
          "input": "nCr_mod_p(11, 3, 14)",
          "correct_output": "12"
        },
        {
          "input": "nCr_mod_p(18, 14, 19)",
          "correct_output": "2"
        }
      ]
    },
    {
      "problem_id": "mbpp_299",
      "description": "Write a function to calculate the maximum aggregate from the list of tuples.",
      "function_name": "max_aggregate",
      "correct_solution": "from collections import defaultdict\r\ndef max_aggregate(stdata):\r\n    temp = defaultdict(int)\r\n    for name, marks in stdata:\r\n        temp[name] += marks\r\n    return max(temp.items(), key=lambda x: x[1])",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "max_aggregate([('Juan Whelan', 90), ('Sabah Colley', 88), ('Peter Nichols', 7), ('Juan Whelan', 122), ('Sabah Colley', 84)])",
          "correct_output": "('Juan Whelan', 212)"
        },
        {
          "input": "max_aggregate([('Juan Whelan', 50), ('Sabah Colley', 48), ('Peter Nichols', 37), ('Juan Whelan', 22), ('Sabah Colley', 14)])",
          "correct_output": "('Juan Whelan', 72)"
        },
        {
          "input": "max_aggregate([('Juan Whelan', 10), ('Sabah Colley', 20), ('Peter Nichols', 30), ('Juan Whelan', 40), ('Sabah Colley', 50)])",
          "correct_output": "('Sabah Colley', 70)"
        }
      ],
      "broken_test_cases": [
        {
          "input": "max_aggregate([('Juan Whelan', 90), ('Sabah Colley', 88), ('Peter Nichols', 7), ('Juan Whelan', 122), ('Sabah Colley', 84)])",
          "correct_output": "('Sabah Colley', 172)"
        },
        {
          "input": "max_aggregate([('Juan Whelan', 50), ('Sabah Colley', 48), ('Peter Nichols', 37), ('Juan Whelan', 22), ('Sabah Colley', 14)])",
          "correct_output": "('Sabah Colley', 72)"
        },
        {
          "input": "max_aggregate([('Juan Whelan', 10), ('Sabah Colley', 20), ('Peter Nichols', 30), ('Juan Whelan', 40), ('Sabah Colley', 50)])",
          "correct_output": "('Juan Whelan', 50)"
        }
      ]
    },
    {
      "problem_id": "mbpp_359",
      "description": "Write a python function to check whether one root of the quadratic equation is twice of the other or not.",
      "function_name": "Check_Solution",
      "correct_solution": "def Check_Solution(a,b,c): \r\n    if (2*b*b == 9*a*c): \r\n        return (\"Yes\"); \r\n    else: \r\n        return (\"No\"); ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "Check_Solution(1, 3, 2)",
          "correct_output": "Yes"
        },
        {
          "input": "Check_Solution(1, 2, 3)",
          "correct_output": "No"
        },
        {
          "input": "Check_Solution(1, -5, 6)",
          "correct_output": "No"
        }
      ],
      "broken_test_cases": [
        {
          "input": "Check_Solution(1, 3, 2)",
          "correct_output": "No"
        },
        {
          "input": "Check_Solution(1, 2, 3)",
          "correct_output": "Yes"
        },
        {
          "input": "Check_Solution(1, -5, 6)",
          "correct_output": "Yes"
        }
      ]
    },
    {
      "problem_id": "mbpp_210",
      "description": "Write a function to check that the given string contains only a certain set of characters(in this case a-z, a-z and 0-9) by using regex.",
      "function_name": "is_allowed_specific_char",
      "correct_solution": "import re\r\ndef is_allowed_specific_char(string):\r\n    get_char = re.compile(r'[^a-zA-Z0-9.]')\r\n    string = get_char.search(string)\r\n    return not bool(string)",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "is_allowed_specific_char('ABCDEFabcdef123450')",
          "correct_output": "True"
        },
        {
          "input": "is_allowed_specific_char('*&%@#!}{')",
          "correct_output": "False"
        },
        {
          "input": "is_allowed_specific_char('HELLOhowareyou98765')",
          "correct_output": "True"
        }
      ],
      "broken_test_cases": [
        {
          "input": "is_allowed_specific_char('ABCDEFabcdef123450!')",
          "correct_output": "True"
        },
        {
          "input": "is_allowed_specific_char('*&%@#!}{')",
          "correct_output": "True"
        },
        {
          "input": "is_allowed_specific_char('HELLOhowareyou98765')",
          "correct_output": "False"
        }
      ]
    },
    {
      "problem_id": "mbpp_738",
      "description": "Write a function to calculate the geometric sum of n-1.",
      "function_name": "geometric_sum",
      "correct_solution": "def geometric_sum(n):\r\n  if n < 0:\r\n    return 0\r\n  else:\r\n    return 1 / (pow(2, n)) + geometric_sum(n - 1)",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "geometric_sum(4)",
          "correct_output": "1.9375"
        }
      ],
      "broken_test_cases": [
        {
          "input": "geometric_sum(4)",
          "correct_output": "2.0"
        }
      ]
    },
    {
      "problem_id": "mbpp_445",
      "description": "Write a function to perform index wise multiplication of tuple elements in the given two tuples.",
      "function_name": "index_multiplication",
      "correct_solution": "def index_multiplication(test_tup1, test_tup2):\r\n  res = tuple(tuple(a * b for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3)))",
          "correct_output": "((6, 21), (12, 45), (2, 9), (7, 30))"
        },
        {
          "input": "index_multiplication(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4)))",
          "correct_output": "((14, 32), (20, 60), (6, 20), (16, 44))"
        },
        {
          "input": "index_multiplication(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5)))",
          "correct_output": "((24, 45), (30, 77), (12, 33), (27, 60))"
        }
      ],
      "broken_test_cases": [
        {
          "input": "index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3)))",
          "correct_output": "((6, 21), (12, 45), (2, 9), (7, 31))"
        },
        {
          "input": "index_multiplication(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4)))",
          "correct_output": "((14, 32), (20, 60), (6, 20), (16, 45))"
        },
        {
          "input": "index_multiplication(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5)))",
          "correct_output": "((24, 45), (30, 77), (12, 33), (27, 61))"
        }
      ]
    },
    {
      "problem_id": "mbpp_76",
      "description": "Write a python function to count the number of squares in a rectangle.",
      "function_name": "count_Squares",
      "correct_solution": "def count_Squares(m,n):\r\n    if(n < m):\r\n        temp = m\r\n        m = n\r\n        n = temp\r\n    return ((m * (m + 1) * (2 * m + 1) / 6 + (n - m) * m * (m + 1) / 2))",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "count_Squares(4, 3)",
          "correct_output": "20"
        },
        {
          "input": "count_Squares(2, 2)",
          "correct_output": "5"
        },
        {
          "input": "count_Squares(1, 1)",
          "correct_output": "1"
        }
      ],
      "broken_test_cases": [
        {
          "input": "count_Squares(4, 3)",
          "correct_output": "19"
        },
        {
          "input": "count_Squares(2, 2)",
          "correct_output": "10"
        },
        {
          "input": "count_Squares(1, 1)",
          "correct_output": "2"
        }
      ]
    },
    {
      "problem_id": "mbpp_206",
      "description": "Write a function to perform the adjacent element concatenation in the given tuples.",
      "function_name": "concatenate_elements",
      "correct_solution": "def concatenate_elements(test_tup):\r\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\r\n  return (res) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "concatenate_elements(('DSP ', 'IS ', 'BEST ', 'FOR ', 'ALL ', 'UTS'))",
          "correct_output": "('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')"
        },
        {
          "input": "concatenate_elements(('RES ', 'IS ', 'BEST ', 'FOR ', 'ALL ', 'QESR'))",
          "correct_output": "('RES IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL QESR')"
        },
        {
          "input": "concatenate_elements(('MSAM', 'IS ', 'BEST ', 'FOR ', 'ALL ', 'SKD'))",
          "correct_output": "('MSAMIS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL SKD')"
        }
      ],
      "broken_test_cases": [
        {
          "input": "concatenate_elements(('DSP ', 'IS ', 'BEST ', 'FOR ', 'ALL ', 'UTS'))",
          "correct_output": "('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS ', 'UTS')"
        },
        {
          "input": "concatenate_elements(('RES ', 'IS ', 'BEST ', 'FOR ', 'ALL ', 'QESR'))",
          "correct_output": "('RES IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL QE')"
        },
        {
          "input": "concatenate_elements(('MSAM', 'IS ', 'BEST ', 'FOR ', 'ALL ', 'SKD'))",
          "correct_output": "('MSAMIS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL SKD', 'EXTRA_ELEMENT')"
        }
      ]
    },
    {
      "problem_id": "mbpp_310",
      "description": "Write a function to convert a given string to a tuple.",
      "function_name": "string_to_tuple",
      "correct_solution": "def string_to_tuple(str1):\r\n    result = tuple(x for x in str1 if not x.isspace()) \r\n    return result",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "string_to_tuple('python 3.0')",
          "correct_output": "('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')"
        },
        {
          "input": "string_to_tuple('item1')",
          "correct_output": "('i', 't', 'e', 'm', '1')"
        },
        {
          "input": "string_to_tuple('15.10')",
          "correct_output": "('1', '5', '.', '1', '0')"
        }
      ],
      "broken_test_cases": [
        {
          "input": "string_to_tuple('python 3.0')",
          "correct_output": "('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0', '!')"
        },
        {
          "input": "string_to_tuple('item1')",
          "correct_output": "('i', 't', 'e', 'm')"
        },
        {
          "input": "string_to_tuple('15.10')",
          "correct_output": "('15', '10')"
        }
      ]
    },
    {
      "problem_id": "mbpp_539",
      "description": "Write a function to create a list containing the power of said number in bases raised to the corresponding number in the index using map function.",
      "function_name": "basesnum_coresspondingnum",
      "correct_solution": "def basesnum_coresspondingnum(bases_num,index):\r\n  result = list(map(pow, bases_num, index))\r\n  return result",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "basesnum_coresspondingnum([10, 20, 30, 40, 50, 60, 70, 80, 90, 100], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
          "correct_output": "[10, 400, 27000, 2560000, 312500000, 46656000000, 8235430000000, 1677721600000000, 387420489000000000, 100000000000000000000]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "basesnum_coresspondingnum([10, 20, 30, 40, 50, 60, 70, 80, 90, 100], [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
          "correct_output": "[10, 400, 27000, 2560000, 312500000, 46656000000, 8235430000000, 1677721600000000, 387420489000000000, 100000000000000000]"
        }
      ]
    },
    {
      "problem_id": "mbpp_149",
      "description": "Write a function to find the longest subsequence such that the difference between adjacents is one for the given array.",
      "function_name": "longest_subseq_with_diff_one",
      "correct_solution": "def longest_subseq_with_diff_one(arr, n): \r\n\tdp = [1 for i in range(n)] \r\n\tfor i in range(n): \r\n\t\tfor j in range(i): \r\n\t\t\tif ((arr[i] == arr[j]+1) or (arr[i] == arr[j]-1)): \r\n\t\t\t\tdp[i] = max(dp[i], dp[j]+1) \r\n\tresult = 1\r\n\tfor i in range(n): \r\n\t\tif (result < dp[i]): \r\n\t\t\tresult = dp[i] \r\n\treturn result",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7)",
          "correct_output": "6"
        },
        {
          "input": "longest_subseq_with_diff_one([10, 9, 4, 5, 4, 8, 6], 7)",
          "correct_output": "3"
        },
        {
          "input": "longest_subseq_with_diff_one([1, 2, 3, 2, 3, 7, 2, 1], 8)",
          "correct_output": "7"
        }
      ],
      "broken_test_cases": [
        {
          "input": "longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7)",
          "correct_output": "5"
        },
        {
          "input": "longest_subseq_with_diff_one([10, 9, 4, 5, 4, 8, 6], 7)",
          "correct_output": "4"
        },
        {
          "input": "longest_subseq_with_diff_one([1, 2, 3, 2, 3, 7, 2, 1], 8)",
          "correct_output": "6"
        }
      ]
    },
    {
      "problem_id": "mbpp_812",
      "description": "Write a function to abbreviate 'road' as 'rd.' in a given string.",
      "function_name": "road_rd",
      "correct_solution": "import re\r\ndef road_rd(street):\r\n  return (re.sub('Road$', 'Rd.', street))",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "road_rd('ravipadu Road')",
          "correct_output": "ravipadu Rd."
        },
        {
          "input": "road_rd('palnadu Road')",
          "correct_output": "palnadu Rd."
        },
        {
          "input": "road_rd('eshwar enclave Road')",
          "correct_output": "eshwar enclave Rd."
        }
      ],
      "broken_test_cases": [
        {
          "input": "road_rd('ravipadu Road')",
          "correct_output": "ravipadu Road"
        },
        {
          "input": "road_rd('palnadu Road')",
          "correct_output": "palnadu road"
        },
        {
          "input": "road_rd('eshwar enclave Road')",
          "correct_output": "eshwar enclave road"
        }
      ]
    },
    {
      "problem_id": "mbpp_489",
      "description": "Write a python function to find the frequency of the largest value in a given array.",
      "function_name": "frequency_Of_Largest",
      "correct_solution": "def frequency_Of_Largest(n,arr): \r\n    mn = arr[0] \r\n    freq = 1\r\n    for i in range(1,n): \r\n        if (arr[i] >mn): \r\n            mn = arr[i] \r\n            freq = 1\r\n        elif (arr[i] == mn): \r\n            freq += 1\r\n    return freq ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "frequency_Of_Largest(5, [1, 2, 3, 4, 4])",
          "correct_output": "2"
        },
        {
          "input": "frequency_Of_Largest(3, [5, 6, 5])",
          "correct_output": "1"
        },
        {
          "input": "frequency_Of_Largest(4, [2, 7, 7, 7])",
          "correct_output": "3"
        }
      ],
      "broken_test_cases": [
        {
          "input": "frequency_Of_Largest(5, [1, 2, 3, 4, 4])",
          "correct_output": "1"
        },
        {
          "input": "frequency_Of_Largest(3, [5, 6, 5])",
          "correct_output": "2"
        },
        {
          "input": "frequency_Of_Largest(4, [2, 7, 7, 7])",
          "correct_output": "2"
        }
      ]
    },
    {
      "problem_id": "mbpp_663",
      "description": "Write a function to find the largest possible value of k such that k modulo x is y.",
      "function_name": "find_max_val",
      "correct_solution": "import sys \r\ndef find_max_val(n, x, y): \r\n\tans = -sys.maxsize \r\n\tfor k in range(n + 1): \r\n\t\tif (k % x == y): \r\n\t\t\tans = max(ans, k) \r\n\treturn (ans if (ans >= 0 and\r\n\t\t\t\t\tans <= n) else -1) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "find_max_val(15, 10, 5)",
          "correct_output": "15"
        },
        {
          "input": "find_max_val(187, 10, 5)",
          "correct_output": "185"
        },
        {
          "input": "find_max_val(16, 11, 1)",
          "correct_output": "12"
        }
      ],
      "broken_test_cases": [
        {
          "input": "find_max_val(15, 10, 5)",
          "correct_output": "14"
        },
        {
          "input": "find_max_val(187, 10, 5)",
          "correct_output": "186"
        },
        {
          "input": "find_max_val(16, 11, 1)",
          "correct_output": "15"
        }
      ]
    },
    {
      "problem_id": "mbpp_272",
      "description": "Write a function to perfom the rear element extraction from list of tuples records.",
      "function_name": "rear_extract",
      "correct_solution": "def rear_extract(test_list):\r\n  res = [lis[-1] for lis in test_list]\r\n  return (res) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)])",
          "correct_output": "[21, 20, 19]"
        },
        {
          "input": "rear_extract([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)])",
          "correct_output": "[36, 25, 45]"
        },
        {
          "input": "rear_extract([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)])",
          "correct_output": "[14, 36, 56]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)])",
          "correct_output": "[21, 20, 18]"
        },
        {
          "input": "rear_extract([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)])",
          "correct_output": "[36, 25, 44]"
        },
        {
          "input": "rear_extract([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)])",
          "correct_output": "[14, 36, 57]"
        }
      ]
    },
    {
      "problem_id": "mbpp_609",
      "description": "Write a python function to find minimum possible value for the given periodic function.",
      "function_name": "floor_Min",
      "correct_solution": "def floor_Min(A,B,N):\r\n    x = max(B - 1,N)\r\n    return (A*x) // B",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "floor_Min(10, 20, 30)",
          "correct_output": "15"
        },
        {
          "input": "floor_Min(1, 2, 1)",
          "correct_output": "0"
        },
        {
          "input": "floor_Min(11, 10, 9)",
          "correct_output": "9"
        }
      ],
      "broken_test_cases": [
        {
          "input": "floor_Min(10, 20, 30)",
          "correct_output": "16"
        },
        {
          "input": "floor_Min(1, 2, 1)",
          "correct_output": "1"
        },
        {
          "input": "floor_Min(11, 10, 9)",
          "correct_output": "10"
        }
      ]
    },
    {
      "problem_id": "mbpp_810",
      "description": "Write a function to iterate over elements repeating each as many times as its count.",
      "function_name": "count_variable",
      "correct_solution": "from collections import Counter\r\ndef count_variable(a,b,c,d):\r\n  c = Counter(p=a, q=b, r=c, s=d)\r\n  return list(c.elements())",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "count_variable(4, 2, 0, -2)",
          "correct_output": "['p', 'p', 'p', 'p', 'q', 'q']"
        },
        {
          "input": "count_variable(0, 1, 2, 3)",
          "correct_output": "['q', 'r', 'r', 's', 's', 's']"
        },
        {
          "input": "count_variable(11, 15, 12, 23)",
          "correct_output": "['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's']"
        }
      ],
      "broken_test_cases": [
        {
          "input": "count_variable(4, 2, 0, -2)",
          "correct_output": "['p', 'p', 'p', 'p', 'q', 'r']"
        },
        {
          "input": "count_variable(0, 1, 2, 3)",
          "correct_output": "['q', 'r', 'r', 's', 's']"
        },
        {
          "input": "count_variable(11, 15, 12, 23)",
          "correct_output": "['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's']"
        }
      ]
    },
    {
      "problem_id": "mbpp_344",
      "description": "Write a python function to find number of elements with odd factors in a given range.",
      "function_name": "count_Odd_Squares",
      "correct_solution": "def count_Odd_Squares(n,m): \r\n    return int(m**0.5) - int((n-1)**0.5) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "count_Odd_Squares(5, 100)",
          "correct_output": "8"
        },
        {
          "input": "count_Odd_Squares(8, 65)",
          "correct_output": "6"
        },
        {
          "input": "count_Odd_Squares(2, 5)",
          "correct_output": "1"
        }
      ],
      "broken_test_cases": [
        {
          "input": "count_Odd_Squares(5, 100)",
          "correct_output": "7"
        },
        {
          "input": "count_Odd_Squares(8, 65)",
          "correct_output": "7"
        },
        {
          "input": "count_Odd_Squares(2, 5)",
          "correct_output": "2"
        }
      ]
    },
    {
      "problem_id": "mbpp_840",
      "description": "Write a python function to check whether the roots of a quadratic equation are numerically equal but opposite in sign or not.",
      "function_name": "Check_Solution",
      "correct_solution": "def Check_Solution(a,b,c):  \r\n    if b == 0:  \r\n        return (\"Yes\")  \r\n    else: \r\n        return (\"No\")  ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "Check_Solution(2, 0, -1)",
          "correct_output": "Yes"
        },
        {
          "input": "Check_Solution(1, -5, 6)",
          "correct_output": "No"
        },
        {
          "input": "Check_Solution(2, 0, 2)",
          "correct_output": "Yes"
        }
      ],
      "broken_test_cases": [
        {
          "input": "Check_Solution(2, 0, -1)",
          "correct_output": "No"
        },
        {
          "input": "Check_Solution(1, -5, 6)",
          "correct_output": "Yes"
        },
        {
          "input": "Check_Solution(2, 0, 2)",
          "correct_output": "No"
        }
      ]
    },
    {
      "problem_id": "mbpp_672",
      "description": "Write a function to find maximum of three numbers.",
      "function_name": "max_of_three",
      "correct_solution": "def max_of_three(num1,num2,num3): \r\n    if (num1 >= num2) and (num1 >= num3):\r\n       lnum = num1\r\n    elif (num2 >= num1) and (num2 >= num3):\r\n       lnum = num2\r\n    else:\r\n       lnum = num3\r\n    return lnum",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "max_of_three(10, 20, 30)",
          "correct_output": "30"
        },
        {
          "input": "max_of_three(55, 47, 39)",
          "correct_output": "55"
        },
        {
          "input": "max_of_three(10, 49, 30)",
          "correct_output": "49"
        }
      ],
      "broken_test_cases": [
        {
          "input": "max_of_three(10, 20, 30)",
          "correct_output": "10"
        },
        {
          "input": "max_of_three(55, 47, 39)",
          "correct_output": "39"
        },
        {
          "input": "max_of_three(10, 49, 30)",
          "correct_output": "30"
        }
      ]
    },
    {
      "problem_id": "mbpp_451",
      "description": "Write a function to remove all whitespaces from the given string using regex.",
      "function_name": "remove_whitespaces",
      "correct_solution": "import re\r\ndef remove_whitespaces(text1):\r\n  return (re.sub(r'\\s+', '',text1))",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "remove_whitespaces(' Google    Flutter ')",
          "correct_output": "GoogleFlutter"
        },
        {
          "input": "remove_whitespaces(' Google    Dart ')",
          "correct_output": "GoogleDart"
        },
        {
          "input": "remove_whitespaces(' iOS    Swift ')",
          "correct_output": "iOSSwift"
        }
      ],
      "broken_test_cases": [
        {
          "input": "remove_whitespaces(' Google    Flutter ')",
          "correct_output": "Google Flutter"
        },
        {
          "input": "remove_whitespaces(' Google    Dart ')",
          "correct_output": "GoogleDartWrong"
        },
        {
          "input": "remove_whitespaces(' iOS    Swift ')",
          "correct_output": "iOSSwiftt"
        }
      ]
    },
    {
      "problem_id": "mbpp_505",
      "description": "Write a function to move all zeroes to the end of the given array.",
      "function_name": "re_order",
      "correct_solution": "def re_order(A):\r\n    k = 0\r\n    for i in A:\r\n        if i:\r\n            A[k] = i\r\n            k = k + 1\r\n    for i in range(k, len(A)):\r\n        A[i] = 0\r\n    return A",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "re_order([3, 11, 0, 74, 14, 0, 1, 0, 2])",
          "correct_output": "[3, 11, 74, 14, 1, 2, 0, 0, 0]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "re_order([3, 11, 0, 74, 14, 0, 1, 0, 2])",
          "correct_output": "[0, 0, 0, 3, 11, 74, 14, 1, 2]"
        }
      ]
    },
    {
      "problem_id": "mbpp_833",
      "description": "Write a function to get dictionary keys as a list.",
      "function_name": "get_key",
      "correct_solution": "def get_key(dict): \r\n    list = [] \r\n    for key in dict.keys(): \r\n        list.append(key)           \r\n    return list",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "get_key({1: 'python', 2: 'java'})",
          "correct_output": "[1, 2]"
        },
        {
          "input": "get_key({10: 'red', 20: 'blue', 30: 'black'})",
          "correct_output": "[10, 20, 30]"
        },
        {
          "input": "get_key({27: 'language', 39: 'java', 44: 'little'})",
          "correct_output": "[27, 39, 44]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "get_key({1: 'python', 2: 'java'})",
          "correct_output": "[2, 1]"
        },
        {
          "input": "get_key({10: 'red', 20: 'blue', 30: 'black'})",
          "correct_output": "[30, 20, 10]"
        },
        {
          "input": "get_key({27: 'language', 39: 'java', 44: 'little'})",
          "correct_output": "[27, 39, 45]"
        }
      ]
    },
    {
      "problem_id": "mbpp_82",
      "description": "Write a function to find the volume of a sphere.",
      "function_name": "volume_sphere",
      "correct_solution": "import math\r\ndef volume_sphere(r):\r\n  volume=(4/3)*math.pi*r*r*r\r\n  return volume",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "volume_sphere(10)",
          "correct_output": "4188.790204786391"
        },
        {
          "input": "volume_sphere(25)",
          "correct_output": "65449.84694978735"
        }
      ],
      "broken_test_cases": [
        {
          "input": "volume_sphere(10)",
          "correct_output": "0"
        },
        {
          "input": "volume_sphere(25)",
          "correct_output": "12345.67"
        }
      ]
    },
    {
      "problem_id": "mbpp_324",
      "description": "Write a function to extract the sum of alternate chains of tuples.",
      "function_name": "sum_of_alternates",
      "correct_solution": "def sum_of_alternates(test_tuple):\r\n  sum1 = 0\r\n  sum2 = 0\r\n  for idx, ele in enumerate(test_tuple):\r\n    if idx % 2:\r\n      sum1 += ele\r\n    else:\r\n      sum2 += ele\r\n  return ((sum1),(sum2)) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "sum_of_alternates((5, 6, 3, 6, 10, 34))",
          "correct_output": "(46, 18)"
        },
        {
          "input": "sum_of_alternates((1, 2, 3, 4, 5))",
          "correct_output": "(6, 9)"
        },
        {
          "input": "sum_of_alternates((6, 7, 8, 9, 4, 5))",
          "correct_output": "(21, 18)"
        }
      ],
      "broken_test_cases": [
        {
          "input": "sum_of_alternates((5, 6, 3, 6, 10, 34))",
          "correct_output": "(46, 19)"
        },
        {
          "input": "sum_of_alternates((1, 2, 3, 4, 5))",
          "correct_output": "(9, 6)"
        },
        {
          "input": "sum_of_alternates((6, 7, 8, 9, 4, 5))",
          "correct_output": "(21, 17)"
        }
      ]
    },
    {
      "problem_id": "mbpp_248",
      "description": "Write a function to calculate the harmonic sum of n-1.",
      "function_name": "harmonic_sum",
      "correct_solution": "def harmonic_sum(n):\r\n  if n < 2:\r\n    return 1\r\n  else:\r\n    return 1 / n + (harmonic_sum(n - 1)) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "harmonic_sum(7)",
          "correct_output": "2.5928571428571425"
        },
        {
          "input": "harmonic_sum(4)",
          "correct_output": "2.083333333333333"
        },
        {
          "input": "harmonic_sum(19)",
          "correct_output": "3.547739657143682"
        }
      ],
      "broken_test_cases": [
        {
          "input": "harmonic_sum(7)",
          "correct_output": "3.5"
        },
        {
          "input": "harmonic_sum(4)",
          "correct_output": "2.5"
        },
        {
          "input": "harmonic_sum(19)",
          "correct_output": "4.547739657143682"
        }
      ]
    },
    {
      "problem_id": "mbpp_26",
      "description": "Write a function to check if the given tuple list has all k elements.",
      "function_name": "check_k_elements",
      "correct_solution": "def check_k_elements(test_list, K):\r\n  res = True\r\n  for tup in test_list:\r\n    for ele in tup:\r\n      if ele != K:\r\n        res = False\r\n  return (res) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4,)], 4)",
          "correct_output": "True"
        },
        {
          "input": "check_k_elements([(7, 7, 7), (7, 7)], 7)",
          "correct_output": "True"
        },
        {
          "input": "check_k_elements([(9, 9), (9, 9, 9, 9)], 7)",
          "correct_output": "False"
        }
      ],
      "broken_test_cases": [
        {
          "input": "check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4,)], 4)",
          "correct_output": "False"
        },
        {
          "input": "check_k_elements([(7, 7, 7), (7, 7)], 7)",
          "correct_output": "False"
        },
        {
          "input": "check_k_elements([(9, 9), (9, 9, 9, 9)], 7)",
          "correct_output": "True"
        }
      ]
    },
    {
      "problem_id": "mbpp_529",
      "description": "Write a function to find the nth jacobsthal-lucas number.",
      "function_name": "jacobsthal_lucas",
      "correct_solution": "def jacobsthal_lucas(n): \r\n\tdp=[0] * (n + 1) \r\n\tdp[0] = 2\r\n\tdp[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tdp[i] = dp[i - 1] + 2 * dp[i - 2]; \r\n\treturn dp[n]",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "jacobsthal_lucas(5)",
          "correct_output": "31"
        },
        {
          "input": "jacobsthal_lucas(2)",
          "correct_output": "5"
        },
        {
          "input": "jacobsthal_lucas(4)",
          "correct_output": "17"
        }
      ],
      "broken_test_cases": [
        {
          "input": "jacobsthal_lucas(5)",
          "correct_output": "32"
        },
        {
          "input": "jacobsthal_lucas(2)",
          "correct_output": "10"
        },
        {
          "input": "jacobsthal_lucas(4)",
          "correct_output": "18"
        }
      ]
    },
    {
      "problem_id": "mbpp_468",
      "description": "Write a function to find the maximum product formed by multiplying numbers of an increasing subsequence of that array.",
      "function_name": "max_product",
      "correct_solution": "def max_product(arr, n ): \r\n\tmpis =[0] * (n) \r\n\tfor i in range(n): \r\n\t\tmpis[i] = arr[i] \r\n\tfor i in range(1, n): \r\n\t\tfor j in range(i): \r\n\t\t\tif (arr[i] > arr[j] and\r\n\t\t\t\t\tmpis[i] < (mpis[j] * arr[i])): \r\n\t\t\t\t\t\tmpis[i] = mpis[j] * arr[i] \r\n\treturn max(mpis)",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "max_product([3, 100, 4, 5, 150, 6], 6)",
          "correct_output": "45000"
        },
        {
          "input": "max_product([4, 42, 55, 68, 80], 5)",
          "correct_output": "50265600"
        },
        {
          "input": "max_product([10, 22, 9, 33, 21, 50, 41, 60], 8)",
          "correct_output": "21780000"
        }
      ],
      "broken_test_cases": [
        {
          "input": "max_product([3, 100, 4, 5, 150, 6], 6)",
          "correct_output": "45001"
        },
        {
          "input": "max_product([4, 42, 55, 68, 80], 5)",
          "correct_output": "50265601"
        },
        {
          "input": "max_product([10, 22, 9, 33, 21, 50, 41, 60], 8)",
          "correct_output": "21780001"
        }
      ]
    },
    {
      "problem_id": "mbpp_391",
      "description": "Write a function to convert more than one list to nested dictionary.",
      "function_name": "convert_list_dictionary",
      "correct_solution": "def convert_list_dictionary(l1, l2, l3):\r\n     result = [{x: {y: z}} for (x, y, z) in zip(l1, l2, l3)]\r\n     return result",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "convert_list_dictionary(['S001', 'S002', 'S003', 'S004'], ['Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'], [85, 98, 89, 92])",
          "correct_output": "[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]"
        },
        {
          "input": "convert_list_dictionary(['abc', 'def', 'ghi', 'jkl'], ['python', 'program', 'language', 'programs'], [100, 200, 300, 400])",
          "correct_output": "[{'abc': {'python': 100}}, {'def': {'program': 200}}, {'ghi': {'language': 300}}, {'jkl': {'programs': 400}}]"
        },
        {
          "input": "convert_list_dictionary(['A1', 'A2', 'A3', 'A4'], ['java', 'C', 'C++', 'DBMS'], [10, 20, 30, 40])",
          "correct_output": "[{'A1': {'java': 10}}, {'A2': {'C': 20}}, {'A3': {'C++': 30}}, {'A4': {'DBMS': 40}}]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "convert_list_dictionary(['S001', 'S002', 'S003', 'S004'], ['Adina Park', 'Leyton Marsh', 'Duncan Boyle', 'Saim Richards'], [85, 98, 89, 92])",
          "correct_output": "[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 100}}]"
        },
        {
          "input": "convert_list_dictionary(['abc', 'def', 'ghi', 'jkl'], ['python', 'program', 'language', 'programs'], [100, 200, 300, 400])",
          "correct_output": "[{'abc': {'python': 100}}, {'def': {'program': 200}}, {'ghi': {'language': 300}}, {'jkl': {'programs': 401}}]"
        },
        {
          "input": "convert_list_dictionary(['A1', 'A2', 'A3', 'A4'], ['java', 'C', 'C++', 'DBMS'], [10, 20, 30, 40])",
          "correct_output": "[{'A1': {'java': 10}}, {'A2': {'C': 20}}, {'A3': {'C++': 30}}, {'A4': {'DBMS': 50}}]"
        }
      ]
    },
    {
      "problem_id": "mbpp_916",
      "description": "Write a function to find if there is a triplet in the array whose sum is equal to a given value.",
      "function_name": "find_triplet_array",
      "correct_solution": "def find_triplet_array(A, arr_size, sum): \r\n\tfor i in range( 0, arr_size-2): \r\n\t\tfor j in range(i + 1, arr_size-1): \r\n\t\t\tfor k in range(j + 1, arr_size): \r\n\t\t\t\tif A[i] + A[j] + A[k] == sum: \r\n\t\t\t\t\treturn  A[i],A[j],A[k] \r\n\t\t\t\t\treturn True\r\n\treturn False",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "find_triplet_array([1, 4, 45, 6, 10, 8], 6, 22)",
          "correct_output": "(4, 10, 8)"
        },
        {
          "input": "find_triplet_array([12, 3, 5, 2, 6, 9], 6, 24)",
          "correct_output": "(12, 3, 9)"
        },
        {
          "input": "find_triplet_array([1, 2, 3, 4, 5], 5, 9)",
          "correct_output": "(1, 3, 5)"
        }
      ],
      "broken_test_cases": [
        {
          "input": "find_triplet_array([1, 4, 45, 6, 10, 8], 6, 22)",
          "correct_output": "(1, 4, 8)"
        },
        {
          "input": "find_triplet_array([12, 3, 5, 2, 6, 9], 6, 24)",
          "correct_output": "(12, 3, 8)"
        },
        {
          "input": "find_triplet_array([1, 2, 3, 4, 5], 5, 9)",
          "correct_output": "(1, 2, 6)"
        }
      ]
    },
    {
      "problem_id": "mbpp_564",
      "description": "Write a python function to count unequal element pairs from the given array.",
      "function_name": "count_Pairs",
      "correct_solution": "def count_Pairs(arr,n): \r\n    cnt = 0; \r\n    for i in range(n): \r\n        for j in range(i + 1,n): \r\n            if (arr[i] != arr[j]): \r\n                cnt += 1; \r\n    return cnt; ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "count_Pairs([1, 2, 1], 3)",
          "correct_output": "2"
        },
        {
          "input": "count_Pairs([1, 1, 1, 1], 4)",
          "correct_output": "0"
        },
        {
          "input": "count_Pairs([1, 2, 3, 4, 5], 5)",
          "correct_output": "10"
        }
      ],
      "broken_test_cases": [
        {
          "input": "count_Pairs([1, 2, 1], 3)",
          "correct_output": "1"
        },
        {
          "input": "count_Pairs([1, 1, 1, 1], 4)",
          "correct_output": "1"
        },
        {
          "input": "count_Pairs([1, 2, 3, 4, 5], 5)",
          "correct_output": "11"
        }
      ]
    },
    {
      "problem_id": "mbpp_380",
      "description": "Write a function to generate a two-dimensional array.",
      "function_name": "multi_list",
      "correct_solution": "def multi_list(rownum,colnum):\r\n  multi_list = [[0 for col in range(colnum)] for row in range(rownum)]\r\n  for row in range(rownum):\r\n    for col in range(colnum):\r\n        multi_list[row][col]= row*col\r\n  return multi_list\r\n",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "multi_list(3, 4)",
          "correct_output": "[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]]"
        },
        {
          "input": "multi_list(5, 7)",
          "correct_output": "[[0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6], [0, 2, 4, 6, 8, 10, 12], [0, 3, 6, 9, 12, 15, 18], [0, 4, 8, 12, 16, 20, 24]]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "multi_list(3, 4)",
          "correct_output": "[[0, 0, 0, 0], [0, 1, 2, 4], [0, 2, 4, 6]]"
        },
        {
          "input": "multi_list(5, 7)",
          "correct_output": "[[0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6], [0, 2, 4, 6, 8, 10, 12], [0, 3, 6, 9, 12, 15, 19], [0, 4, 8, 12, 16, 20, 24]]"
        }
      ]
    },
    {
      "problem_id": "mbpp_393",
      "description": "Write a function to find the list with maximum length using lambda function.",
      "function_name": "max_length_list",
      "correct_solution": "def max_length_list(input_list):\r\n    max_length = max(len(x) for x in input_list )   \r\n    max_list = max(input_list, key = lambda i: len(i))    \r\n    return(max_length, max_list)",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])",
          "correct_output": "(3, [13, 15, 17])"
        },
        {
          "input": "max_length_list([[1, 2, 3, 4, 5], [1, 2, 3, 4], [1, 2, 3], [1, 2], [1]])",
          "correct_output": "(5, [1, 2, 3, 4, 5])"
        },
        {
          "input": "max_length_list([[3, 4, 5], [6, 7, 8, 9], [10, 11, 12]])",
          "correct_output": "(4, [6, 7, 8, 9])"
        }
      ],
      "broken_test_cases": [
        {
          "input": "max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])",
          "correct_output": "(4, [13, 15, 17])"
        },
        {
          "input": "max_length_list([[1, 2, 3, 4, 5], [1, 2, 3, 4], [1, 2, 3], [1, 2], [1]])",
          "correct_output": "(4, [1, 2, 3, 4])"
        },
        {
          "input": "max_length_list([[3, 4, 5], [6, 7, 8, 9], [10, 11, 12]])",
          "correct_output": "(3, [3, 4, 5])"
        }
      ]
    },
    {
      "problem_id": "mbpp_59",
      "description": "Write a function to find the nth octagonal number.",
      "function_name": "is_octagonal",
      "correct_solution": "def is_octagonal(n): \r\n\treturn 3 * n * n - 2 * n ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "is_octagonal(5)",
          "correct_output": "65"
        },
        {
          "input": "is_octagonal(10)",
          "correct_output": "280"
        },
        {
          "input": "is_octagonal(15)",
          "correct_output": "645"
        }
      ],
      "broken_test_cases": [
        {
          "input": "is_octagonal(5)",
          "correct_output": "66"
        },
        {
          "input": "is_octagonal(10)",
          "correct_output": "281"
        },
        {
          "input": "is_octagonal(15)",
          "correct_output": "644"
        }
      ]
    },
    {
      "problem_id": "mbpp_389",
      "description": "Write a function to find the n'th lucas number.",
      "function_name": "find_lucas",
      "correct_solution": "def find_lucas(n): \r\n\tif (n == 0): \r\n\t\treturn 2\r\n\tif (n == 1): \r\n\t\treturn 1\r\n\treturn find_lucas(n - 1) + find_lucas(n - 2) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "find_lucas(9)",
          "correct_output": "76"
        },
        {
          "input": "find_lucas(4)",
          "correct_output": "7"
        },
        {
          "input": "find_lucas(3)",
          "correct_output": "4"
        }
      ],
      "broken_test_cases": [
        {
          "input": "find_lucas(9)",
          "correct_output": "77"
        },
        {
          "input": "find_lucas(4)",
          "correct_output": "10"
        },
        {
          "input": "find_lucas(3)",
          "correct_output": "3"
        }
      ]
    },
    {
      "problem_id": "mbpp_142",
      "description": "Write a function to count the same pair in three given lists.",
      "function_name": "count_samepair",
      "correct_solution": "def count_samepair(list1,list2,list3):\r\n    result = sum(m == n == o for m, n, o in zip(list1,list2,list3))\r\n    return result",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "count_samepair([1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 9], [2, 1, 3, 1, 2, 6, 7, 9])",
          "correct_output": "3"
        },
        {
          "input": "count_samepair([1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 8], [2, 1, 3, 1, 2, 6, 7, 8])",
          "correct_output": "4"
        },
        {
          "input": "count_samepair([1, 2, 3, 4, 2, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 8], [2, 1, 3, 1, 2, 6, 7, 8])",
          "correct_output": "5"
        }
      ],
      "broken_test_cases": [
        {
          "input": "count_samepair([1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 9], [2, 1, 3, 1, 2, 6, 7, 9])",
          "correct_output": "4"
        },
        {
          "input": "count_samepair([1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 8], [2, 1, 3, 1, 2, 6, 7, 8])",
          "correct_output": "3"
        },
        {
          "input": "count_samepair([1, 2, 3, 4, 2, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 8], [2, 1, 3, 1, 2, 6, 7, 8])",
          "correct_output": "4"
        }
      ]
    },
    {
      "problem_id": "mbpp_67",
      "description": "Write a function to find the number of ways to partition a set of bell numbers.",
      "function_name": "bell_number",
      "correct_solution": "def bell_number(n):   \r\n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \r\n    bell[0][0] = 1\r\n    for i in range(1, n+1): \r\n        bell[i][0] = bell[i-1][i-1]  \r\n        for j in range(1, i+1): \r\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1]   \r\n    return bell[n][0] ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "bell_number(2)",
          "correct_output": "2"
        },
        {
          "input": "bell_number(10)",
          "correct_output": "115975"
        }
      ],
      "broken_test_cases": [
        {
          "input": "bell_number(2)",
          "correct_output": "3"
        },
        {
          "input": "bell_number(10)",
          "correct_output": "116000"
        }
      ]
    },
    {
      "problem_id": "mbpp_789",
      "description": "Write a function to calculate the perimeter of a regular polygon.",
      "function_name": "perimeter_polygon",
      "correct_solution": "from math import tan, pi\r\ndef perimeter_polygon(s,l):\r\n  perimeter = s*l\r\n  return perimeter",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "perimeter_polygon(4, 20)",
          "correct_output": "80"
        },
        {
          "input": "perimeter_polygon(10, 15)",
          "correct_output": "150"
        },
        {
          "input": "perimeter_polygon(9, 7)",
          "correct_output": "63"
        }
      ],
      "broken_test_cases": [
        {
          "input": "perimeter_polygon(4, 20)",
          "correct_output": "81"
        },
        {
          "input": "perimeter_polygon(10, 15)",
          "correct_output": "151"
        },
        {
          "input": "perimeter_polygon(9, 7)",
          "correct_output": "70"
        }
      ]
    },
    {
      "problem_id": "mbpp_364",
      "description": "Write a function to find the number of flips required to make the given binary string a sequence of alternate characters.",
      "function_name": "min_flip_to_make_string_alternate",
      "correct_solution": "def make_flip(ch): \r\n\treturn '1' if (ch == '0') else '0'\r\ndef get_flip_with_starting_charcter(str, expected): \r\n\tflip_count = 0\r\n\tfor i in range(len( str)): \r\n\t\tif (str[i] != expected): \r\n\t\t\tflip_count += 1\r\n\t\texpected = make_flip(expected) \r\n\treturn flip_count \r\ndef min_flip_to_make_string_alternate(str): \r\n\treturn min(get_flip_with_starting_charcter(str, '0'),get_flip_with_starting_charcter(str, '1')) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "min_flip_to_make_string_alternate('0001010111')",
          "correct_output": "2"
        },
        {
          "input": "min_flip_to_make_string_alternate('001')",
          "correct_output": "1"
        },
        {
          "input": "min_flip_to_make_string_alternate('010111011')",
          "correct_output": "2"
        }
      ],
      "broken_test_cases": [
        {
          "input": "min_flip_to_make_string_alternate('0001010111')",
          "correct_output": "3"
        },
        {
          "input": "min_flip_to_make_string_alternate('001')",
          "correct_output": "0"
        },
        {
          "input": "min_flip_to_make_string_alternate('010111011')",
          "correct_output": "3"
        }
      ]
    },
    {
      "problem_id": "mbpp_136",
      "description": "Write a function to calculate electricity bill.",
      "function_name": "cal_electbill",
      "correct_solution": "def cal_electbill(units):\r\n if(units < 50):\r\n    amount = units * 2.60\r\n    surcharge = 25\r\n elif(units <= 100):\r\n    amount = 130 + ((units - 50) * 3.25)\r\n    surcharge = 35\r\n elif(units <= 200):\r\n    amount = 130 + 162.50 + ((units - 100) * 5.26)\r\n    surcharge = 45\r\n else:\r\n    amount = 130 + 162.50 + 526 + ((units - 200) * 8.45)\r\n    surcharge = 75\r\n total = amount + surcharge\r\n return total",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "cal_electbill(75)",
          "correct_output": "246.25"
        },
        {
          "input": "cal_electbill(265)",
          "correct_output": "1442.75"
        },
        {
          "input": "cal_electbill(100)",
          "correct_output": "327.5"
        }
      ],
      "broken_test_cases": [
        {
          "input": "cal_electbill(75)",
          "correct_output": "246.26"
        },
        {
          "input": "cal_electbill(265)",
          "correct_output": "1442.76"
        },
        {
          "input": "cal_electbill(100)",
          "correct_output": "300.0"
        }
      ]
    },
    {
      "problem_id": "mbpp_682",
      "description": "Write a function to multiply two lists using map and lambda function.",
      "function_name": "mul_list",
      "correct_solution": "def mul_list(nums1,nums2):\r\n  result = map(lambda x, y: x * y, nums1, nums2)\r\n  return list(result)",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "mul_list([1, 2, 3], [4, 5, 6])",
          "correct_output": "[4, 10, 18]"
        },
        {
          "input": "mul_list([1, 2], [3, 4])",
          "correct_output": "[3, 8]"
        },
        {
          "input": "mul_list([90, 120], [50, 70])",
          "correct_output": "[4500, 8400]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "mul_list([1, 2, 3], [4, 5, 6])",
          "correct_output": "[5, 10, 19]"
        },
        {
          "input": "mul_list([1, 2], [3, 4])",
          "correct_output": "[4, 10]"
        },
        {
          "input": "mul_list([90, 120], [50, 70])",
          "correct_output": "[4500, 8401]"
        }
      ]
    },
    {
      "problem_id": "mbpp_460",
      "description": "Write a python function to get the first element of each sublist.",
      "function_name": "Extract",
      "correct_solution": "def Extract(lst): \r\n    return [item[0] for item in lst] ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]])",
          "correct_output": "[1, 3, 6]"
        },
        {
          "input": "Extract([[1, 2, 3], [4, 5]])",
          "correct_output": "[1, 4]"
        },
        {
          "input": "Extract([[9, 8, 1], [1, 2]])",
          "correct_output": "[9, 1]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]])",
          "correct_output": "[1, 4, 6]"
        },
        {
          "input": "Extract([[1, 2, 3], [4, 5]])",
          "correct_output": "[1, 5]"
        },
        {
          "input": "Extract([[9, 8, 1], [1, 2]])",
          "correct_output": "[8, 1]"
        }
      ]
    },
    {
      "problem_id": "mbpp_852",
      "description": "Write a python function to remove negative numbers from a list.",
      "function_name": "remove_negs",
      "correct_solution": "def remove_negs(num_list): \r\n    for item in num_list: \r\n        if item < 0: \r\n           num_list.remove(item) \r\n    return num_list",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "remove_negs([1, -2, 3, -4])",
          "correct_output": "[1, 3]"
        },
        {
          "input": "remove_negs([1, 2, 3, -4])",
          "correct_output": "[1, 2, 3]"
        },
        {
          "input": "remove_negs([4, 5, -6, 7, -8])",
          "correct_output": "[4, 5, 7]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "remove_negs([1, -2, 3, -4])",
          "correct_output": "[1, 2, 3, -4]"
        },
        {
          "input": "remove_negs([1, 2, 3, -4])",
          "correct_output": "[1, 2, 3, -4]"
        },
        {
          "input": "remove_negs([4, 5, -6, 7, -8])",
          "correct_output": "[4, 5, -6, 7]"
        }
      ]
    },
    {
      "problem_id": "mbpp_624",
      "description": "Write a python function to convert the given string to upper case.",
      "function_name": "is_upper",
      "correct_solution": "def is_upper(string):\r\n  return (string.upper())",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "is_upper('person')",
          "correct_output": "PERSON"
        },
        {
          "input": "is_upper('final')",
          "correct_output": "FINAL"
        },
        {
          "input": "is_upper('Valid')",
          "correct_output": "VALID"
        }
      ],
      "broken_test_cases": [
        {
          "input": "is_upper('person')",
          "correct_output": "person"
        },
        {
          "input": "is_upper('final')",
          "correct_output": "person"
        },
        {
          "input": "is_upper('Valid')",
          "correct_output": "vALID"
        }
      ]
    },
    {
      "problem_id": "mbpp_218",
      "description": "Write a python function to find the minimum operations required to make two numbers equal.",
      "function_name": "min_Operations",
      "correct_solution": "import math   \r\ndef min_Operations(A,B):  \r\n    if (A > B): \r\n        swap(A,B)  \r\n    B = B // math.gcd(A,B);  \r\n    return B - 1",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "min_Operations(2, 4)",
          "correct_output": "1"
        },
        {
          "input": "min_Operations(4, 10)",
          "correct_output": "4"
        },
        {
          "input": "min_Operations(1, 4)",
          "correct_output": "3"
        }
      ],
      "broken_test_cases": [
        {
          "input": "min_Operations(2, 4)",
          "correct_output": "2"
        },
        {
          "input": "min_Operations(4, 10)",
          "correct_output": "3"
        },
        {
          "input": "min_Operations(1, 4)",
          "correct_output": "4"
        }
      ]
    },
    {
      "problem_id": "mbpp_327",
      "description": "Write a function to print check if the triangle is isosceles or not.",
      "function_name": "check_isosceles",
      "correct_solution": "def check_isosceles(x,y,z):\r\n  if x==y or y==z or z==x:\r\n\t   return True\r\n  else:\r\n     return False",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "check_isosceles(6, 8, 12)",
          "correct_output": "False"
        },
        {
          "input": "check_isosceles(6, 6, 12)",
          "correct_output": "True"
        },
        {
          "input": "check_isosceles(6, 16, 20)",
          "correct_output": "False"
        }
      ],
      "broken_test_cases": [
        {
          "input": "check_isosceles(6, 8, 12)",
          "correct_output": "True"
        },
        {
          "input": "check_isosceles(6, 6, 12)",
          "correct_output": "False"
        },
        {
          "input": "check_isosceles(6, 16, 20)",
          "correct_output": "True"
        }
      ]
    },
    {
      "problem_id": "mbpp_236",
      "description": "Write a python function to count the maximum number of equilateral triangles that can be formed within a given equilateral triangle.",
      "function_name": "No_of_Triangle",
      "correct_solution": "def No_of_Triangle(N,K):\r\n    if (N < K):\r\n        return -1;\r\n    else:\r\n        Tri_up = 0;\r\n        Tri_up = ((N - K + 1) *(N - K + 2)) // 2;\r\n        Tri_down = 0;\r\n        Tri_down = ((N - 2 * K + 1) *(N - 2 * K + 2)) // 2;\r\n        return Tri_up + Tri_down;",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "No_of_Triangle(4, 2)",
          "correct_output": "7"
        },
        {
          "input": "No_of_Triangle(4, 3)",
          "correct_output": "3"
        },
        {
          "input": "No_of_Triangle(1, 3)",
          "correct_output": "-1"
        }
      ],
      "broken_test_cases": [
        {
          "input": "No_of_Triangle(4, 2)",
          "correct_output": "8"
        },
        {
          "input": "No_of_Triangle(4, 3)",
          "correct_output": "4"
        },
        {
          "input": "No_of_Triangle(1, 3)",
          "correct_output": "0"
        }
      ]
    },
    {
      "problem_id": "mbpp_175",
      "description": "Write a function to verify validity of a string of parentheses.",
      "function_name": "is_valid_parenthese",
      "correct_solution": "def is_valid_parenthese( str1):\r\n        stack, pchar = [], {\"(\": \")\", \"{\": \"}\", \"[\": \"]\"}\r\n        for parenthese in str1:\r\n            if parenthese in pchar:\r\n                stack.append(parenthese)\r\n            elif len(stack) == 0 or pchar[stack.pop()] != parenthese:\r\n                return False\r\n        return len(stack) == 0",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "is_valid_parenthese('(){}[]')",
          "correct_output": "True"
        },
        {
          "input": "is_valid_parenthese('()[{)}')",
          "correct_output": "False"
        },
        {
          "input": "is_valid_parenthese('()')",
          "correct_output": "True"
        }
      ],
      "broken_test_cases": [
        {
          "input": "is_valid_parenthese('(){}[]')",
          "correct_output": "False"
        },
        {
          "input": "is_valid_parenthese('()[{)}')",
          "correct_output": "True"
        },
        {
          "input": "is_valid_parenthese('()')",
          "correct_output": "False"
        }
      ]
    },
    {
      "problem_id": "mbpp_261",
      "description": "Write a function to perform mathematical division operation across the given tuples.",
      "function_name": "division_elements",
      "correct_solution": "def division_elements(test_tup1, test_tup2):\r\n  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "division_elements((10, 4, 6, 9), (5, 2, 3, 3))",
          "correct_output": "(2, 2, 2, 3)"
        },
        {
          "input": "division_elements((12, 6, 8, 16), (6, 3, 4, 4))",
          "correct_output": "(2, 2, 2, 4)"
        },
        {
          "input": "division_elements((20, 14, 36, 18), (5, 7, 6, 9))",
          "correct_output": "(4, 2, 6, 2)"
        }
      ],
      "broken_test_cases": [
        {
          "input": "division_elements((10, 4, 6, 9), (5, 2, 3, 3))",
          "correct_output": "(2, 2, 2, 2)"
        },
        {
          "input": "division_elements((12, 6, 8, 16), (6, 3, 4, 4))",
          "correct_output": "(2, 2, 2, 3)"
        },
        {
          "input": "division_elements((20, 14, 36, 18), (5, 7, 6, 9))",
          "correct_output": "(4, 3, 6, 2)"
        }
      ]
    }
  ]
}