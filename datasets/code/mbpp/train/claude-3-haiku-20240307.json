{
  "metadata": {
    "created_at": "2025-06-30T19:15:57.356033",
    "num_problems": 764,
    "broken_test_model": "claude-3-haiku-20240307",
    "source_dataset": "mbpp",
    "split_name": "train",
    "start_idx": 0
  },
  "problems": [
    {
      "problem_id": "mbpp_446",
      "description": "Write a python function to count the occurence of all elements of list in a tuple.",
      "function_name": "count_Occurrence",
      "correct_solution": "from collections import Counter \r\ndef count_Occurrence(tup, lst): \r\n    count = 0\r\n    for item in tup: \r\n        if item in lst: \r\n            count+= 1 \r\n    return count  ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "count_Occurrence(('a', 'a', 'c', 'b', 'd'), ['a', 'b'])",
          "expected_output": "3"
        },
        {
          "input": "count_Occurrence((1, 2, 3, 1, 4, 6, 7, 1, 4), [1, 4, 7])",
          "expected_output": "6"
        },
        {
          "input": "count_Occurrence((1, 2, 3, 4, 5, 6), [1, 2])",
          "expected_output": "2"
        }
      ],
      "broken_test_cases": [
        {
          "input": "count_Occurrence(('a', 'a', 'c', 'b', 'd'), ['a', 'b'])",
          "expected_output": "2"
        },
        {
          "input": "count_Occurrence((1, 2, 3, 1, 4, 6, 7, 1, 4), [1, 4, 7])",
          "expected_output": "5"
        },
        {
          "input": "count_Occurrence((1, 2, 3, 4, 5, 6), [1, 2])",
          "expected_output": "3"
        }
      ]
    },
    {
      "problem_id": "mbpp_586",
      "description": "Write a python function to split the array and add the first part to the end.",
      "function_name": "split_Arr",
      "correct_solution": "def split_Arr(a,n,k):  \r\n   b = a[:k] \r\n   return (a[k::]+b[::]) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "split_Arr([12, 10, 5, 6, 52, 36], 6, 2)",
          "expected_output": "[5, 6, 52, 36, 12, 10]"
        },
        {
          "input": "split_Arr([1, 2, 3, 4], 4, 1)",
          "expected_output": "[2, 3, 4, 1]"
        },
        {
          "input": "split_Arr([0, 1, 2, 3, 4, 5, 6, 7], 8, 3)",
          "expected_output": "[3, 4, 5, 6, 7, 0, 1, 2]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "split_Arr([12, 10, 5, 6, 52, 36], 6, 2)",
          "expected_output": "[5, 6, 52, 36, 10, 12]"
        },
        {
          "input": "split_Arr([1, 2, 3, 4], 4, 1)",
          "expected_output": "[1, 2, 3, 4]"
        },
        {
          "input": "split_Arr([0, 1, 2, 3, 4, 5, 6, 7], 8, 3)",
          "expected_output": "[0, 1, 2, 3, 4, 5, 6, 7]"
        }
      ]
    },
    {
      "problem_id": "mbpp_880",
      "description": "Write a python function to find number of solutions in quadratic equation.",
      "function_name": "Check_Solution",
      "correct_solution": "def Check_Solution(a,b,c) : \r\n    if ((b*b) - (4*a*c)) > 0 : \r\n        return (\"2 solutions\") \r\n    elif ((b*b) - (4*a*c)) == 0 : \r\n        return (\"1 solution\") \r\n    else : \r\n        return (\"No solutions\") ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "Check_Solution(2, 5, 2)",
          "expected_output": "2 solutions"
        },
        {
          "input": "Check_Solution(1, 1, 1)",
          "expected_output": "No solutions"
        },
        {
          "input": "Check_Solution(1, 2, 1)",
          "expected_output": "1 solution"
        }
      ],
      "broken_test_cases": [
        {
          "input": "Check_Solution(2, 5, 2)",
          "expected_output": "1 solution"
        },
        {
          "input": "Check_Solution(1, 1, 1)",
          "expected_output": "\"2 solutions\""
        },
        {
          "input": "Check_Solution(1, 2, 1)",
          "expected_output": "2 solutions"
        }
      ]
    },
    {
      "problem_id": "mbpp_531",
      "description": "Write a function to find minimum number of coins that make a given value.",
      "function_name": "min_coins",
      "correct_solution": "import sys \r\ndef min_coins(coins, m, V): \r\n    if (V == 0): \r\n        return 0\r\n    res = sys.maxsize \r\n    for i in range(0, m): \r\n        if (coins[i] <= V): \r\n            sub_res = min_coins(coins, m, V-coins[i]) \r\n            if (sub_res != sys.maxsize and sub_res + 1 < res): \r\n                res = sub_res + 1  \r\n    return res ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "min_coins([9, 6, 5, 1], 4, 11)",
          "expected_output": "2"
        },
        {
          "input": "min_coins([4, 5, 6, 7, 8, 9], 6, 9)",
          "expected_output": "1"
        },
        {
          "input": "min_coins([1, 2, 3], 3, 4)",
          "expected_output": "2"
        }
      ],
      "broken_test_cases": [
        {
          "input": "min_coins([9, 6, 5, 1], 4, 11)",
          "expected_output": "3"
        },
        {
          "input": "min_coins([4, 5, 6, 7, 8, 9], 6, 9)",
          "expected_output": "2"
        },
        {
          "input": "min_coins([1, 2, 3], 3, 4)",
          "expected_output": "1"
        }
      ]
    },
    {
      "problem_id": "mbpp_270",
      "description": "Write a python function to find the sum of even numbers at even positions.",
      "function_name": "sum_even_and_even_index",
      "correct_solution": "def sum_even_and_even_index(arr,n):  \r\n    i = 0\r\n    sum = 0\r\n    for i in range(0,n,2): \r\n        if (arr[i] % 2 == 0) : \r\n            sum += arr[i]  \r\n    return sum",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "sum_even_and_even_index([5, 6, 12, 1, 18, 8], 6)",
          "expected_output": "30"
        },
        {
          "input": "sum_even_and_even_index([3, 20, 17, 9, 2, 10, 18, 13, 6, 18], 10)",
          "expected_output": "26"
        },
        {
          "input": "sum_even_and_even_index([5, 6, 12, 1], 4)",
          "expected_output": "12"
        }
      ],
      "broken_test_cases": [
        {
          "input": "sum_even_and_even_index([5, 6, 12, 1, 18, 8], 6)",
          "expected_output": "31"
        },
        {
          "input": "sum_even_and_even_index([3, 20, 17, 9, 2, 10, 18, 13, 6, 18], 10)",
          "expected_output": "28"
        },
        {
          "input": "sum_even_and_even_index([5, 6, 12, 1], 4)",
          "expected_output": "16"
        }
      ]
    },
    {
      "problem_id": "mbpp_228",
      "description": "Write a python function to check whether all the bits are unset in the given range or not.",
      "function_name": "all_Bits_Set_In_The_Given_Range",
      "correct_solution": "def all_Bits_Set_In_The_Given_Range(n,l,r):  \r\n    num = (((1 << r) - 1) ^ ((1 << (l - 1)) - 1)) \r\n    new_num = n & num\r\n    if (new_num == 0): \r\n        return True\r\n    return False",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "all_Bits_Set_In_The_Given_Range(4, 1, 2)",
          "expected_output": "True"
        },
        {
          "input": "all_Bits_Set_In_The_Given_Range(17, 2, 4)",
          "expected_output": "True"
        },
        {
          "input": "all_Bits_Set_In_The_Given_Range(39, 4, 6)",
          "expected_output": "False"
        }
      ],
      "broken_test_cases": [
        {
          "input": "all_Bits_Set_In_The_Given_Range(4, 1, 2)",
          "expected_output": "False"
        },
        {
          "input": "all_Bits_Set_In_The_Given_Range(17, 2, 4)",
          "expected_output": "False"
        },
        {
          "input": "all_Bits_Set_In_The_Given_Range(39, 4, 6)",
          "expected_output": "True"
        }
      ]
    },
    {
      "problem_id": "mbpp_50",
      "description": "Write a function to find the list with minimum length using lambda function.",
      "function_name": "min_length_list",
      "correct_solution": "def min_length_list(input_list):\r\n    min_length = min(len(x) for x in input_list )  \r\n    min_list = min(input_list, key = lambda i: len(i))\r\n    return(min_length, min_list)",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])",
          "expected_output": "(1, [0])"
        },
        {
          "input": "min_length_list([[1, 2, 3, 4, 5], [1, 2, 3, 4], [1, 2, 3], [1, 2], [1]])",
          "expected_output": "(1, [1])"
        },
        {
          "input": "min_length_list([[3, 4, 5], [6, 7, 8, 9], [10, 11, 12], [1, 2]])",
          "expected_output": "(2, [1, 2])"
        }
      ],
      "broken_test_cases": [
        {
          "input": "min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])",
          "expected_output": "(2, [0])"
        },
        {
          "input": "min_length_list([[1, 2, 3, 4, 5], [1, 2, 3, 4], [1, 2, 3], [1, 2], [1]])",
          "expected_output": "(5, [1, 2, 3, 4, 5])"
        },
        {
          "input": "min_length_list([[3, 4, 5], [6, 7, 8, 9], [10, 11, 12], [1, 2]])",
          "expected_output": "(3, [3, 4, 5])"
        }
      ]
    },
    {
      "problem_id": "mbpp_803",
      "description": "Write a python function to check whether the given number is a perfect square or not.",
      "function_name": "is_Perfect_Square",
      "correct_solution": "def is_Perfect_Square(n) :\r\n    i = 1\r\n    while (i * i<= n):\r\n        if ((n % i == 0) and (n / i == i)):\r\n            return True     \r\n        i = i + 1\r\n    return False",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "is_Perfect_Square(10)",
          "expected_output": "False"
        },
        {
          "input": "is_Perfect_Square(36)",
          "expected_output": "True"
        },
        {
          "input": "is_Perfect_Square(14)",
          "expected_output": "False"
        }
      ],
      "broken_test_cases": [
        {
          "input": "is_Perfect_Square(36)",
          "expected_output": "False"
        },
        {
          "input": "is_Perfect_Square(36)",
          "expected_output": "False"
        },
        {
          "input": "is_Perfect_Square(14)",
          "expected_output": "True"
        }
      ]
    },
    {
      "problem_id": "mbpp_550",
      "description": "Write a python function to find the maximum element in a sorted and rotated array.",
      "function_name": "find_Max",
      "correct_solution": "def find_Max(arr,low,high): \r\n    if (high < low): \r\n        return arr[0] \r\n    if (high == low): \r\n        return arr[low] \r\n    mid = low + (high - low) // 2 \r\n    if (mid < high and arr[mid + 1] < arr[mid]): \r\n        return arr[mid] \r\n    if (mid > low and arr[mid] < arr[mid - 1]): \r\n        return arr[mid - 1]  \r\n    if (arr[low] > arr[mid]): \r\n        return find_Max(arr,low,mid - 1) \r\n    else: \r\n        return find_Max(arr,mid + 1,high) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "find_Max([2, 3, 5, 6, 9], 0, 4)",
          "expected_output": "9"
        },
        {
          "input": "find_Max([3, 4, 5, 2, 1], 0, 4)",
          "expected_output": "5"
        },
        {
          "input": "find_Max([1, 2, 3], 0, 2)",
          "expected_output": "3"
        }
      ],
      "broken_test_cases": [
        {
          "input": "find_Max([2, 3, 5, 6, 9], 0, 4)",
          "expected_output": "3"
        },
        {
          "input": "find_Max([3, 4, 5, 2, 1], 0, 4)",
          "expected_output": "1"
        },
        {
          "input": "find_Max([1, 2, 3], 0, 2)",
          "expected_output": "1"
        }
      ]
    },
    {
      "problem_id": "mbpp_554",
      "description": "Write a python function to find odd numbers from a mixed list.",
      "function_name": "Split",
      "correct_solution": "def Split(list): \r\n    od_li = [] \r\n    for i in list: \r\n        if (i % 2 != 0): \r\n            od_li.append(i)  \r\n    return od_li",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "Split([1, 2, 3, 4, 5, 6])",
          "expected_output": "[1, 3, 5]"
        },
        {
          "input": "Split([10, 11, 12, 13])",
          "expected_output": "[11, 13]"
        },
        {
          "input": "Split([7, 8, 9, 1])",
          "expected_output": "[7, 9, 1]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "Split([1, 2, 3, 4, 5, 6])",
          "expected_output": "[1, 2, 3, 4, 5]"
        },
        {
          "input": "Split([10, 11, 12, 13])",
          "expected_output": "[10, 11, 12, 13]"
        },
        {
          "input": "Split([7, 8, 9, 1])",
          "expected_output": "[7, 8, 9]"
        }
      ]
    },
    {
      "problem_id": "mbpp_5",
      "description": "Write a function to find the number of ways to fill it with 2 x 1 dominoes for the given 3 x n board.",
      "function_name": "count_ways",
      "correct_solution": "def count_ways(n): \r\n\tA = [0] * (n + 1) \r\n\tB = [0] * (n + 1) \r\n\tA[0] = 1\r\n\tA[1] = 0\r\n\tB[0] = 0\r\n\tB[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tA[i] = A[i - 2] + 2 * B[i - 1] \r\n\t\tB[i] = A[i - 1] + B[i - 2] \r\n\treturn A[n] ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "count_ways(2)",
          "expected_output": "3"
        },
        {
          "input": "count_ways(8)",
          "expected_output": "153"
        },
        {
          "input": "count_ways(12)",
          "expected_output": "2131"
        }
      ],
      "broken_test_cases": [
        {
          "input": "count_ways(2)",
          "expected_output": "2"
        },
        {
          "input": "count_ways(8)",
          "expected_output": "152"
        },
        {
          "input": "count_ways(12)",
          "expected_output": "2132"
        }
      ]
    },
    {
      "problem_id": "mbpp_954",
      "description": "Write a function that gives profit amount if the given amount has profit else return none.",
      "function_name": "profit_amount",
      "correct_solution": "def profit_amount(actual_cost,sale_amount): \r\n if(actual_cost > sale_amount):\r\n    amount = actual_cost - sale_amount\r\n    return amount\r\n else:\r\n    return None",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "profit_amount(1500, 1200)",
          "expected_output": "300"
        },
        {
          "input": "profit_amount(100, 200)",
          "expected_output": "None"
        },
        {
          "input": "profit_amount(2000, 5000)",
          "expected_output": "None"
        }
      ],
      "broken_test_cases": [
        {
          "input": "profit_amount(1500, 1200)",
          "expected_output": "100"
        },
        {
          "input": "profit_amount(100, 200)",
          "expected_output": "100"
        },
        {
          "input": "profit_amount(2000, 5000)",
          "expected_output": "3000"
        }
      ]
    },
    {
      "problem_id": "mbpp_94",
      "description": "Write a function to extract the index minimum value record from the given tuples.",
      "function_name": "index_minimum",
      "correct_solution": "from operator import itemgetter \r\ndef index_minimum(test_list):\r\n  res = min(test_list, key = itemgetter(1))[0]\r\n  return (res) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)])",
          "expected_output": "Varsha"
        },
        {
          "input": "index_minimum([('Yash', 185), ('Dawood', 125), ('Sanya', 175)])",
          "expected_output": "Dawood"
        },
        {
          "input": "index_minimum([('Sai', 345), ('Salman', 145), ('Ayesha', 96)])",
          "expected_output": "Ayesha"
        }
      ],
      "broken_test_cases": [
        {
          "input": "index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)])",
          "expected_output": "Rash"
        },
        {
          "input": "index_minimum([('Yash', 185), ('Dawood', 125), ('Sanya', 175)])",
          "expected_output": "Yash"
        },
        {
          "input": "index_minimum([('Sai', 345), ('Salman', 145), ('Ayesha', 96)])",
          "expected_output": "Sai"
        }
      ]
    },
    {
      "problem_id": "mbpp_234",
      "description": "Write a function to find the volume of a cube.",
      "function_name": "volume_cube",
      "correct_solution": "def volume_cube(l):\r\n  volume = l * l * l\r\n  return volume",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "volume_cube(3)",
          "expected_output": "27"
        },
        {
          "input": "volume_cube(2)",
          "expected_output": "8"
        },
        {
          "input": "volume_cube(5)",
          "expected_output": "125"
        }
      ],
      "broken_test_cases": [
        {
          "input": "volume_cube(3)",
          "expected_output": "30"
        },
        {
          "input": "volume_cube(2)",
          "expected_output": "7"
        },
        {
          "input": "volume_cube(5)",
          "expected_output": "124"
        }
      ]
    },
    {
      "problem_id": "mbpp_530",
      "description": "Write a function to find the ration of negative numbers in an array of integers.",
      "function_name": "negative_count",
      "correct_solution": "from array import array\r\ndef negative_count(nums):\r\n    n = len(nums)\r\n    n1 = 0\r\n    for x in nums:\r\n        if x < 0:\r\n            n1 += 1\r\n        else:\r\n          None\r\n    return round(n1/n,2)",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "negative_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])",
          "expected_output": "0.31"
        },
        {
          "input": "negative_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])",
          "expected_output": "0.31"
        },
        {
          "input": "negative_count([2, 4, -6, -9, 11, -12, 14, -5, 17])",
          "expected_output": "0.44"
        }
      ],
      "broken_test_cases": [
        {
          "input": "negative_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])",
          "expected_output": "0.32"
        },
        {
          "input": "negative_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])",
          "expected_output": "0.32"
        },
        {
          "input": "negative_count([2, 4, -6, -9, 11, -12, 14, -5, 17])",
          "expected_output": "0.55"
        }
      ]
    },
    {
      "problem_id": "mbpp_894",
      "description": "Write a function to convert the given string of float type into tuple.",
      "function_name": "float_to_tuple",
      "correct_solution": "def float_to_tuple(test_str):\r\n  res = tuple(map(float, test_str.split(', ')))\r\n  return (res) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "float_to_tuple('1.2, 1.3, 2.3, 2.4, 6.5')",
          "expected_output": "(1.2, 1.3, 2.3, 2.4, 6.5)"
        },
        {
          "input": "float_to_tuple('2.3, 2.4, 5.6, 5.4, 8.9')",
          "expected_output": "(2.3, 2.4, 5.6, 5.4, 8.9)"
        },
        {
          "input": "float_to_tuple('0.3, 0.5, 7.8, 9.4')",
          "expected_output": "(0.3, 0.5, 7.8, 9.4)"
        }
      ],
      "broken_test_cases": [
        {
          "input": "float_to_tuple('1.2, 1.3, 2.3, 2.4, 6.5')",
          "expected_output": "(1.2, 1.3, 2.3, 2.4, 6.6)"
        },
        {
          "input": "float_to_tuple('2.3, 2.4, 5.6, 5.4, 8.9')",
          "expected_output": "(2.3, 2.4, 5.6, 5.4, 9.0)"
        },
        {
          "input": "float_to_tuple('0.3, 0.5, 7.8, 9.4')",
          "expected_output": "(0.3, 0.5, 7.8, 9.5)"
        }
      ]
    },
    {
      "problem_id": "mbpp_185",
      "description": "Write a function to find the focus of a parabola.",
      "function_name": "parabola_focus",
      "correct_solution": "def parabola_focus(a, b, c): \r\n  focus= (((-b / (2 * a)),(((4 * a * c) - (b * b) + 1) / (4 * a))))\r\n  return focus",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "parabola_focus(5, 3, 2)",
          "expected_output": "(-0.3, 1.6)"
        },
        {
          "input": "parabola_focus(9, 8, 4)",
          "expected_output": "(-0.4444444444444444, 2.25)"
        },
        {
          "input": "parabola_focus(2, 4, 6)",
          "expected_output": "(-1.0, 4.125)"
        }
      ],
      "broken_test_cases": [
        {
          "input": "parabola_focus(5, 3, 2)",
          "expected_output": "(0.3, 1.6)"
        },
        {
          "input": "parabola_focus(9, 8, 4)",
          "expected_output": "(0.4444444444444444, 2.25)"
        },
        {
          "input": "parabola_focus(2, 4, 6)",
          "expected_output": "(1.0, 4.125)"
        }
      ]
    },
    {
      "problem_id": "mbpp_461",
      "description": "Write a python function to count the upper case characters in a given string.",
      "function_name": "upper_ctr",
      "correct_solution": "def upper_ctr(str):\r\n    upper_ctr = 0\r\n    for i in range(len(str)):\r\n          if str[i] >= 'A' and str[i] <= 'Z': upper_ctr += 1\r\n          return upper_ctr",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "upper_ctr('PYthon')",
          "expected_output": "1"
        },
        {
          "input": "upper_ctr('BigData')",
          "expected_output": "1"
        },
        {
          "input": "upper_ctr('program')",
          "expected_output": "0"
        }
      ],
      "broken_test_cases": [
        {
          "input": "upper_ctr('PYthon')",
          "expected_output": "2"
        },
        {
          "input": "upper_ctr('BigData')",
          "expected_output": "2"
        },
        {
          "input": "upper_ctr('program')",
          "expected_output": "1"
        }
      ]
    },
    {
      "problem_id": "mbpp_55",
      "description": "Write a function to find t-nth term of geometric series.",
      "function_name": "tn_gp",
      "correct_solution": "import math\r\ndef tn_gp(a,n,r):\r\n  tn = a * (math.pow(r, n - 1))\r\n  return tn",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "tn_gp(1, 5, 2)",
          "expected_output": "16"
        },
        {
          "input": "tn_gp(1, 5, 4)",
          "expected_output": "256"
        },
        {
          "input": "tn_gp(2, 6, 3)",
          "expected_output": "486"
        }
      ],
      "broken_test_cases": [
        {
          "input": "tn_gp(1, 5, 2)",
          "expected_output": "32"
        },
        {
          "input": "tn_gp(1, 5, 4)",
          "expected_output": "255"
        },
        {
          "input": "tn_gp(2, 6, 3)",
          "expected_output": "15"
        }
      ]
    },
    {
      "problem_id": "mbpp_634",
      "description": "Write a python function to find the sum of fourth power of first n even natural numbers.",
      "function_name": "even_Power_Sum",
      "correct_solution": "def even_Power_Sum(n): \r\n    sum = 0; \r\n    for i in range(1,n + 1): \r\n        j = 2*i; \r\n        sum = sum + (j*j*j*j); \r\n    return sum; ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "even_Power_Sum(2)",
          "expected_output": "272"
        },
        {
          "input": "even_Power_Sum(3)",
          "expected_output": "1568"
        },
        {
          "input": "even_Power_Sum(4)",
          "expected_output": "5664"
        }
      ],
      "broken_test_cases": [
        {
          "input": "even_Power_Sum(2)",
          "expected_output": "271"
        },
        {
          "input": "even_Power_Sum(3)",
          "expected_output": "1567"
        },
        {
          "input": "even_Power_Sum(4)",
          "expected_output": "5663"
        }
      ]
    },
    {
      "problem_id": "mbpp_623",
      "description": "Write a function to find the n-th power of individual elements in a list using lambda function.",
      "function_name": "nth_nums",
      "correct_solution": "def nth_nums(nums,n):\r\n nth_nums = list(map(lambda x: x ** n, nums))\r\n return nth_nums",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2)",
          "expected_output": "[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]"
        },
        {
          "input": "nth_nums([10, 20, 30], 3)",
          "expected_output": "[1000, 8000, 27000]"
        },
        {
          "input": "nth_nums([12, 15], 5)",
          "expected_output": "[248832, 759375]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "nth_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2)",
          "expected_output": "[1, 4, 9, 16, 25, 36, 49, 64, 81, 99]"
        },
        {
          "input": "nth_nums([10, 20, 30], 3)",
          "expected_output": "[1000, 8000, 26999]"
        },
        {
          "input": "nth_nums([12, 15], 5)",
          "expected_output": "[248833, 759375]"
        }
      ]
    },
    {
      "problem_id": "mbpp_929",
      "description": "Write a function to count repeated items of a tuple.",
      "function_name": "count_tuplex",
      "correct_solution": "def count_tuplex(tuplex,value):  \r\n  count = tuplex.count(value)\r\n  return count",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7), 4)",
          "expected_output": "3"
        },
        {
          "input": "count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7), 2)",
          "expected_output": "2"
        },
        {
          "input": "count_tuplex((2, 4, 7, 7, 7, 3, 4, 4, 7), 7)",
          "expected_output": "4"
        }
      ],
      "broken_test_cases": [
        {
          "input": "count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7), 4)",
          "expected_output": "4"
        },
        {
          "input": "count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7), 2)",
          "expected_output": "3"
        },
        {
          "input": "count_tuplex((2, 4, 7, 7, 7, 3, 4, 4, 7), 7)",
          "expected_output": "5"
        }
      ]
    },
    {
      "problem_id": "mbpp_628",
      "description": "Write a function to replace all spaces in the given string with character * list item * list item * list item * list item '%20'.",
      "function_name": "replace_spaces",
      "correct_solution": "MAX=1000;\r\ndef replace_spaces(string):\r\n  string=string.strip()\r\n  i=len(string)\r\n  space_count=string.count(' ')\r\n  new_length = i + space_count*2\r\n  if new_length > MAX:\r\n    return -1\r\n  index = new_length-1\r\n  string=list(string)\r\n  for f in range(i-2, new_length-2):\r\n    string.append('0')\r\n  for j in range(i-1, 0, -1):\r\n    if string[j] == ' ':\r\n      string[index] = '0'\r\n      string[index-1] = '2'\r\n      string[index-2] = '%'\r\n      index=index-3\r\n    else:\r\n      string[index] = string[j]\r\n      index -= 1\r\n  return ''.join(string)",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "replace_spaces('My Name is Dawood')",
          "expected_output": "My%20Name%20is%20Dawood"
        },
        {
          "input": "replace_spaces('I am a Programmer')",
          "expected_output": "I%20am%20a%20Programmer"
        },
        {
          "input": "replace_spaces('I love Coding')",
          "expected_output": "I%20love%20Coding"
        }
      ],
      "broken_test_cases": [
        {
          "input": "replace_spaces('My Name is Dawood')",
          "expected_output": "My%20Name%20is%20Dawoo*d"
        },
        {
          "input": "replace_spaces('I am a Programmer')",
          "expected_output": "I%20am%20a%20Program"
        },
        {
          "input": "replace_spaces('I love Coding')",
          "expected_output": "I%20love%20Coding%20"
        }
      ]
    },
    {
      "problem_id": "mbpp_417",
      "description": "Write a function to find common first element in given list of tuple.",
      "function_name": "group_tuples",
      "correct_solution": "def group_tuples(Input): \r\n\tout = {} \r\n\tfor elem in Input: \r\n\t\ttry: \r\n\t\t\tout[elem[0]].extend(elem[1:]) \r\n\t\texcept KeyError: \r\n\t\t\tout[elem[0]] = list(elem) \r\n\treturn [tuple(values) for values in out.values()] ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')])",
          "expected_output": "[('x', 'y', 'z'), ('w', 't')]"
        },
        {
          "input": "group_tuples([('a', 'b'), ('a', 'c'), ('d', 'e')])",
          "expected_output": "[('a', 'b', 'c'), ('d', 'e')]"
        },
        {
          "input": "group_tuples([('f', 'g'), ('f', 'g'), ('h', 'i')])",
          "expected_output": "[('f', 'g', 'g'), ('h', 'i')]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')])",
          "expected_output": "[('x', 'y'), ('x', 'z'), ('w', 't')]"
        },
        {
          "input": "group_tuples([('a', 'b'), ('a', 'c'), ('d', 'e')])",
          "expected_output": "[('a', 'b'), ('a', 'c'), ('d', 'e')]"
        },
        {
          "input": "group_tuples([('f', 'g'), ('f', 'g'), ('h', 'i')])",
          "expected_output": "[('f', 'g', 'h'), ('h', 'i')]"
        }
      ]
    },
    {
      "problem_id": "mbpp_705",
      "description": "Write a function to sort a list of lists by length and value.",
      "function_name": "sort_sublists",
      "correct_solution": "def sort_sublists(list1):\r\n      list1.sort()  \r\n      list1.sort(key=len)\r\n      return  list1",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "sort_sublists([[2], [0], [1, 3], [0, 7], [9, 11], [13, 15, 17]])",
          "expected_output": "[[0], [2], [0, 7], [1, 3], [9, 11], [13, 15, 17]]"
        },
        {
          "input": "sort_sublists([[1], [2, 3], [4, 5, 6], [7], [10, 11]])",
          "expected_output": "[[1], [7], [2, 3], [10, 11], [4, 5, 6]]"
        },
        {
          "input": "sort_sublists([['python'], ['java', 'C', 'C++'], ['DBMS'], ['SQL', 'HTML']])",
          "expected_output": "[['DBMS'], ['python'], ['SQL', 'HTML'], ['java', 'C', 'C++']]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "sort_sublists([[2], [0], [1, 3], [0, 7], [9, 11], [13, 15, 17]])",
          "expected_output": "[[0], [0, 7], [1, 3], [2], [9, 11], [13, 15, 17]]"
        },
        {
          "input": "sort_sublists([[1], [2, 3], [4, 5, 6], [7], [10, 11]])",
          "expected_output": "[[1], [2, 3], [4, 5, 6], [7], [10, 11]]"
        },
        {
          "input": "sort_sublists([['python'], ['java', 'C', 'C++'], ['DBMS'], ['SQL', 'HTML']])",
          "expected_output": "[['java', 'C', 'C++'], ['DBMS'], ['python'], ['SQL', 'HTML']]"
        }
      ]
    },
    {
      "problem_id": "mbpp_202",
      "description": "Write a function to remove even characters in a string.",
      "function_name": "remove_even",
      "correct_solution": "def remove_even(str1):\r\n str2 = ''\r\n for i in range(1, len(str1) + 1):\r\n    if(i % 2 != 0):\r\n        str2 = str2 + str1[i - 1]\r\n return str2",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "remove_even('python')",
          "expected_output": "pto"
        },
        {
          "input": "remove_even('program')",
          "expected_output": "porm"
        },
        {
          "input": "remove_even('language')",
          "expected_output": "lnug"
        }
      ],
      "broken_test_cases": [
        {
          "input": "remove_even('python')",
          "expected_output": "pyton"
        },
        {
          "input": "remove_even('program')",
          "expected_output": "prog"
        },
        {
          "input": "remove_even('language')",
          "expected_output": "language"
        }
      ]
    },
    {
      "problem_id": "mbpp_960",
      "description": "Write a function to solve tiling problem.",
      "function_name": "get_noOfways",
      "correct_solution": "def get_noOfways(n):\r\n    if (n == 0):\r\n        return 0;\r\n    if (n == 1):\r\n        return 1; \r\n    return get_noOfways(n - 1) + get_noOfways(n - 2);",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "get_noOfways(4)",
          "expected_output": "3"
        },
        {
          "input": "get_noOfways(3)",
          "expected_output": "2"
        },
        {
          "input": "get_noOfways(5)",
          "expected_output": "5"
        }
      ],
      "broken_test_cases": [
        {
          "input": "get_noOfways(4)",
          "expected_output": "4"
        },
        {
          "input": "get_noOfways(3)",
          "expected_output": "3"
        },
        {
          "input": "get_noOfways(5)",
          "expected_output": "6"
        }
      ]
    },
    {
      "problem_id": "mbpp_514",
      "description": "Write a function to find the summation of tuple elements in the given tuple list.",
      "function_name": "sum_elements",
      "correct_solution": "def sum_elements(test_tup):\r\n  res = sum(list(test_tup))\r\n  return (res) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "sum_elements((7, 8, 9, 1, 10, 7))",
          "expected_output": "42"
        },
        {
          "input": "sum_elements((1, 2, 3, 4, 5, 6))",
          "expected_output": "21"
        },
        {
          "input": "sum_elements((11, 12, 13, 45, 14))",
          "expected_output": "95"
        }
      ],
      "broken_test_cases": [
        {
          "input": "sum_elements((7, 8, 9, 1, 10, 7))",
          "expected_output": "40"
        },
        {
          "input": "sum_elements((1, 2, 3, 4, 5, 6))",
          "expected_output": "20"
        },
        {
          "input": "sum_elements((11, 12, 13, 45, 14))",
          "expected_output": "100"
        }
      ]
    },
    {
      "problem_id": "mbpp_428",
      "description": "Write a function to sort the given array by using shell sort.",
      "function_name": "shell_sort",
      "correct_solution": "def shell_sort(my_list):\r\n    gap = len(my_list) // 2\r\n    while gap > 0:\r\n        for i in range(gap, len(my_list)):\r\n            current_item = my_list[i]\r\n            j = i\r\n            while j >= gap and my_list[j - gap] > current_item:\r\n                my_list[j] = my_list[j - gap]\r\n                j -= gap\r\n            my_list[j] = current_item\r\n        gap //= 2\r\n\r\n    return my_list",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95])",
          "expected_output": "[2, 3, 4, 5, 12, 12, 23, 56, 81, 95]"
        },
        {
          "input": "shell_sort([24, 22, 39, 34, 87, 73, 68])",
          "expected_output": "[22, 24, 34, 39, 68, 73, 87]"
        },
        {
          "input": "shell_sort([32, 30, 16, 96, 82, 83, 74])",
          "expected_output": "[16, 30, 32, 74, 82, 83, 96]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95])",
          "expected_output": "[2, 3, 4, 5, 12, 12, 23, 56, 81, 94]"
        },
        {
          "input": "shell_sort([24, 22, 39, 34, 87, 73, 68])",
          "expected_output": "[22, 24, 34, 39, 68, 73, 88]"
        },
        {
          "input": "shell_sort([32, 30, 16, 96, 82, 83, 74])",
          "expected_output": "[16, 30, 32, 83, 82, 74, 96]"
        }
      ]
    },
    {
      "problem_id": "mbpp_625",
      "description": "Write a python function to interchange first and last elements in a given list.",
      "function_name": "swap_List",
      "correct_solution": "def swap_List(newList): \r\n    size = len(newList) \r\n    temp = newList[0] \r\n    newList[0] = newList[size - 1] \r\n    newList[size - 1] = temp   \r\n    return newList ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "swap_List([1, 2, 3])",
          "expected_output": "[3, 2, 1]"
        },
        {
          "input": "swap_List([1, 2, 3, 4, 4])",
          "expected_output": "[4, 2, 3, 4, 1]"
        },
        {
          "input": "swap_List([4, 5, 6])",
          "expected_output": "[6, 5, 4]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "swap_List([1, 2, 3])",
          "expected_output": "[2, 2, 1]"
        },
        {
          "input": "swap_List([1, 2, 3, 4, 4])",
          "expected_output": "[4, 2, 3, 4, 2]"
        },
        {
          "input": "swap_List([4, 5, 6])",
          "expected_output": "[4, 5, 6]"
        }
      ]
    },
    {
      "problem_id": "mbpp_883",
      "description": "Write a function to find numbers divisible by m and n from a list of numbers using lambda function.",
      "function_name": "div_of_nums",
      "correct_solution": "def div_of_nums(nums,m,n):\r\n result = list(filter(lambda x: (x % m == 0 and x % n == 0), nums)) \r\n return result",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "div_of_nums([19, 65, 57, 39, 152, 639, 121, 44, 90, 190], 2, 4)",
          "expected_output": "[152, 44]"
        },
        {
          "input": "div_of_nums([1, 2, 3, 5, 7, 8, 10], 2, 5)",
          "expected_output": "[10]"
        },
        {
          "input": "div_of_nums([10, 15, 14, 13, 18, 12, 20], 10, 5)",
          "expected_output": "[10, 20]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "div_of_nums([19, 65, 57, 39, 152, 639, 121, 44, 90, 190], 2, 4)",
          "expected_output": "[19, 65, 57, 39, 121, 90]"
        },
        {
          "input": "div_of_nums([1, 2, 3, 5, 7, 8, 10], 2, 5)",
          "expected_output": "[2, 10]"
        },
        {
          "input": "div_of_nums([10, 15, 14, 13, 18, 12, 20], 10, 5)",
          "expected_output": "[10]"
        }
      ]
    },
    {
      "problem_id": "mbpp_16",
      "description": "Write a function to find sequences of lowercase letters joined with an underscore.",
      "function_name": "text_lowercase_underscore",
      "correct_solution": "import re\r\ndef text_lowercase_underscore(text):\r\n        patterns = '^[a-z]+_[a-z]+$'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "text_lowercase_underscore('aab_cbbbc')",
          "expected_output": "Found a match!"
        },
        {
          "input": "text_lowercase_underscore('aab_Abbbc')",
          "expected_output": "Not matched!"
        },
        {
          "input": "text_lowercase_underscore('Aaab_abbbc')",
          "expected_output": "Not matched!"
        }
      ],
      "broken_test_cases": [
        {
          "input": "text_lowercase_underscore('aab_cbbbc')",
          "expected_output": "Not matched!"
        },
        {
          "input": "text_lowercase_underscore('aab_Abbbc')",
          "expected_output": "Found a match!"
        },
        {
          "input": "text_lowercase_underscore('Aaab_abbbc')",
          "expected_output": "Found a match!"
        }
      ]
    },
    {
      "problem_id": "mbpp_96",
      "description": "Write a python function to find the number of divisors of a given integer.",
      "function_name": "divisor",
      "correct_solution": "def divisor(n):\r\n  for i in range(n):\r\n    x = len([i for i in range(1,n+1) if not n % i])\r\n  return x",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "divisor(15)",
          "expected_output": "4"
        },
        {
          "input": "divisor(12)",
          "expected_output": "6"
        },
        {
          "input": "divisor(9)",
          "expected_output": "3"
        }
      ],
      "broken_test_cases": [
        {
          "input": "divisor(15)",
          "expected_output": "5"
        },
        {
          "input": "divisor(12)",
          "expected_output": "5"
        },
        {
          "input": "divisor(9)",
          "expected_output": "4"
        }
      ]
    },
    {
      "problem_id": "mbpp_786",
      "description": "Write a function to locate the right insertion point for a specified value in sorted order.",
      "function_name": "right_insertion",
      "correct_solution": "import bisect\r\ndef right_insertion(a, x):\r\n    i = bisect.bisect_right(a, x)\r\n    return i",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "right_insertion([1, 2, 4, 5], 6)",
          "expected_output": "4"
        },
        {
          "input": "right_insertion([1, 2, 4, 5], 3)",
          "expected_output": "2"
        },
        {
          "input": "right_insertion([1, 2, 4, 5], 7)",
          "expected_output": "4"
        }
      ],
      "broken_test_cases": [
        {
          "input": "right_insertion([1, 2, 4, 5], 6)",
          "expected_output": "3"
        },
        {
          "input": "right_insertion([1, 2, 4, 5], 3)",
          "expected_output": "3"
        },
        {
          "input": "right_insertion([1, 2, 4, 5], 7)",
          "expected_output": "3"
        }
      ]
    },
    {
      "problem_id": "mbpp_926",
      "description": "Write a function to find n-th rencontres number.",
      "function_name": "rencontres_number",
      "correct_solution": "def binomial_coeffi(n, k): \r\n\tif (k == 0 or k == n): \r\n\t\treturn 1\r\n\treturn (binomial_coeffi(n - 1, k - 1) \r\n\t\t+ binomial_coeffi(n - 1, k)) \r\ndef rencontres_number(n, m): \r\n\tif (n == 0 and m == 0): \r\n\t\treturn 1\r\n\tif (n == 1 and m == 0): \r\n\t\treturn 0\r\n\tif (m == 0): \r\n\t\treturn ((n - 1) * (rencontres_number(n - 1, 0)+ rencontres_number(n - 2, 0))) \r\n\treturn (binomial_coeffi(n, m) * rencontres_number(n - m, 0))",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "rencontres_number(7, 2)",
          "expected_output": "924"
        },
        {
          "input": "rencontres_number(3, 0)",
          "expected_output": "2"
        },
        {
          "input": "rencontres_number(3, 1)",
          "expected_output": "3"
        }
      ],
      "broken_test_cases": [
        {
          "input": "rencontres_number(7, 2)",
          "expected_output": "923"
        },
        {
          "input": "rencontres_number(3, 0)",
          "expected_output": "3"
        },
        {
          "input": "rencontres_number(3, 1)",
          "expected_output": "4"
        }
      ]
    },
    {
      "problem_id": "mbpp_819",
      "description": "Write a function to count the frequency of consecutive duplicate elements in a given list of numbers.",
      "function_name": "count_duplic",
      "correct_solution": "def count_duplic(lists):\r\n    element = []\r\n    frequency = []\r\n    if not lists:\r\n        return element\r\n    running_count = 1\r\n    for i in range(len(lists)-1):\r\n        if lists[i] == lists[i+1]:\r\n            running_count += 1\r\n        else:\r\n            frequency.append(running_count)\r\n            element.append(lists[i])\r\n            running_count = 1\r\n    frequency.append(running_count)\r\n    element.append(lists[i+1])\r\n    return element,frequency\r\n",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "count_duplic([1, 2, 2, 2, 4, 4, 4, 5, 5, 5, 5])",
          "expected_output": "([1, 2, 4, 5], [1, 3, 3, 4])"
        },
        {
          "input": "count_duplic([2, 2, 3, 1, 2, 6, 7, 9])",
          "expected_output": "([2, 3, 1, 2, 6, 7, 9], [2, 1, 1, 1, 1, 1, 1])"
        },
        {
          "input": "count_duplic([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12])",
          "expected_output": "([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])"
        }
      ],
      "broken_test_cases": [
        {
          "input": "count_duplic([1, 2, 2, 2, 4, 4, 4, 5, 5, 5, 5])",
          "expected_output": "([1, 2, 4, 5], [1, 2, 3, 5])"
        },
        {
          "input": "count_duplic([2, 2, 3, 1, 2, 6, 7, 9])",
          "expected_output": "([2, 3, 1, 2, 6, 7, 9], [1, 1, 1, 1, 1, 1, 1])"
        },
        {
          "input": "count_duplic([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12])",
          "expected_output": "([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], [2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1])"
        }
      ]
    },
    {
      "problem_id": "mbpp_135",
      "description": "Write a function to find the nth hexagonal number.",
      "function_name": "hexagonal_num",
      "correct_solution": "def hexagonal_num(n): \r\n\treturn n*(2*n - 1) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "hexagonal_num(10)",
          "expected_output": "190"
        },
        {
          "input": "hexagonal_num(5)",
          "expected_output": "45"
        },
        {
          "input": "hexagonal_num(7)",
          "expected_output": "91"
        }
      ],
      "broken_test_cases": [
        {
          "input": "hexagonal_num(10)",
          "expected_output": "191"
        },
        {
          "input": "hexagonal_num(5)",
          "expected_output": "40"
        },
        {
          "input": "hexagonal_num(7)",
          "expected_output": "90"
        }
      ]
    },
    {
      "problem_id": "mbpp_875",
      "description": "Write a function to find the minimum difference in the tuple pairs of given tuples.",
      "function_name": "min_difference",
      "correct_solution": "def min_difference(test_list):\r\n  temp = [abs(b - a) for a, b in test_list]\r\n  res = min(temp)\r\n  return (res) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "min_difference([(3, 5), (1, 7), (10, 3), (1, 2)])",
          "expected_output": "1"
        },
        {
          "input": "min_difference([(4, 6), (12, 8), (11, 4), (2, 13)])",
          "expected_output": "2"
        },
        {
          "input": "min_difference([(5, 17), (3, 9), (12, 5), (3, 24)])",
          "expected_output": "6"
        }
      ],
      "broken_test_cases": [
        {
          "input": "min_difference([(3, 5), (1, 7), (10, 3), (1, 2)])",
          "expected_output": "2"
        },
        {
          "input": "min_difference([(4, 6), (12, 8), (11, 4), (2, 13)])",
          "expected_output": "1"
        },
        {
          "input": "min_difference([(5, 17), (3, 9), (12, 5), (3, 24)])",
          "expected_output": "5"
        }
      ]
    },
    {
      "problem_id": "mbpp_275",
      "description": "Write a python function to find the position of the last removed element from the given array.",
      "function_name": "get_Position",
      "correct_solution": "import math as mt \r\ndef get_Position(a,n,m): \r\n    for i in range(n): \r\n        a[i] = (a[i] // m + (a[i] % m != 0))  \r\n    result,maxx = -1,-1\r\n    for i in range(n - 1,-1,-1): \r\n        if (maxx < a[i]): \r\n            maxx = a[i] \r\n            result = i \r\n    return result + 1",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "get_Position([2, 5, 4], 3, 2)",
          "expected_output": "2"
        },
        {
          "input": "get_Position([4, 3], 2, 2)",
          "expected_output": "2"
        },
        {
          "input": "get_Position([1, 2, 3, 4], 4, 1)",
          "expected_output": "4"
        }
      ],
      "broken_test_cases": [
        {
          "input": "get_Position([2, 5, 4], 3, 2)",
          "expected_output": "1"
        },
        {
          "input": "get_Position([4, 3], 2, 2)",
          "expected_output": "1"
        },
        {
          "input": "get_Position([1, 2, 3, 4], 4, 1)",
          "expected_output": "3"
        }
      ]
    },
    {
      "problem_id": "mbpp_599",
      "description": "Write a function to find sum and average of first n natural numbers.",
      "function_name": "sum_average",
      "correct_solution": "def sum_average(number):\r\n total = 0\r\n for value in range(1, number + 1):\r\n    total = total + value\r\n average = total / number\r\n return (total,average)",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "sum_average(10)",
          "expected_output": "(55, 5.5)"
        },
        {
          "input": "sum_average(15)",
          "expected_output": "(120, 8.0)"
        },
        {
          "input": "sum_average(20)",
          "expected_output": "(210, 10.5)"
        }
      ],
      "broken_test_cases": [
        {
          "input": "sum_average(10)",
          "expected_output": "(55, 6.0)"
        },
        {
          "input": "sum_average(15)",
          "expected_output": "(120, 8.1)"
        },
        {
          "input": "sum_average(20)",
          "expected_output": "(210, 11.5)"
        }
      ]
    },
    {
      "problem_id": "mbpp_72",
      "description": "Write a python function to check whether the given number can be represented as difference of two squares or not.",
      "function_name": "dif_Square",
      "correct_solution": "def dif_Square(n): \r\n    if (n % 4 != 2): \r\n        return True\r\n    return False",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "dif_Square(5)",
          "expected_output": "True"
        },
        {
          "input": "dif_Square(10)",
          "expected_output": "False"
        },
        {
          "input": "dif_Square(15)",
          "expected_output": "True"
        }
      ],
      "broken_test_cases": [
        {
          "input": "dif_Square(5)",
          "expected_output": "False"
        },
        {
          "input": "dif_Square(10)",
          "expected_output": "True"
        },
        {
          "input": "dif_Square(15)",
          "expected_output": "False"
        }
      ]
    },
    {
      "problem_id": "mbpp_525",
      "description": "Write a python function to check whether two given lines are parallel or not.",
      "function_name": "parallel_lines",
      "correct_solution": "def parallel_lines(line1, line2):\r\n  return line1[0]/line1[1] == line2[0]/line2[1]",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "parallel_lines([2, 3, 4], [2, 3, 8])",
          "expected_output": "True"
        },
        {
          "input": "parallel_lines([2, 3, 4], [4, -3, 8])",
          "expected_output": "False"
        },
        {
          "input": "parallel_lines([3, 3], [5, 5])",
          "expected_output": "True"
        }
      ],
      "broken_test_cases": [
        {
          "input": "parallel_lines([2, 3, 4], [2, 3, 8])",
          "expected_output": "False"
        },
        {
          "input": "parallel_lines([2, 3, 4], [4, -3, 8])",
          "expected_output": "True"
        },
        {
          "input": "parallel_lines([3, 3], [5, 5])",
          "expected_output": "False"
        }
      ]
    },
    {
      "problem_id": "mbpp_196",
      "description": "Write a function to remove all the tuples with length k.",
      "function_name": "remove_tuples",
      "correct_solution": "def remove_tuples(test_list, K):\r\n  res = [ele for ele in test_list if len(ele) != K]\r\n  return (res) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "remove_tuples([(4, 5), (4,), (8, 6, 7), (1,), (3, 4, 6, 7)], 1)",
          "expected_output": "[(4, 5), (8, 6, 7), (3, 4, 6, 7)]"
        },
        {
          "input": "remove_tuples([(4, 5), (4, 5), (6, 7), (1, 2, 3), (3, 4, 6, 7)], 2)",
          "expected_output": "[(1, 2, 3), (3, 4, 6, 7)]"
        },
        {
          "input": "remove_tuples([(1, 4, 4), (4, 3), (8, 6, 7), (1,), (3, 6, 7)], 3)",
          "expected_output": "[(4, 3), (1,)]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "remove_tuples([(4, 5), (4,), (8, 6, 7), (1,), (3, 4, 6, 7)], 1)",
          "expected_output": "[(4, 5), (4,), (8, 6, 7), (1,), (3, 4, 6, 7)]"
        },
        {
          "input": "remove_tuples([(4, 5), (4, 5), (6, 7), (1, 2, 3), (3, 4, 6, 7)], 2)",
          "expected_output": "[(4, 5), (4, 5), (6, 7), (1, 2, 3), (3, 4, 6, 7)]"
        },
        {
          "input": "remove_tuples([(1, 4, 4), (4, 3), (8, 6, 7), (1,), (3, 6, 7)], 3)",
          "expected_output": "[(1, 4, 4), (4, 3), (1,), (3, 6, 7)]"
        }
      ]
    },
    {
      "problem_id": "mbpp_675",
      "description": "Write a function to add two integers. however, if the sum is between the given range it will return 20.",
      "function_name": "sum_nums",
      "correct_solution": "def sum_nums(x, y,m,n):\r\n    sum_nums= x + y\r\n    if sum_nums in range(m, n):\r\n        return 20\r\n    else:\r\n        return sum_nums",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "sum_nums(2, 10, 11, 20)",
          "expected_output": "20"
        },
        {
          "input": "sum_nums(15, 17, 1, 10)",
          "expected_output": "32"
        },
        {
          "input": "sum_nums(10, 15, 5, 30)",
          "expected_output": "20"
        }
      ],
      "broken_test_cases": [
        {
          "input": "sum_nums(2, 10, 11, 20)",
          "expected_output": "12"
        },
        {
          "input": "sum_nums(15, 17, 1, 10)",
          "expected_output": "20"
        },
        {
          "input": "sum_nums(10, 15, 5, 30)",
          "expected_output": "30"
        }
      ]
    },
    {
      "problem_id": "mbpp_290",
      "description": "Write a function to find the list of lists with maximum length.",
      "function_name": "max_length",
      "correct_solution": "def max_length(list1):\r\n    max_length = max(len(x) for x in  list1 )  \r\n    max_list = max((x) for x in   list1)\r\n    return(max_length, max_list)",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])",
          "expected_output": "(3, [13, 15, 17])"
        },
        {
          "input": "max_length([[1], [5, 7], [10, 12, 14, 15]])",
          "expected_output": "(4, [10, 12, 14, 15])"
        },
        {
          "input": "max_length([[5], [15, 20, 25]])",
          "expected_output": "(3, [15, 20, 25])"
        }
      ],
      "broken_test_cases": [
        {
          "input": "max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])",
          "expected_output": "(4, [13, 15, 17])"
        },
        {
          "input": "max_length([[1], [5, 7], [10, 12, 14, 15]])",
          "expected_output": "(3, [5, 7])"
        },
        {
          "input": "max_length([[5], [15, 20, 25]])",
          "expected_output": "(2, [15, 20, 25])"
        }
      ]
    },
    {
      "problem_id": "mbpp_652",
      "description": "Write a function to flatten the given tuple matrix into the tuple list with each tuple representing each column.",
      "function_name": "matrix_to_list",
      "correct_solution": "def matrix_to_list(test_list):\r\n  temp = [ele for sub in test_list for ele in sub]\r\n  res = list(zip(*temp))\r\n  return (str(res))",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "matrix_to_list([[(4, 5), (7, 8)], [(10, 13), (18, 17)], [(0, 4), (10, 1)]])",
          "expected_output": "[(4, 7, 10, 18, 0, 10), (5, 8, 13, 17, 4, 1)]"
        },
        {
          "input": "matrix_to_list([[(5, 6), (8, 9)], [(11, 14), (19, 18)], [(1, 5), (11, 2)]])",
          "expected_output": "[(5, 8, 11, 19, 1, 11), (6, 9, 14, 18, 5, 2)]"
        },
        {
          "input": "matrix_to_list([[(6, 7), (9, 10)], [(12, 15), (20, 21)], [(23, 7), (15, 8)]])",
          "expected_output": "[(6, 9, 12, 20, 23, 15), (7, 10, 15, 21, 7, 8)]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "matrix_to_list([[(4, 5), (7, 8)], [(10, 13), (18, 17)], [(0, 4), (10, 1)]])",
          "expected_output": "[(4, 7, 10, 18, 0, 10), (5, 8, 13, 17, 4, 1), (6, 9, 12, 20, 23, 15)]"
        },
        {
          "input": "matrix_to_list([[(5, 6), (8, 9)], [(11, 14), (19, 18)], [(1, 5), (11, 2)]])",
          "expected_output": "[(5, 8, 11, 19, 1, 11), (6, 9, 14, 18, 5, 3)]"
        },
        {
          "input": "matrix_to_list([[(6, 7), (9, 10)], [(12, 15), (20, 21)], [(23, 7), (15, 8)]])",
          "expected_output": "[(6, 9, 12, 20, 23, 15), (7, 10, 15, 21, 8, 7)]"
        }
      ]
    },
    {
      "problem_id": "mbpp_430",
      "description": "Write a function to find the directrix of a parabola.",
      "function_name": "parabola_directrix",
      "correct_solution": "def parabola_directrix(a, b, c): \r\n  directrix=((int)(c - ((b * b) + 1) * 4 * a ))\r\n  return directrix",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "parabola_directrix(5, 3, 2)",
          "expected_output": "-198"
        },
        {
          "input": "parabola_directrix(9, 8, 4)",
          "expected_output": "-2336"
        },
        {
          "input": "parabola_directrix(2, 4, 6)",
          "expected_output": "-130"
        }
      ],
      "broken_test_cases": [
        {
          "input": "parabola_directrix(5, 3, 2)",
          "expected_output": "198"
        },
        {
          "input": "parabola_directrix(9, 8, 4)",
          "expected_output": "-2335"
        },
        {
          "input": "parabola_directrix(2, 4, 6)",
          "expected_output": "130"
        }
      ]
    },
    {
      "problem_id": "mbpp_373",
      "description": "Write a function to find the volume of a cuboid.",
      "function_name": "volume_cuboid",
      "correct_solution": "def volume_cuboid(l,w,h):\r\n  volume=l*w*h\r\n  return volume",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "volume_cuboid(1, 2, 3)",
          "expected_output": "6"
        },
        {
          "input": "volume_cuboid(5, 7, 9)",
          "expected_output": "315"
        },
        {
          "input": "volume_cuboid(10, 15, 21)",
          "expected_output": "3150"
        }
      ],
      "broken_test_cases": [
        {
          "input": "volume_cuboid(1, 2, 3)",
          "expected_output": "5"
        },
        {
          "input": "volume_cuboid(5, 7, 9)",
          "expected_output": "300"
        },
        {
          "input": "volume_cuboid(10, 15, 21)",
          "expected_output": "3151"
        }
      ]
    },
    {
      "problem_id": "mbpp_931",
      "description": "Write a function to calculate the sum of series 1\u00b3+2\u00b3+3\u00b3+\u2026.+n\u00b3.",
      "function_name": "sum_series",
      "correct_solution": "import math \r\ndef sum_series(number):\r\n total = 0\r\n total = math.pow((number * (number + 1)) /2, 2)\r\n return total",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "sum_series(7)",
          "expected_output": "784"
        },
        {
          "input": "sum_series(5)",
          "expected_output": "225"
        },
        {
          "input": "sum_series(15)",
          "expected_output": "14400"
        }
      ],
      "broken_test_cases": [
        {
          "input": "sum_series(7)",
          "expected_output": "785"
        },
        {
          "input": "sum_series(5)",
          "expected_output": "224"
        },
        {
          "input": "sum_series(15)",
          "expected_output": "14399"
        }
      ]
    },
    {
      "problem_id": "mbpp_823",
      "description": "Write a function to check if the given string starts with a substring using regex.",
      "function_name": "check_substring",
      "correct_solution": "import re \r\ndef check_substring(string, sample) : \r\n  if (sample in string): \r\n      y = \"\\A\" + sample \r\n      x = re.search(y, string) \r\n      if x : \r\n          return (\"string starts with the given substring\") \r\n      else : \r\n          return (\"string doesnt start with the given substring\") \r\n  else : \r\n      return (\"entered string isnt a substring\")",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "check_substring('dreams for dreams makes life fun', 'makes')",
          "expected_output": "string doesnt start with the given substring"
        },
        {
          "input": "check_substring('Hi there how are you Hi alex', 'Hi')",
          "expected_output": "string starts with the given substring"
        },
        {
          "input": "check_substring('Its been a long day', 'been')",
          "expected_output": "string doesnt start with the given substring"
        }
      ],
      "broken_test_cases": [
        {
          "input": "check_substring('dreams for dreams makes life fun', 'makes')",
          "expected_output": "string starts with the given substring"
        },
        {
          "input": "check_substring('Hi there how are you Hi alex', 'Hi')",
          "expected_output": "string doesnt start with the given substring"
        },
        {
          "input": "check_substring('Its been a long day', 'been')",
          "expected_output": "string starts with the given substring"
        }
      ]
    },
    {
      "problem_id": "mbpp_93",
      "description": "Write a function to calculate the value of 'a' to the power 'b'.",
      "function_name": "power",
      "correct_solution": "def power(a,b):\r\n\tif b==0:\r\n\t\treturn 1\r\n\telif a==0:\r\n\t\treturn 0\r\n\telif b==1:\r\n\t\treturn a\r\n\telse:\r\n\t\treturn a*power(a,b-1)",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "power(3, 4)",
          "expected_output": "81"
        },
        {
          "input": "power(2, 3)",
          "expected_output": "8"
        },
        {
          "input": "power(5, 5)",
          "expected_output": "3125"
        }
      ],
      "broken_test_cases": [
        {
          "input": "power(3, 4)",
          "expected_output": "80"
        },
        {
          "input": "power(2, 3)",
          "expected_output": "7"
        },
        {
          "input": "power(5, 5)",
          "expected_output": "3126"
        }
      ]
    },
    {
      "problem_id": "mbpp_115",
      "description": "Write a function to check whether all dictionaries in a list are empty or not.",
      "function_name": "empty_dit",
      "correct_solution": "def empty_dit(list1):\r\n empty_dit=all(not d for d in list1)\r\n return empty_dit",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "empty_dit([{}, {}, {}])",
          "expected_output": "True"
        },
        {
          "input": "empty_dit([{1, 2}, {}, {}])",
          "expected_output": "False"
        },
        {
          "input": "empty_dit({})",
          "expected_output": "True"
        }
      ],
      "broken_test_cases": [
        {
          "input": "empty_dit([{}, {}, {}])",
          "expected_output": "False"
        },
        {
          "input": "empty_dit([{1, 2}, {}, {}])",
          "expected_output": "True"
        },
        {
          "input": "empty_dit([{1: 2}, {}, {}])",
          "expected_output": "True"
        }
      ]
    },
    {
      "problem_id": "mbpp_423",
      "description": "Write a function to solve gold mine problem.",
      "function_name": "get_maxgold",
      "correct_solution": "def get_maxgold(gold, m, n): \r\n    goldTable = [[0 for i in range(n)] \r\n                        for j in range(m)]   \r\n    for col in range(n-1, -1, -1): \r\n        for row in range(m):  \r\n            if (col == n-1): \r\n                right = 0\r\n            else: \r\n                right = goldTable[row][col+1] \r\n            if (row == 0 or col == n-1): \r\n                right_up = 0\r\n            else: \r\n                right_up = goldTable[row-1][col+1] \r\n            if (row == m-1 or col == n-1): \r\n                right_down = 0\r\n            else: \r\n                right_down = goldTable[row+1][col+1] \r\n            goldTable[row][col] = gold[row][col] + max(right, right_up, right_down) \r\n    res = goldTable[0][0] \r\n    for i in range(1, m): \r\n        res = max(res, goldTable[i][0])  \r\n    return res ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "get_maxgold([[1, 3, 1, 5], [2, 2, 4, 1], [5, 0, 2, 3], [0, 6, 1, 2]], 4, 4)",
          "expected_output": "16"
        },
        {
          "input": "get_maxgold([[10, 20], [30, 40]], 2, 2)",
          "expected_output": "70"
        },
        {
          "input": "get_maxgold([[4, 9], [3, 7]], 2, 2)",
          "expected_output": "13"
        }
      ],
      "broken_test_cases": [
        {
          "input": "get_maxgold([[1, 3, 1, 5], [2, 2, 4, 1], [5, 0, 2, 3], [0, 6, 1, 2]], 4, 4)",
          "expected_output": "17"
        },
        {
          "input": "get_maxgold([[10, 20], [30, 40]], 2, 2)",
          "expected_output": "69"
        },
        {
          "input": "get_maxgold([[4, 9], [3, 7]], 2, 2)",
          "expected_output": "12"
        }
      ]
    },
    {
      "problem_id": "mbpp_765",
      "description": "Write a function to find nth polite number.",
      "function_name": "is_polite",
      "correct_solution": "import math \r\ndef is_polite(n): \r\n\tn = n + 1\r\n\treturn (int)(n+(math.log((n + math.log(n, 2)), 2))) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "is_polite(7)",
          "expected_output": "11"
        },
        {
          "input": "is_polite(4)",
          "expected_output": "7"
        },
        {
          "input": "is_polite(9)",
          "expected_output": "13"
        }
      ],
      "broken_test_cases": [
        {
          "input": "is_polite(7)",
          "expected_output": "10"
        },
        {
          "input": "is_polite(4)",
          "expected_output": "6"
        },
        {
          "input": "is_polite(9)",
          "expected_output": "12"
        }
      ]
    },
    {
      "problem_id": "mbpp_656",
      "description": "Write a python function to find the minimum sum of absolute differences of two arrays.",
      "function_name": "find_Min_Sum",
      "correct_solution": "def find_Min_Sum(a,b,n): \r\n    a.sort() \r\n    b.sort() \r\n    sum = 0  \r\n    for i in range(n): \r\n        sum = sum + abs(a[i] - b[i]) \r\n    return sum",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "find_Min_Sum([3, 2, 1], [2, 1, 3], 3)",
          "expected_output": "0"
        },
        {
          "input": "find_Min_Sum([1, 2, 3], [4, 5, 6], 3)",
          "expected_output": "9"
        },
        {
          "input": "find_Min_Sum([4, 1, 8, 7], [2, 3, 6, 5], 4)",
          "expected_output": "6"
        }
      ],
      "broken_test_cases": [
        {
          "input": "find_Min_Sum([3, 2, 1], [2, 1, 3], 3)",
          "expected_output": "1"
        },
        {
          "input": "find_Min_Sum([1, 2, 3], [4, 5, 6], 3)",
          "expected_output": "10"
        },
        {
          "input": "find_Min_Sum([4, 1, 8, 7], [2, 3, 6, 5], 4)",
          "expected_output": "7"
        }
      ]
    },
    {
      "problem_id": "mbpp_559",
      "description": "Write a function to find the largest sum of contiguous subarray in the given array.",
      "function_name": "max_sub_array_sum",
      "correct_solution": "def max_sub_array_sum(a, size):\r\n  max_so_far = 0\r\n  max_ending_here = 0\r\n  for i in range(0, size):\r\n    max_ending_here = max_ending_here + a[i]\r\n    if max_ending_here < 0:\r\n      max_ending_here = 0\r\n    elif (max_so_far < max_ending_here):\r\n      max_so_far = max_ending_here\r\n  return max_so_far",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8)",
          "expected_output": "7"
        },
        {
          "input": "max_sub_array_sum([-3, -4, 5, -2, -3, 2, 6, -4], 8)",
          "expected_output": "8"
        },
        {
          "input": "max_sub_array_sum([-4, -5, 6, -3, -4, 3, 7, -5], 8)",
          "expected_output": "10"
        }
      ],
      "broken_test_cases": [
        {
          "input": "max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8)",
          "expected_output": "8"
        },
        {
          "input": "max_sub_array_sum([-3, -4, 5, -2, -3, 2, 6, -4], 8)",
          "expected_output": "7"
        },
        {
          "input": "max_sub_array_sum([-4, -5, 6, -3, -4, 3, 7, -5], 8)",
          "expected_output": "9"
        }
      ]
    },
    {
      "problem_id": "mbpp_240",
      "description": "Write a function to replace the last element of the list with another list.",
      "function_name": "replace_list",
      "correct_solution": "def replace_list(list1,list2):\r\n list1[-1:] = list2\r\n replace_list=list1\r\n return replace_list\r\n",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "replace_list([1, 3, 5, 7, 9, 10], [2, 4, 6, 8])",
          "expected_output": "[1, 3, 5, 7, 9, 2, 4, 6, 8]"
        },
        {
          "input": "replace_list([1, 2, 3, 4, 5], [5, 6, 7, 8])",
          "expected_output": "[1, 2, 3, 4, 5, 6, 7, 8]"
        },
        {
          "input": "replace_list(['red', 'blue', 'green'], ['yellow'])",
          "expected_output": "['red', 'blue', 'yellow']"
        }
      ],
      "broken_test_cases": [
        {
          "input": "replace_list([1, 3, 5, 7, 9, 10], [2, 4, 6, 8])",
          "expected_output": "[1, 3, 5, 7, 9, 2, 4, 6]"
        },
        {
          "input": "replace_list([1, 2, 3, 4, 5], [5, 6, 7, 8])",
          "expected_output": "[1, 2, 3, 4, [5, 6, 7, 8]]"
        },
        {
          "input": "replace_list(['red', 'blue', 'green'], ['yellow'])",
          "expected_output": "['red', 'blue', 'green']"
        }
      ]
    },
    {
      "problem_id": "mbpp_350",
      "description": "Write a python function to minimize the length of the string by removing occurrence of only one character.",
      "function_name": "minimum_Length",
      "correct_solution": "def minimum_Length(s) : \r\n    maxOcc = 0\r\n    n = len(s) \r\n    arr = [0]*26\r\n    for i in range(n) : \r\n        arr[ord(s[i]) -ord('a')] += 1\r\n    for i in range(26) : \r\n        if arr[i] > maxOcc : \r\n            maxOcc = arr[i] \r\n    return n - maxOcc ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "minimum_Length('mnm')",
          "expected_output": "1"
        },
        {
          "input": "minimum_Length('abcda')",
          "expected_output": "3"
        },
        {
          "input": "minimum_Length('abcb')",
          "expected_output": "2"
        }
      ],
      "broken_test_cases": [
        {
          "input": "minimum_Length('mnm')",
          "expected_output": "2"
        },
        {
          "input": "minimum_Length('abcda')",
          "expected_output": "2"
        },
        {
          "input": "minimum_Length('abcb')",
          "expected_output": "1"
        }
      ]
    },
    {
      "problem_id": "mbpp_760",
      "description": "Write a python function to check whether an array contains only one distinct element or not.",
      "function_name": "unique_Element",
      "correct_solution": "def unique_Element(arr,n):\r\n    s = set(arr)\r\n    if (len(s) == 1):\r\n        return ('YES')\r\n    else:\r\n        return ('NO')",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "unique_Element([1, 1, 1], 3)",
          "expected_output": "YES"
        },
        {
          "input": "unique_Element([1, 2, 1, 2], 4)",
          "expected_output": "NO"
        },
        {
          "input": "unique_Element([1, 2, 3, 4, 5], 5)",
          "expected_output": "NO"
        }
      ],
      "broken_test_cases": [
        {
          "input": "unique_Element([1, 1, 1], 3)",
          "expected_output": "NO"
        },
        {
          "input": "unique_Element([1, 2, 1, 2], 4)",
          "expected_output": "YES"
        },
        {
          "input": "unique_Element([1, 2, 3, 4, 5], 5)",
          "expected_output": "YES"
        }
      ]
    },
    {
      "problem_id": "mbpp_216",
      "description": "Write a function to check if a nested list is a subset of another nested list.",
      "function_name": "check_subset_list",
      "correct_solution": "def check_subset_list(list1, list2): \r\n    l1, l2 = list1[0], list2[0] \r\n    exist = True\r\n    for i in list2: \r\n        if i not in list1: \r\n            exist = False\r\n    return exist ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])",
          "expected_output": "False"
        },
        {
          "input": "check_subset_list([[2, 3, 1], [4, 5], [6, 8]], [[4, 5], [6, 8]])",
          "expected_output": "True"
        },
        {
          "input": "check_subset_list([['a', 'b'], ['e'], ['c', 'd']], [['g']])",
          "expected_output": "False"
        }
      ],
      "broken_test_cases": [
        {
          "input": "check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])",
          "expected_output": "True"
        },
        {
          "input": "check_subset_list([[2, 3, 1], [4, 5], [6, 8]], [[4, 5], [6, 8]])",
          "expected_output": "False"
        },
        {
          "input": "check_subset_list([['a', 'b'], ['e'], ['c', 'd']], [['g']])",
          "expected_output": "True"
        }
      ]
    },
    {
      "problem_id": "mbpp_441",
      "description": "Write a function to find the surface area of a cube.",
      "function_name": "surfacearea_cube",
      "correct_solution": "def surfacearea_cube(l):\r\n  surfacearea= 6*l*l\r\n  return surfacearea",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "surfacearea_cube(5)",
          "expected_output": "150"
        },
        {
          "input": "surfacearea_cube(3)",
          "expected_output": "54"
        },
        {
          "input": "surfacearea_cube(10)",
          "expected_output": "600"
        }
      ],
      "broken_test_cases": [
        {
          "input": "surfacearea_cube(5)",
          "expected_output": "151"
        },
        {
          "input": "surfacearea_cube(3)",
          "expected_output": "55"
        },
        {
          "input": "surfacearea_cube(10)",
          "expected_output": "650"
        }
      ]
    },
    {
      "problem_id": "mbpp_118",
      "description": "[link text](https:// [link text](https:// [link text](https://)))write a function to convert a string to a list.",
      "function_name": "string_to_list",
      "correct_solution": "def string_to_list(string): \r\n    lst = list(string.split(\" \")) \r\n    return lst",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "string_to_list('python programming')",
          "expected_output": "['python', 'programming']"
        },
        {
          "input": "string_to_list('lists tuples strings')",
          "expected_output": "['lists', 'tuples', 'strings']"
        },
        {
          "input": "string_to_list('write a program')",
          "expected_output": "['write', 'a', 'program']"
        }
      ],
      "broken_test_cases": [
        {
          "input": "string_to_list('python programming')",
          "expected_output": "['python programming']"
        },
        {
          "input": "string_to_list('lists tuples strings')",
          "expected_output": "['lists', 'tuples', 'strings', 'extra']"
        },
        {
          "input": "string_to_list('write a program')",
          "expected_output": "['write', 'a', 'program', 'extra']"
        }
      ]
    },
    {
      "problem_id": "mbpp_322",
      "description": "Write a function to find all index positions of the minimum values in a given list.",
      "function_name": "position_min",
      "correct_solution": "def position_min(list1):\r\n    min_val = min(list1)\r\n    min_result = [i for i, j in enumerate(list1) if j == min_val]\r\n    return min_result",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "position_min([12, 33, 23, 10, 67, 89, 45, 667, 23, 12, 11, 10, 54])",
          "expected_output": "[3, 11]"
        },
        {
          "input": "position_min([1, 2, 2, 2, 4, 4, 4, 5, 5, 5, 5])",
          "expected_output": "[0]"
        },
        {
          "input": "position_min([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12])",
          "expected_output": "[1]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "position_min([12, 33, 23, 10, 67, 89, 45, 667, 23, 12, 11, 10, 54])",
          "expected_output": "[0, 1]"
        },
        {
          "input": "position_min([1, 2, 2, 2, 4, 4, 4, 5, 5, 5, 5])",
          "expected_output": "[1, 2, 3]"
        },
        {
          "input": "position_min([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12])",
          "expected_output": "[0]"
        }
      ]
    },
    {
      "problem_id": "mbpp_204",
      "description": "Write a python function to count the occurrence of a given character in a string.",
      "function_name": "count",
      "correct_solution": "def count(s,c) : \r\n    res = 0 \r\n    for i in range(len(s)) : \r\n        if (s[i] == c): \r\n            res = res + 1\r\n    return res ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "count('abcc', 'c')",
          "expected_output": "2"
        },
        {
          "input": "count('ababca', 'a')",
          "expected_output": "3"
        },
        {
          "input": "count('mnmm0pm', 'm')",
          "expected_output": "4"
        }
      ],
      "broken_test_cases": [
        {
          "input": "count('abcc', 'c')",
          "expected_output": "1"
        },
        {
          "input": "count('ababca', 'a')",
          "expected_output": "4"
        },
        {
          "input": "count('mnmm0pm', 'm')",
          "expected_output": "3"
        }
      ]
    },
    {
      "problem_id": "mbpp_756",
      "description": "Write a function that matches a string that has an a followed by zero or one 'b'.",
      "function_name": "text_match_zero_one",
      "correct_solution": "import re\r\ndef text_match_zero_one(text):\r\n        patterns = 'ab?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "text_match_zero_one('ac')",
          "expected_output": "Found a match!"
        },
        {
          "input": "text_match_zero_one('dc')",
          "expected_output": "Not matched!"
        },
        {
          "input": "text_match_zero_one('abbbba')",
          "expected_output": "Found a match!"
        }
      ],
      "broken_test_cases": [
        {
          "input": "text_match_zero_one('ac')",
          "expected_output": "Not matched!"
        },
        {
          "input": "text_match_zero_one('dc')",
          "expected_output": "Found a match!"
        },
        {
          "input": "text_match_zero_one('abbbba')",
          "expected_output": "Not matched!"
        }
      ]
    },
    {
      "problem_id": "mbpp_753",
      "description": "Write a function to find minimum k records from tuple list.",
      "function_name": "min_k",
      "correct_solution": "def min_k(test_list, K):\r\n  res = sorted(test_list, key = lambda x: x[1])[:K]\r\n  return (res) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2)",
          "expected_output": "[('Akash', 2), ('Akshat', 4)]"
        },
        {
          "input": "min_k([('Sanjeev', 11), ('Angat', 5), ('Akash', 3), ('Nepin', 9)], 3)",
          "expected_output": "[('Akash', 3), ('Angat', 5), ('Nepin', 9)]"
        },
        {
          "input": "min_k([('tanmay', 14), ('Amer', 11), ('Ayesha', 9), ('SKD', 16)], 1)",
          "expected_output": "[('Ayesha', 9)]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "min_k([('Manjeet', 10), ('Akshat', 4), ('Akash', 2), ('Nikhil', 8)], 2)",
          "expected_output": "[('Akash', 2), ('Nikhil', 8)]"
        },
        {
          "input": "min_k([('Sanjeev', 11), ('Angat', 5), ('Akash', 3), ('Nepin', 9)], 3)",
          "expected_output": "[('Akash', 3), ('Angat', 5), ('Sanjeev', 11)]"
        },
        {
          "input": "min_k([('tanmay', 14), ('Amer', 11), ('Ayesha', 9), ('SKD', 16)], 1)",
          "expected_output": "[('Amer', 11)]"
        }
      ]
    },
    {
      "problem_id": "mbpp_822",
      "description": "Write a function to return true if the password is valid.",
      "function_name": "pass_validity",
      "correct_solution": "import re\r\ndef pass_validity(p):\r\n x = True\r\n while x:  \r\n    if (len(p)<6 or len(p)>12):\r\n        break\r\n    elif not re.search(\"[a-z]\",p):\r\n        break\r\n    elif not re.search(\"[0-9]\",p):\r\n        break\r\n    elif not re.search(\"[A-Z]\",p):\r\n        break\r\n    elif not re.search(\"[$#@]\",p):\r\n        break\r\n    elif re.search(\"\\s\",p):\r\n        break\r\n    else:\r\n        return True\r\n        x=False\r\n        break\r\n\r\n if x:\r\n    return False",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "pass_validity('password')",
          "expected_output": "False"
        },
        {
          "input": "pass_validity('Password@10')",
          "expected_output": "True"
        },
        {
          "input": "pass_validity('password@10')",
          "expected_output": "False"
        }
      ],
      "broken_test_cases": [
        {
          "input": "pass_validity('Password@10')",
          "expected_output": "False"
        },
        {
          "input": "pass_validity('Password@10')",
          "expected_output": "False"
        },
        {
          "input": "pass_validity('password@10')",
          "expected_output": "True"
        }
      ]
    },
    {
      "problem_id": "mbpp_294",
      "description": "Write a function to find the maximum value in a given heterogeneous list.",
      "function_name": "max_val",
      "correct_solution": "def max_val(listval):\r\n     max_val = max(i for i in listval if isinstance(i, int)) \r\n     return(max_val)",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "max_val(['Python', 3, 2, 4, 5, 'version'])",
          "expected_output": "5"
        },
        {
          "input": "max_val(['Python', 15, 20, 25])",
          "expected_output": "25"
        },
        {
          "input": "max_val(['Python', 30, 20, 40, 50, 'version'])",
          "expected_output": "50"
        }
      ],
      "broken_test_cases": [
        {
          "input": "max_val(['Python', 3, 2, 4, 5, 'version'])",
          "expected_output": "3"
        },
        {
          "input": "max_val(['Python', 15, 20, 25])",
          "expected_output": "20"
        },
        {
          "input": "max_val(['Python', 30, 20, 40, 50, 'version'])",
          "expected_output": "40"
        }
      ]
    },
    {
      "problem_id": "mbpp_311",
      "description": "Write a python function to set the left most unset bit.",
      "function_name": "set_left_most_unset_bit",
      "correct_solution": "def set_left_most_unset_bit(n): \r\n    if not (n & (n + 1)): \r\n        return n \r\n    pos, temp, count = 0, n, 0 \r\n    while temp: \r\n        if not (temp & 1): \r\n            pos = count      \r\n        count += 1; temp>>=1\r\n    return (n | (1 << (pos))) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "set_left_most_unset_bit(10)",
          "expected_output": "14"
        },
        {
          "input": "set_left_most_unset_bit(12)",
          "expected_output": "14"
        },
        {
          "input": "set_left_most_unset_bit(15)",
          "expected_output": "15"
        }
      ],
      "broken_test_cases": [
        {
          "input": "set_left_most_unset_bit(10)",
          "expected_output": "13"
        },
        {
          "input": "set_left_most_unset_bit(12)",
          "expected_output": "12"
        },
        {
          "input": "set_left_most_unset_bit(15)",
          "expected_output": "14"
        }
      ]
    },
    {
      "problem_id": "mbpp_147",
      "description": "Write a function to find the maximum total path sum in the given triangle.",
      "function_name": "max_path_sum",
      "correct_solution": "def max_path_sum(tri, m, n): \r\n\tfor i in range(m-1, -1, -1): \r\n\t\tfor j in range(i+1): \r\n\t\t\tif (tri[i+1][j] > tri[i+1][j+1]): \r\n\t\t\t\ttri[i][j] += tri[i+1][j] \r\n\t\t\telse: \r\n\t\t\t\ttri[i][j] += tri[i+1][j+1] \r\n\treturn tri[0][0]",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2)",
          "expected_output": "14"
        },
        {
          "input": "max_path_sum([[13, 0, 0], [7, 4, 0], [2, 4, 6]], 2, 2)",
          "expected_output": "24"
        },
        {
          "input": "max_path_sum([[2, 0, 0], [11, 18, 0], [21, 25, 33]], 2, 2)",
          "expected_output": "53"
        }
      ],
      "broken_test_cases": [
        {
          "input": "max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2)",
          "expected_output": "13"
        },
        {
          "input": "max_path_sum([[13, 0, 0], [7, 4, 0], [2, 4, 6]], 2, 2)",
          "expected_output": "23"
        },
        {
          "input": "max_path_sum([[2, 0, 0], [11, 18, 0], [21, 25, 33]], 2, 2)",
          "expected_output": "54"
        }
      ]
    },
    {
      "problem_id": "mbpp_726",
      "description": "Write a function to multiply the adjacent elements of the given tuple.",
      "function_name": "multiply_elements",
      "correct_solution": "def multiply_elements(test_tup):\r\n  res = tuple(i * j for i, j in zip(test_tup, test_tup[1:]))\r\n  return (res) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "multiply_elements((1, 5, 7, 8, 10))",
          "expected_output": "(5, 35, 56, 80)"
        },
        {
          "input": "multiply_elements((2, 4, 5, 6, 7))",
          "expected_output": "(8, 20, 30, 42)"
        },
        {
          "input": "multiply_elements((12, 13, 14, 9, 15))",
          "expected_output": "(156, 182, 126, 135)"
        }
      ],
      "broken_test_cases": [
        {
          "input": "multiply_elements((1, 5, 7, 8, 10))",
          "expected_output": "(5, 35, 56, 81)"
        },
        {
          "input": "multiply_elements((2, 4, 5, 6, 7))",
          "expected_output": "(8, 20, 30, 43)"
        },
        {
          "input": "multiply_elements((12, 13, 14, 9, 15))",
          "expected_output": "(156, 182, 126, 134)"
        }
      ]
    },
    {
      "problem_id": "mbpp_566",
      "description": "Write a function to get the sum of a non-negative integer.",
      "function_name": "sum_digits",
      "correct_solution": "def sum_digits(n):\r\n  if n == 0:\r\n    return 0\r\n  else:\r\n    return n % 10 + sum_digits(int(n / 10))",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "sum_digits(345)",
          "expected_output": "12"
        },
        {
          "input": "sum_digits(12)",
          "expected_output": "3"
        },
        {
          "input": "sum_digits(97)",
          "expected_output": "16"
        }
      ],
      "broken_test_cases": [
        {
          "input": "sum_digits(345)",
          "expected_output": "13"
        },
        {
          "input": "sum_digits(12)",
          "expected_output": "4"
        },
        {
          "input": "sum_digits(97)",
          "expected_output": "15"
        }
      ]
    },
    {
      "problem_id": "mbpp_226",
      "description": "Write a python function to remove the characters which have odd index values of a given string.",
      "function_name": "odd_values_string",
      "correct_solution": "def odd_values_string(str):\r\n  result = \"\" \r\n  for i in range(len(str)):\r\n    if i % 2 == 0:\r\n      result = result + str[i]\r\n  return result",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "odd_values_string('abcdef')",
          "expected_output": "ace"
        },
        {
          "input": "odd_values_string('python')",
          "expected_output": "pto"
        },
        {
          "input": "odd_values_string('data')",
          "expected_output": "dt"
        }
      ],
      "broken_test_cases": [
        {
          "input": "odd_values_string('abcdef')",
          "expected_output": "aec"
        },
        {
          "input": "odd_values_string('python')",
          "expected_output": "pon"
        },
        {
          "input": "odd_values_string('data')",
          "expected_output": "da"
        }
      ]
    },
    {
      "problem_id": "mbpp_639",
      "description": "Write a function to sum the length of the names of a given list of names after removing the names that start with a lowercase letter.",
      "function_name": "sample_nam",
      "correct_solution": "def sample_nam(sample_names):\r\n  sample_names=list(filter(lambda el:el[0].isupper() and el[1:].islower(),sample_names))\r\n  return len(''.join(sample_names))",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])",
          "expected_output": "16"
        },
        {
          "input": "sample_nam(['php', 'res', 'Python', 'abcd', 'Java', 'aaa'])",
          "expected_output": "10"
        },
        {
          "input": "sample_nam(['abcd', 'Python', 'abba', 'aba'])",
          "expected_output": "6"
        }
      ],
      "broken_test_cases": [
        {
          "input": "sample_nam(['sally', 'Dylan', 'rebecca', 'Diana', 'Joanne', 'keith'])",
          "expected_output": "17"
        },
        {
          "input": "sample_nam(['php', 'res', 'Python', 'abcd', 'Java', 'aaa'])",
          "expected_output": "11"
        },
        {
          "input": "sample_nam(['abcd', 'Python', 'abba', 'aba'])",
          "expected_output": "8"
        }
      ]
    },
    {
      "problem_id": "mbpp_44",
      "description": "Write a function that matches a word at the beginning of a string.",
      "function_name": "text_match_string",
      "correct_solution": "import re\r\ndef text_match_string(text):\r\n        patterns = '^\\w+'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return 'Not matched!'",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "text_match_string(' python')",
          "expected_output": "Not matched!"
        },
        {
          "input": "text_match_string('python')",
          "expected_output": "Found a match!"
        },
        {
          "input": "text_match_string('  lang')",
          "expected_output": "Not matched!"
        }
      ],
      "broken_test_cases": [
        {
          "input": "text_match_string(' python')",
          "expected_output": "Found a match!"
        },
        {
          "input": "text_match_string('python')",
          "expected_output": "Not matched!"
        },
        {
          "input": "text_match_string('  lang')",
          "expected_output": "Found a match!"
        }
      ]
    },
    {
      "problem_id": "mbpp_936",
      "description": "Write a function to re-arrange the given tuples based on the given ordered list.",
      "function_name": "re_arrange_tuples",
      "correct_solution": "def re_arrange_tuples(test_list, ord_list):\r\n  temp = dict(test_list)\r\n  res = [(key, temp[key]) for key in ord_list]\r\n  return (res) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "re_arrange_tuples([(4, 3), (1, 9), (2, 10), (3, 2)], [1, 4, 2, 3])",
          "expected_output": "[(1, 9), (4, 3), (2, 10), (3, 2)]"
        },
        {
          "input": "re_arrange_tuples([(5, 4), (2, 10), (3, 11), (4, 3)], [3, 4, 2, 3])",
          "expected_output": "[(3, 11), (4, 3), (2, 10), (3, 11)]"
        },
        {
          "input": "re_arrange_tuples([(6, 3), (3, 8), (5, 7), (2, 4)], [2, 5, 3, 6])",
          "expected_output": "[(2, 4), (5, 7), (3, 8), (6, 3)]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "re_arrange_tuples([(4, 3), (1, 9), (2, 10), (3, 2)], [1, 4, 2, 3])",
          "expected_output": "[(1, 9), (2, 10), (3, 2), (4, 3)]"
        },
        {
          "input": "re_arrange_tuples([(5, 4), (2, 10), (3, 11), (4, 3)], [3, 4, 2, 3])",
          "expected_output": "[(3, 11), (4, 3), (2, 10), (5, 4)]"
        },
        {
          "input": "re_arrange_tuples([(6, 3), (3, 8), (5, 7), (2, 4)], [2, 5, 3, 6])",
          "expected_output": "[(2, 4), (5, 7), (3, 8), (6, 7)]"
        }
      ]
    },
    {
      "problem_id": "mbpp_943",
      "description": "Write a function to combine two given sorted lists using heapq module.",
      "function_name": "combine_lists",
      "correct_solution": "from heapq import merge\r\ndef combine_lists(num1,num2):\r\n  combine_lists=list(merge(num1, num2))\r\n  return combine_lists",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "combine_lists([1, 3, 5, 7, 9, 11], [0, 2, 4, 6, 8, 10])",
          "expected_output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]"
        },
        {
          "input": "combine_lists([1, 3, 5, 6, 8, 9], [2, 5, 7, 11])",
          "expected_output": "[1, 2, 3, 5, 5, 6, 7, 8, 9, 11]"
        },
        {
          "input": "combine_lists([1, 3, 7], [2, 4, 6])",
          "expected_output": "[1, 2, 3, 4, 6, 7]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "combine_lists([1, 3, 5, 7, 9, 11], [0, 2, 4, 6, 8, 10])",
          "expected_output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 0]"
        },
        {
          "input": "combine_lists([1, 3, 5, 6, 8, 9], [2, 5, 7, 11])",
          "expected_output": "[1, 2, 3, 5, 6, 7, 8, 9, 11]"
        },
        {
          "input": "combine_lists([1, 3, 7], [2, 4, 6])",
          "expected_output": "[1, 2, 3, 4, 7, 6]"
        }
      ]
    },
    {
      "problem_id": "mbpp_190",
      "description": "Write a python function to count the number of integral co-ordinates that lie inside a square.",
      "function_name": "count_Intgral_Points",
      "correct_solution": "def count_Intgral_Points(x1,y1,x2,y2): \r\n    return ((y2 - y1 - 1) * (x2 - x1 - 1)) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "count_Intgral_Points(1, 1, 4, 4)",
          "expected_output": "4"
        },
        {
          "input": "count_Intgral_Points(1, 2, 1, 2)",
          "expected_output": "1"
        },
        {
          "input": "count_Intgral_Points(4, 2, 6, 4)",
          "expected_output": "1"
        }
      ],
      "broken_test_cases": [
        {
          "input": "count_Intgral_Points(1, 1, 4, 4)",
          "expected_output": "3"
        },
        {
          "input": "count_Intgral_Points(1, 2, 1, 2)",
          "expected_output": "2"
        },
        {
          "input": "count_Intgral_Points(4, 2, 6, 4)",
          "expected_output": "2"
        }
      ]
    },
    {
      "problem_id": "mbpp_930",
      "description": "Write a function that matches a string that has an a followed by zero or more b's by using regex.",
      "function_name": "text_match",
      "correct_solution": "import re\r\ndef text_match(text):\r\n        patterns = 'ab*?'\r\n        if re.search(patterns,  text):\r\n                return ('Found a match!')\r\n        else:\r\n                return ('Not matched!')",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "text_match('msb')",
          "expected_output": "Not matched!"
        },
        {
          "input": "text_match('a0c')",
          "expected_output": "Found a match!"
        },
        {
          "input": "text_match('abbc')",
          "expected_output": "Found a match!"
        }
      ],
      "broken_test_cases": [
        {
          "input": "text_match('abbc')",
          "expected_output": "Not matched!"
        },
        {
          "input": "text_match('a0c')",
          "expected_output": "Not matched!"
        },
        {
          "input": "text_match('abbc')",
          "expected_output": "Not matched!"
        }
      ]
    },
    {
      "problem_id": "mbpp_631",
      "description": "Write a function to replace whitespaces with an underscore and vice versa in a given string by using regex.",
      "function_name": "replace_spaces",
      "correct_solution": "import re\r\ntext = 'Python Exercises'\r\ndef replace_spaces(text):\r\n  text =text.replace (\" \", \"_\")\r\n  return (text)\r\n  text =text.replace (\"_\", \" \")\r\n  return (text)",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "replace_spaces('Jumanji The Jungle')",
          "expected_output": "Jumanji_The_Jungle"
        },
        {
          "input": "replace_spaces('The Avengers')",
          "expected_output": "The_Avengers"
        },
        {
          "input": "replace_spaces('Fast and Furious')",
          "expected_output": "Fast_and_Furious"
        }
      ],
      "broken_test_cases": [
        {
          "input": "replace_spaces('Jumanji The Jungle')",
          "expected_output": "Jumanji The Jungle"
        },
        {
          "input": "replace_spaces('The Avengers')",
          "expected_output": "The Avengers"
        },
        {
          "input": "replace_spaces('Fast and Furious')",
          "expected_output": "Fast_and_Furious_"
        }
      ]
    },
    {
      "problem_id": "mbpp_968",
      "description": "Write a python function to find maximum possible value for the given periodic function.",
      "function_name": "floor_Max",
      "correct_solution": "def floor_Max(A,B,N):\r\n    x = min(B - 1,N)\r\n    return (A*x) // B",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "floor_Max(11, 10, 9)",
          "expected_output": "9"
        },
        {
          "input": "floor_Max(5, 7, 4)",
          "expected_output": "2"
        },
        {
          "input": "floor_Max(2, 2, 1)",
          "expected_output": "1"
        }
      ],
      "broken_test_cases": [
        {
          "input": "floor_Max(11, 10, 9)",
          "expected_output": "10"
        },
        {
          "input": "floor_Max(5, 7, 4)",
          "expected_output": "3"
        },
        {
          "input": "floor_Max(2, 2, 1)",
          "expected_output": "2"
        }
      ]
    },
    {
      "problem_id": "mbpp_923",
      "description": "Write a function to find the length of the shortest string that has both str1 and str2 as subsequences.",
      "function_name": "super_seq",
      "correct_solution": "def super_seq(X, Y, m, n):\r\n\tif (not m):\r\n\t\treturn n\r\n\tif (not n):\r\n\t\treturn m\r\n\tif (X[m - 1] == Y[n - 1]):\r\n\t\treturn 1 + super_seq(X, Y, m - 1, n - 1)\r\n\treturn 1 + min(super_seq(X, Y, m - 1, n),\tsuper_seq(X, Y, m, n - 1))",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "super_seq('AGGTAB', 'GXTXAYB', 6, 7)",
          "expected_output": "9"
        },
        {
          "input": "super_seq('feek', 'eke', 4, 3)",
          "expected_output": "5"
        },
        {
          "input": "super_seq('PARRT', 'RTA', 5, 3)",
          "expected_output": "6"
        }
      ],
      "broken_test_cases": [
        {
          "input": "super_seq('AGGTAB', 'GXTXAYB', 6, 7)",
          "expected_output": "8"
        },
        {
          "input": "super_seq('feek', 'eke', 4, 3)",
          "expected_output": "4"
        },
        {
          "input": "super_seq('PARRT', 'RTA', 5, 3)",
          "expected_output": "5"
        }
      ]
    },
    {
      "problem_id": "mbpp_594",
      "description": "Write a function to find the difference of first even and odd number of a given list.",
      "function_name": "diff_even_odd",
      "correct_solution": "def diff_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even-first_odd)",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "diff_even_odd([1, 3, 5, 7, 4, 1, 6, 8])",
          "expected_output": "3"
        },
        {
          "input": "diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
          "expected_output": "1"
        },
        {
          "input": "diff_even_odd([1, 5, 7, 9, 10])",
          "expected_output": "9"
        }
      ],
      "broken_test_cases": [
        {
          "input": "diff_even_odd([1, 3, 5, 7, 4, 1, 6, 8])",
          "expected_output": "5"
        },
        {
          "input": "diff_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
          "expected_output": "3"
        },
        {
          "input": "diff_even_odd([1, 5, 7, 9, 10])",
          "expected_output": "8"
        }
      ]
    },
    {
      "problem_id": "mbpp_49",
      "description": "Write a function to extract every first or specified element from a given two-dimensional list.",
      "function_name": "specified_element",
      "correct_solution": "def specified_element(nums, N):\r\n    result = [i[N] for i in nums]\r\n    return result\r\n    ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 0)",
          "expected_output": "[1, 4, 7]"
        },
        {
          "input": "specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 2)",
          "expected_output": "[3, 6, 9]"
        },
        {
          "input": "specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 1)",
          "expected_output": "[2, 5, 1]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 0)",
          "expected_output": "[1, 4, 9]"
        },
        {
          "input": "specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 2)",
          "expected_output": "[1, 4, 7]"
        },
        {
          "input": "specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 1)",
          "expected_output": "[2, 5, 2]"
        }
      ]
    },
    {
      "problem_id": "mbpp_543",
      "description": "Write a function to add two numbers and print number of digits of sum.",
      "function_name": "count_digits",
      "correct_solution": "def count_digits(num1,num2):\r\n    number=num1+num2\r\n    count = 0\r\n    while(number > 0):\r\n        number = number // 10\r\n        count = count + 1\r\n    return count",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "count_digits(9875, 10)",
          "expected_output": "4"
        },
        {
          "input": "count_digits(98759853034, 100)",
          "expected_output": "11"
        },
        {
          "input": "count_digits(1234567, 500)",
          "expected_output": "7"
        }
      ],
      "broken_test_cases": [
        {
          "input": "count_digits(9875, 10)",
          "expected_output": "5"
        },
        {
          "input": "count_digits(98759853034, 100)",
          "expected_output": "10"
        },
        {
          "input": "count_digits(1234567, 500)",
          "expected_output": "6"
        }
      ]
    },
    {
      "problem_id": "mbpp_919",
      "description": "Write a python function to multiply all items in the list.",
      "function_name": "multiply_list",
      "correct_solution": "def multiply_list(items):\r\n    tot = 1\r\n    for x in items:\r\n        tot *= x\r\n    return tot",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "multiply_list([1, -2, 3])",
          "expected_output": "-6"
        },
        {
          "input": "multiply_list([1, 2, 3, 4])",
          "expected_output": "24"
        },
        {
          "input": "multiply_list([3, 1, 2, 3])",
          "expected_output": "18"
        }
      ],
      "broken_test_cases": [
        {
          "input": "multiply_list([1, -2, 3])",
          "expected_output": "6"
        },
        {
          "input": "multiply_list([1, 2, 3, 4])",
          "expected_output": "25"
        },
        {
          "input": "multiply_list([3, 1, 2, 3])",
          "expected_output": "20"
        }
      ]
    },
    {
      "problem_id": "mbpp_235",
      "description": "Write a python function to set all even bits of a given number.",
      "function_name": "even_bit_set_number",
      "correct_solution": "def even_bit_set_number(n): \r\n    count = 0;res = 0;temp = n \r\n    while(temp > 0): \r\n        if (count % 2 == 1): \r\n            res |= (1 << count)\r\n        count+=1\r\n        temp >>= 1\r\n    return (n | res) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "even_bit_set_number(10)",
          "expected_output": "10"
        },
        {
          "input": "even_bit_set_number(20)",
          "expected_output": "30"
        },
        {
          "input": "even_bit_set_number(30)",
          "expected_output": "30"
        }
      ],
      "broken_test_cases": [
        {
          "input": "even_bit_set_number(10)",
          "expected_output": "15"
        },
        {
          "input": "even_bit_set_number(20)",
          "expected_output": "40"
        },
        {
          "input": "even_bit_set_number(30)",
          "expected_output": "31"
        }
      ]
    },
    {
      "problem_id": "mbpp_351",
      "description": "Write a python function to find the first element occurring k times in a given array.",
      "function_name": "first_Element",
      "correct_solution": "def first_Element(arr,n,k): \r\n    count_map = {}; \r\n    for i in range(0, n): \r\n        if(arr[i] in count_map.keys()): \r\n            count_map[arr[i]] += 1\r\n        else: \r\n            count_map[arr[i]] = 1\r\n        i += 1\r\n    for i in range(0, n):  \r\n        if (count_map[arr[i]] == k): \r\n            return arr[i] \r\n        i += 1 \r\n    return -1",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "first_Element([0, 1, 2, 3, 4, 5], 6, 1)",
          "expected_output": "0"
        },
        {
          "input": "first_Element([1, 2, 1, 3, 4], 5, 2)",
          "expected_output": "1"
        },
        {
          "input": "first_Element([2, 3, 4, 3, 5, 7, 1, 2, 3, 5], 10, 2)",
          "expected_output": "2"
        }
      ],
      "broken_test_cases": [
        {
          "input": "first_Element([0, 1, 2, 3, 4, 5], 6, 1)",
          "expected_output": "1"
        },
        {
          "input": "first_Element([1, 2, 1, 3, 4], 5, 2)",
          "expected_output": "3"
        },
        {
          "input": "first_Element([2, 3, 4, 3, 5, 7, 1, 2, 3, 5], 10, 2)",
          "expected_output": "3"
        }
      ]
    },
    {
      "problem_id": "mbpp_608",
      "description": "Write a python function to find nth bell number.",
      "function_name": "bell_Number",
      "correct_solution": "def bell_Number(n): \r\n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \r\n    bell[0][0] = 1\r\n    for i in range(1, n+1):\r\n        bell[i][0] = bell[i-1][i-1]\r\n        for j in range(1, i+1): \r\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \r\n    return bell[n][0] ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "bell_Number(2)",
          "expected_output": "2"
        },
        {
          "input": "bell_Number(3)",
          "expected_output": "5"
        },
        {
          "input": "bell_Number(4)",
          "expected_output": "15"
        }
      ],
      "broken_test_cases": [
        {
          "input": "bell_Number(2)",
          "expected_output": "3"
        },
        {
          "input": "bell_Number(3)",
          "expected_output": "10"
        },
        {
          "input": "bell_Number(4)",
          "expected_output": "14"
        }
      ]
    },
    {
      "problem_id": "mbpp_548",
      "description": "Write a function to find the length of the longest increasing subsequence of the given sequence.",
      "function_name": "longest_increasing_subsequence",
      "correct_solution": "def longest_increasing_subsequence(arr): \r\n\tn = len(arr) \r\n\tlongest_increasing_subsequence = [1]*n \r\n\tfor i in range (1 , n): \r\n\t\tfor j in range(0 , i): \r\n\t\t\tif arr[i] > arr[j] and longest_increasing_subsequence[i]< longest_increasing_subsequence[j] + 1 : \r\n\t\t\t\tlongest_increasing_subsequence[i] = longest_increasing_subsequence[j]+1\r\n\tmaximum = 0\r\n\tfor i in range(n): \r\n\t\tmaximum = max(maximum , longest_increasing_subsequence[i]) \r\n\treturn maximum",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "longest_increasing_subsequence([10, 22, 9, 33, 21, 50, 41, 60])",
          "expected_output": "5"
        },
        {
          "input": "longest_increasing_subsequence([3, 10, 2, 1, 20])",
          "expected_output": "3"
        },
        {
          "input": "longest_increasing_subsequence([50, 3, 10, 7, 40, 80])",
          "expected_output": "4"
        }
      ],
      "broken_test_cases": [
        {
          "input": "longest_increasing_subsequence([10, 22, 9, 33, 21, 50, 41, 60])",
          "expected_output": "4"
        },
        {
          "input": "longest_increasing_subsequence([3, 10, 2, 1, 20])",
          "expected_output": "2"
        },
        {
          "input": "longest_increasing_subsequence([50, 3, 10, 7, 40, 80])",
          "expected_output": "5"
        }
      ]
    },
    {
      "problem_id": "mbpp_207",
      "description": "Write a function to count the longest repeating subsequences such that the two subsequences don\u2019t have same string characters at same positions.",
      "function_name": "find_longest_repeating_subseq",
      "correct_solution": "def find_longest_repeating_subseq(str): \r\n\tn = len(str) \r\n\tdp = [[0 for k in range(n+1)] for l in range(n+1)] \r\n\tfor i in range(1, n+1): \r\n\t\tfor j in range(1, n+1): \r\n\t\t\tif (str[i-1] == str[j-1] and i != j): \r\n\t\t\t\tdp[i][j] = 1 + dp[i-1][j-1] \r\n\t\t\telse: \r\n\t\t\t\tdp[i][j] = max(dp[i][j-1], dp[i-1][j]) \r\n\treturn dp[n][n]",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "find_longest_repeating_subseq('AABEBCDD')",
          "expected_output": "3"
        },
        {
          "input": "find_longest_repeating_subseq('aabb')",
          "expected_output": "2"
        },
        {
          "input": "find_longest_repeating_subseq('aab')",
          "expected_output": "1"
        }
      ],
      "broken_test_cases": [
        {
          "input": "find_longest_repeating_subseq('AABEBCDD')",
          "expected_output": "2"
        },
        {
          "input": "find_longest_repeating_subseq('aabb')",
          "expected_output": "3"
        },
        {
          "input": "find_longest_repeating_subseq('aab')",
          "expected_output": "2"
        }
      ]
    },
    {
      "problem_id": "mbpp_955",
      "description": "Write a function to find out, if the given number is abundant.",
      "function_name": "is_abundant",
      "correct_solution": "def is_abundant(n):\r\n    fctrsum = sum([fctr for fctr in range(1, n) if n % fctr == 0])\r\n    return fctrsum > n",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "is_abundant(12)",
          "expected_output": "True"
        },
        {
          "input": "is_abundant(13)",
          "expected_output": "False"
        },
        {
          "input": "is_abundant(9)",
          "expected_output": "False"
        }
      ],
      "broken_test_cases": [
        {
          "input": "is_abundant(12)",
          "expected_output": "False"
        },
        {
          "input": "is_abundant(13)",
          "expected_output": "True"
        },
        {
          "input": "is_abundant(9)",
          "expected_output": "True"
        }
      ]
    },
    {
      "problem_id": "mbpp_17",
      "description": "Write a function to find the perimeter of a square.",
      "function_name": "square_perimeter",
      "correct_solution": "def square_perimeter(a):\r\n  perimeter=4*a\r\n  return perimeter",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "square_perimeter(10)",
          "expected_output": "40"
        },
        {
          "input": "square_perimeter(5)",
          "expected_output": "20"
        },
        {
          "input": "square_perimeter(4)",
          "expected_output": "16"
        }
      ],
      "broken_test_cases": [
        {
          "input": "square_perimeter(10)",
          "expected_output": "50"
        },
        {
          "input": "square_perimeter(5)",
          "expected_output": "15"
        },
        {
          "input": "square_perimeter(4)",
          "expected_output": "20"
        }
      ]
    },
    {
      "problem_id": "mbpp_685",
      "description": "Write a python function to find sum of prime numbers between 1 to n.",
      "function_name": "sum_Of_Primes",
      "correct_solution": "def sum_Of_Primes(n): \r\n    prime = [True] * (n + 1)  \r\n    p = 2\r\n    while p * p <= n: \r\n        if prime[p] == True:  \r\n            i = p * 2\r\n            while i <= n: \r\n                prime[i] = False\r\n                i += p \r\n        p += 1    \r\n    sum = 0\r\n    for i in range (2,n + 1): \r\n        if(prime[i]): \r\n            sum += i \r\n    return sum",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "sum_Of_Primes(10)",
          "expected_output": "17"
        },
        {
          "input": "sum_Of_Primes(20)",
          "expected_output": "77"
        },
        {
          "input": "sum_Of_Primes(5)",
          "expected_output": "10"
        }
      ],
      "broken_test_cases": [
        {
          "input": "sum_Of_Primes(10)",
          "expected_output": "18"
        },
        {
          "input": "sum_Of_Primes(20)",
          "expected_output": "70"
        },
        {
          "input": "sum_Of_Primes(5)",
          "expected_output": "11"
        }
      ]
    },
    {
      "problem_id": "mbpp_522",
      "description": "Write a function to find the longest bitonic subsequence for the given array.",
      "function_name": "lbs",
      "correct_solution": "def lbs(arr): \r\n\tn = len(arr) \r\n\tlis = [1 for i in range(n+1)] \r\n\tfor i in range(1 , n): \r\n\t\tfor j in range(0 , i): \r\n\t\t\tif ((arr[i] > arr[j]) and (lis[i] < lis[j] +1)): \r\n\t\t\t\tlis[i] = lis[j] + 1\r\n\tlds = [1 for i in range(n+1)] \r\n\tfor i in reversed(range(n-1)): \r\n\t\tfor j in reversed(range(i-1 ,n)): \r\n\t\t\tif(arr[i] > arr[j] and lds[i] < lds[j] + 1): \r\n\t\t\t\tlds[i] = lds[j] + 1\r\n\tmaximum = lis[0] + lds[0] - 1\r\n\tfor i in range(1 , n): \r\n\t\tmaximum = max((lis[i] + lds[i]-1), maximum) \r\n\treturn maximum",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "lbs([0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15])",
          "expected_output": "7"
        },
        {
          "input": "lbs([1, 11, 2, 10, 4, 5, 2, 1])",
          "expected_output": "6"
        },
        {
          "input": "lbs([80, 60, 30, 40, 20, 10])",
          "expected_output": "5"
        }
      ],
      "broken_test_cases": [
        {
          "input": "lbs([0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15])",
          "expected_output": "8"
        },
        {
          "input": "lbs([1, 11, 2, 10, 4, 5, 2, 1])",
          "expected_output": "7"
        },
        {
          "input": "lbs([80, 60, 30, 40, 20, 10])",
          "expected_output": "6"
        }
      ]
    },
    {
      "problem_id": "mbpp_20",
      "description": "Write a function to check if the given number is woodball or not.",
      "function_name": "is_woodall",
      "correct_solution": "def is_woodall(x): \r\n\tif (x % 2 == 0): \r\n\t\treturn False\r\n\tif (x == 1): \r\n\t\treturn True\r\n\tx = x + 1 \r\n\tp = 0\r\n\twhile (x % 2 == 0): \r\n\t\tx = x/2\r\n\t\tp = p + 1\r\n\t\tif (p == x): \r\n\t\t\treturn True\r\n\treturn False",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "is_woodall(383)",
          "expected_output": "True"
        },
        {
          "input": "is_woodall(254)",
          "expected_output": "False"
        },
        {
          "input": "is_woodall(200)",
          "expected_output": "False"
        }
      ],
      "broken_test_cases": [
        {
          "input": "is_woodall(383)",
          "expected_output": "False"
        },
        {
          "input": "is_woodall(254)",
          "expected_output": "True"
        },
        {
          "input": "is_woodall(200)",
          "expected_output": "True"
        }
      ]
    },
    {
      "problem_id": "mbpp_91",
      "description": "Write a function to check if a substring is present in a given list of string values.",
      "function_name": "find_substring",
      "correct_solution": "def find_substring(str1, sub_str):\r\n   if any(sub_str in s for s in str1):\r\n       return True\r\n   return False",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "find_substring(['red', 'black', 'white', 'green', 'orange'], 'ack')",
          "expected_output": "True"
        },
        {
          "input": "find_substring(['red', 'black', 'white', 'green', 'orange'], 'abc')",
          "expected_output": "False"
        },
        {
          "input": "find_substring(['red', 'black', 'white', 'green', 'orange'], 'ange')",
          "expected_output": "True"
        }
      ],
      "broken_test_cases": [
        {
          "input": "find_substring(['red', 'black', 'white', 'green', 'orange'], 'ack')",
          "expected_output": "False"
        },
        {
          "input": "find_substring(['red', 'black', 'white', 'green', 'orange'], 'abc')",
          "expected_output": "True"
        },
        {
          "input": "find_substring(['red', 'black', 'white', 'green', 'orange'], 'ange')",
          "expected_output": "False"
        }
      ]
    },
    {
      "problem_id": "mbpp_524",
      "description": "Write a function to find the sum of maximum increasing subsequence of the given array.",
      "function_name": "max_sum_increasing_subsequence",
      "correct_solution": "def max_sum_increasing_subsequence(arr, n): \r\n\tmax = 0\r\n\tmsis = [0 for x in range(n)] \r\n\tfor i in range(n): \r\n\t\tmsis[i] = arr[i] \r\n\tfor i in range(1, n): \r\n\t\tfor j in range(i): \r\n\t\t\tif (arr[i] > arr[j] and\r\n\t\t\t\tmsis[i] < msis[j] + arr[i]): \r\n\t\t\t\tmsis[i] = msis[j] + arr[i] \r\n\tfor i in range(n): \r\n\t\tif max < msis[i]: \r\n\t\t\tmax = msis[i] \r\n\treturn max",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "max_sum_increasing_subsequence([1, 101, 2, 3, 100, 4, 5], 7)",
          "expected_output": "106"
        },
        {
          "input": "max_sum_increasing_subsequence([3, 4, 5, 10], 4)",
          "expected_output": "22"
        },
        {
          "input": "max_sum_increasing_subsequence([10, 5, 4, 3], 4)",
          "expected_output": "10"
        }
      ],
      "broken_test_cases": [
        {
          "input": "max_sum_increasing_subsequence([1, 101, 2, 3, 100, 4, 5], 7)",
          "expected_output": "100"
        },
        {
          "input": "max_sum_increasing_subsequence([3, 4, 5, 10], 4)",
          "expected_output": "20"
        },
        {
          "input": "max_sum_increasing_subsequence([10, 5, 4, 3], 4)",
          "expected_output": "11"
        }
      ]
    },
    {
      "problem_id": "mbpp_495",
      "description": "Write a function to remove lowercase substrings from a given string by using regex.",
      "function_name": "remove_lowercase",
      "correct_solution": "import re\r\ndef remove_lowercase(str1):\r\n  remove_lower = lambda text: re.sub('[a-z]', '', text)\r\n  result =  remove_lower(str1)\r\n  return (result)",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf')",
          "expected_output": "KDALOOOHLAJSI"
        },
        {
          "input": "remove_lowercase('ProducTnamEstreAmIngMediAplAYer')",
          "expected_output": "PTEAIMAAY"
        },
        {
          "input": "remove_lowercase('maNufacTuredbYSheZenTechNolOGIes')",
          "expected_output": "NTYSZTNOGI"
        }
      ],
      "broken_test_cases": [
        {
          "input": "remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf')",
          "expected_output": "KDALOOOHLAJSKDSF"
        },
        {
          "input": "remove_lowercase('ProducTnamEstreAmIngMediAplAYer')",
          "expected_output": "PTEAMAY"
        },
        {
          "input": "remove_lowercase('maNufacTuredbYSheZenTechNolOGIes')",
          "expected_output": "NTYSZTNOGI_BROKEN"
        }
      ]
    },
    {
      "problem_id": "mbpp_473",
      "description": "Write a function to find the tuple intersection of elements in the given tuple list irrespective of their order.",
      "function_name": "tuple_intersection",
      "correct_solution": "def tuple_intersection(test_list1, test_list2):\r\n  res = set([tuple(sorted(ele)) for ele in test_list1]) & set([tuple(sorted(ele)) for ele in test_list2])\r\n  return (res)",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)], [(5, 4), (3, 4), (6, 5), (9, 11)])",
          "expected_output": "{(4, 5), (3, 4), (5, 6)}"
        },
        {
          "input": "tuple_intersection([(4, 1), (7, 4), (11, 13), (17, 14)], [(1, 4), (7, 4), (16, 12), (10, 13)])",
          "expected_output": "{(4, 7), (1, 4)}"
        },
        {
          "input": "tuple_intersection([(2, 1), (3, 2), (1, 3), (1, 4)], [(11, 2), (2, 3), (6, 2), (1, 3)])",
          "expected_output": "{(1, 3), (2, 3)}"
        }
      ],
      "broken_test_cases": [
        {
          "input": "tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)], [(5, 4), (3, 4), (6, 5), (9, 11)])",
          "expected_output": "{(3, 4), (5, 6), (9, 10), (4, 5)}"
        },
        {
          "input": "tuple_intersection([(4, 1), (7, 4), (11, 13), (17, 14)], [(1, 4), (7, 4), (16, 12), (10, 13)])",
          "expected_output": "{(4, 7), (1, 4), (11, 13), (17, 14)}"
        },
        {
          "input": "tuple_intersection([(2, 1), (3, 2), (1, 3), (1, 4)], [(11, 2), (2, 3), (6, 2), (1, 3)])",
          "expected_output": "{(1, 3), (2, 3), (1, 4)}"
        }
      ]
    },
    {
      "problem_id": "mbpp_47",
      "description": "Write a python function to find the last digit when factorial of a divides factorial of b.",
      "function_name": "compute_Last_Digit",
      "correct_solution": "def compute_Last_Digit(A,B): \r\n    variable = 1\r\n    if (A == B): \r\n        return 1\r\n    elif ((B - A) >= 5):  \r\n        return 0\r\n    else:   \r\n        for i in range(A + 1,B + 1): \r\n            variable = (variable * (i % 10)) % 10\r\n        return variable % 10",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "compute_Last_Digit(2, 4)",
          "expected_output": "2"
        },
        {
          "input": "compute_Last_Digit(6, 8)",
          "expected_output": "6"
        },
        {
          "input": "compute_Last_Digit(1, 2)",
          "expected_output": "2"
        }
      ],
      "broken_test_cases": [
        {
          "input": "compute_Last_Digit(2, 4)",
          "expected_output": "3"
        },
        {
          "input": "compute_Last_Digit(6, 8)",
          "expected_output": "7"
        },
        {
          "input": "compute_Last_Digit(1, 2)",
          "expected_output": "3"
        }
      ]
    },
    {
      "problem_id": "mbpp_369",
      "description": "Write a function to find the lateral surface area of cuboid",
      "function_name": "lateralsurface_cuboid",
      "correct_solution": "def lateralsurface_cuboid(l,w,h):\r\n  LSA = 2*h*(l+w)\r\n  return LSA",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "lateralsurface_cuboid(8, 5, 6)",
          "expected_output": "156"
        },
        {
          "input": "lateralsurface_cuboid(7, 9, 10)",
          "expected_output": "320"
        },
        {
          "input": "lateralsurface_cuboid(10, 20, 30)",
          "expected_output": "1800"
        }
      ],
      "broken_test_cases": [
        {
          "input": "lateralsurface_cuboid(8, 5, 6)",
          "expected_output": "157"
        },
        {
          "input": "lateralsurface_cuboid(7, 9, 10)",
          "expected_output": "319"
        },
        {
          "input": "lateralsurface_cuboid(10, 20, 30)",
          "expected_output": "1600"
        }
      ]
    },
    {
      "problem_id": "mbpp_892",
      "description": "Write a function to remove multiple spaces in a string.",
      "function_name": "remove_spaces",
      "correct_solution": "import re\r\ndef remove_spaces(text):\r\n return (re.sub(' +',' ',text))",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "remove_spaces('python  program')",
          "expected_output": "python program"
        },
        {
          "input": "remove_spaces('python   programming    language')",
          "expected_output": "python programming language"
        }
      ],
      "broken_test_cases": [
        {
          "input": "remove_spaces('python  program')",
          "expected_output": "python program program"
        },
        {
          "input": "remove_spaces('python   programming    language')",
          "expected_output": "python program language"
        }
      ]
    },
    {
      "problem_id": "mbpp_289",
      "description": "Write a python function to calculate the number of odd days in a given year.",
      "function_name": "odd_Days",
      "correct_solution": "def odd_Days(N): \r\n    hund1 = N // 100\r\n    hund4 = N // 400\r\n    leap = N >> 2\r\n    ordd = N - leap \r\n    if (hund1): \r\n        ordd += hund1 \r\n        leap -= hund1 \r\n    if (hund4): \r\n        ordd -= hund4 \r\n        leap += hund4 \r\n    days = ordd + leap * 2\r\n    odd = days % 7\r\n    return odd ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "odd_Days(100)",
          "expected_output": "5"
        },
        {
          "input": "odd_Days(50)",
          "expected_output": "6"
        },
        {
          "input": "odd_Days(75)",
          "expected_output": "2"
        }
      ],
      "broken_test_cases": [
        {
          "input": "odd_Days(100)",
          "expected_output": "6"
        },
        {
          "input": "odd_Days(50)",
          "expected_output": "2"
        },
        {
          "input": "odd_Days(75)",
          "expected_output": "3"
        }
      ]
    },
    {
      "problem_id": "mbpp_253",
      "description": "Write a python function to count integers from a given list.",
      "function_name": "count_integer",
      "correct_solution": "def count_integer(list1):\r\n    ctr = 0\r\n    for i in list1:\r\n        if isinstance(i, int):\r\n            ctr = ctr + 1\r\n    return ctr",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "count_integer([1, 2, 'abc', 1.2])",
          "expected_output": "2"
        },
        {
          "input": "count_integer([1, 2, 3])",
          "expected_output": "3"
        },
        {
          "input": "count_integer([1, 1.2, 4, 5.1])",
          "expected_output": "2"
        }
      ],
      "broken_test_cases": [
        {
          "input": "count_integer([1, 2, 'abc', 1.2])",
          "expected_output": "3"
        },
        {
          "input": "count_integer([1, 2, 3])",
          "expected_output": "2"
        },
        {
          "input": "count_integer([1, 1.2, 4, 5.1])",
          "expected_output": "4"
        }
      ]
    },
    {
      "problem_id": "mbpp_571",
      "description": "Write a function to find maximum possible sum of disjoint pairs for the given array of integers and a number k.",
      "function_name": "max_sum_pair_diff_lessthan_K",
      "correct_solution": "def max_sum_pair_diff_lessthan_K(arr, N, K): \r\n\tarr.sort() \r\n\tdp = [0] * N \r\n\tdp[0] = 0\r\n\tfor i in range(1, N): \r\n\t\tdp[i] = dp[i-1] \r\n\t\tif (arr[i] - arr[i-1] < K): \r\n\t\t\tif (i >= 2): \r\n\t\t\t\tdp[i] = max(dp[i], dp[i-2] + arr[i] + arr[i-1]); \r\n\t\t\telse: \r\n\t\t\t\tdp[i] = max(dp[i], arr[i] + arr[i-1]); \r\n\treturn dp[N - 1]",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "max_sum_pair_diff_lessthan_K([3, 5, 10, 15, 17, 12, 9], 7, 4)",
          "expected_output": "62"
        },
        {
          "input": "max_sum_pair_diff_lessthan_K([5, 15, 10, 300], 4, 12)",
          "expected_output": "25"
        },
        {
          "input": "max_sum_pair_diff_lessthan_K([1, 2, 3, 4, 5, 6], 6, 6)",
          "expected_output": "21"
        }
      ],
      "broken_test_cases": [
        {
          "input": "max_sum_pair_diff_lessthan_K([3, 5, 10, 15, 17, 12, 9], 7, 4)",
          "expected_output": "63"
        },
        {
          "input": "max_sum_pair_diff_lessthan_K([5, 15, 10, 300], 4, 12)",
          "expected_output": "30"
        },
        {
          "input": "max_sum_pair_diff_lessthan_K([1, 2, 3, 4, 5, 6], 6, 6)",
          "expected_output": "22"
        }
      ]
    },
    {
      "problem_id": "mbpp_764",
      "description": "Write a python function to count numeric values in a given string.",
      "function_name": "number_ctr",
      "correct_solution": "def number_ctr(str):\r\n      number_ctr= 0\r\n      for i in range(len(str)):\r\n          if str[i] >= '0' and str[i] <= '9': number_ctr += 1     \r\n      return  number_ctr",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "number_ctr('program2bedone')",
          "expected_output": "1"
        },
        {
          "input": "number_ctr('3wonders')",
          "expected_output": "1"
        },
        {
          "input": "number_ctr('123')",
          "expected_output": "3"
        }
      ],
      "broken_test_cases": [
        {
          "input": "number_ctr('program2bedone')",
          "expected_output": "2"
        },
        {
          "input": "number_ctr('3wonders')",
          "expected_output": "2"
        },
        {
          "input": "number_ctr('123')",
          "expected_output": "2"
        }
      ]
    },
    {
      "problem_id": "mbpp_83",
      "description": "Write a python function to find the character made by adding all the characters of the given string.",
      "function_name": "get_Char",
      "correct_solution": "def get_Char(strr):  \r\n    summ = 0\r\n    for i in range(len(strr)): \r\n        summ += (ord(strr[i]) - ord('a') + 1)  \r\n    if (summ % 26 == 0): \r\n        return ord('z') \r\n    else: \r\n        summ = summ % 26\r\n        return chr(ord('a') + summ - 1)",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "get_Char('abc')",
          "expected_output": "f"
        },
        {
          "input": "get_Char('gfg')",
          "expected_output": "t"
        },
        {
          "input": "get_Char('ab')",
          "expected_output": "c"
        }
      ],
      "broken_test_cases": [
        {
          "input": "get_Char('abc')",
          "expected_output": "z"
        },
        {
          "input": "get_Char('gfg')",
          "expected_output": "'r'"
        },
        {
          "input": "get_Char('ab')",
          "expected_output": "x"
        }
      ]
    },
    {
      "problem_id": "mbpp_407",
      "description": "Write a function to create the next bigger number by rearranging the digits of a given number.",
      "function_name": "rearrange_bigger",
      "correct_solution": "def rearrange_bigger(n):\r\n    nums = list(str(n))\r\n    for i in range(len(nums)-2,-1,-1):\r\n        if nums[i] < nums[i+1]:\r\n            z = nums[i:]\r\n            y = min(filter(lambda x: x > z[0], z))\r\n            z.remove(y)\r\n            z.sort()\r\n            nums[i:] = [y] + z\r\n            return int(\"\".join(nums))\r\n    return False",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "rearrange_bigger(12)",
          "expected_output": "21"
        },
        {
          "input": "rearrange_bigger(10)",
          "expected_output": "False"
        },
        {
          "input": "rearrange_bigger(102)",
          "expected_output": "120"
        }
      ],
      "broken_test_cases": [
        {
          "input": "rearrange_bigger(12)",
          "expected_output": "0"
        },
        {
          "input": "rearrange_bigger(10)",
          "expected_output": "1"
        },
        {
          "input": "rearrange_bigger(102)",
          "expected_output": "201"
        }
      ]
    },
    {
      "problem_id": "mbpp_549",
      "description": "Write a python function to find the sum of fifth power of first n odd natural numbers.",
      "function_name": "odd_Num_Sum",
      "correct_solution": "def odd_Num_Sum(n) : \r\n    j = 0\r\n    sm = 0\r\n    for i in range(1,n+1) : \r\n        j = (2*i-1) \r\n        sm = sm + (j*j*j*j*j)     \r\n    return sm ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "odd_Num_Sum(1)",
          "expected_output": "1"
        },
        {
          "input": "odd_Num_Sum(2)",
          "expected_output": "244"
        },
        {
          "input": "odd_Num_Sum(3)",
          "expected_output": "3369"
        }
      ],
      "broken_test_cases": [
        {
          "input": "odd_Num_Sum(1)",
          "expected_output": "2"
        },
        {
          "input": "odd_Num_Sum(2)",
          "expected_output": "345"
        },
        {
          "input": "odd_Num_Sum(3)",
          "expected_output": "3367"
        }
      ]
    },
    {
      "problem_id": "mbpp_201",
      "description": "Write a python function to check whether the elements in a list are same or not.",
      "function_name": "chkList",
      "correct_solution": "def chkList(lst): \r\n    return len(set(lst)) == 1",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "chkList(['one', 'one', 'one'])",
          "expected_output": "True"
        },
        {
          "input": "chkList(['one', 'Two', 'Three'])",
          "expected_output": "False"
        },
        {
          "input": "chkList(['bigdata', 'python', 'Django'])",
          "expected_output": "False"
        }
      ],
      "broken_test_cases": [
        {
          "input": "chkList(['one', 'one', 'one'])",
          "expected_output": "False"
        },
        {
          "input": "chkList(['one', 'one', 'one'])",
          "expected_output": "False"
        },
        {
          "input": "chkList(['bigdata', 'python', 'Django'])",
          "expected_output": "True"
        }
      ]
    },
    {
      "problem_id": "mbpp_661",
      "description": "Write a function to find the maximum sum that can be formed which has no three consecutive elements present.",
      "function_name": "max_sum_of_three_consecutive",
      "correct_solution": "def max_sum_of_three_consecutive(arr, n): \r\n\tsum = [0 for k in range(n)] \r\n\tif n >= 1: \r\n\t\tsum[0] = arr[0] \r\n\tif n >= 2: \r\n\t\tsum[1] = arr[0] + arr[1] \r\n\tif n > 2: \r\n\t\tsum[2] = max(sum[1], max(arr[1] + arr[2], arr[0] + arr[2])) \r\n\tfor i in range(3, n): \r\n\t\tsum[i] = max(max(sum[i-1], sum[i-2] + arr[i]), arr[i] + arr[i-1] + sum[i-3]) \r\n\treturn sum[n-1]",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "max_sum_of_three_consecutive([100, 1000, 100, 1000, 1], 5)",
          "expected_output": "2101"
        },
        {
          "input": "max_sum_of_three_consecutive([3000, 2000, 1000, 3, 10], 5)",
          "expected_output": "5013"
        },
        {
          "input": "max_sum_of_three_consecutive([1, 2, 3, 4, 5, 6, 7, 8], 8)",
          "expected_output": "27"
        }
      ],
      "broken_test_cases": [
        {
          "input": "max_sum_of_three_consecutive([100, 1000, 100, 1000, 1], 5)",
          "expected_output": "2100"
        },
        {
          "input": "max_sum_of_three_consecutive([3000, 2000, 1000, 3, 10], 5)",
          "expected_output": "4013"
        },
        {
          "input": "max_sum_of_three_consecutive([1, 2, 3, 4, 5, 6, 7, 8], 8)",
          "expected_output": "26"
        }
      ]
    },
    {
      "problem_id": "mbpp_901",
      "description": "Write a function to find the smallest multiple of the first n numbers.",
      "function_name": "smallest_multiple",
      "correct_solution": "def smallest_multiple(n):\r\n    if (n<=2):\r\n      return n\r\n    i = n * 2\r\n    factors = [number  for number in range(n, 1, -1) if number * 2 > n]\r\n    while True:\r\n        for a in factors:\r\n            if i % a != 0:\r\n                i += n\r\n                break\r\n            if (a == factors[-1] and i % a == 0):\r\n                return i",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "smallest_multiple(13)",
          "expected_output": "360360"
        },
        {
          "input": "smallest_multiple(2)",
          "expected_output": "2"
        },
        {
          "input": "smallest_multiple(1)",
          "expected_output": "1"
        }
      ],
      "broken_test_cases": [
        {
          "input": "smallest_multiple(13)",
          "expected_output": "36036"
        },
        {
          "input": "smallest_multiple(2)",
          "expected_output": "1"
        },
        {
          "input": "smallest_multiple(1)",
          "expected_output": "2"
        }
      ]
    },
    {
      "problem_id": "mbpp_775",
      "description": "Write a python function to check whether every odd index contains odd numbers of a given list.",
      "function_name": "odd_position",
      "correct_solution": "def odd_position(nums):\r\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "odd_position([2, 1, 4, 3, 6, 7, 6, 3])",
          "expected_output": "True"
        },
        {
          "input": "odd_position([4, 1, 2])",
          "expected_output": "True"
        },
        {
          "input": "odd_position([1, 2, 3])",
          "expected_output": "False"
        }
      ],
      "broken_test_cases": [
        {
          "input": "odd_position([2, 1, 4, 3, 6, 7, 6, 3])",
          "expected_output": "False"
        },
        {
          "input": "odd_position([4, 1, 2])",
          "expected_output": "False"
        },
        {
          "input": "odd_position([1, 2, 3])",
          "expected_output": "True"
        }
      ]
    },
    {
      "problem_id": "mbpp_739",
      "description": "Write a python function to find the index of smallest triangular number with n digits.",
      "function_name": "find_Index",
      "correct_solution": "import math \r\ndef find_Index(n): \r\n    x = math.sqrt(2 * math.pow(10,(n - 1))); \r\n    return round(x); ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "find_Index(2)",
          "expected_output": "4"
        },
        {
          "input": "find_Index(3)",
          "expected_output": "14"
        },
        {
          "input": "find_Index(4)",
          "expected_output": "45"
        }
      ],
      "broken_test_cases": [
        {
          "input": "find_Index(2)",
          "expected_output": "3"
        },
        {
          "input": "find_Index(3)",
          "expected_output": "15"
        },
        {
          "input": "find_Index(4)",
          "expected_output": "44"
        }
      ]
    },
    {
      "problem_id": "mbpp_138",
      "description": "Write a python function to check whether the given number can be represented as sum of non-zero powers of 2 or not.",
      "function_name": "is_Sum_Of_Powers_Of_Two",
      "correct_solution": "def is_Sum_Of_Powers_Of_Two(n): \r\n    if (n % 2 == 1): \r\n        return False\r\n    else: \r\n        return True",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "is_Sum_Of_Powers_Of_Two(10)",
          "expected_output": "True"
        },
        {
          "input": "is_Sum_Of_Powers_Of_Two(7)",
          "expected_output": "False"
        },
        {
          "input": "is_Sum_Of_Powers_Of_Two(14)",
          "expected_output": "True"
        }
      ],
      "broken_test_cases": [
        {
          "input": "is_Sum_Of_Powers_Of_Two(10)",
          "expected_output": "False"
        },
        {
          "input": "is_Sum_Of_Powers_Of_Two(7)",
          "expected_output": "True"
        },
        {
          "input": "is_Sum_Of_Powers_Of_Two(14)",
          "expected_output": "False"
        }
      ]
    },
    {
      "problem_id": "mbpp_54",
      "description": "Write a function to sort the given array by using counting sort.",
      "function_name": "counting_sort",
      "correct_solution": "def counting_sort(my_list):\r\n    max_value = 0\r\n    for i in range(len(my_list)):\r\n        if my_list[i] > max_value:\r\n            max_value = my_list[i]\r\n    buckets = [0] * (max_value + 1)\r\n    for i in my_list:\r\n        buckets[i] += 1\r\n    i = 0\r\n    for j in range(max_value + 1):\r\n         for a in range(buckets[j]):\r\n             my_list[i] = j\r\n             i += 1\r\n    return my_list",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "counting_sort([1, 23, 4, 5, 6, 7, 8])",
          "expected_output": "[1, 4, 5, 6, 7, 8, 23]"
        },
        {
          "input": "counting_sort([12, 9, 28, 33, 69, 45])",
          "expected_output": "[9, 12, 28, 33, 45, 69]"
        },
        {
          "input": "counting_sort([8, 4, 14, 3, 2, 1])",
          "expected_output": "[1, 2, 3, 4, 8, 14]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "counting_sort([1, 23, 4, 5, 6, 7, 8])",
          "expected_output": "[1, 6, 5, 4, 7, 8, 23]"
        },
        {
          "input": "counting_sort([12, 9, 28, 33, 69, 45])",
          "expected_output": "[9, 12, 28, 33, 45, 68]"
        },
        {
          "input": "counting_sort([8, 4, 14, 3, 2, 1])",
          "expected_output": "[1, 2, 3, 4, 14, 8]"
        }
      ]
    },
    {
      "problem_id": "mbpp_633",
      "description": "Write a python function to find the sum of xor of all pairs of numbers in the given array.",
      "function_name": "pair_OR_Sum",
      "correct_solution": "def pair_OR_Sum(arr,n) : \r\n    ans = 0 \r\n    for i in range(0,n) :    \r\n        for j in range(i + 1,n) :   \r\n            ans = ans + (arr[i] ^ arr[j])          \r\n    return ans ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "pair_OR_Sum([5, 9, 7, 6], 4)",
          "expected_output": "47"
        },
        {
          "input": "pair_OR_Sum([7, 3, 5], 3)",
          "expected_output": "12"
        },
        {
          "input": "pair_OR_Sum([7, 3], 2)",
          "expected_output": "4"
        }
      ],
      "broken_test_cases": [
        {
          "input": "pair_OR_Sum([5, 9, 7, 6], 4)",
          "expected_output": "46"
        },
        {
          "input": "pair_OR_Sum([7, 3, 5], 3)",
          "expected_output": "13"
        },
        {
          "input": "pair_OR_Sum([7, 3], 2)",
          "expected_output": "5"
        }
      ]
    },
    {
      "problem_id": "mbpp_239",
      "description": "Write a function to find the number of possible sequences of length n such that each of the next element is greater than or equal to twice of the previous element but less than or equal to m.",
      "function_name": "get_total_number_of_sequences",
      "correct_solution": "def get_total_number_of_sequences(m,n): \r\n\tT=[[0 for i in range(n+1)] for i in range(m+1)] \r\n\tfor i in range(m+1): \r\n\t\tfor j in range(n+1): \r\n\t\t\tif i==0 or j==0: \r\n\t\t\t\tT[i][j]=0\r\n\t\t\telif i<j: \r\n\t\t\t\tT[i][j]=0\r\n\t\t\telif j==1: \r\n\t\t\t\tT[i][j]=i \r\n\t\t\telse: \r\n\t\t\t\tT[i][j]=T[i-1][j]+T[i//2][j-1] \r\n\treturn T[m][n]",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "get_total_number_of_sequences(10, 4)",
          "expected_output": "4"
        },
        {
          "input": "get_total_number_of_sequences(5, 2)",
          "expected_output": "6"
        },
        {
          "input": "get_total_number_of_sequences(16, 3)",
          "expected_output": "84"
        }
      ],
      "broken_test_cases": [
        {
          "input": "get_total_number_of_sequences(10, 4)",
          "expected_output": "5"
        },
        {
          "input": "get_total_number_of_sequences(5, 2)",
          "expected_output": "7"
        },
        {
          "input": "get_total_number_of_sequences(16, 3)",
          "expected_output": "83"
        }
      ]
    },
    {
      "problem_id": "mbpp_429",
      "description": "Write a function to extract the elementwise and tuples from the given two tuples.",
      "function_name": "and_tuples",
      "correct_solution": "def and_tuples(test_tup1, test_tup2):\r\n  res = tuple(ele1 & ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "and_tuples((10, 4, 6, 9), (5, 2, 3, 3))",
          "expected_output": "(0, 0, 2, 1)"
        },
        {
          "input": "and_tuples((1, 2, 3, 4), (5, 6, 7, 8))",
          "expected_output": "(1, 2, 3, 0)"
        },
        {
          "input": "and_tuples((8, 9, 11, 12), (7, 13, 14, 17))",
          "expected_output": "(0, 9, 10, 0)"
        }
      ],
      "broken_test_cases": [
        {
          "input": "and_tuples((10, 4, 6, 9), (5, 2, 3, 3))",
          "expected_output": "(0, 0, 0, 0)"
        },
        {
          "input": "and_tuples((1, 2, 3, 4), (5, 6, 7, 8))",
          "expected_output": "(0, 2, 3, 4)"
        },
        {
          "input": "and_tuples((8, 9, 11, 12), (7, 13, 14, 17))",
          "expected_output": "(8, 9, 11, 12)"
        }
      ]
    },
    {
      "problem_id": "mbpp_375",
      "description": "Write a function to round the given number to the nearest multiple of a specific number.",
      "function_name": "round_num",
      "correct_solution": "def round_num(n,m):\r\n    a = (n //m) * m\r\n    b = a + m\r\n    return (b if n - a > b - n else a)",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "round_num(4722, 10)",
          "expected_output": "4720"
        },
        {
          "input": "round_num(1111, 5)",
          "expected_output": "1110"
        },
        {
          "input": "round_num(219, 2)",
          "expected_output": "218"
        }
      ],
      "broken_test_cases": [
        {
          "input": "round_num(4722, 10)",
          "expected_output": "4730"
        },
        {
          "input": "round_num(1111, 5)",
          "expected_output": "1115"
        },
        {
          "input": "round_num(219, 2)",
          "expected_output": "220"
        }
      ]
    },
    {
      "problem_id": "mbpp_360",
      "description": "Write a function to find the n\u2019th carol number.",
      "function_name": "get_carol",
      "correct_solution": "def get_carol(n): \r\n\tresult = (2**n) - 1\r\n\treturn result * result - 2",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "get_carol(2)",
          "expected_output": "7"
        },
        {
          "input": "get_carol(4)",
          "expected_output": "223"
        },
        {
          "input": "get_carol(5)",
          "expected_output": "959"
        }
      ],
      "broken_test_cases": [
        {
          "input": "get_carol(2)",
          "expected_output": "8"
        },
        {
          "input": "get_carol(4)",
          "expected_output": "224"
        },
        {
          "input": "get_carol(5)",
          "expected_output": "960"
        }
      ]
    },
    {
      "problem_id": "mbpp_431",
      "description": "Write a function that takes two lists and returns true if they have at least one common element.",
      "function_name": "common_element",
      "correct_solution": "def common_element(list1, list2):\r\n     result = False\r\n     for x in list1:\r\n         for y in list2:\r\n             if x == y:\r\n                 result = True\r\n                 return result",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9])",
          "expected_output": "True"
        },
        {
          "input": "common_element([1, 2, 3, 4, 5], [6, 7, 8, 9])",
          "expected_output": "None"
        },
        {
          "input": "common_element(['a', 'b', 'c'], ['d', 'b', 'e'])",
          "expected_output": "True"
        }
      ],
      "broken_test_cases": [
        {
          "input": "common_element([1, 2, 3, 4, 5], [5, 6, 7, 8, 9])",
          "expected_output": "False"
        },
        {
          "input": "common_element([1, 2, 3, 4, 5], [6, 7, 8, 9])",
          "expected_output": "True"
        },
        {
          "input": "common_element(['a', 'b', 'c'], ['d', 'b', 'e'])",
          "expected_output": "False"
        }
      ]
    },
    {
      "problem_id": "mbpp_788",
      "description": "Write a function to create a new tuple from the given string and list.",
      "function_name": "new_tuple",
      "correct_solution": "def new_tuple(test_list, test_str):\r\n  res = tuple(test_list + [test_str])\r\n  return (res) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "new_tuple(['WEB', 'is'], 'best')",
          "expected_output": "('WEB', 'is', 'best')"
        },
        {
          "input": "new_tuple(['We', 'are'], 'Developers')",
          "expected_output": "('We', 'are', 'Developers')"
        },
        {
          "input": "new_tuple(['Part', 'is'], 'Wrong')",
          "expected_output": "('Part', 'is', 'Wrong')"
        }
      ],
      "broken_test_cases": [
        {
          "input": "new_tuple(['WEB', 'is'], 'best')",
          "expected_output": "('WEB', 'is')"
        },
        {
          "input": "new_tuple(['We', 'are'], 'Developers')",
          "expected_output": "('We', 'are')"
        },
        {
          "input": "new_tuple(['Part', 'is'], 'Wrong')",
          "expected_output": "('Part', 'Wrong', 'is')"
        }
      ]
    },
    {
      "problem_id": "mbpp_681",
      "description": "Write a python function to find the smallest prime divisor of a number.",
      "function_name": "smallest_Divisor",
      "correct_solution": "def smallest_Divisor(n): \r\n    if (n % 2 == 0): \r\n        return 2; \r\n    i = 3;  \r\n    while (i*i <= n): \r\n        if (n % i == 0): \r\n            return i; \r\n        i += 2; \r\n    return n; ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "smallest_Divisor(10)",
          "expected_output": "2"
        },
        {
          "input": "smallest_Divisor(25)",
          "expected_output": "5"
        },
        {
          "input": "smallest_Divisor(31)",
          "expected_output": "31"
        }
      ],
      "broken_test_cases": [
        {
          "input": "smallest_Divisor(10)",
          "expected_output": "3"
        },
        {
          "input": "smallest_Divisor(25)",
          "expected_output": "10"
        },
        {
          "input": "smallest_Divisor(31)",
          "expected_output": "3"
        }
      ]
    },
    {
      "problem_id": "mbpp_970",
      "description": "Write a function to find minimum of two numbers.",
      "function_name": "min_of_two",
      "correct_solution": "def min_of_two( x, y ):\r\n    if x < y:\r\n        return x\r\n    return y",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "min_of_two(10, 20)",
          "expected_output": "10"
        },
        {
          "input": "min_of_two(19, 15)",
          "expected_output": "15"
        },
        {
          "input": "min_of_two(-10, -20)",
          "expected_output": "-20"
        }
      ],
      "broken_test_cases": [
        {
          "input": "min_of_two(10, 20)",
          "expected_output": "20"
        },
        {
          "input": "min_of_two(19, 15)",
          "expected_output": "19"
        },
        {
          "input": "min_of_two(-10, -20)",
          "expected_output": "-10"
        }
      ]
    },
    {
      "problem_id": "mbpp_342",
      "description": "Write a function to find the smallest range that includes at-least one element from each of the given arrays.",
      "function_name": "find_minimum_range",
      "correct_solution": "from heapq import heappop, heappush\r\nclass Node:\r\n    def __init__(self, value, list_num, index):\r\n        self.value = value\r\n        self.list_num = list_num\r\n        self.index = index\r\n    def __lt__(self, other):\r\n        return self.value < other.value\r\ndef find_minimum_range(list):\r\n    high = float('-inf')\r\n    p = (0, float('inf'))\r\n    pq = []\r\n    for i in range(len(list)):\r\n        heappush(pq, Node(list[i][0], i, 0))\r\n        high = max(high, list[i][0])\r\n    while True:\r\n        top = heappop(pq)\r\n        low = top.value\r\n        i = top.list_num\r\n        j = top.index\r\n        if high - low < p[1] - p[0]:\r\n            p = (low, high)\r\n        if j == len(list[i]) - 1:\r\n            return p\r\n        heappush(pq, Node(list[i][j + 1], i, j + 1))\r\n        high = max(high, list[i][j + 1])",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]])",
          "expected_output": "(4, 6)"
        },
        {
          "input": "find_minimum_range([[2, 3, 4, 8, 10, 15], [1, 5, 12], [7, 8, 15, 16], [3, 6]])",
          "expected_output": "(4, 7)"
        },
        {
          "input": "find_minimum_range([[4, 7, 9, 11, 16], [2, 6, 13], [5, 9, 16, 17], [3, 7]])",
          "expected_output": "(5, 7)"
        }
      ],
      "broken_test_cases": [
        {
          "input": "find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]])",
          "expected_output": "(5, 7)"
        },
        {
          "input": "find_minimum_range([[2, 3, 4, 8, 10, 15], [1, 5, 12], [7, 8, 15, 16], [3, 6]])",
          "expected_output": "(3, 8)"
        },
        {
          "input": "find_minimum_range([[4, 7, 9, 11, 16], [2, 6, 13], [5, 9, 16, 17], [3, 7]])",
          "expected_output": "(4, 7)"
        }
      ]
    },
    {
      "problem_id": "mbpp_459",
      "description": "Write a function to remove uppercase substrings from a given string by using regex.",
      "function_name": "remove_uppercase",
      "correct_solution": "import re\r\ndef remove_uppercase(str1):\r\n  remove_upper = lambda text: re.sub('[A-Z]', '', text)\r\n  result =  remove_upper(str1)\r\n  return (result)",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "remove_uppercase('cAstyoUrFavoRitETVshoWs')",
          "expected_output": "cstyoravoitshos"
        },
        {
          "input": "remove_uppercase('wAtchTheinTernEtrAdIo')",
          "expected_output": "wtchheinerntrdo"
        },
        {
          "input": "remove_uppercase('VoicESeaRchAndreComMendaTionS')",
          "expected_output": "oiceachndreomendaion"
        }
      ],
      "broken_test_cases": [
        {
          "input": "remove_uppercase('cAstyoUrFavoRitETVshoWs')",
          "expected_output": "cstyoURFavoRitETVshoWs"
        },
        {
          "input": "remove_uppercase('wAtchTheinTernEtrAdIo')",
          "expected_output": "wtchheinerntrAdIo"
        },
        {
          "input": "remove_uppercase('VoicESeaRchAndreComMendaTionS')",
          "expected_output": "oiceachndreomendatios"
        }
      ]
    },
    {
      "problem_id": "mbpp_24",
      "description": "Write a function to convert the given binary number to its decimal equivalent.",
      "function_name": "binary_to_decimal",
      "correct_solution": "def binary_to_decimal(binary): \r\n    binary1 = binary \r\n    decimal, i, n = 0, 0, 0\r\n    while(binary != 0): \r\n        dec = binary % 10\r\n        decimal = decimal + dec * pow(2, i) \r\n        binary = binary//10\r\n        i += 1\r\n    return (decimal)",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "binary_to_decimal(100)",
          "expected_output": "4"
        },
        {
          "input": "binary_to_decimal(1011)",
          "expected_output": "11"
        },
        {
          "input": "binary_to_decimal(1101101)",
          "expected_output": "109"
        }
      ],
      "broken_test_cases": [
        {
          "input": "binary_to_decimal(100)",
          "expected_output": "5"
        },
        {
          "input": "binary_to_decimal(1011)",
          "expected_output": "10"
        },
        {
          "input": "binary_to_decimal(1101101)",
          "expected_output": "110"
        }
      ]
    },
    {
      "problem_id": "mbpp_650",
      "description": "Write a python function to check whether the given two arrays are equal or not.",
      "function_name": "are_Equal",
      "correct_solution": "def are_Equal(arr1,arr2,n,m):\r\n    if (n != m):\r\n        return False\r\n    arr1.sort()\r\n    arr2.sort()\r\n    for i in range(0,n - 1):\r\n        if (arr1[i] != arr2[i]):\r\n            return False\r\n    return True",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "are_Equal([1, 2, 3], [3, 2, 1], 3, 3)",
          "expected_output": "True"
        },
        {
          "input": "are_Equal([1, 1, 1], [2, 2, 2], 3, 3)",
          "expected_output": "False"
        },
        {
          "input": "are_Equal([8, 9], [4, 5, 6], 2, 3)",
          "expected_output": "False"
        }
      ],
      "broken_test_cases": [
        {
          "input": "are_Equal([1, 2, 3], [3, 2, 1], 3, 3)",
          "expected_output": "False"
        },
        {
          "input": "are_Equal([1, 1, 1], [2, 2, 2], 3, 3)",
          "expected_output": "True"
        },
        {
          "input": "are_Equal([8, 9], [4, 5, 6], 2, 3)",
          "expected_output": "True"
        }
      ]
    },
    {
      "problem_id": "mbpp_563",
      "description": "Write a function to extract values between quotation marks of a string.",
      "function_name": "extract_values",
      "correct_solution": "import re\r\ndef extract_values(text):\r\n return (re.findall(r'\"(.*?)\"', text))",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "extract_values('\"Python\", \"PHP\", \"Java\"')",
          "expected_output": "['Python', 'PHP', 'Java']"
        },
        {
          "input": "extract_values('\"python\",\"program\",\"language\"')",
          "expected_output": "['python', 'program', 'language']"
        },
        {
          "input": "extract_values('\"red\",\"blue\",\"green\",\"yellow\"')",
          "expected_output": "['red', 'blue', 'green', 'yellow']"
        }
      ],
      "broken_test_cases": [
        {
          "input": "extract_values('\"Python\", \"PHP\", \"Java\"')",
          "expected_output": "['Python', 'PHP', 'Java', 'extra']"
        },
        {
          "input": "extract_values('\"python\",\"program\",\"language\"')",
          "expected_output": "['Python', 'Program', 'Language']"
        },
        {
          "input": "extract_values('\"red\",\"blue\",\"green\",\"yellow\"')",
          "expected_output": "['red', 'blue', 'green']"
        }
      ]
    },
    {
      "problem_id": "mbpp_694",
      "description": "Write a function to extract unique values from the given dictionary values.",
      "function_name": "extract_unique",
      "correct_solution": "def extract_unique(test_dict):\r\n  res = list(sorted({ele for val in test_dict.values() for ele in val}))\r\n  return res",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "extract_unique({'msm': [5, 6, 7, 8], 'is': [10, 11, 7, 5], 'best': [6, 12, 10, 8], 'for': [1, 2, 5]})",
          "expected_output": "[1, 2, 5, 6, 7, 8, 10, 11, 12]"
        },
        {
          "input": "extract_unique({'Built': [7, 1, 9, 4], 'for': [11, 21, 36, 14, 9], 'ISP': [4, 1, 21, 39, 47], 'TV': [1, 32, 38]})",
          "expected_output": "[1, 4, 7, 9, 11, 14, 21, 32, 36, 38, 39, 47]"
        },
        {
          "input": "extract_unique({'F': [11, 13, 14, 17], 'A': [12, 11, 15, 18], 'N': [19, 21, 15, 36], 'G': [37, 36, 35]})",
          "expected_output": "[11, 12, 13, 14, 15, 17, 18, 19, 21, 35, 36, 37]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "extract_unique({'msm': [5, 6, 7, 8], 'is': [10, 11, 7, 5], 'best': [6, 12, 10, 8], 'for': [1, 2, 5]})",
          "expected_output": "[1, 2, 5, 6, 7, 8, 10, 11, 12, 13]"
        },
        {
          "input": "extract_unique({'Built': [7, 1, 9, 4], 'for': [11, 21, 36, 14, 9], 'ISP': [4, 1, 21, 39, 47], 'TV': [1, 32, 38]})",
          "expected_output": "[1, 4, 7, 9, 11, 21, 32, 36, 38, 39, 47]"
        },
        {
          "input": "extract_unique({'F': [11, 13, 14, 17], 'A': [12, 11, 15, 18], 'N': [19, 21, 15, 36], 'G': [37, 36, 35]})",
          "expected_output": "[11, 12, 13, 14, 15, 17, 18, 19, 21, 35, 36, 38]"
        }
      ]
    },
    {
      "problem_id": "mbpp_282",
      "description": "Write a function to substaract two lists using map and lambda function.",
      "function_name": "sub_list",
      "correct_solution": "def sub_list(nums1,nums2):\r\n  result = map(lambda x, y: x - y, nums1, nums2)\r\n  return list(result)",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "sub_list([1, 2, 3], [4, 5, 6])",
          "expected_output": "[-3, -3, -3]"
        },
        {
          "input": "sub_list([1, 2], [3, 4])",
          "expected_output": "[-2, -2]"
        },
        {
          "input": "sub_list([90, 120], [50, 70])",
          "expected_output": "[40, 50]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "sub_list([1, 2, 3], [4, 5, 6])",
          "expected_output": "[-2, -3, -4]"
        },
        {
          "input": "sub_list([1, 2], [3, 4])",
          "expected_output": "[-3, -3]"
        },
        {
          "input": "sub_list([90, 120], [50, 70])",
          "expected_output": "[40, 51]"
        }
      ]
    },
    {
      "problem_id": "mbpp_113",
      "description": "Write a function to check if a string represents an integer or not.",
      "function_name": "check_integer",
      "correct_solution": "def check_integer(text):\r\n text = text.strip()\r\n if len(text) < 1:\r\n    return None\r\n else:\r\n     if all(text[i] in \"0123456789\" for i in range(len(text))):\r\n          return True\r\n     elif (text[0] in \"+-\") and \\\r\n         all(text[i] in \"0123456789\" for i in range(1,len(text))):\r\n         return True\r\n     else:\r\n        return False",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "check_integer('python')",
          "expected_output": "False"
        },
        {
          "input": "check_integer('1')",
          "expected_output": "True"
        },
        {
          "input": "check_integer('12345')",
          "expected_output": "True"
        }
      ],
      "broken_test_cases": [
        {
          "input": "check_integer('python')",
          "expected_output": "True"
        },
        {
          "input": "check_integer('1.0')",
          "expected_output": "True"
        },
        {
          "input": "check_integer('12345')",
          "expected_output": "False"
        }
      ]
    },
    {
      "problem_id": "mbpp_150",
      "description": "Write a python function to find whether the given number is present in the infinite sequence or not.",
      "function_name": "does_Contain_B",
      "correct_solution": "def does_Contain_B(a,b,c): \r\n    if (a == b): \r\n        return True\r\n    if ((b - a) * c > 0 and (b - a) % c == 0): \r\n        return True\r\n    return False",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "does_Contain_B(1, 7, 3)",
          "expected_output": "True"
        },
        {
          "input": "does_Contain_B(1, -3, 5)",
          "expected_output": "False"
        },
        {
          "input": "does_Contain_B(3, 2, 5)",
          "expected_output": "False"
        }
      ],
      "broken_test_cases": [
        {
          "input": "does_Contain_B(1, 7, 3)",
          "expected_output": "False"
        },
        {
          "input": "does_Contain_B(1, -3, 5)",
          "expected_output": "True"
        },
        {
          "input": "does_Contain_B(3, 2, 5)",
          "expected_output": "True"
        }
      ]
    },
    {
      "problem_id": "mbpp_895",
      "description": "Write a function to find the maximum sum of subsequences of given array with no adjacent elements.",
      "function_name": "max_sum_subseq",
      "correct_solution": "def max_sum_subseq(A):\r\n    n = len(A)\r\n    if n == 1:\r\n        return A[0]\r\n    look_up = [None] * n\r\n    look_up[0] = A[0]\r\n    look_up[1] = max(A[0], A[1])\r\n    for i in range(2, n):\r\n        look_up[i] = max(look_up[i - 1], look_up[i - 2] + A[i])\r\n        look_up[i] = max(look_up[i], A[i])\r\n    return look_up[n - 1]",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "max_sum_subseq([1, 2, 9, 4, 5, 0, 4, 11, 6])",
          "expected_output": "26"
        },
        {
          "input": "max_sum_subseq([1, 2, 9, 5, 6, 0, 5, 12, 7])",
          "expected_output": "28"
        },
        {
          "input": "max_sum_subseq([1, 3, 10, 5, 6, 0, 6, 14, 21])",
          "expected_output": "44"
        }
      ],
      "broken_test_cases": [
        {
          "input": "max_sum_subseq([1, 2, 9, 4, 5, 0, 4, 11, 6])",
          "expected_output": "25"
        },
        {
          "input": "max_sum_subseq([1, 2, 9, 5, 6, 0, 5, 12, 7])",
          "expected_output": "27"
        },
        {
          "input": "max_sum_subseq([1, 3, 10, 5, 6, 0, 6, 14, 21])",
          "expected_output": "42"
        }
      ]
    },
    {
      "problem_id": "mbpp_242",
      "description": "Write a function to count total characters in a string.",
      "function_name": "count_charac",
      "correct_solution": "def count_charac(str1):\r\n total = 0\r\n for i in str1:\r\n    total = total + 1\r\n return total",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "count_charac('python programming')",
          "expected_output": "18"
        },
        {
          "input": "count_charac('language')",
          "expected_output": "8"
        },
        {
          "input": "count_charac('words')",
          "expected_output": "5"
        }
      ],
      "broken_test_cases": [
        {
          "input": "count_charac('python programming')",
          "expected_output": "17"
        },
        {
          "input": "count_charac('language')",
          "expected_output": "7"
        },
        {
          "input": "count_charac('words')",
          "expected_output": "6"
        }
      ]
    },
    {
      "problem_id": "mbpp_34",
      "description": "Write a python function to find the missing number in a sorted array.",
      "function_name": "find_missing",
      "correct_solution": "def find_missing(ar,N): \r\n    l = 0\r\n    r = N - 1\r\n    while (l <= r):  \r\n        mid = (l + r) / 2\r\n        mid= int (mid) \r\n        if (ar[mid] != mid + 1 and ar[mid - 1] == mid): \r\n            return (mid + 1)  \r\n        elif (ar[mid] != mid + 1): \r\n            r = mid - 1 \r\n        else: \r\n            l = mid + 1\r\n    return (-1) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "find_missing([1, 2, 3, 5], 4)",
          "expected_output": "4"
        },
        {
          "input": "find_missing([1, 3, 4, 5], 4)",
          "expected_output": "2"
        },
        {
          "input": "find_missing([1, 2, 3, 5, 6, 7], 5)",
          "expected_output": "4"
        }
      ],
      "broken_test_cases": [
        {
          "input": "find_missing([1, 2, 3, 5], 4)",
          "expected_output": "2"
        },
        {
          "input": "find_missing([1, 3, 4, 5], 4)",
          "expected_output": "4"
        },
        {
          "input": "find_missing([1, 2, 3, 5, 6, 7], 5)",
          "expected_output": "5"
        }
      ]
    },
    {
      "problem_id": "mbpp_296",
      "description": "Write a python function to count inversions in an array.",
      "function_name": "get_Inv_Count",
      "correct_solution": "def get_Inv_Count(arr,n): \r\n    inv_count = 0\r\n    for i in range(n): \r\n        for j in range(i + 1,n): \r\n            if (arr[i] > arr[j]): \r\n                inv_count += 1\r\n    return inv_count ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "get_Inv_Count([1, 20, 6, 4, 5], 5)",
          "expected_output": "5"
        },
        {
          "input": "get_Inv_Count([1, 2, 1], 3)",
          "expected_output": "1"
        },
        {
          "input": "get_Inv_Count([1, 2, 5, 6, 1], 5)",
          "expected_output": "3"
        }
      ],
      "broken_test_cases": [
        {
          "input": "get_Inv_Count([1, 20, 6, 4, 5], 5)",
          "expected_output": "4"
        },
        {
          "input": "get_Inv_Count([1, 2, 1], 3)",
          "expected_output": "2"
        },
        {
          "input": "get_Inv_Count([1, 2, 5, 6, 1], 5)",
          "expected_output": "4"
        }
      ]
    },
    {
      "problem_id": "mbpp_678",
      "description": "Write a python function to remove spaces from a given string.",
      "function_name": "remove_spaces",
      "correct_solution": "def remove_spaces(str1):\r\n  str1 = str1.replace(' ','')\r\n  return str1",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "remove_spaces('a b c')",
          "expected_output": "abc"
        },
        {
          "input": "remove_spaces('1 2 3')",
          "expected_output": "123"
        },
        {
          "input": "remove_spaces(' b c')",
          "expected_output": "bc"
        }
      ],
      "broken_test_cases": [
        {
          "input": "remove_spaces('a b c')",
          "expected_output": "a b c"
        },
        {
          "input": "remove_spaces('1 2 3')",
          "expected_output": "'1 2 3'"
        },
        {
          "input": "remove_spaces(' b c ')",
          "expected_output": "' bc '"
        }
      ]
    },
    {
      "problem_id": "mbpp_610",
      "description": "Write a python function to remove the k'th element from a given list.",
      "function_name": "remove_kth_element",
      "correct_solution": "def remove_kth_element(list1, L):\r\n    return  list1[:L-1] + list1[L:]",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "remove_kth_element([1, 1, 2, 3, 4, 4, 5, 1], 3)",
          "expected_output": "[1, 1, 3, 4, 4, 5, 1]"
        },
        {
          "input": "remove_kth_element([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4], 4)",
          "expected_output": "[0, 0, 1, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]"
        },
        {
          "input": "remove_kth_element([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10], 5)",
          "expected_output": "[10, 10, 15, 19, 18, 17, 26, 26, 17, 18, 10]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "remove_kth_element([1, 1, 2, 3, 4, 4, 5, 1], 3)",
          "expected_output": "[1, 1, 4, 4, 5, 1]"
        },
        {
          "input": "remove_kth_element([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4], 4)",
          "expected_output": "[0, 0, 1, 2, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4]"
        },
        {
          "input": "remove_kth_element([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10], 5)",
          "expected_output": "[10, 10, 15, 19, 18, 18, 26, 26, 17, 18, 10]"
        }
      ]
    },
    {
      "problem_id": "mbpp_773",
      "description": "Write a function to find the occurrence and position of the substrings within a string.",
      "function_name": "occurance_substring",
      "correct_solution": "import re\r\ndef occurance_substring(text,pattern):\r\n for match in re.finditer(pattern, text):\r\n    s = match.start()\r\n    e = match.end()\r\n    return (text[s:e], s, e)",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "occurance_substring('python programming, python language', 'python')",
          "expected_output": "('python', 0, 6)"
        },
        {
          "input": "occurance_substring('python programming,programming language', 'programming')",
          "expected_output": "('programming', 7, 18)"
        },
        {
          "input": "occurance_substring('python programming,programming language', 'language')",
          "expected_output": "('language', 31, 39)"
        }
      ],
      "broken_test_cases": [
        {
          "input": "occurance_substring('python programming, python language', 'python')",
          "expected_output": "('python', 0, 7)"
        },
        {
          "input": "occurance_substring('python programming,programming language', 'programming')",
          "expected_output": "('programming', 7, 19)"
        },
        {
          "input": "occurance_substring('python programming,programming language', 'language')",
          "expected_output": "('wrong_substring', 31, 39)"
        }
      ]
    },
    {
      "problem_id": "mbpp_300",
      "description": "Write a function to find the count of all binary sequences of length 2n such that sum of first n bits is same as sum of last n bits.",
      "function_name": "count_binary_seq",
      "correct_solution": "def count_binary_seq(n): \r\n\tnCr = 1\r\n\tres = 1\r\n\tfor r in range(1, n + 1): \r\n\t\tnCr = (nCr * (n + 1 - r)) / r \r\n\t\tres += nCr * nCr \r\n\treturn res ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "count_binary_seq(1)",
          "expected_output": "2.0"
        },
        {
          "input": "count_binary_seq(2)",
          "expected_output": "6.0"
        },
        {
          "input": "count_binary_seq(3)",
          "expected_output": "20.0"
        }
      ],
      "broken_test_cases": [
        {
          "input": "count_binary_seq(1)",
          "expected_output": "3.0"
        },
        {
          "input": "count_binary_seq(2)",
          "expected_output": "5.0"
        },
        {
          "input": "count_binary_seq(3)",
          "expected_output": "25.0"
        }
      ]
    },
    {
      "problem_id": "mbpp_101",
      "description": "Write a function to find the kth element in the given array.",
      "function_name": "kth_element",
      "correct_solution": "def kth_element(arr, n, k):\r\n  for i in range(n):\r\n    for j in range(0, n-i-1):\r\n      if arr[j] > arr[j+1]:\r\n        arr[j], arr[j+1] == arr[j+1], arr[j]\r\n  return arr[k-1]",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "kth_element([12, 3, 5, 7, 19], 5, 2)",
          "expected_output": "3"
        },
        {
          "input": "kth_element([17, 24, 8, 23], 4, 3)",
          "expected_output": "8"
        },
        {
          "input": "kth_element([16, 21, 25, 36, 4], 5, 4)",
          "expected_output": "36"
        }
      ],
      "broken_test_cases": [
        {
          "input": "kth_element([12, 3, 5, 7, 19], 5, 2)",
          "expected_output": "5"
        },
        {
          "input": "kth_element([17, 24, 8, 23], 4, 3)",
          "expected_output": "17"
        },
        {
          "input": "kth_element([16, 21, 25, 36, 4], 5, 4)",
          "expected_output": "16"
        }
      ]
    },
    {
      "problem_id": "mbpp_28",
      "description": "Write a python function to find binomial co-efficient.",
      "function_name": "binomial_Coeff",
      "correct_solution": "def binomial_Coeff(n,k): \r\n    if k > n : \r\n       return 0\r\n    if k==0 or k ==n : \r\n        return 1 \r\n    return binomial_Coeff(n-1,k-1) + binomial_Coeff(n-1,k) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "binomial_Coeff(5, 2)",
          "expected_output": "10"
        },
        {
          "input": "binomial_Coeff(4, 3)",
          "expected_output": "4"
        },
        {
          "input": "binomial_Coeff(3, 2)",
          "expected_output": "3"
        }
      ],
      "broken_test_cases": [
        {
          "input": "binomial_Coeff(5, 2)",
          "expected_output": "12"
        },
        {
          "input": "binomial_Coeff(4, 3)",
          "expected_output": "5"
        },
        {
          "input": "binomial_Coeff(3, 2)",
          "expected_output": "4"
        }
      ]
    },
    {
      "problem_id": "mbpp_9",
      "description": "Write a python function to find the minimum number of rotations required to get the same string.",
      "function_name": "find_Rotations",
      "correct_solution": "def find_Rotations(str): \r\n    tmp = str + str\r\n    n = len(str) \r\n    for i in range(1,n + 1): \r\n        substring = tmp[i: i+n] \r\n        if (str == substring): \r\n            return i \r\n    return n ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "find_Rotations('aaaa')",
          "expected_output": "1"
        },
        {
          "input": "find_Rotations('ab')",
          "expected_output": "2"
        },
        {
          "input": "find_Rotations('abc')",
          "expected_output": "3"
        }
      ],
      "broken_test_cases": [
        {
          "input": "find_Rotations('aaaa')",
          "expected_output": "2"
        },
        {
          "input": "find_Rotations('ab')",
          "expected_output": "1"
        },
        {
          "input": "find_Rotations('abc')",
          "expected_output": "2"
        }
      ]
    },
    {
      "problem_id": "mbpp_486",
      "description": "Write a function to compute binomial probability for the given number.",
      "function_name": "binomial_probability",
      "correct_solution": "def nCr(n, r): \r\n\tif (r > n / 2): \r\n\t\tr = n - r \r\n\tanswer = 1 \r\n\tfor i in range(1, r + 1): \r\n\t\tanswer *= (n - r + i) \r\n\t\tanswer /= i \r\n\treturn answer \r\ndef binomial_probability(n, k, p): \r\n\treturn (nCr(n, k) * pow(p, k) *\tpow(1 - p, n - k)) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "binomial_probability(10, 5, 1.0 / 3)",
          "expected_output": "0.13656454808718185"
        },
        {
          "input": "binomial_probability(11, 6, 2.0 / 4)",
          "expected_output": "0.2255859375"
        }
      ],
      "broken_test_cases": [
        {
          "input": "binomial_probability(10, 5, 1.0 / 3)",
          "expected_output": "0.00001"
        },
        {
          "input": "binomial_probability(11, 6, 2.0 / 4)",
          "expected_output": "0.5"
        }
      ]
    },
    {
      "problem_id": "mbpp_128",
      "description": "Write a function to shortlist words that are longer than n from a given list of words.",
      "function_name": "long_words",
      "correct_solution": "def long_words(n, str):\r\n    word_len = []\r\n    txt = str.split(\" \")\r\n    for x in txt:\r\n        if len(x) > n:\r\n            word_len.append(x)\r\n    return word_len\t",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "long_words(3, 'python is a programming language')",
          "expected_output": "['python', 'programming', 'language']"
        },
        {
          "input": "long_words(2, 'writing a program')",
          "expected_output": "['writing', 'program']"
        },
        {
          "input": "long_words(5, 'sorting list')",
          "expected_output": "['sorting']"
        }
      ],
      "broken_test_cases": [
        {
          "input": "long_words(3, 'python is a programming language')",
          "expected_output": "['python', 'is', 'programming', 'language']"
        },
        {
          "input": "long_words(2, 'writing a program')",
          "expected_output": "['writing', 'a', 'program']"
        },
        {
          "input": "long_words(5, 'sorting list')",
          "expected_output": "['list']"
        }
      ]
    },
    {
      "problem_id": "mbpp_68",
      "description": "Write a python function to check whether the given array is monotonic or not.",
      "function_name": "is_Monotonic",
      "correct_solution": "def is_Monotonic(A): \r\n    return (all(A[i] <= A[i + 1] for i in range(len(A) - 1)) or\r\n            all(A[i] >= A[i + 1] for i in range(len(A) - 1))) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "is_Monotonic([6, 5, 4, 4])",
          "expected_output": "True"
        },
        {
          "input": "is_Monotonic([1, 2, 2, 3])",
          "expected_output": "True"
        },
        {
          "input": "is_Monotonic([1, 3, 2])",
          "expected_output": "False"
        }
      ],
      "broken_test_cases": [
        {
          "input": "is_Monotonic([6, 5, 4, 4])",
          "expected_output": "False"
        },
        {
          "input": "is_Monotonic([1, 2, 2, 3])",
          "expected_output": "False"
        },
        {
          "input": "is_Monotonic([1, 3, 2])",
          "expected_output": "True"
        }
      ]
    },
    {
      "problem_id": "mbpp_865",
      "description": "Write a function to print n-times a list using map function.",
      "function_name": "ntimes_list",
      "correct_solution": "def ntimes_list(nums,n):\r\n    result = map(lambda x:n*x, nums) \r\n    return list(result)",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "ntimes_list([1, 2, 3, 4, 5, 6, 7], 3)",
          "expected_output": "[3, 6, 9, 12, 15, 18, 21]"
        },
        {
          "input": "ntimes_list([1, 2, 3, 4, 5, 6, 7], 4)",
          "expected_output": "[4, 8, 12, 16, 20, 24, 28]"
        },
        {
          "input": "ntimes_list([1, 2, 3, 4, 5, 6, 7], 10)",
          "expected_output": "[10, 20, 30, 40, 50, 60, 70]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "ntimes_list([1, 2, 3, 4, 5, 6, 7], 3)",
          "expected_output": "[3, 6, 9, 12, 15, 18, 20]"
        },
        {
          "input": "ntimes_list([1, 2, 3, 4, 5, 6, 7], 4)",
          "expected_output": "[4, 8, 12, 16, 20, 24, 29]"
        },
        {
          "input": "ntimes_list([1, 2, 3, 4, 5, 6, 7], 10)",
          "expected_output": "[5, 10, 15, 20, 25, 30, 35]"
        }
      ]
    },
    {
      "problem_id": "mbpp_818",
      "description": "Write a python function to count lower case letters in a given string.",
      "function_name": "lower_ctr",
      "correct_solution": "def lower_ctr(str):\r\n      lower_ctr= 0\r\n      for i in range(len(str)):\r\n          if str[i] >= 'a' and str[i] <= 'z': lower_ctr += 1     \r\n      return  lower_ctr",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "lower_ctr('abc')",
          "expected_output": "3"
        },
        {
          "input": "lower_ctr('string')",
          "expected_output": "6"
        },
        {
          "input": "lower_ctr('Python')",
          "expected_output": "5"
        }
      ],
      "broken_test_cases": [
        {
          "input": "lower_ctr('abc')",
          "expected_output": "2"
        },
        {
          "input": "lower_ctr('string')",
          "expected_output": "7"
        },
        {
          "input": "lower_ctr('Python')",
          "expected_output": "6"
        }
      ]
    },
    {
      "problem_id": "mbpp_425",
      "description": "Write a function to count the number of sublists containing a particular element.",
      "function_name": "count_element_in_list",
      "correct_solution": "def count_element_in_list(list1, x): \r\n    ctr = 0\r\n    for i in range(len(list1)): \r\n        if x in list1[i]: \r\n            ctr+= 1          \r\n    return ctr",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1)",
          "expected_output": "3"
        },
        {
          "input": "count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']], 'A')",
          "expected_output": "3"
        },
        {
          "input": "count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']], 'E')",
          "expected_output": "1"
        }
      ],
      "broken_test_cases": [
        {
          "input": "count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]], 1)",
          "expected_output": "4"
        },
        {
          "input": "count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']], 'A')",
          "expected_output": "2"
        },
        {
          "input": "count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']], 'E')",
          "expected_output": "2"
        }
      ]
    },
    {
      "problem_id": "mbpp_187",
      "description": "Write a function to find the longest common subsequence for the given two sequences.",
      "function_name": "longest_common_subsequence",
      "correct_solution": "def longest_common_subsequence(X, Y, m, n): \r\n    if m == 0 or n == 0: \r\n       return 0 \r\n    elif X[m-1] == Y[n-1]: \r\n       return 1 + longest_common_subsequence(X, Y, m-1, n-1) \r\n    else: \r\n       return max(longest_common_subsequence(X, Y, m, n-1), longest_common_subsequence(X, Y, m-1, n))",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "longest_common_subsequence('AGGTAB', 'GXTXAYB', 6, 7)",
          "expected_output": "4"
        },
        {
          "input": "longest_common_subsequence('ABCDGH', 'AEDFHR', 6, 6)",
          "expected_output": "3"
        },
        {
          "input": "longest_common_subsequence('AXYT', 'AYZX', 4, 4)",
          "expected_output": "2"
        }
      ],
      "broken_test_cases": [
        {
          "input": "longest_common_subsequence('AGGTAB', 'GXTXAYB', 6, 7)",
          "expected_output": "5"
        },
        {
          "input": "longest_common_subsequence('ABCDGH', 'AEDFHR', 6, 6)",
          "expected_output": "4"
        },
        {
          "input": "longest_common_subsequence('AXYT', 'AYZX', 4, 4)",
          "expected_output": "3"
        }
      ]
    },
    {
      "problem_id": "mbpp_845",
      "description": "Write a python function to count the number of digits in factorial of a given number.",
      "function_name": "find_Digits",
      "correct_solution": "import math \r\ndef find_Digits(n): \r\n    if (n < 0): \r\n        return 0;\r\n    if (n <= 1): \r\n        return 1; \r\n    x = ((n * math.log10(n / math.e) + math.log10(2 * math.pi * n) /2.0)); \r\n    return math.floor(x) + 1; ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "find_Digits(7)",
          "expected_output": "4"
        },
        {
          "input": "find_Digits(5)",
          "expected_output": "3"
        },
        {
          "input": "find_Digits(4)",
          "expected_output": "2"
        }
      ],
      "broken_test_cases": [
        {
          "input": "find_Digits(7)",
          "expected_output": "3"
        },
        {
          "input": "find_Digits(5)",
          "expected_output": "4"
        },
        {
          "input": "find_Digits(4)",
          "expected_output": "3"
        }
      ]
    },
    {
      "problem_id": "mbpp_881",
      "description": "Write a function to find the sum of first even and odd number of a given list.",
      "function_name": "sum_even_odd",
      "correct_solution": "def sum_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even+first_odd)",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "sum_even_odd([1, 3, 5, 7, 4, 1, 6, 8])",
          "expected_output": "5"
        },
        {
          "input": "sum_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
          "expected_output": "3"
        },
        {
          "input": "sum_even_odd([1, 5, 7, 9, 10])",
          "expected_output": "11"
        }
      ],
      "broken_test_cases": [
        {
          "input": "sum_even_odd([1, 3, 5, 7, 4, 1, 6, 8])",
          "expected_output": "6"
        },
        {
          "input": "sum_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
          "expected_output": "15"
        },
        {
          "input": "sum_even_odd([1, 5, 7, 9, 10])",
          "expected_output": "12"
        }
      ]
    },
    {
      "problem_id": "mbpp_414",
      "description": "Write a python function to check whether the value exists in a sequence or not.",
      "function_name": "overlapping",
      "correct_solution": "def overlapping(list1,list2):  \r\n    c=0\r\n    d=0\r\n    for i in list1: \r\n        c+=1\r\n    for i in list2: \r\n        d+=1\r\n    for i in range(0,c): \r\n        for j in range(0,d): \r\n            if(list1[i]==list2[j]): \r\n                return 1\r\n    return 0",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "overlapping([1, 2, 3, 4, 5], [6, 7, 8, 9])",
          "expected_output": "False"
        },
        {
          "input": "overlapping([1, 2, 3], [4, 5, 6])",
          "expected_output": "False"
        },
        {
          "input": "overlapping([1, 4, 5], [1, 4, 5])",
          "expected_output": "True"
        }
      ],
      "broken_test_cases": [
        {
          "input": "overlapping([1, 2, 3, 4, 5], [6, 7, 8, 9])",
          "expected_output": "True"
        },
        {
          "input": "overlapping([1, 2, 3], [4, 5, 6])",
          "expected_output": "True"
        },
        {
          "input": "overlapping([1, 4, 5], [1, 4, 5])",
          "expected_output": "False"
        }
      ]
    },
    {
      "problem_id": "mbpp_79",
      "description": "Write a python function to check whether the length of the word is odd or not.",
      "function_name": "word_len",
      "correct_solution": "def word_len(s): \r\n    s = s.split(' ')   \r\n    for word in s:    \r\n        if len(word)%2!=0: \r\n            return True  \r\n        else:\r\n          return False",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "word_len('Hadoop')",
          "expected_output": "False"
        },
        {
          "input": "word_len('great')",
          "expected_output": "True"
        },
        {
          "input": "word_len('structure')",
          "expected_output": "True"
        }
      ],
      "broken_test_cases": [
        {
          "input": "word_len('Hadoop')",
          "expected_output": "True"
        },
        {
          "input": "word_len('great')",
          "expected_output": "False"
        },
        {
          "input": "word_len('structure')",
          "expected_output": "False"
        }
      ]
    },
    {
      "problem_id": "mbpp_51",
      "description": "Write a function to print check if the triangle is equilateral or not.",
      "function_name": "check_equilateral",
      "correct_solution": "def check_equilateral(x,y,z):\r\n  if x == y == z:\r\n\t   return True\r\n  else:\r\n     return False",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "check_equilateral(6, 8, 12)",
          "expected_output": "False"
        },
        {
          "input": "check_equilateral(6, 6, 12)",
          "expected_output": "False"
        },
        {
          "input": "check_equilateral(6, 6, 6)",
          "expected_output": "True"
        }
      ],
      "broken_test_cases": [
        {
          "input": "check_equilateral(6, 8, 12)",
          "expected_output": "True"
        },
        {
          "input": "check_equilateral(6, 6, 12)",
          "expected_output": "True"
        },
        {
          "input": "check_equilateral(6, 6, 6)",
          "expected_output": "False"
        }
      ]
    },
    {
      "problem_id": "mbpp_863",
      "description": "Write a function to find the length of the longest sub-sequence such that elements in the subsequences are consecutive integers.",
      "function_name": "find_longest_conseq_subseq",
      "correct_solution": "def find_longest_conseq_subseq(arr, n): \r\n\tans = 0\r\n\tcount = 0\r\n\tarr.sort() \r\n\tv = [] \r\n\tv.append(arr[0]) \r\n\tfor i in range(1, n): \r\n\t\tif (arr[i] != arr[i - 1]): \r\n\t\t\tv.append(arr[i]) \r\n\tfor i in range(len(v)): \r\n\t\tif (i > 0 and v[i] == v[i - 1] + 1): \r\n\t\t\tcount += 1\r\n\t\telse: \r\n\t\t\tcount = 1\r\n\t\tans = max(ans, count) \r\n\treturn ans ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "find_longest_conseq_subseq([1, 2, 2, 3], 4)",
          "expected_output": "3"
        },
        {
          "input": "find_longest_conseq_subseq([1, 9, 3, 10, 4, 20, 2], 7)",
          "expected_output": "4"
        },
        {
          "input": "find_longest_conseq_subseq([36, 41, 56, 35, 44, 33, 34, 92, 43, 32, 42], 11)",
          "expected_output": "5"
        }
      ],
      "broken_test_cases": [
        {
          "input": "find_longest_conseq_subseq([1, 2, 2, 3], 4)",
          "expected_output": "2"
        },
        {
          "input": "find_longest_conseq_subseq([1, 9, 3, 10, 4, 20, 2], 7)",
          "expected_output": "3"
        },
        {
          "input": "find_longest_conseq_subseq([36, 41, 56, 35, 44, 33, 34, 92, 43, 32, 42], 11)",
          "expected_output": "4"
        }
      ]
    },
    {
      "problem_id": "mbpp_834",
      "description": "Write a function to generate a square matrix filled with elements from 1 to n raised to the power of 2 in spiral order.",
      "function_name": "generate_matrix",
      "correct_solution": "def generate_matrix(n):\r\n        if n<=0:\r\n            return [] \r\n        matrix=[row[:] for row in [[0]*n]*n]        \r\n        row_st=0\r\n        row_ed=n-1        \r\n        col_st=0\r\n        col_ed=n-1\r\n        current=1        \r\n        while (True):\r\n            if current>n*n:\r\n                break\r\n            for c in range (col_st, col_ed+1):\r\n                matrix[row_st][c]=current\r\n                current+=1\r\n            row_st+=1\r\n            for r in range (row_st, row_ed+1):\r\n                matrix[r][col_ed]=current\r\n                current+=1\r\n            col_ed-=1\r\n            for c in range (col_ed, col_st-1, -1):\r\n                matrix[row_ed][c]=current\r\n                current+=1\r\n            row_ed-=1\r\n            for r in range (row_ed, row_st-1, -1):\r\n                matrix[r][col_st]=current\r\n                current+=1\r\n            col_st+=1\r\n        return matrix",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "generate_matrix(3)",
          "expected_output": "[[1, 2, 3], [8, 9, 4], [7, 6, 5]]"
        },
        {
          "input": "generate_matrix(2)",
          "expected_output": "[[1, 2], [4, 3]]"
        },
        {
          "input": "generate_matrix(7)",
          "expected_output": "[[1, 2, 3, 4, 5, 6, 7], [24, 25, 26, 27, 28, 29, 8], [23, 40, 41, 42, 43, 30, 9], [22, 39, 48, 49, 44, 31, 10], [21, 38, 47, 46, 45, 32, 11], [20, 37, 36, 35, 34, 33, 12], [19, 18, 17, 16, 15, 14, 13]]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "generate_matrix(3)",
          "expected_output": "[[1, 2, 3], [8, 9, 4], [7, 6, 5, 10]]"
        },
        {
          "input": "generate_matrix(2)",
          "expected_output": "[[1, 2], [3, 4]]"
        },
        {
          "input": "generate_matrix(7)",
          "expected_output": "[[1, 2, 3, 4, 5, 6, 7], [24, 25, 26, 27, 28, 29, 8], [23, 40, 41, 42, 43, 30, 9], [22, 39, 48, 49, 44, 31, 10], [21, 38, 47, 46, 45, 32, 11], [20, 37, 36, 35, 34, 33, 12], [19, 18, 17, 16, 15, 14, 12]]"
        }
      ]
    },
    {
      "problem_id": "mbpp_801",
      "description": "Write a python function to count the number of equal numbers from three given integers.",
      "function_name": "test_three_equal",
      "correct_solution": "def test_three_equal(x,y,z):\r\n  result= set([x,y,z])\r\n  if len(result)==3:\r\n    return 0\r\n  else:\r\n    return (4-len(result))",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "test_three_equal(1, 1, 1)",
          "expected_output": "3"
        },
        {
          "input": "test_three_equal(-1, -2, -3)",
          "expected_output": "0"
        },
        {
          "input": "test_three_equal(1, 2, 2)",
          "expected_output": "2"
        }
      ],
      "broken_test_cases": [
        {
          "input": "test_three_equal(1, 1, 1)",
          "expected_output": "2"
        },
        {
          "input": "test_three_equal(-1, -2, -3)",
          "expected_output": "3"
        },
        {
          "input": "test_three_equal(1, 2, 2)",
          "expected_output": "1"
        }
      ]
    },
    {
      "problem_id": "mbpp_741",
      "description": "Write a python function to check whether all the characters are same or not.",
      "function_name": "all_Characters_Same",
      "correct_solution": "def all_Characters_Same(s) :\r\n    n = len(s)\r\n    for i in range(1,n) :\r\n        if s[i] != s[0] :\r\n            return False\r\n    return True",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "all_Characters_Same('python')",
          "expected_output": "False"
        },
        {
          "input": "all_Characters_Same('aaa')",
          "expected_output": "True"
        },
        {
          "input": "all_Characters_Same('data')",
          "expected_output": "False"
        }
      ],
      "broken_test_cases": [
        {
          "input": "all_Characters_Same('python')",
          "expected_output": "True"
        },
        {
          "input": "all_Characters_Same('aaa')",
          "expected_output": "False"
        },
        {
          "input": "all_Characters_Same('data')",
          "expected_output": "True"
        }
      ]
    },
    {
      "problem_id": "mbpp_256",
      "description": "Write a python function to count the number of prime numbers less than a given non-negative number.",
      "function_name": "count_Primes_nums",
      "correct_solution": "def count_Primes_nums(n):\r\n    ctr = 0\r\n    for num in range(n):\r\n        if num <= 1:\r\n            continue\r\n        for i in range(2,num):\r\n            if (num % i) == 0:\r\n                break\r\n        else:\r\n            ctr += 1\r\n    return ctr",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "count_Primes_nums(5)",
          "expected_output": "2"
        },
        {
          "input": "count_Primes_nums(10)",
          "expected_output": "4"
        },
        {
          "input": "count_Primes_nums(100)",
          "expected_output": "25"
        }
      ],
      "broken_test_cases": [
        {
          "input": "count_Primes_nums(5)",
          "expected_output": "1"
        },
        {
          "input": "count_Primes_nums(10)",
          "expected_output": "5"
        },
        {
          "input": "count_Primes_nums(100)",
          "expected_output": "23"
        }
      ]
    },
    {
      "problem_id": "mbpp_64",
      "description": "Write a function to sort a list of tuples using lambda.",
      "function_name": "subject_marks",
      "correct_solution": "def subject_marks(subjectmarks):\r\n#subject_marks = [('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])\r\n subjectmarks.sort(key = lambda x: x[1])\r\n return subjectmarks",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])",
          "expected_output": "[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]"
        },
        {
          "input": "subject_marks([('Telugu', 49), ('Hindhi', 54), ('Social', 33)])",
          "expected_output": "[('Social', 33), ('Telugu', 49), ('Hindhi', 54)]"
        },
        {
          "input": "subject_marks([('Physics', 96), ('Chemistry', 97), ('Biology', 45)])",
          "expected_output": "[('Biology', 45), ('Physics', 96), ('Chemistry', 97)]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])",
          "expected_output": "[('Maths', 97), ('Science', 90), ('English', 88), ('Social sciences', 82)]"
        },
        {
          "input": "subject_marks([('Telugu', 49), ('Hindhi', 54), ('Social', 33)])",
          "expected_output": "[('Telugu', 49), ('Hindhi', 54), ('Social', 33)]"
        },
        {
          "input": "subject_marks([('Physics', 96), ('Chemistry', 97), ('Biology', 45)])",
          "expected_output": "[('Physics', 96), ('Chemistry', 97), ('Biology', 45)]"
        }
      ]
    },
    {
      "problem_id": "mbpp_58",
      "description": "Write a python function to check whether the given two integers have opposite sign or not.",
      "function_name": "opposite_Signs",
      "correct_solution": "def opposite_Signs(x,y): \r\n    return ((x ^ y) < 0); ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "opposite_Signs(1, -2)",
          "expected_output": "True"
        },
        {
          "input": "opposite_Signs(3, 2)",
          "expected_output": "False"
        },
        {
          "input": "opposite_Signs(-10, -10)",
          "expected_output": "False"
        }
      ],
      "broken_test_cases": [
        {
          "input": "opposite_Signs(1, -2)",
          "expected_output": "False"
        },
        {
          "input": "opposite_Signs(3, 2)",
          "expected_output": "True"
        },
        {
          "input": "opposite_Signs(-10, -10)",
          "expected_output": "True"
        }
      ]
    },
    {
      "problem_id": "mbpp_257",
      "description": "Write a function to swap two numbers.",
      "function_name": "swap_numbers",
      "correct_solution": "def swap_numbers(a,b):\r\n temp = a\r\n a = b\r\n b = temp\r\n return (a,b)",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "swap_numbers(10, 20)",
          "expected_output": "(20, 10)"
        },
        {
          "input": "swap_numbers(15, 17)",
          "expected_output": "(17, 15)"
        },
        {
          "input": "swap_numbers(100, 200)",
          "expected_output": "(200, 100)"
        }
      ],
      "broken_test_cases": [
        {
          "input": "swap_numbers(10, 20)",
          "expected_output": "(10, 20)"
        },
        {
          "input": "swap_numbers(15, 17)",
          "expected_output": "(15, 17)"
        },
        {
          "input": "swap_numbers(100, 200)",
          "expected_output": "(100, 200)"
        }
      ]
    },
    {
      "problem_id": "mbpp_130",
      "description": "Write a function to find the item with maximum frequency in a given list.",
      "function_name": "max_occurrences",
      "correct_solution": "from collections import defaultdict\r\ndef max_occurrences(nums):\r\n    dict = defaultdict(int)\r\n    for i in nums:\r\n        dict[i] += 1\r\n    result = max(dict.items(), key=lambda x: x[1]) \r\n    return result",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "max_occurrences([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2])",
          "expected_output": "(2, 5)"
        },
        {
          "input": "max_occurrences([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 16, 18])",
          "expected_output": "(8, 2)"
        },
        {
          "input": "max_occurrences([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10])",
          "expected_output": "(20, 3)"
        }
      ],
      "broken_test_cases": [
        {
          "input": "max_occurrences([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 2, 4, 6, 9, 1, 2])",
          "expected_output": "(3, 5)"
        },
        {
          "input": "max_occurrences([2, 3, 8, 4, 7, 9, 8, 7, 9, 15, 14, 10, 12, 13, 16, 16, 18])",
          "expected_output": "(16, 2)"
        },
        {
          "input": "max_occurrences([10, 20, 20, 30, 40, 90, 80, 50, 30, 20, 50, 10])",
          "expected_output": "(50, 2)"
        }
      ]
    },
    {
      "problem_id": "mbpp_321",
      "description": "Write a function to find the demlo number for the given number.",
      "function_name": "find_demlo",
      "correct_solution": "def find_demlo(s): \r\n\tl = len(s) \r\n\tres = \"\" \r\n\tfor i in range(1,l+1): \r\n\t\tres = res + str(i) \r\n\tfor i in range(l-1,0,-1): \r\n\t\tres = res + str(i) \r\n\treturn res \t",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "find_demlo('111111')",
          "expected_output": "12345654321"
        },
        {
          "input": "find_demlo('1111')",
          "expected_output": "1234321"
        },
        {
          "input": "find_demlo('13333122222')",
          "expected_output": "123456789101110987654321"
        }
      ],
      "broken_test_cases": [
        {
          "input": "find_demlo('111111')",
          "expected_output": "12345654320"
        },
        {
          "input": "find_demlo('1111')",
          "expected_output": "1234312"
        },
        {
          "input": "find_demlo('13333122222')",
          "expected_output": "123456789101112343210987654321"
        }
      ]
    },
    {
      "problem_id": "mbpp_938",
      "description": "Write a function to find three closest elements from three sorted arrays.",
      "function_name": "find_closet",
      "correct_solution": "import sys \r\n\r\ndef find_closet(A, B, C, p, q, r): \r\n\tdiff = sys.maxsize \r\n\tres_i = 0\r\n\tres_j = 0\r\n\tres_k = 0\r\n\ti = 0\r\n\tj = 0\r\n\tk = 0\r\n\twhile(i < p and j < q and k < r): \r\n\t\tminimum = min(A[i], min(B[j], C[k])) \r\n\t\tmaximum = max(A[i], max(B[j], C[k])); \r\n\t\tif maximum-minimum < diff: \r\n\t\t\tres_i = i \r\n\t\t\tres_j = j \r\n\t\t\tres_k = k \r\n\t\t\tdiff = maximum - minimum; \r\n\t\tif diff == 0: \r\n\t\t\tbreak\r\n\t\tif A[i] == minimum: \r\n\t\t\ti = i+1\r\n\t\telif B[j] == minimum: \r\n\t\t\tj = j+1\r\n\t\telse: \r\n\t\t\tk = k+1\r\n\treturn A[res_i],B[res_j],C[res_k]",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "find_closet([1, 4, 10], [2, 15, 20], [10, 12], 3, 3, 2)",
          "expected_output": "(10, 15, 10)"
        },
        {
          "input": "find_closet([20, 24, 100], [2, 19, 22, 79, 800], [10, 12, 23, 24, 119], 3, 5, 5)",
          "expected_output": "(24, 22, 23)"
        },
        {
          "input": "find_closet([2, 5, 11], [3, 16, 21], [11, 13], 3, 3, 2)",
          "expected_output": "(11, 16, 11)"
        }
      ],
      "broken_test_cases": [
        {
          "input": "find_closet([1, 4, 10], [2, 15, 20], [10, 12], 3, 3, 2)",
          "expected_output": "(2, 15, 10)"
        },
        {
          "input": "find_closet([20, 24, 100], [2, 19, 22, 79, 800], [10, 12, 23, 24, 119], 3, 5, 5)",
          "expected_output": "(24, 22, 24)"
        },
        {
          "input": "find_closet([2, 5, 11], [3, 16, 21], [11, 13], 3, 3, 2)",
          "expected_output": "(2, 16, 11)"
        }
      ]
    },
    {
      "problem_id": "mbpp_217",
      "description": "Write a python function to find the first repeated character in a given string.",
      "function_name": "first_Repeated_Char",
      "correct_solution": "def first_Repeated_Char(str): \r\n    h = {}\r\n    for ch in str:\r\n        if ch in h: \r\n            return ch;\r\n        else: \r\n            h[ch] = 0\r\n    return '\\0'",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "first_Repeated_Char('Google')",
          "expected_output": "o"
        },
        {
          "input": "first_Repeated_Char('data')",
          "expected_output": "a"
        },
        {
          "input": "first_Repeated_Char('python')",
          "expected_output": "\u0000"
        }
      ],
      "broken_test_cases": [
        {
          "input": "first_Repeated_Char('Google')",
          "expected_output": "p"
        },
        {
          "input": "first_Repeated_Char('data')",
          "expected_output": "'d'"
        },
        {
          "input": "first_Repeated_Char('python')",
          "expected_output": "'p'"
        }
      ]
    },
    {
      "problem_id": "mbpp_545",
      "description": "Write a python function to toggle only first and last bits of a given number.",
      "function_name": "toggle_F_and_L_bits",
      "correct_solution": "def take_L_and_F_set_bits(n) : \r\n    n = n | n >> 1\r\n    n = n | n >> 2\r\n    n = n | n >> 4\r\n    n = n | n >> 8\r\n    n = n | n >> 16 \r\n    return ((n + 1) >> 1) + 1      \r\ndef toggle_F_and_L_bits(n) :  \r\n    if (n == 1) : \r\n        return 0 \r\n    return n ^ take_L_and_F_set_bits(n) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "toggle_F_and_L_bits(10)",
          "expected_output": "3"
        },
        {
          "input": "toggle_F_and_L_bits(15)",
          "expected_output": "6"
        },
        {
          "input": "toggle_F_and_L_bits(20)",
          "expected_output": "5"
        }
      ],
      "broken_test_cases": [
        {
          "input": "toggle_F_and_L_bits(10)",
          "expected_output": "4"
        },
        {
          "input": "toggle_F_and_L_bits(15)",
          "expected_output": "8"
        },
        {
          "input": "toggle_F_and_L_bits(20)",
          "expected_output": "6"
        }
      ]
    },
    {
      "problem_id": "mbpp_127",
      "description": "Write a function to multiply two integers without using the * operator in python.",
      "function_name": "multiply_int",
      "correct_solution": "def multiply_int(x, y):\r\n    if y < 0:\r\n        return -multiply_int(x, -y)\r\n    elif y == 0:\r\n        return 0\r\n    elif y == 1:\r\n        return x\r\n    else:\r\n        return x + multiply_int(x, y - 1)",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "multiply_int(10, 20)",
          "expected_output": "200"
        },
        {
          "input": "multiply_int(5, 10)",
          "expected_output": "50"
        },
        {
          "input": "multiply_int(4, 8)",
          "expected_output": "32"
        }
      ],
      "broken_test_cases": [
        {
          "input": "multiply_int(10, 20)",
          "expected_output": "210"
        },
        {
          "input": "multiply_int(5, 10)",
          "expected_output": "51"
        },
        {
          "input": "multiply_int(4, 8)",
          "expected_output": "33"
        }
      ]
    },
    {
      "problem_id": "mbpp_41",
      "description": "Write a function to filter even numbers using lambda function.",
      "function_name": "filter_evennumbers",
      "correct_solution": "def filter_evennumbers(nums):\r\n even_nums = list(filter(lambda x: x%2 == 0, nums))\r\n return even_nums",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
          "expected_output": "[2, 4, 6, 8, 10]"
        },
        {
          "input": "filter_evennumbers([10, 20, 45, 67, 84, 93])",
          "expected_output": "[10, 20, 84]"
        },
        {
          "input": "filter_evennumbers([5, 7, 9, 8, 6, 4, 3])",
          "expected_output": "[8, 6, 4]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
          "expected_output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
        },
        {
          "input": "filter_evennumbers([10, 20, 45, 67, 84, 93])",
          "expected_output": "[10, 20, 45, 67, 84, 93]"
        },
        {
          "input": "filter_evennumbers([5, 7, 9, 8, 6, 4, 3])",
          "expected_output": "[5, 7, 9, 8, 6, 4, 3]"
        }
      ]
    },
    {
      "problem_id": "mbpp_80",
      "description": "Write a function to find the nth tetrahedral number.",
      "function_name": "tetrahedral_number",
      "correct_solution": "def tetrahedral_number(n): \r\n\treturn (n * (n + 1) * (n + 2)) / 6",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "tetrahedral_number(5)",
          "expected_output": "35.0"
        },
        {
          "input": "tetrahedral_number(6)",
          "expected_output": "56.0"
        },
        {
          "input": "tetrahedral_number(7)",
          "expected_output": "84.0"
        }
      ],
      "broken_test_cases": [
        {
          "input": "tetrahedral_number(5)",
          "expected_output": "34.0"
        },
        {
          "input": "tetrahedral_number(6)",
          "expected_output": "55.0"
        },
        {
          "input": "tetrahedral_number(7)",
          "expected_output": "85.0"
        }
      ]
    },
    {
      "problem_id": "mbpp_542",
      "description": "Write a function to replace all occurrences of spaces, commas, or dots with a colon in the given string by using regex.",
      "function_name": "fill_spaces",
      "correct_solution": "import re\r\ndef fill_spaces(text):\r\n  return (re.sub(\"[ ,.]\", \":\", text))",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "fill_spaces('Boult Curve Wireless Neckband')",
          "expected_output": "Boult:Curve:Wireless:Neckband"
        },
        {
          "input": "fill_spaces('Stereo Sound Sweatproof')",
          "expected_output": "Stereo:Sound:Sweatproof"
        },
        {
          "input": "fill_spaces('Probass Curve Audio')",
          "expected_output": "Probass:Curve:Audio"
        }
      ],
      "broken_test_cases": [
        {
          "input": "fill_spaces('Boult Curve Wireless Neckband')",
          "expected_output": "Boult_Curve_Wireless_Neckband"
        },
        {
          "input": "fill_spaces('Stereo Sound Sweatproof')",
          "expected_output": "Stereo Sound Sweatproof"
        },
        {
          "input": "fill_spaces('Probass Curve Audio')",
          "expected_output": "Probass Curve Audio"
        }
      ]
    },
    {
      "problem_id": "mbpp_221",
      "description": "Write a python function to find the first even number in a given list of numbers.",
      "function_name": "first_even",
      "correct_solution": "def first_even(nums):\r\n    first_even = next((el for el in nums if el%2==0),-1)\r\n    return first_even",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "first_even([1, 3, 5, 7, 4, 1, 6, 8])",
          "expected_output": "4"
        },
        {
          "input": "first_even([2, 3, 4])",
          "expected_output": "2"
        },
        {
          "input": "first_even([5, 6, 7])",
          "expected_output": "6"
        }
      ],
      "broken_test_cases": [
        {
          "input": "first_even([1, 3, 5, 7, 4, 1, 6, 8])",
          "expected_output": "5"
        },
        {
          "input": "first_even([2, 3, 4])",
          "expected_output": "3"
        },
        {
          "input": "first_even([5, 6, 7])",
          "expected_output": "5"
        }
      ]
    },
    {
      "problem_id": "mbpp_208",
      "description": "Write a function to check the given decimal with a precision of 2 by using regex.",
      "function_name": "is_decimal",
      "correct_solution": "import re\r\ndef is_decimal(num):\r\n  num_fetch = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\r\n  result = num_fetch.search(num)\r\n  return bool(result)",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "is_decimal('123.11')",
          "expected_output": "True"
        },
        {
          "input": "is_decimal('0.21')",
          "expected_output": "True"
        },
        {
          "input": "is_decimal('123.1214')",
          "expected_output": "False"
        }
      ],
      "broken_test_cases": [
        {
          "input": "is_decimal('123.11')",
          "expected_output": "False"
        },
        {
          "input": "is_decimal('0.21')",
          "expected_output": "False"
        },
        {
          "input": "is_decimal('123.1214')",
          "expected_output": "True"
        }
      ]
    },
    {
      "problem_id": "mbpp_838",
      "description": "Write a python function to find minimum number swaps required to make two binary strings equal.",
      "function_name": "min_Swaps",
      "correct_solution": "def min_Swaps(s1,s2) :  \r\n    c0 = 0; c1 = 0;  \r\n    for i in range(len(s1)) :  \r\n        if (s1[i] == '0' and s2[i] == '1') : \r\n            c0 += 1;    \r\n        elif (s1[i] == '1' and s2[i] == '0') : \r\n            c1 += 1;  \r\n    result = c0 // 2 + c1 // 2;  \r\n    if (c0 % 2 == 0 and c1 % 2 == 0) : \r\n        return result;  \r\n    elif ((c0 + c1) % 2 == 0) : \r\n        return result + 2;  \r\n    else : \r\n        return -1;  ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "min_Swaps('0011', '1111')",
          "expected_output": "1"
        },
        {
          "input": "min_Swaps('00011', '01001')",
          "expected_output": "2"
        },
        {
          "input": "min_Swaps('111', '111')",
          "expected_output": "0"
        }
      ],
      "broken_test_cases": [
        {
          "input": "min_Swaps('0011', '1111')",
          "expected_output": "2"
        },
        {
          "input": "min_Swaps('00011', '01001')",
          "expected_output": "3"
        },
        {
          "input": "min_Swaps('111', '111')",
          "expected_output": "1"
        }
      ]
    },
    {
      "problem_id": "mbpp_249",
      "description": "Write a function to find the intersection of two arrays using lambda function.",
      "function_name": "intersection_array",
      "correct_solution": "def intersection_array(array_nums1,array_nums2):\r\n result = list(filter(lambda x: x in array_nums1, array_nums2)) \r\n return result",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "intersection_array([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9])",
          "expected_output": "[1, 2, 8, 9]"
        },
        {
          "input": "intersection_array([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9])",
          "expected_output": "[3, 5, 7, 9]"
        },
        {
          "input": "intersection_array([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40])",
          "expected_output": "[10]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "intersection_array([1, 2, 3, 5, 7, 8, 9, 10], [1, 2, 4, 8, 9])",
          "expected_output": "[1, 2, 8]"
        },
        {
          "input": "intersection_array([1, 2, 3, 5, 7, 8, 9, 10], [3, 5, 7, 9])",
          "expected_output": "[1, 2, 3, 5, 7, 8, 9, 10]"
        },
        {
          "input": "intersection_array([1, 2, 3, 5, 7, 8, 9, 10], [10, 20, 30, 40])",
          "expected_output": "[1, 2, 3, 5, 7, 8, 9, 10]"
        }
      ]
    },
    {
      "problem_id": "mbpp_843",
      "description": "Write a function to find the nth super ugly number from a given prime list of size k using heap queue algorithm.",
      "function_name": "nth_super_ugly_number",
      "correct_solution": "import heapq\r\ndef nth_super_ugly_number(n, primes):\r\n    uglies = [1]\r\n    def gen(prime):\r\n        for ugly in uglies:\r\n            yield ugly * prime\r\n    merged = heapq.merge(*map(gen, primes))\r\n    while len(uglies) < n:\r\n        ugly = next(merged)\r\n        if ugly != uglies[-1]:\r\n            uglies.append(ugly)\r\n    return uglies[-1]",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "nth_super_ugly_number(12, [2, 7, 13, 19])",
          "expected_output": "32"
        },
        {
          "input": "nth_super_ugly_number(10, [2, 7, 13, 19])",
          "expected_output": "26"
        },
        {
          "input": "nth_super_ugly_number(100, [2, 7, 13, 19])",
          "expected_output": "5408"
        }
      ],
      "broken_test_cases": [
        {
          "input": "nth_super_ugly_number(12, [2, 7, 13, 19])",
          "expected_output": "31"
        },
        {
          "input": "nth_super_ugly_number(10, [2, 7, 13, 19])",
          "expected_output": "27"
        },
        {
          "input": "nth_super_ugly_number(100, [2, 7, 13, 19])",
          "expected_output": "5407"
        }
      ]
    },
    {
      "problem_id": "mbpp_295",
      "description": "Write a function to return the sum of all divisors of a number.",
      "function_name": "sum_div",
      "correct_solution": "def sum_div(number):\r\n    divisors = [1]\r\n    for i in range(2, number):\r\n        if (number % i)==0:\r\n            divisors.append(i)\r\n    return sum(divisors)",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "sum_div(8)",
          "expected_output": "7"
        },
        {
          "input": "sum_div(12)",
          "expected_output": "16"
        },
        {
          "input": "sum_div(7)",
          "expected_output": "1"
        }
      ],
      "broken_test_cases": [
        {
          "input": "sum_div(8)",
          "expected_output": "6"
        },
        {
          "input": "sum_div(12)",
          "expected_output": "15"
        },
        {
          "input": "sum_div(7)",
          "expected_output": "2"
        }
      ]
    },
    {
      "problem_id": "mbpp_133",
      "description": "Write a function to calculate the sum of the negative numbers of a given list of numbers using lambda function.",
      "function_name": "sum_negativenum",
      "correct_solution": "def sum_negativenum(nums):\r\n  sum_negativenum = list(filter(lambda nums:nums<0,nums))\r\n  return sum(sum_negativenum)",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])",
          "expected_output": "-32"
        },
        {
          "input": "sum_negativenum([10, 15, -14, 13, -18, 12, -20])",
          "expected_output": "-52"
        },
        {
          "input": "sum_negativenum([19, -65, 57, 39, 152, -639, 121, 44, 90, -190])",
          "expected_output": "-894"
        }
      ],
      "broken_test_cases": [
        {
          "input": "sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])",
          "expected_output": "32"
        },
        {
          "input": "sum_negativenum([10, 15, -14, 13, -18, 12, -20])",
          "expected_output": "-51"
        },
        {
          "input": "sum_negativenum([19, -65, 57, 39, 152, -639, 121, 44, 90, -190])",
          "expected_output": "-893"
        }
      ]
    },
    {
      "problem_id": "mbpp_945",
      "description": "Write a function to convert the given tuples into set.",
      "function_name": "tuple_to_set",
      "correct_solution": "def tuple_to_set(t):\r\n  s = set(t)\r\n  return (s) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "tuple_to_set(('x', 'y', 'z'))",
          "expected_output": "{'y', 'x', 'z'}"
        },
        {
          "input": "tuple_to_set(('a', 'b', 'c'))",
          "expected_output": "{'c', 'a', 'b'}"
        },
        {
          "input": "tuple_to_set(('z', 'd', 'e'))",
          "expected_output": "{'d', 'e', 'z'}"
        }
      ],
      "broken_test_cases": [
        {
          "input": "tuple_to_set(('x', 'y', 'z'))",
          "expected_output": "{'x', 'y', 'z', 'a'}"
        },
        {
          "input": "tuple_to_set(('a', 'b', 'c'))",
          "expected_output": "{'a', 'b', 'd'}"
        },
        {
          "input": "tuple_to_set(('z', 'd', 'e'))",
          "expected_output": "{'z', 'd', 'e', 'a'}"
        }
      ]
    },
    {
      "problem_id": "mbpp_659",
      "description": "Write a python function to print duplicants from a list of integers.",
      "function_name": "Repeat",
      "correct_solution": "def Repeat(x): \r\n    _size = len(x) \r\n    repeated = [] \r\n    for i in range(_size): \r\n        k = i + 1\r\n        for j in range(k, _size): \r\n            if x[i] == x[j] and x[i] not in repeated: \r\n                repeated.append(x[i]) \r\n    return repeated ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "Repeat([10, 20, 30, 20, 20, 30, 40, 50, -20, 60, 60, -20, -20])",
          "expected_output": "[20, 30, -20, 60]"
        },
        {
          "input": "Repeat([-1, 1, -1, 8])",
          "expected_output": "[-1]"
        },
        {
          "input": "Repeat([1, 2, 3, 1, 2])",
          "expected_output": "[1, 2]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "Repeat([10, 20, 30, 20, 20, 30, 40, 50, -20, 60, 60, -20, -20])",
          "expected_output": "[20, 30, -20, 60, 10]"
        },
        {
          "input": "Repeat([-1, 1, -1, 8])",
          "expected_output": "[-1, 1]"
        },
        {
          "input": "Repeat([1, 2, 3, 1, 2])",
          "expected_output": "[1, 2, 3]"
        }
      ]
    },
    {
      "problem_id": "mbpp_719",
      "description": "Write a function that matches a string that has an a followed by zero or more b's.",
      "function_name": "text_match",
      "correct_solution": "import re\r\ndef text_match(text):\r\n        patterns = 'ab*?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "text_match('ac')",
          "expected_output": "Found a match!"
        },
        {
          "input": "text_match('dc')",
          "expected_output": "Not matched!"
        },
        {
          "input": "text_match('abba')",
          "expected_output": "Found a match!"
        }
      ],
      "broken_test_cases": [
        {
          "input": "text_match('ac')",
          "expected_output": "Not matched!"
        },
        {
          "input": "text_match('dc')",
          "expected_output": "Found a match!"
        },
        {
          "input": "text_match('abba')",
          "expected_output": "Not matched!"
        }
      ]
    },
    {
      "problem_id": "mbpp_917",
      "description": "Write a function to find the sequences of one upper case letter followed by lower case letters.",
      "function_name": "text_uppercase_lowercase",
      "correct_solution": "import re\r\ndef text_uppercase_lowercase(text):\r\n        patterns = '[A-Z]+[a-z]+$'\r\n        if re.search(patterns, text):\r\n                return 'Found a match!'\r\n        else:\r\n                return ('Not matched!')",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "text_uppercase_lowercase('AaBbGg')",
          "expected_output": "Found a match!"
        },
        {
          "input": "text_uppercase_lowercase('aA')",
          "expected_output": "Not matched!"
        },
        {
          "input": "text_uppercase_lowercase('PYTHON')",
          "expected_output": "Not matched!"
        }
      ],
      "broken_test_cases": [
        {
          "input": "text_uppercase_lowercase('AaBbGg')",
          "expected_output": "Not matched!"
        },
        {
          "input": "text_uppercase_lowercase('aA')",
          "expected_output": "Found a match!"
        },
        {
          "input": "text_uppercase_lowercase('PYTHON')",
          "expected_output": "Found a match!"
        }
      ]
    },
    {
      "problem_id": "mbpp_35",
      "description": "Write a function to find the n-th rectangular number.",
      "function_name": "find_rect_num",
      "correct_solution": "def find_rect_num(n):\r\n  return n*(n + 1) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "find_rect_num(4)",
          "expected_output": "20"
        },
        {
          "input": "find_rect_num(5)",
          "expected_output": "30"
        },
        {
          "input": "find_rect_num(6)",
          "expected_output": "42"
        }
      ],
      "broken_test_cases": [
        {
          "input": "find_rect_num(4)",
          "expected_output": "21"
        },
        {
          "input": "find_rect_num(5)",
          "expected_output": "25"
        },
        {
          "input": "find_rect_num(6)",
          "expected_output": "40"
        }
      ]
    },
    {
      "problem_id": "mbpp_816",
      "description": "Write a function to clear the values of the given tuples.",
      "function_name": "clear_tuple",
      "correct_solution": "def clear_tuple(test_tup):\r\n  temp = list(test_tup)\r\n  temp.clear()\r\n  test_tup = tuple(temp)\r\n  return (test_tup) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "clear_tuple((1, 5, 3, 6, 8))",
          "expected_output": "()"
        },
        {
          "input": "clear_tuple((2, 1, 4, 5, 6))",
          "expected_output": "()"
        },
        {
          "input": "clear_tuple((3, 2, 5, 6, 8))",
          "expected_output": "()"
        }
      ],
      "broken_test_cases": [
        {
          "input": "clear_tuple((1, 5, 3, 6, 8))",
          "expected_output": "(1, 5, 3, 6, 8)"
        },
        {
          "input": "clear_tuple((2, 1, 4, 5, 6))",
          "expected_output": "(2, 1, 4, 5, 6)"
        },
        {
          "input": "clear_tuple((3, 2, 5, 6, 8))",
          "expected_output": "(3, 2, 5, 6, 8)"
        }
      ]
    },
    {
      "problem_id": "mbpp_648",
      "description": "Write a function to exchange the position of every n-th value with (n+1)th value and (n+1)th value with n-th value in a given list.",
      "function_name": "exchange_elements",
      "correct_solution": "from itertools import zip_longest, chain, tee\r\ndef exchange_elements(lst):\r\n    lst1, lst2 = tee(iter(lst), 2)\r\n    return list(chain.from_iterable(zip_longest(lst[1::2], lst[::2])))",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "exchange_elements([0, 1, 2, 3, 4, 5])",
          "expected_output": "[1, 0, 3, 2, 5, 4]"
        },
        {
          "input": "exchange_elements([5, 6, 7, 8, 9, 10])",
          "expected_output": "[6, 5, 8, 7, 10, 9]"
        },
        {
          "input": "exchange_elements([25, 35, 45, 55, 75, 95])",
          "expected_output": "[35, 25, 55, 45, 95, 75]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "exchange_elements([0, 1, 2, 3, 4, 5])",
          "expected_output": "[0, 1, 2, 3, 4, 5]"
        },
        {
          "input": "exchange_elements([5, 6, 7, 8, 9, 10])",
          "expected_output": "[6, 5, 7, 8, 9, 10]"
        },
        {
          "input": "exchange_elements([25, 35, 45, 55, 75, 95])",
          "expected_output": "[35, 25, 45, 55, 75, 95]"
        }
      ]
    },
    {
      "problem_id": "mbpp_144",
      "description": "Write a python function to find the sum of absolute differences in all pairs of the given array.",
      "function_name": "sum_Pairs",
      "correct_solution": "def sum_Pairs(arr,n): \r\n    sum = 0\r\n    for i in range(n - 1,-1,-1): \r\n        sum += i*arr[i] - (n-1-i) * arr[i] \r\n    return sum",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "sum_Pairs([1, 8, 9, 15, 16], 5)",
          "expected_output": "74"
        },
        {
          "input": "sum_Pairs([1, 2, 3, 4], 4)",
          "expected_output": "10"
        },
        {
          "input": "sum_Pairs([1, 2, 3, 4, 5, 7, 9, 11, 14], 9)",
          "expected_output": "188"
        }
      ],
      "broken_test_cases": [
        {
          "input": "sum_Pairs([1, 8, 9, 15, 16], 5)",
          "expected_output": "75"
        },
        {
          "input": "sum_Pairs([1, 2, 3, 4], 4)",
          "expected_output": "11"
        },
        {
          "input": "sum_Pairs([1, 2, 3, 4, 5, 7, 9, 11, 14], 9)",
          "expected_output": "189"
        }
      ]
    },
    {
      "problem_id": "mbpp_759",
      "description": "Write a function to check a decimal with a precision of 2.",
      "function_name": "is_decimal",
      "correct_solution": "def is_decimal(num):\r\n    import re\r\n    dnumre = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\")\r\n    result = dnumre.search(num)\r\n    return bool(result)",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "is_decimal('123.11')",
          "expected_output": "True"
        },
        {
          "input": "is_decimal('e666.86')",
          "expected_output": "False"
        },
        {
          "input": "is_decimal('3.124587')",
          "expected_output": "False"
        }
      ],
      "broken_test_cases": [
        {
          "input": "is_decimal('123.11')",
          "expected_output": "False"
        },
        {
          "input": "is_decimal('e666.86')",
          "expected_output": "True"
        },
        {
          "input": "is_decimal('3.124587')",
          "expected_output": "True"
        }
      ]
    },
    {
      "problem_id": "mbpp_29",
      "description": "Write a python function to find the element occurring odd number of times.",
      "function_name": "get_Odd_Occurrence",
      "correct_solution": "def get_Odd_Occurrence(arr,arr_size):   \r\n    for i in range(0,arr_size): \r\n        count = 0\r\n        for j in range(0,arr_size): \r\n            if arr[i] == arr[j]: \r\n                count+=1     \r\n        if (count % 2 != 0): \r\n            return arr[i]     \r\n    return -1",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "get_Odd_Occurrence([1, 2, 3, 1, 2, 3, 1], 7)",
          "expected_output": "1"
        },
        {
          "input": "get_Odd_Occurrence([1, 2, 3, 2, 3, 1, 3], 7)",
          "expected_output": "3"
        },
        {
          "input": "get_Odd_Occurrence([2, 3, 5, 4, 5, 2, 4, 3, 5, 2, 4, 4, 2], 13)",
          "expected_output": "5"
        }
      ],
      "broken_test_cases": [
        {
          "input": "get_Odd_Occurrence([1, 2, 3, 1, 2, 3, 1], 7)",
          "expected_output": "2"
        },
        {
          "input": "get_Odd_Occurrence([1, 2, 3, 2, 3, 1, 3], 7)",
          "expected_output": "2"
        },
        {
          "input": "get_Odd_Occurrence([2, 3, 5, 4, 5, 2, 4, 3, 5, 2, 4, 4, 2], 13)",
          "expected_output": "4"
        }
      ]
    },
    {
      "problem_id": "mbpp_308",
      "description": "Write a function to find the specified number of largest products from two given lists.",
      "function_name": "large_product",
      "correct_solution": "def large_product(nums1, nums2, N):\r\n    result = sorted([x*y for x in nums1 for y in nums2], reverse=True)[:N]\r\n    return result",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "large_product([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3)",
          "expected_output": "[60, 54, 50]"
        },
        {
          "input": "large_product([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4)",
          "expected_output": "[60, 54, 50, 48]"
        },
        {
          "input": "large_product([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5)",
          "expected_output": "[60, 54, 50, 48, 45]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "large_product([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 3)",
          "expected_output": "[60, 54, 45]"
        },
        {
          "input": "large_product([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 4)",
          "expected_output": "[60, 54, 50, 45]"
        },
        {
          "input": "large_product([1, 2, 3, 4, 5, 6], [3, 6, 8, 9, 10, 6], 5)",
          "expected_output": "[60, 54, 50, 48, 42]"
        }
      ]
    },
    {
      "problem_id": "mbpp_173",
      "description": "Write a function to remove everything except alphanumeric characters from a string.",
      "function_name": "remove_splchar",
      "correct_solution": "import re\r\ndef remove_splchar(text): \r\n pattern = re.compile('[\\W_]+')\r\n return (pattern.sub('', text))",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "remove_splchar('python  @#&^%$*program123')",
          "expected_output": "pythonprogram123"
        },
        {
          "input": "remove_splchar('python %^$@!^&*()  programming24%$^^()    language')",
          "expected_output": "pythonprogramming24language"
        },
        {
          "input": "remove_splchar('python   ^%&^()(+_)(_^&67)                  program')",
          "expected_output": "python67program"
        }
      ],
      "broken_test_cases": [
        {
          "input": "remove_splchar('python  @#&^%$*program123')",
          "expected_output": "python program123"
        },
        {
          "input": "remove_splchar('python %^$@!^&*()  programming24%$^^()    language')",
          "expected_output": "pythonprogramming24language_"
        },
        {
          "input": "remove_splchar('python   ^%&^()(+_)(_^&67)                  program')",
          "expected_output": "python    ^%&^()(+_)(_^&67)                  program"
        }
      ]
    },
    {
      "problem_id": "mbpp_335",
      "description": "Write a function to find the sum of arithmetic progression.",
      "function_name": "ap_sum",
      "correct_solution": "def ap_sum(a,n,d):\r\n  total = (n * (2 * a + (n - 1) * d)) / 2\r\n  return total",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "ap_sum(1, 5, 2)",
          "expected_output": "25"
        },
        {
          "input": "ap_sum(2, 6, 4)",
          "expected_output": "72"
        },
        {
          "input": "ap_sum(1, 4, 5)",
          "expected_output": "34"
        }
      ],
      "broken_test_cases": [
        {
          "input": "ap_sum(1, 5, 2)",
          "expected_output": "26"
        },
        {
          "input": "ap_sum(2, 6, 4)",
          "expected_output": "70"
        },
        {
          "input": "ap_sum(1, 4, 5)",
          "expected_output": "35"
        }
      ]
    },
    {
      "problem_id": "mbpp_791",
      "description": "Write a function to remove the nested record from the given tuple.",
      "function_name": "remove_nested",
      "correct_solution": "def remove_nested(test_tup):\r\n  res = tuple()\r\n  for count, ele in enumerate(test_tup):\r\n    if not isinstance(ele, tuple):\r\n      res = res + (ele, )\r\n  return (res) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "remove_nested((1, 5, 7, (4, 6), 10))",
          "expected_output": "(1, 5, 7, 10)"
        },
        {
          "input": "remove_nested((2, 6, 8, (5, 7), 11))",
          "expected_output": "(2, 6, 8, 11)"
        },
        {
          "input": "remove_nested((3, 7, 9, (6, 8), 12))",
          "expected_output": "(3, 7, 9, 12)"
        }
      ],
      "broken_test_cases": [
        {
          "input": "remove_nested((1, 5, 7, (4, 6), 10))",
          "expected_output": "(1, 5, 7, (4, 6), 10)"
        },
        {
          "input": "remove_nested((2, 6, 8, (5, 7), 11))",
          "expected_output": "(2, 6, 8, 5, 7, 11)"
        },
        {
          "input": "remove_nested((3, 7, 9, (6, 8), 12))",
          "expected_output": "(3, 7, 9, (6, 8), 12)"
        }
      ]
    },
    {
      "problem_id": "mbpp_849",
      "description": "Write a python function to find sum of all prime divisors of a given number.",
      "function_name": "Sum",
      "correct_solution": "def Sum(N): \r\n    SumOfPrimeDivisors = [0]*(N + 1)   \r\n    for i in range(2,N + 1) : \r\n        if (SumOfPrimeDivisors[i] == 0) : \r\n            for j in range(i,N + 1,i) : \r\n                SumOfPrimeDivisors[j] += i           \r\n    return SumOfPrimeDivisors[N] ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "Sum(60)",
          "expected_output": "10"
        },
        {
          "input": "Sum(39)",
          "expected_output": "16"
        },
        {
          "input": "Sum(40)",
          "expected_output": "7"
        }
      ],
      "broken_test_cases": [
        {
          "input": "Sum(60)",
          "expected_output": "20"
        },
        {
          "input": "Sum(39)",
          "expected_output": "17"
        },
        {
          "input": "Sum(40)",
          "expected_output": "8"
        }
      ]
    },
    {
      "problem_id": "mbpp_447",
      "description": "Write a function to find cubes of individual elements in a list using lambda function.",
      "function_name": "cube_nums",
      "correct_solution": "def cube_nums(nums):\r\n cube_nums = list(map(lambda x: x ** 3, nums))\r\n return cube_nums",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
          "expected_output": "[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]"
        },
        {
          "input": "cube_nums([10, 20, 30])",
          "expected_output": "[1000, 8000, 27000]"
        },
        {
          "input": "cube_nums([12, 15])",
          "expected_output": "[1728, 3375]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
          "expected_output": "[1, 8, 27, 64, 125, 216, 343, 512, 729, 2000]"
        },
        {
          "input": "cube_nums([10, 20, 30])",
          "expected_output": "[1000, 8000, 27001]"
        },
        {
          "input": "cube_nums([12, 15])",
          "expected_output": "[12, 15]"
        }
      ]
    },
    {
      "problem_id": "mbpp_146",
      "description": "Write a function to find the ascii value of total characters in a string.",
      "function_name": "ascii_value_string",
      "correct_solution": "def ascii_value_string(str1):\r\n  for i in range(len(str1)):\r\n   return ord(str1[i])",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "ascii_value_string('python')",
          "expected_output": "112"
        },
        {
          "input": "ascii_value_string('Program')",
          "expected_output": "80"
        },
        {
          "input": "ascii_value_string('Language')",
          "expected_output": "76"
        }
      ],
      "broken_test_cases": [
        {
          "input": "ascii_value_string('python')",
          "expected_output": "111"
        },
        {
          "input": "ascii_value_string('Program')",
          "expected_output": "81"
        },
        {
          "input": "ascii_value_string('Language')",
          "expected_output": "100"
        }
      ]
    },
    {
      "problem_id": "mbpp_731",
      "description": "Write a function to find the lateral surface area of a cone.",
      "function_name": "lateralsurface_cone",
      "correct_solution": "import math\r\ndef lateralsurface_cone(r,h):\r\n  l = math.sqrt(r * r + h * h)\r\n  LSA = math.pi * r  * l\r\n  return LSA",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "lateralsurface_cone(5, 12)",
          "expected_output": "204.20352248333654"
        },
        {
          "input": "lateralsurface_cone(10, 15)",
          "expected_output": "566.3586699569488"
        },
        {
          "input": "lateralsurface_cone(19, 17)",
          "expected_output": "1521.8090132193388"
        }
      ],
      "broken_test_cases": [
        {
          "input": "lateralsurface_cone(5, 12)",
          "expected_output": "100.0"
        },
        {
          "input": "lateralsurface_cone(10, 15)",
          "expected_output": "100"
        },
        {
          "input": "lateralsurface_cone(19, 17)",
          "expected_output": "2000.0"
        }
      ]
    },
    {
      "problem_id": "mbpp_329",
      "description": "Write a python function to count negative numbers in a list.",
      "function_name": "neg_count",
      "correct_solution": "def neg_count(list):\r\n  neg_count= 0\r\n  for num in list: \r\n    if num <= 0: \r\n      neg_count += 1\r\n  return neg_count ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "neg_count([-1, -2, 3, -4, -5])",
          "expected_output": "4"
        },
        {
          "input": "neg_count([1, 2, 3])",
          "expected_output": "0"
        },
        {
          "input": "neg_count([1, 2, -3, -10, 20])",
          "expected_output": "2"
        }
      ],
      "broken_test_cases": [
        {
          "input": "neg_count([-1, -2, 3, -4, -5])",
          "expected_output": "3"
        },
        {
          "input": "neg_count([1, 2, 3])",
          "expected_output": "3"
        },
        {
          "input": "neg_count([1, 2, -3, -10, 20])",
          "expected_output": "3"
        }
      ]
    },
    {
      "problem_id": "mbpp_70",
      "description": "Write a function to find whether all the given tuples have equal length or not.",
      "function_name": "get_equal",
      "correct_solution": "def find_equal_tuple(Input, k):\r\n  flag = 1\r\n  for tuple in Input:\r\n    if len(tuple) != k:\r\n      flag = 0\r\n      break\r\n  return flag\r\ndef get_equal(Input, k):\r\n  if find_equal_tuple(Input, k) == 1:\r\n    return (\"All tuples have same length\")\r\n  else:\r\n    return (\"All tuples do not have same length\")",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "get_equal([(11, 22, 33), (44, 55, 66)], 3)",
          "expected_output": "All tuples have same length"
        },
        {
          "input": "get_equal([(1, 2, 3), (4, 5, 6, 7)], 3)",
          "expected_output": "All tuples do not have same length"
        },
        {
          "input": "get_equal([(1, 2), (3, 4)], 2)",
          "expected_output": "All tuples have same length"
        }
      ],
      "broken_test_cases": [
        {
          "input": "get_equal([(11, 22, 33), (44, 55, 66)], 3)",
          "expected_output": "All tuples do not have same length"
        },
        {
          "input": "get_equal([(1, 2, 3), (4, 5, 6, 7)], 3)",
          "expected_output": "All tuples have same length"
        },
        {
          "input": "get_equal([(1, 2), (3, 4)], 2)",
          "expected_output": "All tuples do not have same length"
        }
      ]
    },
    {
      "problem_id": "mbpp_752",
      "description": "Write a function to find the nth jacobsthal number.",
      "function_name": "jacobsthal_num",
      "correct_solution": "def jacobsthal_num(n): \r\n\tdp = [0] * (n + 1) \r\n\tdp[0] = 0\r\n\tdp[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tdp[i] = dp[i - 1] + 2 * dp[i - 2] \r\n\treturn dp[n]",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "jacobsthal_num(5)",
          "expected_output": "11"
        },
        {
          "input": "jacobsthal_num(2)",
          "expected_output": "1"
        },
        {
          "input": "jacobsthal_num(4)",
          "expected_output": "5"
        }
      ],
      "broken_test_cases": [
        {
          "input": "jacobsthal_num(5)",
          "expected_output": "10"
        },
        {
          "input": "jacobsthal_num(2)",
          "expected_output": "2"
        },
        {
          "input": "jacobsthal_num(4)",
          "expected_output": "6"
        }
      ]
    },
    {
      "problem_id": "mbpp_15",
      "description": "Write a function to split a string at lowercase letters.",
      "function_name": "split_lowerstring",
      "correct_solution": "import re\r\ndef split_lowerstring(text):\r\n return (re.findall('[a-z][^a-z]*', text))",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "split_lowerstring('AbCd')",
          "expected_output": "['bC', 'd']"
        },
        {
          "input": "split_lowerstring('Python')",
          "expected_output": "['y', 't', 'h', 'o', 'n']"
        },
        {
          "input": "split_lowerstring('Programming')",
          "expected_output": "['r', 'o', 'g', 'r', 'a', 'm', 'm', 'i', 'n', 'g']"
        }
      ],
      "broken_test_cases": [
        {
          "input": "split_lowerstring('AbCd')",
          "expected_output": "['Ab', 'Cd']"
        },
        {
          "input": "split_lowerstring('Python')",
          "expected_output": "['Py', 'th', 'on']"
        },
        {
          "input": "split_lowerstring('Programming')",
          "expected_output": "['Program', 'ming']"
        }
      ]
    },
    {
      "problem_id": "mbpp_536",
      "description": "Write a function to select the nth items of a list.",
      "function_name": "nth_items",
      "correct_solution": "def nth_items(list,n):\r\n return list[::n]",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "nth_items([1, 2, 3, 4, 5, 6, 7, 8, 9], 2)",
          "expected_output": "[1, 3, 5, 7, 9]"
        },
        {
          "input": "nth_items([10, 15, 19, 17, 16, 18], 3)",
          "expected_output": "[10, 17]"
        },
        {
          "input": "nth_items([14, 16, 19, 15, 17], 4)",
          "expected_output": "[14, 17]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "nth_items([1, 2, 3, 4, 5, 6, 7, 8, 9], 2)",
          "expected_output": "[2, 4, 6, 8]"
        },
        {
          "input": "nth_items([10, 15, 19, 17, 16, 18], 3)",
          "expected_output": "[10, 16]"
        },
        {
          "input": "nth_items([14, 16, 19, 15, 17], 4)",
          "expected_output": "[14, 16, 19, 15]"
        }
      ]
    },
    {
      "problem_id": "mbpp_864",
      "description": "Write a function to find palindromes in a given list of strings using lambda function.",
      "function_name": "palindrome_lambda",
      "correct_solution": "def palindrome_lambda(texts):\r\n  result = list(filter(lambda x: (x == \"\".join(reversed(x))), texts))\r\n  return result",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "palindrome_lambda(['php', 'res', 'Python', 'abcd', 'Java', 'aaa'])",
          "expected_output": "['php', 'aaa']"
        },
        {
          "input": "palindrome_lambda(['abcd', 'Python', 'abba', 'aba'])",
          "expected_output": "['abba', 'aba']"
        },
        {
          "input": "palindrome_lambda(['abcd', 'abbccbba', 'abba', 'aba'])",
          "expected_output": "['abbccbba', 'abba', 'aba']"
        }
      ],
      "broken_test_cases": [
        {
          "input": "palindrome_lambda(['php', 'res', 'Python', 'abcd', 'Java', 'aaa'])",
          "expected_output": "['php', 'res']"
        },
        {
          "input": "palindrome_lambda(['abcd', 'Python', 'abba', 'aba'])",
          "expected_output": "['abcd', 'Python', 'abba', 'aba']"
        },
        {
          "input": "palindrome_lambda(['abcd', 'abbccbba', 'abba', 'aba'])",
          "expected_output": "['abcd', 'abbccbba', 'abba']"
        }
      ]
    },
    {
      "problem_id": "mbpp_424",
      "description": "Write a function to extract only the rear index element of each string in the given tuple.",
      "function_name": "extract_rear",
      "correct_solution": "def extract_rear(test_tuple):\r\n  res = list(sub[len(sub) - 1] for sub in test_tuple)\r\n  return (res) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "extract_rear(('Mers', 'for', 'Vers'))",
          "expected_output": "['s', 'r', 's']"
        },
        {
          "input": "extract_rear(('Avenge', 'for', 'People'))",
          "expected_output": "['e', 'r', 'e']"
        },
        {
          "input": "extract_rear(('Gotta', 'get', 'go'))",
          "expected_output": "['a', 't', 'o']"
        }
      ],
      "broken_test_cases": [
        {
          "input": "extract_rear(('Mers', 'for', 'Vers'))",
          "expected_output": "['s', 'r', 'x']"
        },
        {
          "input": "extract_rear(('Avenge', 'for', 'People'))",
          "expected_output": "['e', 'r', 'p']"
        },
        {
          "input": "extract_rear(('Gotta', 'get', 'go'))",
          "expected_output": "['g', 't', 'o']"
        }
      ]
    },
    {
      "problem_id": "mbpp_416",
      "description": "Write a function to find the maximum sum we can make by dividing number in three parts recursively and summing them up together for the given number.",
      "function_name": "breakSum",
      "correct_solution": "MAX = 1000000\r\ndef breakSum(n): \r\n\tdp = [0]*(n+1) \r\n\tdp[0] = 0\r\n\tdp[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tdp[i] = max(dp[int(i/2)] + dp[int(i/3)] + dp[int(i/4)], i); \r\n\treturn dp[n]",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "breakSum(12)",
          "expected_output": "13"
        },
        {
          "input": "breakSum(24)",
          "expected_output": "27"
        },
        {
          "input": "breakSum(23)",
          "expected_output": "23"
        }
      ],
      "broken_test_cases": [
        {
          "input": "breakSum(12)",
          "expected_output": "10"
        },
        {
          "input": "breakSum(24)",
          "expected_output": "26"
        },
        {
          "input": "breakSum(23)",
          "expected_output": "24"
        }
      ]
    },
    {
      "problem_id": "mbpp_637",
      "description": "Write a function to check whether the given amount has no profit and no loss",
      "function_name": "noprofit_noloss",
      "correct_solution": "def noprofit_noloss(actual_cost,sale_amount): \r\n  if(sale_amount == actual_cost):\r\n    return True\r\n  else:\r\n    return False",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "noprofit_noloss(1500, 1200)",
          "expected_output": "False"
        },
        {
          "input": "noprofit_noloss(100, 100)",
          "expected_output": "True"
        },
        {
          "input": "noprofit_noloss(2000, 5000)",
          "expected_output": "False"
        }
      ],
      "broken_test_cases": [
        {
          "input": "noprofit_noloss(1500, 1200)",
          "expected_output": "True"
        },
        {
          "input": "noprofit_noloss(100, 100)",
          "expected_output": "False"
        },
        {
          "input": "noprofit_noloss(2000, 2000)",
          "expected_output": "False"
        }
      ]
    },
    {
      "problem_id": "mbpp_97",
      "description": "Write a function to find frequency count of list of lists.",
      "function_name": "frequency_lists",
      "correct_solution": "def frequency_lists(list1):\r\n    list1 = [item for sublist in list1 for item in sublist]\r\n    dic_data = {}\r\n    for num in list1:\r\n        if num in dic_data.keys():\r\n            dic_data[num] += 1\r\n        else:\r\n            key = num\r\n            value = 1\r\n            dic_data[key] = value\r\n    return dic_data\r\n",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "frequency_lists([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])",
          "expected_output": "{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1}"
        }
      ],
      "broken_test_cases": [
        {
          "input": "frequency_lists([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]])",
          "expected_output": "{1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1, 13: 1}"
        }
      ]
    },
    {
      "problem_id": "mbpp_37",
      "description": "Write a function to sort a given mixed list of integers and strings.",
      "function_name": "sort_mixed_list",
      "correct_solution": "def sort_mixed_list(mixed_list):\r\n    int_part = sorted([i for i in mixed_list if type(i) is int])\r\n    str_part = sorted([i for i in mixed_list if type(i) is str])\r\n    return int_part + str_part",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "sort_mixed_list([19, 'red', 12, 'green', 'blue', 10, 'white', 'green', 1])",
          "expected_output": "[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']"
        },
        {
          "input": "sort_mixed_list([19, 'red', 12, 'green', 'blue', 10, 'white', 'green', 1])",
          "expected_output": "[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']"
        },
        {
          "input": "sort_mixed_list([19, 'red', 12, 'green', 'blue', 10, 'white', 'green', 1])",
          "expected_output": "[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']"
        }
      ],
      "broken_test_cases": [
        {
          "input": "sort_mixed_list([19, 'red', 12, 'green', 'blue', 10, 'white', 'green', 1])",
          "expected_output": "[19, 12, 10, 1, 'blue', 'green', 'green', 'red', 'white']"
        },
        {
          "input": "sort_mixed_list([19, 'red', 12, 'green', 'blue', 10, 'white', 'green', 1])",
          "expected_output": "[19, 12, 10, 1, 'blue', 'green', 'green', 'red', 'white']"
        },
        {
          "input": "sort_mixed_list([19, 'red', 12, 'green', 'blue', 10, 'white', 'green', 1])",
          "expected_output": "[19, 12, 10, 1, 'blue', 'green', 'green', 'red', 'white']"
        }
      ]
    },
    {
      "problem_id": "mbpp_183",
      "description": "Write a function to count all the distinct pairs having a difference of k in any array.",
      "function_name": "count_pairs",
      "correct_solution": "def count_pairs(arr, n, k):\r\n  count=0;\r\n  for i in range(0,n):\r\n    for j in range(i+1, n):\r\n      if arr[i] - arr[j] == k or arr[j] - arr[i] == k:\r\n        count += 1\r\n  return count",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "count_pairs([1, 5, 3, 4, 2], 5, 3)",
          "expected_output": "2"
        },
        {
          "input": "count_pairs([8, 12, 16, 4, 0, 20], 6, 4)",
          "expected_output": "5"
        },
        {
          "input": "count_pairs([2, 4, 1, 3, 4], 5, 2)",
          "expected_output": "3"
        }
      ],
      "broken_test_cases": [
        {
          "input": "count_pairs([1, 5, 3, 4, 2], 5, 3)",
          "expected_output": "3"
        },
        {
          "input": "count_pairs([8, 12, 16, 4, 0, 20], 6, 4)",
          "expected_output": "4"
        },
        {
          "input": "count_pairs([2, 4, 1, 3, 4], 5, 2)",
          "expected_output": "2"
        }
      ]
    },
    {
      "problem_id": "mbpp_420",
      "description": "Write a python function to find the cube sum of first n even natural numbers.",
      "function_name": "cube_Sum",
      "correct_solution": "def cube_Sum(n): \r\n    sum = 0\r\n    for i in range(1,n + 1): \r\n        sum += (2*i)*(2*i)*(2*i) \r\n    return sum",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "cube_Sum(2)",
          "expected_output": "72"
        },
        {
          "input": "cube_Sum(3)",
          "expected_output": "288"
        },
        {
          "input": "cube_Sum(4)",
          "expected_output": "800"
        }
      ],
      "broken_test_cases": [
        {
          "input": "cube_Sum(2)",
          "expected_output": "70"
        },
        {
          "input": "cube_Sum(3)",
          "expected_output": "300"
        },
        {
          "input": "cube_Sum(4)",
          "expected_output": "799"
        }
      ]
    },
    {
      "problem_id": "mbpp_313",
      "description": "Write a python function to print positive numbers in a list.",
      "function_name": "pos_nos",
      "correct_solution": "def pos_nos(list1):\r\n  for num in list1: \r\n    if num >= 0: \r\n       return num ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "pos_nos([-2, -3, 1])",
          "expected_output": "1"
        }
      ],
      "broken_test_cases": [
        {
          "input": "pos_nos([-2, -3, 1])",
          "expected_output": "-2"
        }
      ]
    },
    {
      "problem_id": "mbpp_124",
      "description": "Write a function to get the angle of a complex number.",
      "function_name": "angle_complex",
      "correct_solution": "import cmath\r\ndef angle_complex(a,b):\r\n  cn=complex(a,b)\r\n  angle=cmath.phase(a+b)\r\n  return angle",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "angle_complex(0, 1j)",
          "expected_output": "1.5707963267948966"
        },
        {
          "input": "angle_complex(2, 1j)",
          "expected_output": "0.4636476090008061"
        },
        {
          "input": "angle_complex(0, 2j)",
          "expected_output": "1.5707963267948966"
        }
      ],
      "broken_test_cases": [
        {
          "input": "angle_complex(0, 1j)",
          "expected_output": "0.7853981633974483"
        },
        {
          "input": "angle_complex(2, 1j)",
          "expected_output": "0.9272952180016122"
        },
        {
          "input": "angle_complex(0, 2j)",
          "expected_output": "3.14159265358979"
        }
      ]
    },
    {
      "problem_id": "mbpp_651",
      "description": "Write a function to check if one tuple is a subset of another tuple.",
      "function_name": "check_subset",
      "correct_solution": "def check_subset(test_tup1, test_tup2):\r\n  res = set(test_tup2).issubset(test_tup1)\r\n  return (res) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "check_subset((10, 4, 5, 6), (5, 10))",
          "expected_output": "True"
        },
        {
          "input": "check_subset((1, 2, 3, 4), (5, 6))",
          "expected_output": "False"
        },
        {
          "input": "check_subset((7, 8, 9, 10), (10, 8))",
          "expected_output": "True"
        }
      ],
      "broken_test_cases": [
        {
          "input": "check_subset((10, 4, 5, 6), (5, 10))",
          "expected_output": "False"
        },
        {
          "input": "check_subset((1, 2, 3, 4), (5, 6))",
          "expected_output": "True"
        },
        {
          "input": "check_subset((7, 8, 9, 10), (10, 8))",
          "expected_output": "False"
        }
      ]
    },
    {
      "problem_id": "mbpp_941",
      "description": "Write a function to count the elements in a list until an element is a tuple.",
      "function_name": "count_elim",
      "correct_solution": "def count_elim(num):\r\n  count_elim = 0\r\n  for n in num:\r\n    if isinstance(n, tuple):\r\n        break\r\n    count_elim += 1\r\n  return count_elim",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "count_elim([10, 20, 30, (10, 20), 40])",
          "expected_output": "3"
        },
        {
          "input": "count_elim([10, (20, 30), (10, 20), 40])",
          "expected_output": "1"
        },
        {
          "input": "count_elim([(10, (20, 30, (10, 20), 40))])",
          "expected_output": "0"
        }
      ],
      "broken_test_cases": [
        {
          "input": "count_elim([10, 20, 30, (10, 20), 40])",
          "expected_output": "4"
        },
        {
          "input": "count_elim([10, (20, 30), (10, 20), 40])",
          "expected_output": "2"
        },
        {
          "input": "count_elim([(10, (20, 30, (10, 20), 40))])",
          "expected_output": "1"
        }
      ]
    },
    {
      "problem_id": "mbpp_440",
      "description": "Write a function to find all adverbs and their positions in a given sentence.",
      "function_name": "find_adverb_position",
      "correct_solution": "import re\r\ndef find_adverb_position(text):\r\n for m in re.finditer(r\"\\w+ly\", text):\r\n    return (m.start(), m.end(), m.group(0))",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "find_adverb_position('clearly!! we can see the sky')",
          "expected_output": "(0, 7, 'clearly')"
        },
        {
          "input": "find_adverb_position('seriously!! there are many roses')",
          "expected_output": "(0, 9, 'seriously')"
        },
        {
          "input": "find_adverb_position('unfortunately!! sita is going to home')",
          "expected_output": "(0, 13, 'unfortunately')"
        }
      ],
      "broken_test_cases": [
        {
          "input": "find_adverb_position('clearly!! we can see the sky')",
          "expected_output": "(1, 7, 'clearly')"
        },
        {
          "input": "find_adverb_position('seriously!! there are many roses')",
          "expected_output": "(0, 8, 'seriously')"
        },
        {
          "input": "find_adverb_position('unfortunately!! sita is going to home')",
          "expected_output": "(0, 12, 'unfortunately')"
        }
      ]
    },
    {
      "problem_id": "mbpp_284",
      "description": "Write a function to check whether all items of a list are equal to a given string.",
      "function_name": "check_element",
      "correct_solution": "def check_element(list,element):\r\n  check_element=all(v== element for v in list)\r\n  return check_element",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "check_element(['green', 'orange', 'black', 'white'], 'blue')",
          "expected_output": "False"
        },
        {
          "input": "check_element([1, 2, 3, 4], 7)",
          "expected_output": "False"
        },
        {
          "input": "check_element(['green', 'green', 'green', 'green'], 'green')",
          "expected_output": "True"
        }
      ],
      "broken_test_cases": [
        {
          "input": "check_element(['green', 'orange', 'black', 'white'], 'blue')",
          "expected_output": "True"
        },
        {
          "input": "check_element([1, 2, 3, 4], 7)",
          "expected_output": "True"
        },
        {
          "input": "check_element(['green', 'green', 'green', 'green'], 'green')",
          "expected_output": "False"
        }
      ]
    },
    {
      "problem_id": "mbpp_452",
      "description": "Write a function that gives loss amount if the given amount has loss else return none.",
      "function_name": "loss_amount",
      "correct_solution": "def loss_amount(actual_cost,sale_amount): \r\n  if(sale_amount > actual_cost):\r\n    amount = sale_amount - actual_cost\r\n    return amount\r\n  else:\r\n    return None",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "loss_amount(1500, 1200)",
          "expected_output": "None"
        },
        {
          "input": "loss_amount(100, 200)",
          "expected_output": "100"
        },
        {
          "input": "loss_amount(2000, 5000)",
          "expected_output": "3000"
        }
      ],
      "broken_test_cases": [
        {
          "input": "loss_amount(1500, 1200)",
          "expected_output": "100"
        },
        {
          "input": "loss_amount(100, 200)",
          "expected_output": "99"
        },
        {
          "input": "loss_amount(2000, 5000)",
          "expected_output": "2000"
        }
      ]
    },
    {
      "problem_id": "mbpp_809",
      "description": "Write a function to check if each element of second tuple is smaller than its corresponding index in first tuple.",
      "function_name": "check_smaller",
      "correct_solution": "def check_smaller(test_tup1, test_tup2):\r\n  res = all(x > y for x, y in zip(test_tup1, test_tup2))\r\n  return (res) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "check_smaller((1, 2, 3), (2, 3, 4))",
          "expected_output": "False"
        },
        {
          "input": "check_smaller((4, 5, 6), (3, 4, 5))",
          "expected_output": "True"
        },
        {
          "input": "check_smaller((11, 12, 13), (10, 11, 12))",
          "expected_output": "True"
        }
      ],
      "broken_test_cases": [
        {
          "input": "check_smaller((1, 2, 3), (2, 3, 4))",
          "expected_output": "True"
        },
        {
          "input": "check_smaller((4, 5, 6), (3, 4, 5))",
          "expected_output": "False"
        },
        {
          "input": "check_smaller((11, 12, 13), (10, 11, 12))",
          "expected_output": "False"
        }
      ]
    },
    {
      "problem_id": "mbpp_479",
      "description": "Write a python function to find the first digit of a given number.",
      "function_name": "first_Digit",
      "correct_solution": "def first_Digit(n) :  \r\n    while n >= 10:  \r\n        n = n / 10; \r\n    return int(n) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "first_Digit(123)",
          "expected_output": "1"
        },
        {
          "input": "first_Digit(456)",
          "expected_output": "4"
        },
        {
          "input": "first_Digit(12)",
          "expected_output": "1"
        }
      ],
      "broken_test_cases": [
        {
          "input": "first_Digit(123)",
          "expected_output": "2"
        },
        {
          "input": "first_Digit(456)",
          "expected_output": "5"
        },
        {
          "input": "first_Digit(12)",
          "expected_output": "2"
        }
      ]
    },
    {
      "problem_id": "mbpp_521",
      "description": "Write a function to print check if the triangle is scalene or not.",
      "function_name": "check_isosceles",
      "correct_solution": "def check_isosceles(x,y,z):\r\n  if x!=y & y!=z & z!=x:\r\n\t   return True\r\n  else:\r\n     return False",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "check_isosceles(6, 8, 12)",
          "expected_output": "True"
        },
        {
          "input": "check_isosceles(6, 6, 12)",
          "expected_output": "False"
        },
        {
          "input": "check_isosceles(6, 15, 20)",
          "expected_output": "True"
        }
      ],
      "broken_test_cases": [
        {
          "input": "check_isosceles(6, 8, 12)",
          "expected_output": "False"
        },
        {
          "input": "check_isosceles(6, 6, 12)",
          "expected_output": "True"
        },
        {
          "input": "check_isosceles(6, 15, 20)",
          "expected_output": "False"
        }
      ]
    },
    {
      "problem_id": "mbpp_582",
      "description": "Write a function to check if a dictionary is empty or not.",
      "function_name": "my_dict",
      "correct_solution": "def my_dict(dict1):\r\n  if bool(dict1):\r\n     return False\r\n  else:\r\n     return True",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "my_dict({10})",
          "expected_output": "False"
        },
        {
          "input": "my_dict({11})",
          "expected_output": "False"
        },
        {
          "input": "my_dict({})",
          "expected_output": "True"
        }
      ],
      "broken_test_cases": [
        {
          "input": "my_dict({10})",
          "expected_output": "True"
        },
        {
          "input": "my_dict({11})",
          "expected_output": "True"
        },
        {
          "input": "my_dict({})",
          "expected_output": "False"
        }
      ]
    },
    {
      "problem_id": "mbpp_638",
      "description": "Write a function to calculate wind chill index.",
      "function_name": "wind_chill",
      "correct_solution": "import math\r\ndef wind_chill(v,t):\r\n windchill = 13.12 + 0.6215*t -  11.37*math.pow(v, 0.16) + 0.3965*t*math.pow(v, 0.16)\r\n return int(round(windchill, 0))",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "wind_chill(120, 35)",
          "expected_output": "40"
        },
        {
          "input": "wind_chill(40, 70)",
          "expected_output": "86"
        },
        {
          "input": "wind_chill(10, 100)",
          "expected_output": "116"
        }
      ],
      "broken_test_cases": [
        {
          "input": "wind_chill(120, 35)",
          "expected_output": "50"
        },
        {
          "input": "wind_chill(40, 70)",
          "expected_output": "85"
        },
        {
          "input": "wind_chill(10, 100)",
          "expected_output": "100"
        }
      ]
    },
    {
      "problem_id": "mbpp_783",
      "description": "Write a function to convert rgb color to hsv color.",
      "function_name": "rgb_to_hsv",
      "correct_solution": "def rgb_to_hsv(r, g, b):\r\n    r, g, b = r/255.0, g/255.0, b/255.0\r\n    mx = max(r, g, b)\r\n    mn = min(r, g, b)\r\n    df = mx-mn\r\n    if mx == mn:\r\n        h = 0\r\n    elif mx == r:\r\n        h = (60 * ((g-b)/df) + 360) % 360\r\n    elif mx == g:\r\n        h = (60 * ((b-r)/df) + 120) % 360\r\n    elif mx == b:\r\n        h = (60 * ((r-g)/df) + 240) % 360\r\n    if mx == 0:\r\n        s = 0\r\n    else:\r\n        s = (df/mx)*100\r\n    v = mx*100\r\n    return h, s, v",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "rgb_to_hsv(255, 255, 255)",
          "expected_output": "(0, 0.0, 100.0)"
        },
        {
          "input": "rgb_to_hsv(0, 215, 0)",
          "expected_output": "(120.0, 100.0, 84.31372549019608)"
        },
        {
          "input": "rgb_to_hsv(10, 215, 110)",
          "expected_output": "(149.26829268292684, 95.34883720930233, 84.31372549019608)"
        }
      ],
      "broken_test_cases": [
        {
          "input": "rgb_to_hsv(255, 255, 255)",
          "expected_output": "(0, 0.0, 200.0)"
        },
        {
          "input": "rgb_to_hsv(0, 215, 0)",
          "expected_output": "(0.0, 100.0, 84.31372549019608)"
        },
        {
          "input": "rgb_to_hsv(10, 215, 110)",
          "expected_output": "(149.26829268292684, 95.34883720930233, 83.0)"
        }
      ]
    },
    {
      "problem_id": "mbpp_104",
      "description": "Write a function to sort each sublist of strings in a given list of lists using lambda function.",
      "function_name": "sort_sublists",
      "correct_solution": "def sort_sublists(input_list):\r\n    result = [sorted(x, key = lambda x:x[0]) for x in input_list] \r\n    return result\r",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "sort_sublists((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']))",
          "expected_output": "[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]"
        },
        {
          "input": "sort_sublists(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown']))",
          "expected_output": "[[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]"
        },
        {
          "input": "sort_sublists((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze']))",
          "expected_output": "[['gold', 'zilver'], ['aluminium', 'magnesium'], ['bronze', 'steel']]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "sort_sublists((['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']))",
          "expected_output": "[['orange', 'green'], ['white', 'black'], ['orange', 'black', 'white']]"
        },
        {
          "input": "sort_sublists(([' red ', 'green'], ['blue ', ' black'], [' orange', 'brown']))",
          "expected_output": "[[' green', ' red '], [' black', 'blue '], [' brown', ' orange']]"
        },
        {
          "input": "sort_sublists((['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze']))",
          "expected_output": "[['zilver', 'gold'], ['magnesium', 'aluminium'], ['steel', 'bronze']]"
        }
      ]
    },
    {
      "problem_id": "mbpp_704",
      "description": "Write a function to calculate the harmonic sum of n-1.",
      "function_name": "harmonic_sum",
      "correct_solution": "def harmonic_sum(n):\r\n  if n < 2:\r\n    return 1\r\n  else:\r\n    return 1 / n + (harmonic_sum(n - 1))",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "harmonic_sum(10)",
          "expected_output": "2.9289682539682538"
        },
        {
          "input": "harmonic_sum(4)",
          "expected_output": "2.083333333333333"
        }
      ],
      "broken_test_cases": [
        {
          "input": "harmonic_sum(10)",
          "expected_output": "3.0"
        },
        {
          "input": "harmonic_sum(4)",
          "expected_output": "2.0"
        }
      ]
    },
    {
      "problem_id": "mbpp_632",
      "description": "Write a python function to move all zeroes to the end of the given list.",
      "function_name": "move_zero",
      "correct_solution": "def move_zero(num_list):\r\n    a = [0 for i in range(num_list.count(0))]\r\n    x = [ i for i in num_list if i != 0]\r\n    x.extend(a)\r\n    return (x)",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "move_zero([1, 0, 2, 0, 3, 4])",
          "expected_output": "[1, 2, 3, 4, 0, 0]"
        },
        {
          "input": "move_zero([2, 3, 2, 0, 0, 4, 0, 5, 0])",
          "expected_output": "[2, 3, 2, 4, 5, 0, 0, 0, 0]"
        },
        {
          "input": "move_zero([0, 1, 0, 1, 1])",
          "expected_output": "[1, 1, 1, 0, 0]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "move_zero([1, 0, 2, 0, 3, 4])",
          "expected_output": "[1, 2, 3, 4, 0, 0, 0]"
        },
        {
          "input": "move_zero([2, 3, 2, 0, 0, 4, 0, 5, 0])",
          "expected_output": "[2, 3, 2, 4, 5, 0, 0, 0, 0, 0]"
        },
        {
          "input": "move_zero([0, 1, 0, 1, 1])",
          "expected_output": "[1, 1, 1, 0, 0, 0]"
        }
      ]
    },
    {
      "problem_id": "mbpp_508",
      "description": "Write a function to check if the common elements between two given lists are in the same order or not.",
      "function_name": "same_order",
      "correct_solution": "def same_order(l1, l2):\r\n    common_elements = set(l1) & set(l2)\r\n    l1 = [e for e in l1 if e in common_elements]\r\n    l2 = [e for e in l2 if e in common_elements]\r\n    return l1 == l2",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "same_order(['red', 'green', 'black', 'orange'], ['red', 'pink', 'green', 'white', 'black'])",
          "expected_output": "True"
        },
        {
          "input": "same_order(['red', 'pink', 'green', 'white', 'black'], ['white', 'orange', 'pink', 'black'])",
          "expected_output": "False"
        },
        {
          "input": "same_order(['red', 'green', 'black', 'orange'], ['red', 'pink', 'green', 'white', 'black'])",
          "expected_output": "True"
        }
      ],
      "broken_test_cases": [
        {
          "input": "same_order(['red', 'green', 'black', 'orange'], ['red', 'pink', 'green', 'white', 'black'])",
          "expected_output": "False"
        },
        {
          "input": "same_order(['red', 'pink', 'green', 'white', 'black'], ['white', 'orange', 'pink', 'black'])",
          "expected_output": "True"
        },
        {
          "input": "same_order(['red', 'green', 'black', 'orange'], ['red', 'pink', 'green', 'white', 'black'])",
          "expected_output": "False"
        }
      ]
    },
    {
      "problem_id": "mbpp_297",
      "description": "Write a function to flatten a given nested list structure.",
      "function_name": "flatten_list",
      "correct_solution": "def flatten_list(list1):\r\n    result_list = []\r\n    if not list1: return result_list\r\n    stack = [list(list1)]\r\n    while stack:\r\n        c_num = stack.pop()\r\n        next = c_num.pop()\r\n        if c_num: stack.append(c_num)\r\n        if isinstance(next, list):\r\n            if next: stack.append(list(next))\r\n        else: result_list.append(next)\r\n    result_list.reverse()\r\n    return result_list ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])",
          "expected_output": "[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]"
        },
        {
          "input": "flatten_list([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])",
          "expected_output": "[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]"
        },
        {
          "input": "flatten_list([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]])",
          "expected_output": "[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])",
          "expected_output": "[0, 10, 20, 30, 40, 50, 60, 80, 90, 100, 110, 120]"
        },
        {
          "input": "flatten_list([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])",
          "expected_output": "[10, 20, 40, 30, 56, 25, 10, 20, 33, 40, 50]"
        },
        {
          "input": "flatten_list([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]])",
          "expected_output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]"
        }
      ]
    },
    {
      "problem_id": "mbpp_962",
      "description": "Write a python function to find the sum of all even natural numbers within the range l and r.",
      "function_name": "sum_Even",
      "correct_solution": "def sum_Natural(n): \r\n    sum = (n * (n + 1)) \r\n    return int(sum) \r\ndef sum_Even(l,r): \r\n    return (sum_Natural(int(r / 2)) - sum_Natural(int((l - 1) / 2))) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "sum_Even(2, 5)",
          "expected_output": "6"
        },
        {
          "input": "sum_Even(3, 8)",
          "expected_output": "18"
        },
        {
          "input": "sum_Even(4, 6)",
          "expected_output": "10"
        }
      ],
      "broken_test_cases": [
        {
          "input": "sum_Even(2, 5)",
          "expected_output": "8"
        },
        {
          "input": "sum_Even(3, 8)",
          "expected_output": "20"
        },
        {
          "input": "sum_Even(4, 6)",
          "expected_output": "12"
        }
      ]
    },
    {
      "problem_id": "mbpp_924",
      "description": "Write a function to find maximum of two numbers.",
      "function_name": "max_of_two",
      "correct_solution": "def max_of_two( x, y ):\r\n    if x > y:\r\n        return x\r\n    return y",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "max_of_two(10, 20)",
          "expected_output": "20"
        },
        {
          "input": "max_of_two(19, 15)",
          "expected_output": "19"
        },
        {
          "input": "max_of_two(-10, -20)",
          "expected_output": "-10"
        }
      ],
      "broken_test_cases": [
        {
          "input": "max_of_two(10, 20)",
          "expected_output": "10"
        },
        {
          "input": "max_of_two(19, 15)",
          "expected_output": "15"
        },
        {
          "input": "max_of_two(-10, -20)",
          "expected_output": "-20"
        }
      ]
    },
    {
      "problem_id": "mbpp_847",
      "description": "Write a python function to copy a list from a singleton tuple.",
      "function_name": "lcopy",
      "correct_solution": "def lcopy(xs):\n  return xs[:]\n",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "lcopy([1, 2, 3])",
          "expected_output": "[1, 2, 3]"
        },
        {
          "input": "lcopy([4, 8, 2, 10, 15, 18])",
          "expected_output": "[4, 8, 2, 10, 15, 18]"
        },
        {
          "input": "lcopy([4, 5, 6])",
          "expected_output": "[4, 5, 6]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "lcopy([1, 2, 3])",
          "expected_output": "[1, 2, 4]"
        },
        {
          "input": "lcopy([4, 8, 2, 10, 15, 18])",
          "expected_output": "[4, 8, 2, 10, 15, 19]"
        },
        {
          "input": "lcopy([4, 5, 6])",
          "expected_output": "[4, 5, 7]"
        }
      ]
    },
    {
      "problem_id": "mbpp_939",
      "description": "Write a function to sort a list of dictionaries using lambda function.",
      "function_name": "sorted_models",
      "correct_solution": "def sorted_models(models):\r\n sorted_models = sorted(models, key = lambda x: x['color'])\r\n return sorted_models",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "sorted_models([{'make': 'Nokia', 'model': 216, 'color': 'Black'}, {'make': 'Mi Max', 'model': 2, 'color': 'Gold'}, {'make': 'Samsung', 'model': 7, 'color': 'Blue'}])",
          "expected_output": "[{'make': 'Nokia', 'model': 216, 'color': 'Black'}, {'make': 'Samsung', 'model': 7, 'color': 'Blue'}, {'make': 'Mi Max', 'model': 2, 'color': 'Gold'}]"
        },
        {
          "input": "sorted_models([{'make': 'Vivo', 'model': 20, 'color': 'Blue'}, {'make': 'oppo', 'model': 17, 'color': 'Gold'}, {'make': 'Apple', 'model': 11, 'color': 'red'}])",
          "expected_output": "[{'make': 'Vivo', 'model': 20, 'color': 'Blue'}, {'make': 'oppo', 'model': 17, 'color': 'Gold'}, {'make': 'Apple', 'model': 11, 'color': 'red'}]"
        },
        {
          "input": "sorted_models([{'make': 'micromax', 'model': 40, 'color': 'grey'}, {'make': 'poco', 'model': 60, 'color': 'blue'}])",
          "expected_output": "[{'make': 'poco', 'model': 60, 'color': 'blue'}, {'make': 'micromax', 'model': 40, 'color': 'grey'}]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "sorted_models([{'make': 'Nokia', 'model': 216, 'color': 'Black'}, {'make': 'Mi Max', 'model': 2, 'color': 'Gold'}, {'make': 'Samsung', 'model': 7, 'color': 'Blue'}])",
          "expected_output": "[{'make': 'Nokia', 'model': 216, 'color': 'Black'}, {'make': 'Mi Max', 'model': 2, 'color': 'Gold'}, {'make': 'Samsung', 'model': 7, 'color': 'Red'}]"
        },
        {
          "input": "sorted_models([{'make': 'Vivo', 'model': 20, 'color': 'Blue'}, {'make': 'oppo', 'model': 17, 'color': 'Gold'}, {'make': 'Apple', 'model': 11, 'color': 'red'}])",
          "expected_output": "[{'make': 'Apple', 'model': 11, 'color': 'red'}, {'make': 'Vivo', 'model': 20, 'color': 'Blue'}, {'make': 'oppo', 'model': 17, 'color': 'Gold'}]"
        },
        {
          "input": "sorted_models([{'make': 'micromax', 'model': 40, 'color': 'grey'}, {'make': 'poco', 'model': 60, 'color': 'blue'}])",
          "expected_output": "[{'make': 'micromax', 'model': 40, 'color': 'grey'}, {'make': 'poco', 'model': 60, 'color': 'blue'}]"
        }
      ]
    },
    {
      "problem_id": "mbpp_911",
      "description": "Write a function to compute maximum product of three numbers of a given array of integers using heap queue algorithm.",
      "function_name": "maximum_product",
      "correct_solution": "def maximum_product(nums):\r\n    import heapq\r\n    a, b = heapq.nlargest(3, nums), heapq.nsmallest(2, nums)\r\n    return max(a[0] * a[1] * a[2], a[0] * b[0] * b[1])",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "maximum_product([12, 74, 9, 50, 61, 41])",
          "expected_output": "225700"
        },
        {
          "input": "maximum_product([25, 35, 22, 85, 14, 65, 75, 25, 58])",
          "expected_output": "414375"
        },
        {
          "input": "maximum_product([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])",
          "expected_output": "2520"
        }
      ],
      "broken_test_cases": [
        {
          "input": "maximum_product([12, 74, 9, 50, 61, 41])",
          "expected_output": "225701"
        },
        {
          "input": "maximum_product([25, 35, 22, 85, 14, 65, 75, 25, 58])",
          "expected_output": "414376"
        },
        {
          "input": "maximum_product([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])",
          "expected_output": "2500"
        }
      ]
    },
    {
      "problem_id": "mbpp_676",
      "description": "Write a function to remove everything except alphanumeric characters from the given string by using regex.",
      "function_name": "remove_extra_char",
      "correct_solution": "import re\r\ndef remove_extra_char(text1):\r\n  pattern = re.compile('[\\W_]+')\r\n  return (pattern.sub('', text1))",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "remove_extra_char('**//Google Android// - 12. ')",
          "expected_output": "GoogleAndroid12"
        },
        {
          "input": "remove_extra_char('****//Google Flutter//*** - 36. ')",
          "expected_output": "GoogleFlutter36"
        },
        {
          "input": "remove_extra_char('**//Google Firebase// - 478. ')",
          "expected_output": "GoogleFirebase478"
        }
      ],
      "broken_test_cases": [
        {
          "input": "remove_extra_char('**//Google Android// - 12. ')",
          "expected_output": "GoogleAndroid1"
        },
        {
          "input": "remove_extra_char('****//Google Flutter//*** - 36. ')",
          "expected_output": "GoogleFlutter36_"
        },
        {
          "input": "remove_extra_char('**//Google Firebase// - 478. ')",
          "expected_output": "GoogleFirebase47"
        }
      ]
    },
    {
      "problem_id": "mbpp_972",
      "description": "Write a function to concatenate the given two tuples to a nested tuple.",
      "function_name": "concatenate_nested",
      "correct_solution": "def concatenate_nested(test_tup1, test_tup2):\r\n  res = test_tup1 + test_tup2\r\n  return (res) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "concatenate_nested((3, 4), (5, 6))",
          "expected_output": "(3, 4, 5, 6)"
        },
        {
          "input": "concatenate_nested((1, 2), (3, 4))",
          "expected_output": "(1, 2, 3, 4)"
        },
        {
          "input": "concatenate_nested((4, 5), (6, 8))",
          "expected_output": "(4, 5, 6, 8)"
        }
      ],
      "broken_test_cases": [
        {
          "input": "concatenate_nested((3, 4), (5, 6))",
          "expected_output": "(3, 4, 5)"
        },
        {
          "input": "concatenate_nested((1, 2), (3, 4))",
          "expected_output": "(1, 2, 3)"
        },
        {
          "input": "concatenate_nested((4, 5), (6, 8))",
          "expected_output": "(4, 5, 6)"
        }
      ]
    },
    {
      "problem_id": "mbpp_412",
      "description": "Write a python function to remove odd numbers from a given list.",
      "function_name": "remove_odd",
      "correct_solution": "def remove_odd(l):\r\n    for i in l:\r\n        if i % 2 != 0:\r\n            l.remove(i)\r\n    return l",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "remove_odd([1, 2, 3])",
          "expected_output": "[2]"
        },
        {
          "input": "remove_odd([2, 4, 6])",
          "expected_output": "[2, 4, 6]"
        },
        {
          "input": "remove_odd([10, 20, 3])",
          "expected_output": "[10, 20]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "remove_odd([1, 2, 3])",
          "expected_output": "[1, 2, 3]"
        },
        {
          "input": "remove_odd([2, 4, 6])",
          "expected_output": "[2, 4]"
        },
        {
          "input": "remove_odd([10, 20, 3])",
          "expected_output": "[10, 3, 20]"
        }
      ]
    },
    {
      "problem_id": "mbpp_523",
      "description": "Write a function to check whether a given string has a capital letter, a lower case letter, a number and specified length using lambda function.",
      "function_name": "check_string",
      "correct_solution": "def check_string(str1):\r\n    messg = [\r\n    lambda str1: any(x.isupper() for x in str1) or 'String must have 1 upper case character.',\r\n    lambda str1: any(x.islower() for x in str1) or 'String must have 1 lower case character.',\r\n    lambda str1: any(x.isdigit() for x in str1) or 'String must have 1 number.',\r\n    lambda str1: len(str1) >= 7                 or 'String length should be atleast 8.',]\r\n    result = [x for x in [i(str1) for i in messg] if x != True]\r\n    if not result:\r\n        result.append('Valid string.')\r\n    return result  ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "check_string('python')",
          "expected_output": "['String must have 1 upper case character.', 'String must have 1 number.', 'String length should be atleast 8.']"
        },
        {
          "input": "check_string('123python')",
          "expected_output": "['String must have 1 upper case character.']"
        },
        {
          "input": "check_string('123Python')",
          "expected_output": "['Valid string.']"
        }
      ],
      "broken_test_cases": [
        {
          "input": "check_string('python')",
          "expected_output": "['String must have 1 upper case character.', 'String must have 1 number.', 'String length should be atleast 7.']"
        },
        {
          "input": "check_string('123python')",
          "expected_output": "['String must have 1 upper case character.', 'String must have 1 number.']"
        },
        {
          "input": "check_string('123Python')",
          "expected_output": "['String must have 1 upper case character.', 'String must have 1 number.', 'String length should be atleast 8.']"
        }
      ]
    },
    {
      "problem_id": "mbpp_114",
      "description": "Write a function to assign frequency to each tuple in the given tuple list.",
      "function_name": "assign_freq",
      "correct_solution": "from collections import Counter \r\ndef assign_freq(test_list):\r\n  res = [(*key, val) for key, val in Counter(test_list).items()]\r\n  return (str(res)) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9,), (2, 7)])",
          "expected_output": "[(6, 5, 8, 3), (2, 7, 2), (9, 1)]"
        },
        {
          "input": "assign_freq([(4, 2, 4), (7, 1), (4, 8), (4, 2, 4), (9, 2), (7, 1)])",
          "expected_output": "[(4, 2, 4, 2), (7, 1, 2), (4, 8, 1), (9, 2, 1)]"
        },
        {
          "input": "assign_freq([(11, 13, 10), (17, 21), (4, 2, 3), (17, 21), (9, 2), (4, 2, 3)])",
          "expected_output": "[(11, 13, 10, 1), (17, 21, 2), (4, 2, 3, 2), (9, 2, 1)]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9,), (2, 7)])",
          "expected_output": "[(6, 5, 8, 4), (2, 7, 2), (9, 1)]"
        },
        {
          "input": "assign_freq([(4, 2, 4), (7, 1), (4, 8), (4, 2, 4), (9, 2), (7, 1)])",
          "expected_output": "[(4, 2, 4, 3), (7, 1, 2), (4, 8, 1), (9, 2, 1)]"
        },
        {
          "input": "assign_freq([(11, 13, 10), (17, 21), (4, 2, 3), (17, 21), (9, 2), (4, 2, 3)])",
          "expected_output": "[(11, 13, 10, 2), (17, 21, 2), (4, 2, 3, 2), (9, 2, 1)]"
        }
      ]
    },
    {
      "problem_id": "mbpp_635",
      "description": "Write a function to push all values into a heap and then pop off the smallest values one at a time.",
      "function_name": "heap_sort",
      "correct_solution": "import heapq as hq\r\ndef heap_sort(iterable):\r\n    h = []\r\n    for value in iterable:\r\n        hq.heappush(h, value)\r\n    return [hq.heappop(h) for i in range(len(h))]",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])",
          "expected_output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
        },
        {
          "input": "heap_sort([25, 35, 22, 85, 14, 65, 75, 25, 58])",
          "expected_output": "[14, 22, 25, 25, 35, 58, 65, 75, 85]"
        },
        {
          "input": "heap_sort([7, 1, 9, 5])",
          "expected_output": "[1, 5, 7, 9]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "heap_sort([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])",
          "expected_output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 10]"
        },
        {
          "input": "heap_sort([25, 35, 22, 85, 14, 65, 75, 25, 58])",
          "expected_output": "[14, 22, 25, 25, 35, 58, 65, 75, 84]"
        },
        {
          "input": "heap_sort([7, 1, 9, 5])",
          "expected_output": "[1, 7, 5, 9]"
        }
      ]
    },
    {
      "problem_id": "mbpp_224",
      "description": "Write a python function to count set bits of a given number.",
      "function_name": "count_Set_Bits",
      "correct_solution": "def count_Set_Bits(n): \r\n    count = 0\r\n    while (n): \r\n        count += n & 1\r\n        n >>= 1\r\n    return count ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "count_Set_Bits(2)",
          "expected_output": "1"
        },
        {
          "input": "count_Set_Bits(4)",
          "expected_output": "1"
        },
        {
          "input": "count_Set_Bits(6)",
          "expected_output": "2"
        }
      ],
      "broken_test_cases": [
        {
          "input": "count_Set_Bits(2)",
          "expected_output": "2"
        },
        {
          "input": "count_Set_Bits(4)",
          "expected_output": "2"
        },
        {
          "input": "count_Set_Bits(6)",
          "expected_output": "3"
        }
      ]
    },
    {
      "problem_id": "mbpp_496",
      "description": "Write a function to find the smallest integers from a given list of numbers using heap queue algorithm.",
      "function_name": "heap_queue_smallest",
      "correct_solution": "import heapq as hq\r\ndef heap_queue_smallest(nums,n):\r\n  smallest_nums = hq.nsmallest(n, nums)\r\n  return smallest_nums",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "heap_queue_smallest([25, 35, 22, 85, 14, 65, 75, 25, 58], 3)",
          "expected_output": "[14, 22, 25]"
        },
        {
          "input": "heap_queue_smallest([25, 35, 22, 85, 14, 65, 75, 25, 58], 2)",
          "expected_output": "[14, 22]"
        },
        {
          "input": "heap_queue_smallest([25, 35, 22, 85, 14, 65, 75, 22, 58], 5)",
          "expected_output": "[14, 22, 22, 25, 35]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "heap_queue_smallest([25, 35, 22, 85, 14, 65, 75, 25, 58], 3)",
          "expected_output": "[14, 25, 22]"
        },
        {
          "input": "heap_queue_smallest([25, 35, 22, 85, 14, 65, 75, 25, 58], 2)",
          "expected_output": "[14, 25]"
        },
        {
          "input": "heap_queue_smallest([25, 35, 22, 85, 14, 65, 75, 22, 58], 5)",
          "expected_output": "[14, 22, 25, 35, 58]"
        }
      ]
    },
    {
      "problem_id": "mbpp_465",
      "description": "Write a function to drop empty items from a given dictionary.",
      "function_name": "drop_empty",
      "correct_solution": "def drop_empty(dict1):\r\n  dict1 = {key:value for (key, value) in dict1.items() if value is not None}\r\n  return dict1",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "drop_empty({'c1': 'Red', 'c2': 'Green', 'c3': None})",
          "expected_output": "{'c1': 'Red', 'c2': 'Green'}"
        },
        {
          "input": "drop_empty({'c1': 'Red', 'c2': None, 'c3': None})",
          "expected_output": "{'c1': 'Red'}"
        },
        {
          "input": "drop_empty({'c1': None, 'c2': 'Green', 'c3': None})",
          "expected_output": "{'c2': 'Green'}"
        }
      ],
      "broken_test_cases": [
        {
          "input": "drop_empty({'c1': 'Red', 'c2': 'Green', 'c3': None})",
          "expected_output": "{'c1': 'Red', 'c2': 'Green', 'c3': 'Empty'}"
        },
        {
          "input": "drop_empty({'c1': 'Red', 'c2': None, 'c3': None})",
          "expected_output": "{'c1': 'Red', 'c2': None}"
        },
        {
          "input": "drop_empty({'c1': None, 'c2': 'Green', 'c3': None})",
          "expected_output": "{'c1': 'Red', 'c2': 'Green', 'c3': 'Blue'}"
        }
      ]
    },
    {
      "problem_id": "mbpp_463",
      "description": "Write a function to find the maximum product subarray of the given array.",
      "function_name": "max_subarray_product",
      "correct_solution": "def max_subarray_product(arr):\r\n\tn = len(arr)\r\n\tmax_ending_here = 1\r\n\tmin_ending_here = 1\r\n\tmax_so_far = 0\r\n\tflag = 0\r\n\tfor i in range(0, n):\r\n\t\tif arr[i] > 0:\r\n\t\t\tmax_ending_here = max_ending_here * arr[i]\r\n\t\t\tmin_ending_here = min (min_ending_here * arr[i], 1)\r\n\t\t\tflag = 1\r\n\t\telif arr[i] == 0:\r\n\t\t\tmax_ending_here = 1\r\n\t\t\tmin_ending_here = 1\r\n\t\telse:\r\n\t\t\ttemp = max_ending_here\r\n\t\t\tmax_ending_here = max (min_ending_here * arr[i], 1)\r\n\t\t\tmin_ending_here = temp * arr[i]\r\n\t\tif (max_so_far < max_ending_here):\r\n\t\t\tmax_so_far = max_ending_here\r\n\tif flag == 0 and max_so_far == 0:\r\n\t\treturn 0\r\n\treturn max_so_far",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "max_subarray_product([1, -2, -3, 0, 7, -8, -2])",
          "expected_output": "112"
        },
        {
          "input": "max_subarray_product([6, -3, -10, 0, 2])",
          "expected_output": "180"
        },
        {
          "input": "max_subarray_product([-2, -40, 0, -2, -3])",
          "expected_output": "80"
        }
      ],
      "broken_test_cases": [
        {
          "input": "max_subarray_product([1, -2, -3, 0, 7, -8, -2])",
          "expected_output": "111"
        },
        {
          "input": "max_subarray_product([6, -3, -10, 0, 2])",
          "expected_output": "120"
        },
        {
          "input": "max_subarray_product([-2, -40, 0, -2, -3])",
          "expected_output": "20"
        }
      ]
    },
    {
      "problem_id": "mbpp_355",
      "description": "Write a python function to count the number of rectangles in a circle of radius r.",
      "function_name": "count_Rectangles",
      "correct_solution": "def count_Rectangles(radius):  \r\n    rectangles = 0 \r\n    diameter = 2 * radius \r\n    diameterSquare = diameter * diameter \r\n    for a in range(1, 2 * radius):  \r\n        for b in range(1, 2 * radius): \r\n            diagnalLengthSquare = (a * a +  b * b)  \r\n            if (diagnalLengthSquare <= diameterSquare) : \r\n                rectangles += 1\r\n    return rectangles ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "count_Rectangles(2)",
          "expected_output": "8"
        },
        {
          "input": "count_Rectangles(1)",
          "expected_output": "1"
        },
        {
          "input": "count_Rectangles(0)",
          "expected_output": "0"
        }
      ],
      "broken_test_cases": [
        {
          "input": "count_Rectangles(2)",
          "expected_output": "9"
        },
        {
          "input": "count_Rectangles(1)",
          "expected_output": "10"
        },
        {
          "input": "count_Rectangles(0)",
          "expected_output": "1"
        }
      ]
    },
    {
      "problem_id": "mbpp_305",
      "description": "Write a function to match two words from a list of words starting with letter 'p'.",
      "function_name": "start_withp",
      "correct_solution": "import re\r\ndef start_withp(words):\r\n for w in words:\r\n        m = re.match(\"(P\\w+)\\W(P\\w+)\", w)\r\n        if m:\r\n            return m.groups()",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "start_withp(['Python PHP', 'Java JavaScript', 'c c++'])",
          "expected_output": "('Python', 'PHP')"
        },
        {
          "input": "start_withp(['Python Programming', 'Java Programming'])",
          "expected_output": "('Python', 'Programming')"
        },
        {
          "input": "start_withp(['Pqrst Pqr', 'qrstuv'])",
          "expected_output": "('Pqrst', 'Pqr')"
        }
      ],
      "broken_test_cases": [
        {
          "input": "start_withp(['Python PHP', 'Java JavaScript', 'c c++'])",
          "expected_output": "('Python', 'JavaScript')"
        },
        {
          "input": "start_withp(['Python Programming', 'Java Programming'])",
          "expected_output": "('Python', 'Java')"
        },
        {
          "input": "start_withp(['Pqrst Pqr', 'qrstuv'])",
          "expected_output": "('Pqrst', 'Qpr')"
        }
      ]
    },
    {
      "problem_id": "mbpp_46",
      "description": "Write a python function to determine whether all the numbers are different from each other are not.",
      "function_name": "test_distinct",
      "correct_solution": "def test_distinct(data):\r\n  if len(data) == len(set(data)):\r\n    return True\r\n  else:\r\n    return False;",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "test_distinct([1, 5, 7, 9])",
          "expected_output": "True"
        },
        {
          "input": "test_distinct([2, 4, 5, 5, 7, 9])",
          "expected_output": "False"
        },
        {
          "input": "test_distinct([1, 2, 3])",
          "expected_output": "True"
        }
      ],
      "broken_test_cases": [
        {
          "input": "test_distinct([1, 5, 7, 9])",
          "expected_output": "False"
        },
        {
          "input": "test_distinct([2, 4, 5, 5, 7, 9])",
          "expected_output": "True"
        },
        {
          "input": "test_distinct([1, 2, 3])",
          "expected_output": "False"
        }
      ]
    },
    {
      "problem_id": "mbpp_666",
      "description": "Write a function to count occurrence of a character in a string.",
      "function_name": "count_char",
      "correct_solution": "def count_char(string,char):\r\n count = 0\r\n for i in range(len(string)):\r\n    if(string[i] == char):\r\n        count = count + 1\r\n return count",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "count_char('Python', 'o')",
          "expected_output": "1"
        },
        {
          "input": "count_char('little', 't')",
          "expected_output": "2"
        },
        {
          "input": "count_char('assert', 's')",
          "expected_output": "2"
        }
      ],
      "broken_test_cases": [
        {
          "input": "count_char('Python', 'o')",
          "expected_output": "2"
        },
        {
          "input": "count_char('little', 't')",
          "expected_output": "1"
        },
        {
          "input": "count_char('assert', 's')",
          "expected_output": "1"
        }
      ]
    },
    {
      "problem_id": "mbpp_934",
      "description": "Write a function to find the nth delannoy number.",
      "function_name": "dealnnoy_num",
      "correct_solution": "def dealnnoy_num(n, m): \r\n\tif (m == 0 or n == 0) : \r\n\t\treturn 1\r\n\treturn dealnnoy_num(m - 1, n) + dealnnoy_num(m - 1, n - 1) + dealnnoy_num(m, n - 1)",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "dealnnoy_num(3, 4)",
          "expected_output": "129"
        },
        {
          "input": "dealnnoy_num(3, 3)",
          "expected_output": "63"
        },
        {
          "input": "dealnnoy_num(4, 5)",
          "expected_output": "681"
        }
      ],
      "broken_test_cases": [
        {
          "input": "dealnnoy_num(3, 4)",
          "expected_output": "130"
        },
        {
          "input": "dealnnoy_num(3, 3)",
          "expected_output": "64"
        },
        {
          "input": "dealnnoy_num(4, 5)",
          "expected_output": "680"
        }
      ]
    },
    {
      "problem_id": "mbpp_669",
      "description": "Write a function to check whether the given ip address is valid or not using regex.",
      "function_name": "check_IP",
      "correct_solution": "import re \r\nregex = '''^(25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \r\n\t\t\t25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \r\n\t\t\t25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)\\.( \r\n\t\t\t25[0-5]|2[0-4][0-9]|[0-1]?[0-9][0-9]?)$'''\r\ndef check_IP(Ip): \r\n\tif(re.search(regex, Ip)): \r\n\t\treturn (\"Valid IP address\") \r\n\telse: \r\n\t\treturn (\"Invalid IP address\") ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "check_IP('192.168.0.1')",
          "expected_output": "Valid IP address"
        },
        {
          "input": "check_IP('110.234.52.124')",
          "expected_output": "Valid IP address"
        },
        {
          "input": "check_IP('366.1.2.2')",
          "expected_output": "Invalid IP address"
        }
      ],
      "broken_test_cases": [
        {
          "input": "check_IP('192.168.0.1')",
          "expected_output": "Invalid IP address"
        },
        {
          "input": "check_IP('110.234.52.124')",
          "expected_output": "Invalid IP address"
        },
        {
          "input": "check_IP('366.1.2.2')",
          "expected_output": "Valid IP address"
        }
      ]
    },
    {
      "problem_id": "mbpp_182",
      "description": "Write a function to find uppercase, lowercase, special character and numeric values using regex.",
      "function_name": "find_character",
      "correct_solution": "import re\r\ndef find_character(string):\r\n  uppercase_characters = re.findall(r\"[A-Z]\", string) \r\n  lowercase_characters = re.findall(r\"[a-z]\", string) \r\n  numerical_characters = re.findall(r\"[0-9]\", string) \r\n  special_characters = re.findall(r\"[, .!?]\", string) \r\n  return uppercase_characters, lowercase_characters, numerical_characters, special_characters",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "find_character('ThisIsGeeksforGeeks')",
          "expected_output": "(['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])"
        },
        {
          "input": "find_character('Hithere2')",
          "expected_output": "(['H'], ['i', 't', 'h', 'e', 'r', 'e'], ['2'], [])"
        },
        {
          "input": "find_character('HeyFolks32')",
          "expected_output": "(['H', 'F'], ['e', 'y', 'o', 'l', 'k', 's'], ['3', '2'], [])"
        }
      ],
      "broken_test_cases": [
        {
          "input": "find_character('ThisIsGeeksforGeeks')",
          "expected_output": "(['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], ['1'], [])"
        },
        {
          "input": "find_character('Hithere2')",
          "expected_output": "(['H'], ['i', 't', 'h', 'e', 'r', 'e'], ['2'], ['!'])"
        },
        {
          "input": "find_character('HeyFolks32')",
          "expected_output": "(['H', 'F'], ['e', 'y', 'o', 'l', 'k', 's'], ['3', '2'], ['!'])"
        }
      ]
    },
    {
      "problem_id": "mbpp_169",
      "description": "Write a function to calculate the nth pell number.",
      "function_name": "get_pell",
      "correct_solution": "def get_pell(n): \r\n\tif (n <= 2): \r\n\t\treturn n \r\n\ta = 1\r\n\tb = 2\r\n\tfor i in range(3, n+1): \r\n\t\tc = 2 * b + a \r\n\t\ta = b \r\n\t\tb = c \r\n\treturn b ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "get_pell(4)",
          "expected_output": "12"
        },
        {
          "input": "get_pell(7)",
          "expected_output": "169"
        },
        {
          "input": "get_pell(8)",
          "expected_output": "408"
        }
      ],
      "broken_test_cases": [
        {
          "input": "get_pell(4)",
          "expected_output": "13"
        },
        {
          "input": "get_pell(7)",
          "expected_output": "170"
        },
        {
          "input": "get_pell(8)",
          "expected_output": "409"
        }
      ]
    },
    {
      "problem_id": "mbpp_66",
      "description": "Write a python function to count positive numbers in a list.",
      "function_name": "pos_count",
      "correct_solution": "def pos_count(list):\r\n  pos_count= 0\r\n  for num in list: \r\n    if num >= 0: \r\n      pos_count += 1\r\n  return pos_count ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "pos_count([1, -2, 3, -4])",
          "expected_output": "2"
        },
        {
          "input": "pos_count([3, 4, 5, -1])",
          "expected_output": "3"
        },
        {
          "input": "pos_count([1, 2, 3, 4])",
          "expected_output": "4"
        }
      ],
      "broken_test_cases": [
        {
          "input": "pos_count([1, -2, 3, -4])",
          "expected_output": "3"
        },
        {
          "input": "pos_count([3, 4, 5, -1])",
          "expected_output": "2"
        },
        {
          "input": "pos_count([1, 2, 3, 4])",
          "expected_output": "2"
        }
      ]
    },
    {
      "problem_id": "mbpp_761",
      "description": "Write a function to caluclate arc length of an angle.",
      "function_name": "arc_length",
      "correct_solution": "def arc_length(d,a):\r\n    pi=22/7\r\n    if a >= 360:\r\n        return None\r\n    arclength = (pi*d) * (a/360)\r\n    return arclength",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "arc_length(9, 45)",
          "expected_output": "3.5357142857142856"
        },
        {
          "input": "arc_length(9, 480)",
          "expected_output": "None"
        },
        {
          "input": "arc_length(5, 270)",
          "expected_output": "11.785714285714285"
        }
      ],
      "broken_test_cases": [
        {
          "input": "arc_length(9, 45)",
          "expected_output": "5.0"
        },
        {
          "input": "arc_length(9, 480)",
          "expected_output": "13.235714285714286"
        },
        {
          "input": "arc_length(5, 270)",
          "expected_output": "10.785714285714285"
        }
      ]
    },
    {
      "problem_id": "mbpp_591",
      "description": "Write a python function to interchange the first and last elements in a list.",
      "function_name": "swap_List",
      "correct_solution": "def swap_List(newList): \r\n    size = len(newList) \r\n    temp = newList[0] \r\n    newList[0] = newList[size - 1] \r\n    newList[size - 1] = temp  \r\n    return newList ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "swap_List([12, 35, 9, 56, 24])",
          "expected_output": "[24, 35, 9, 56, 12]"
        },
        {
          "input": "swap_List([1, 2, 3])",
          "expected_output": "[3, 2, 1]"
        },
        {
          "input": "swap_List([4, 5, 6])",
          "expected_output": "[6, 5, 4]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "swap_List([12, 35, 9, 56, 24])",
          "expected_output": "[35, 12, 9, 56, 24]"
        },
        {
          "input": "swap_List([1, 2, 3])",
          "expected_output": "[2, 2, 1]"
        },
        {
          "input": "swap_List([4, 5, 6])",
          "expected_output": "[4, 5, 6]"
        }
      ]
    },
    {
      "problem_id": "mbpp_25",
      "description": "Write a python function to find the product of non-repeated elements in a given array.",
      "function_name": "find_Product",
      "correct_solution": "def find_Product(arr,n): \r\n    arr.sort() \r\n    prod = 1\r\n    for i in range(0,n,1): \r\n        if (arr[i - 1] != arr[i]): \r\n            prod = prod * arr[i] \r\n    return prod; ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "find_Product([1, 1, 2, 3], 4)",
          "expected_output": "6"
        },
        {
          "input": "find_Product([1, 2, 3, 1, 1], 5)",
          "expected_output": "6"
        },
        {
          "input": "find_Product([1, 1, 4, 5, 6], 5)",
          "expected_output": "120"
        }
      ],
      "broken_test_cases": [
        {
          "input": "find_Product([1, 1, 2, 3], 4)",
          "expected_output": "3"
        },
        {
          "input": "find_Product([1, 2, 3, 1, 1], 5)",
          "expected_output": "12"
        },
        {
          "input": "find_Product([1, 1, 4, 5, 6], 5)",
          "expected_output": "24"
        }
      ]
    },
    {
      "problem_id": "mbpp_932",
      "description": "Write a function to remove duplicate words from a given list of strings.",
      "function_name": "remove_duplic_list",
      "correct_solution": "def remove_duplic_list(l):\r\n    temp = []\r\n    for x in l:\r\n        if x not in temp:\r\n            temp.append(x)\r\n    return temp",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "remove_duplic_list(['Python', 'Exercises', 'Practice', 'Solution', 'Exercises'])",
          "expected_output": "['Python', 'Exercises', 'Practice', 'Solution']"
        },
        {
          "input": "remove_duplic_list(['Python', 'Exercises', 'Practice', 'Solution', 'Exercises', 'Java'])",
          "expected_output": "['Python', 'Exercises', 'Practice', 'Solution', 'Java']"
        },
        {
          "input": "remove_duplic_list(['Python', 'Exercises', 'Practice', 'Solution', 'Exercises', 'C++', 'C', 'C++'])",
          "expected_output": "['Python', 'Exercises', 'Practice', 'Solution', 'C++', 'C']"
        }
      ],
      "broken_test_cases": [
        {
          "input": "remove_duplic_list(['Python', 'Exercises', 'Practice', 'Solution', 'Exercises'])",
          "expected_output": "['Python', 'Exercises', 'Practice', 'Solution', 'Exercises']"
        },
        {
          "input": "remove_duplic_list(['Python', 'Exercises', 'Practice', 'Solution', 'Exercises', 'Java'])",
          "expected_output": "['Python', 'Exercises', 'Practice', 'Solution', 'Exercises']"
        },
        {
          "input": "remove_duplic_list(['Python', 'Exercises', 'Practice', 'Solution', 'Exercises', 'C++', 'C', 'C++'])",
          "expected_output": "['Python', 'Exercises', 'Practice', 'Solution', 'C', 'C++']"
        }
      ]
    },
    {
      "problem_id": "mbpp_262",
      "description": "Write a function to split a given list into two parts where the length of the first part of the list is given.",
      "function_name": "split_two_parts",
      "correct_solution": "def split_two_parts(list1, L):\r\n    return list1[:L], list1[L:]",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "split_two_parts([1, 1, 2, 3, 4, 4, 5, 1], 3)",
          "expected_output": "([1, 1, 2], [3, 4, 4, 5, 1])"
        },
        {
          "input": "split_two_parts(['a', 'b', 'c', 'd'], 2)",
          "expected_output": "(['a', 'b'], ['c', 'd'])"
        },
        {
          "input": "split_two_parts(['p', 'y', 't', 'h', 'o', 'n'], 4)",
          "expected_output": "(['p', 'y', 't', 'h'], ['o', 'n'])"
        }
      ],
      "broken_test_cases": [
        {
          "input": "split_two_parts([1, 1, 2, 3, 4, 4, 5, 1], 3)",
          "expected_output": "([1, 1, 3], [2, 4, 4, 5, 1])"
        },
        {
          "input": "split_two_parts(['a', 'b', 'c', 'd'], 2)",
          "expected_output": "(['a', 'b', 'c'], ['d'])"
        },
        {
          "input": "split_two_parts(['p', 'y', 't', 'h', 'o', 'n'], 4)",
          "expected_output": "(['p', 'y', 't', 'h'], ['n', 'o'])"
        }
      ]
    },
    {
      "problem_id": "mbpp_140",
      "description": "Write a function to extract elements that occur singly in the given tuple list.",
      "function_name": "extract_singly",
      "correct_solution": "def extract_singly(test_list):\r\n  res = []\r\n  temp = set()\r\n  for inner in test_list:\r\n    for ele in inner:\r\n      if not ele in temp:\r\n        temp.add(ele)\r\n        res.append(ele)\r\n  return (res) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)])",
          "expected_output": "[3, 4, 5, 7, 1]"
        },
        {
          "input": "extract_singly([(1, 2, 3), (4, 2, 3), (7, 8)])",
          "expected_output": "[1, 2, 3, 4, 7, 8]"
        },
        {
          "input": "extract_singly([(7, 8, 9), (10, 11, 12), (10, 11)])",
          "expected_output": "[7, 8, 9, 10, 11, 12]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)])",
          "expected_output": "[3, 4, 5, 7]"
        },
        {
          "input": "extract_singly([(1, 2, 3), (4, 2, 3), (7, 8)])",
          "expected_output": "[1, 2, 3, 7, 8]"
        },
        {
          "input": "extract_singly([(7, 8, 9), (10, 11, 12), (10, 11)])",
          "expected_output": "[7, 8, 9, 10, 11]"
        }
      ]
    },
    {
      "problem_id": "mbpp_904",
      "description": "Write a function to return true if the given number is even else return false.",
      "function_name": "even_num",
      "correct_solution": "def even_num(x):\r\n  if x%2==0:\r\n     return True\r\n  else:\r\n    return False",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "even_num(13.5)",
          "expected_output": "False"
        },
        {
          "input": "even_num(0)",
          "expected_output": "True"
        },
        {
          "input": "even_num(-9)",
          "expected_output": "False"
        }
      ],
      "broken_test_cases": [
        {
          "input": "even_num(13.5)",
          "expected_output": "True"
        },
        {
          "input": "even_num(0)",
          "expected_output": "False"
        },
        {
          "input": "even_num(-9)",
          "expected_output": "True"
        }
      ]
    },
    {
      "problem_id": "mbpp_123",
      "description": "Write a function to sum all amicable numbers from 1 to a specified number.",
      "function_name": "amicable_numbers_sum",
      "correct_solution": "def amicable_numbers_sum(limit):\r\n    if not isinstance(limit, int):\r\n        return \"Input is not an integer!\"\r\n    if limit < 1:\r\n        return \"Input must be bigger than 0!\"\r\n    amicables = set()\r\n    for num in range(2, limit+1):\r\n        if num in amicables:\r\n            continue\r\n        sum_fact = sum([fact for fact in range(1, num) if num % fact == 0])\r\n        sum_fact2 = sum([fact for fact in range(1, sum_fact) if sum_fact % fact == 0])\r\n        if num == sum_fact2 and num != sum_fact:\r\n            amicables.add(num)\r\n            amicables.add(sum_fact2)\r\n    return sum(amicables)",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "amicable_numbers_sum(999)",
          "expected_output": "504"
        },
        {
          "input": "amicable_numbers_sum(99)",
          "expected_output": "0"
        }
      ],
      "broken_test_cases": [
        {
          "input": "amicable_numbers_sum(999)",
          "expected_output": "500"
        },
        {
          "input": "amicable_numbers_sum(99)",
          "expected_output": "1"
        }
      ]
    },
    {
      "problem_id": "mbpp_551",
      "description": "Write a function to extract a specified column from a given nested list.",
      "function_name": "extract_column",
      "correct_solution": "def extract_column(list1, n):\r\n   result = [i.pop(n) for i in list1]\r\n   return result ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "extract_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]], 0)",
          "expected_output": "[1, 2, 1]"
        },
        {
          "input": "extract_column([[1, 2, 3], [-2, 4, -5], [1, -1, 1]], 2)",
          "expected_output": "[3, -5, 1]"
        },
        {
          "input": "extract_column([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]], 0)",
          "expected_output": "[1, 5, 1, 13, 5, 9]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "extract_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]], 0)",
          "expected_output": "[1, 2, 3]"
        },
        {
          "input": "extract_column([[1, 2, 3], [-2, 4, -5], [1, -1, 1]], 2)",
          "expected_output": "[2, 4, -1]"
        },
        {
          "input": "extract_column([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]], 0)",
          "expected_output": "[1, 5, 1, 13, 5, 11]"
        }
      ]
    },
    {
      "problem_id": "mbpp_889",
      "description": "Write a function to reverse each list in a given list of lists.",
      "function_name": "reverse_list_lists",
      "correct_solution": "def reverse_list_lists(lists):\r\n    for l in lists:\r\n        l.sort(reverse = True)\r\n    return lists ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "reverse_list_lists([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]])",
          "expected_output": "[[4, 3, 2, 1], [8, 7, 6, 5], [12, 11, 10, 9], [16, 15, 14, 13]]"
        },
        {
          "input": "reverse_list_lists([[1, 2], [2, 3], [3, 4]])",
          "expected_output": "[[2, 1], [3, 2], [4, 3]]"
        },
        {
          "input": "reverse_list_lists([[10, 20], [30, 40]])",
          "expected_output": "[[20, 10], [40, 30]]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "reverse_list_lists([[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]])",
          "expected_output": "[[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]"
        },
        {
          "input": "reverse_list_lists([[1, 2], [2, 3], [3, 4]])",
          "expected_output": "[[1, 2], [2, 3], [3, 4]]"
        },
        {
          "input": "reverse_list_lists([[10, 20], [30, 40]])",
          "expected_output": "[[10, 20], [30, 40]]"
        }
      ]
    },
    {
      "problem_id": "mbpp_330",
      "description": "Write a function to find all three, four, five characters long words in the given string by using regex.",
      "function_name": "find_char",
      "correct_solution": "import re\r\ndef find_char(text):\r\n  return (re.findall(r\"\\b\\w{3,5}\\b\", text))",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "find_char('For the four consumer complaints contact manager AKR reddy')",
          "expected_output": "['For', 'the', 'four', 'AKR', 'reddy']"
        },
        {
          "input": "find_char('Certain service are subject to change MSR')",
          "expected_output": "['are', 'MSR']"
        },
        {
          "input": "find_char('Third party legal desclaimers')",
          "expected_output": "['Third', 'party', 'legal']"
        }
      ],
      "broken_test_cases": [
        {
          "input": "find_char('For the four consumer complaints contact manager AKR reddy')",
          "expected_output": "['For', 'the', 'four', 'AKR', 'reddy', 'manager']"
        },
        {
          "input": "find_char('Certain service are subject to change MSR')",
          "expected_output": "['are', 'to', 'MSR']"
        },
        {
          "input": "find_char('Third party legal desclaimers')",
          "expected_output": "['Third', 'party', 'legal', 'des']"
        }
      ]
    },
    {
      "problem_id": "mbpp_36",
      "description": "Write a python function to find the nth digit in the proper fraction of two given numbers.",
      "function_name": "find_Nth_Digit",
      "correct_solution": "def find_Nth_Digit(p,q,N) :  \r\n    while (N > 0) : \r\n        N -= 1;  \r\n        p *= 10;  \r\n        res = p // q;  \r\n        p %= q;  \r\n    return res;  ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "find_Nth_Digit(1, 2, 1)",
          "expected_output": "5"
        },
        {
          "input": "find_Nth_Digit(3, 5, 1)",
          "expected_output": "6"
        },
        {
          "input": "find_Nth_Digit(5, 6, 5)",
          "expected_output": "3"
        }
      ],
      "broken_test_cases": [
        {
          "input": "find_Nth_Digit(1, 2, 1)",
          "expected_output": "0"
        },
        {
          "input": "find_Nth_Digit(3, 5, 1)",
          "expected_output": "5"
        },
        {
          "input": "find_Nth_Digit(5, 6, 5)",
          "expected_output": "4"
        }
      ]
    },
    {
      "problem_id": "mbpp_619",
      "description": "Write a function to move all the numbers in it to the given string.",
      "function_name": "move_num",
      "correct_solution": "def move_num(test_str):\r\n  res = ''\r\n  dig = ''\r\n  for ele in test_str:\r\n    if ele.isdigit():\r\n      dig += ele\r\n    else:\r\n      res += ele\r\n  res += dig\r\n  return (res) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "move_num('I1love143you55three3000thousand')",
          "expected_output": "Iloveyouthreethousand1143553000"
        },
        {
          "input": "move_num('Avengers124Assemble')",
          "expected_output": "AvengersAssemble124"
        },
        {
          "input": "move_num('Its11our12path13to14see15things16do17things')",
          "expected_output": "Itsourpathtoseethingsdothings11121314151617"
        }
      ],
      "broken_test_cases": [
        {
          "input": "move_num('I1love143you55three3000thousand')",
          "expected_output": "Iloveyouthreethousand1143552000"
        },
        {
          "input": "move_num('Avengers124Assemble')",
          "expected_output": "AvengersAssemble241"
        },
        {
          "input": "move_num('Its11our12path13to14see15things16do17things')",
          "expected_output": "Itsourpathtoseethingsdothings17161514131211"
        }
      ]
    },
    {
      "problem_id": "mbpp_689",
      "description": "## write a function to find the minimum number of jumps to reach the end of the array for the given array of integers where each element represents the max number of steps that can be made forward from that element. > indented block > indented block",
      "function_name": "min_jumps",
      "correct_solution": "def min_jumps(arr, n):\r\n\tjumps = [0 for i in range(n)]\r\n\tif (n == 0) or (arr[0] == 0):\r\n\t\treturn float('inf')\r\n\tjumps[0] = 0\r\n\tfor i in range(1, n):\r\n\t\tjumps[i] = float('inf')\r\n\t\tfor j in range(i):\r\n\t\t\tif (i <= j + arr[j]) and (jumps[j] != float('inf')):\r\n\t\t\t\tjumps[i] = min(jumps[i], jumps[j] + 1)\r\n\t\t\t\tbreak\r\n\treturn jumps[n-1]",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "min_jumps([1, 3, 6, 1, 0, 9], 6)",
          "expected_output": "3"
        },
        {
          "input": "min_jumps([1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9], 11)",
          "expected_output": "3"
        },
        {
          "input": "min_jumps([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 11)",
          "expected_output": "10"
        }
      ],
      "broken_test_cases": [
        {
          "input": "min_jumps([1, 3, 6, 1, 0, 9], 6)",
          "expected_output": "4"
        },
        {
          "input": "min_jumps([1, 3, 5, 8, 9, 2, 6, 7, 6, 8, 9], 11)",
          "expected_output": "4"
        },
        {
          "input": "min_jumps([1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], 11)",
          "expected_output": "11"
        }
      ]
    },
    {
      "problem_id": "mbpp_858",
      "description": "Write a function to count number of lists in a given list of lists and square the count.",
      "function_name": "count_list",
      "correct_solution": "def count_list(input_list): \r\n    return (len(input_list))**2",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "count_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])",
          "expected_output": "25"
        },
        {
          "input": "count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]])",
          "expected_output": "16"
        },
        {
          "input": "count_list([[2, 4], [[6, 8], [4, 5, 8]], [10, 12, 14]])",
          "expected_output": "9"
        }
      ],
      "broken_test_cases": [
        {
          "input": "count_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])",
          "expected_output": "24"
        },
        {
          "input": "count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]])",
          "expected_output": "15"
        },
        {
          "input": "count_list([[2, 4], [[6, 8], [4, 5, 8]], [10, 12, 14]])",
          "expected_output": "10"
        }
      ]
    },
    {
      "problem_id": "mbpp_250",
      "description": "Write a python function to count the occcurences of an element in a tuple.",
      "function_name": "count_X",
      "correct_solution": "def count_X(tup, x): \r\n    count = 0\r\n    for ele in tup: \r\n        if (ele == x): \r\n            count = count + 1\r\n    return count ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2), 4)",
          "expected_output": "0"
        },
        {
          "input": "count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2), 10)",
          "expected_output": "3"
        },
        {
          "input": "count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2), 8)",
          "expected_output": "4"
        }
      ],
      "broken_test_cases": [
        {
          "input": "count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2), 4)",
          "expected_output": "1"
        },
        {
          "input": "count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2), 10)",
          "expected_output": "2"
        },
        {
          "input": "count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2), 8)",
          "expected_output": "3"
        }
      ]
    },
    {
      "problem_id": "mbpp_39",
      "description": "Write a function to check if the letters of a given string can be rearranged so that two characters that are adjacent to each other are different.",
      "function_name": "rearange_string",
      "correct_solution": "import heapq\r\nfrom collections import Counter\r\ndef rearange_string(S):\r\n    ctr = Counter(S)\r\n    heap = [(-value, key) for key, value in ctr.items()]\r\n    heapq.heapify(heap)\r\n    if (-heap[0][0]) * 2 > len(S) + 1: \r\n        return \"\"\r\n    ans = []\r\n    while len(heap) >= 2:\r\n        nct1, char1 = heapq.heappop(heap)\r\n        nct2, char2 = heapq.heappop(heap)\r\n        ans.extend([char1, char2])\r\n        if nct1 + 1: heapq.heappush(heap, (nct1 + 1, char1))\r\n        if nct2 + 1: heapq.heappush(heap, (nct2 + 1, char2))\r\n    return \"\".join(ans) + (heap[0][1] if heap else \"\")",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "rearange_string('aab')",
          "expected_output": "aba"
        },
        {
          "input": "rearange_string('aabb')",
          "expected_output": "abab"
        },
        {
          "input": "rearange_string('abccdd')",
          "expected_output": "cdabcd"
        }
      ],
      "broken_test_cases": [
        {
          "input": "rearange_string('aab')",
          "expected_output": "aab"
        },
        {
          "input": "rearange_string('aabb')",
          "expected_output": "abba"
        },
        {
          "input": "rearange_string('abccdd')",
          "expected_output": "cdabc"
        }
      ]
    },
    {
      "problem_id": "mbpp_444",
      "description": "Write a function to trim each tuple by k in the given tuple list.",
      "function_name": "trim_tuple",
      "correct_solution": "def trim_tuple(test_list, K):\r\n  res = []\r\n  for ele in test_list:\r\n    N = len(ele)\r\n    res.append(tuple(list(ele)[K: N - K]))\r\n  return (str(res)) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1), (9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2)",
          "expected_output": "[(2,), (9,), (2,), (2,)]"
        },
        {
          "input": "trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1), (9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 1)",
          "expected_output": "[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]"
        },
        {
          "input": "trim_tuple([(7, 8, 4, 9), (11, 8, 12, 4), (4, 1, 7, 8), (3, 6, 9, 7)], 1)",
          "expected_output": "[(8, 4), (8, 12), (1, 7), (6, 9)]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1), (9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2)",
          "expected_output": "[(5, 3), (3, 4), (9, 1), (4, 8)]"
        },
        {
          "input": "trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1), (9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 1)",
          "expected_output": "[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1), (7,)]"
        },
        {
          "input": "trim_tuple([(7, 8, 4, 9), (11, 8, 12, 4), (4, 1, 7, 8), (3, 6, 9, 7)], 1)",
          "expected_output": "[(8, 4), (8, 12), (1, 7), (6, 9), (0,)]"
        }
      ]
    },
    {
      "problem_id": "mbpp_724",
      "description": "Write a function to calculate the sum of all digits of the base to the specified power.",
      "function_name": "power_base_sum",
      "correct_solution": "def power_base_sum(base, power):\r\n    return sum([int(i) for i in str(pow(base, power))])",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "power_base_sum(2, 100)",
          "expected_output": "115"
        },
        {
          "input": "power_base_sum(8, 10)",
          "expected_output": "37"
        },
        {
          "input": "power_base_sum(8, 15)",
          "expected_output": "62"
        }
      ],
      "broken_test_cases": [
        {
          "input": "power_base_sum(2, 100)",
          "expected_output": "116"
        },
        {
          "input": "power_base_sum(8, 10)",
          "expected_output": "38"
        },
        {
          "input": "power_base_sum(8, 15)",
          "expected_output": "63"
        }
      ]
    },
    {
      "problem_id": "mbpp_664",
      "description": "Write a python function to find the average of even numbers till a given even number.",
      "function_name": "average_Even",
      "correct_solution": "def average_Even(n) : \r\n    if (n% 2!= 0) : \r\n        return (\"Invalid Input\") \r\n        return -1  \r\n    sm = 0\r\n    count = 0\r\n    while (n>= 2) : \r\n        count = count+1\r\n        sm = sm+n \r\n        n = n-2\r\n    return sm // count ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "average_Even(2)",
          "expected_output": "2"
        },
        {
          "input": "average_Even(4)",
          "expected_output": "3"
        },
        {
          "input": "average_Even(100)",
          "expected_output": "51"
        }
      ],
      "broken_test_cases": [
        {
          "input": "average_Even(2)",
          "expected_output": "3"
        },
        {
          "input": "average_Even(4)",
          "expected_output": "4"
        },
        {
          "input": "average_Even(100)",
          "expected_output": "50"
        }
      ]
    },
    {
      "problem_id": "mbpp_602",
      "description": "Write a python function to find the first repeated character in a given string.",
      "function_name": "first_repeated_char",
      "correct_solution": "def first_repeated_char(str1):\r\n  for index,c in enumerate(str1):\r\n    if str1[:index+1].count(c) > 1:\r\n      return c \r\n  return \"None\"",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "first_repeated_char('abcabc')",
          "expected_output": "a"
        },
        {
          "input": "first_repeated_char('abc')",
          "expected_output": "None"
        },
        {
          "input": "first_repeated_char('123123')",
          "expected_output": "1"
        }
      ],
      "broken_test_cases": [
        {
          "input": "first_repeated_char('abcabc')",
          "expected_output": "b"
        },
        {
          "input": "first_repeated_char('abc')",
          "expected_output": "'a'"
        },
        {
          "input": "first_repeated_char('123123')",
          "expected_output": "None"
        }
      ]
    },
    {
      "problem_id": "mbpp_385",
      "description": "Write a function to find the n'th perrin number using recursion.",
      "function_name": "get_perrin",
      "correct_solution": "def get_perrin(n):\r\n  if (n == 0):\r\n    return 3\r\n  if (n == 1):\r\n    return 0\r\n  if (n == 2):\r\n    return 2 \r\n  return get_perrin(n - 2) + get_perrin(n - 3)",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "get_perrin(9)",
          "expected_output": "12"
        },
        {
          "input": "get_perrin(4)",
          "expected_output": "2"
        },
        {
          "input": "get_perrin(6)",
          "expected_output": "5"
        }
      ],
      "broken_test_cases": [
        {
          "input": "get_perrin(9)",
          "expected_output": "11"
        },
        {
          "input": "get_perrin(4)",
          "expected_output": "3"
        },
        {
          "input": "get_perrin(6)",
          "expected_output": "10"
        }
      ]
    },
    {
      "problem_id": "mbpp_692",
      "description": "Write a python function to find the last two digits in factorial of a given number.",
      "function_name": "last_Two_Digits",
      "correct_solution": "def last_Two_Digits(N): \r\n    if (N >= 10): \r\n        return\r\n    fac = 1\r\n    for i in range(1,N + 1): \r\n        fac = (fac * i) % 100\r\n    return (fac) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "last_Two_Digits(7)",
          "expected_output": "40"
        },
        {
          "input": "last_Two_Digits(5)",
          "expected_output": "20"
        },
        {
          "input": "last_Two_Digits(2)",
          "expected_output": "2"
        }
      ],
      "broken_test_cases": [
        {
          "input": "last_Two_Digits(7)",
          "expected_output": "30"
        },
        {
          "input": "last_Two_Digits(5)",
          "expected_output": "21"
        },
        {
          "input": "last_Two_Digits(2)",
          "expected_output": "1"
        }
      ]
    },
    {
      "problem_id": "mbpp_702",
      "description": "Write a function to find the minimum number of elements that should be removed such that amax-amin<=k.",
      "function_name": "removals",
      "correct_solution": "def find_ind(key, i, n, \r\n\t\t\tk, arr):\r\n\tind = -1\r\n\tstart = i + 1\r\n\tend = n - 1;\r\n\twhile (start < end):\r\n\t\tmid = int(start +\r\n\t\t\t\t(end - start) / 2)\r\n\t\tif (arr[mid] - key <= k):\r\n\t\t\tind = mid\r\n\t\t\tstart = mid + 1\r\n\t\telse:\r\n\t\t\tend = mid\r\n\treturn ind\r\ndef removals(arr, n, k):\r\n\tans = n - 1\r\n\tarr.sort()\r\n\tfor i in range(0, n):\r\n\t\tj = find_ind(arr[i], i, \r\n\t\t\t\t\tn, k, arr)\r\n\t\tif (j != -1):\r\n\t\t\tans = min(ans, n -\r\n\t\t\t\t\t\t(j - i + 1))\r\n\treturn ans",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "removals([1, 3, 4, 9, 10, 11, 12, 17, 20], 9, 4)",
          "expected_output": "5"
        },
        {
          "input": "removals([1, 5, 6, 2, 8], 5, 2)",
          "expected_output": "3"
        },
        {
          "input": "removals([1, 2, 3, 4, 5, 6], 6, 3)",
          "expected_output": "2"
        }
      ],
      "broken_test_cases": [
        {
          "input": "removals([1, 3, 4, 9, 10, 11, 12, 17, 20], 9, 4)",
          "expected_output": "6"
        },
        {
          "input": "removals([1, 5, 6, 2, 8], 5, 2)",
          "expected_output": "4"
        },
        {
          "input": "removals([1, 2, 3, 4, 5, 6], 6, 3)",
          "expected_output": "3"
        }
      ]
    },
    {
      "problem_id": "mbpp_163",
      "description": "Write a function to calculate the area of a regular polygon.",
      "function_name": "area_polygon",
      "correct_solution": "from math import tan, pi\r\ndef area_polygon(s,l):\r\n  area = s * (l ** 2) / (4 * tan(pi / s))\r\n  return area",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "area_polygon(4, 20)",
          "expected_output": "400.00000000000006"
        },
        {
          "input": "area_polygon(10, 15)",
          "expected_output": "1731.1969896610804"
        },
        {
          "input": "area_polygon(9, 7)",
          "expected_output": "302.90938549487214"
        }
      ],
      "broken_test_cases": [
        {
          "input": "area_polygon(4, 20)",
          "expected_output": "500.00000000000006"
        },
        {
          "input": "area_polygon(10, 15)",
          "expected_output": "1700.0"
        },
        {
          "input": "area_polygon(9, 7)",
          "expected_output": "999.9999999999999"
        }
      ]
    },
    {
      "problem_id": "mbpp_111",
      "description": "Write a function to find common elements in given nested lists. * list item * list item * list item * list item",
      "function_name": "common_in_nested_lists",
      "correct_solution": "def common_in_nested_lists(nestedlist):\r\n    result = list(set.intersection(*map(set, nestedlist)))\r\n    return result",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])",
          "expected_output": "[18, 12]"
        },
        {
          "input": "common_in_nested_lists([[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]])",
          "expected_output": "[5, 23]"
        },
        {
          "input": "common_in_nested_lists([[2, 3, 4, 1], [4, 5], [6, 4, 8], [4, 5], [6, 8, 4]])",
          "expected_output": "[4]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])",
          "expected_output": "[18, 25]"
        },
        {
          "input": "common_in_nested_lists([[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]])",
          "expected_output": "[5, 12, 23]"
        },
        {
          "input": "common_in_nested_lists([[2, 3, 4, 1], [4, 5], [6, 4, 8], [4, 5], [6, 8, 4]])",
          "expected_output": "[2]"
        }
      ]
    },
    {
      "problem_id": "mbpp_555",
      "description": "Write a python function to find the difference between sum of cubes of first n natural numbers and the sum of first n natural numbers.",
      "function_name": "difference",
      "correct_solution": "def difference(n) :  \r\n    S = (n*(n + 1))//2;  \r\n    res = S*(S-1);  \r\n    return res;  ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "difference(3)",
          "expected_output": "30"
        },
        {
          "input": "difference(5)",
          "expected_output": "210"
        },
        {
          "input": "difference(2)",
          "expected_output": "6"
        }
      ],
      "broken_test_cases": [
        {
          "input": "difference(3)",
          "expected_output": "31"
        },
        {
          "input": "difference(5)",
          "expected_output": "211"
        },
        {
          "input": "difference(2)",
          "expected_output": "8"
        }
      ]
    },
    {
      "problem_id": "mbpp_288",
      "description": "Write a function to count array elements having modular inverse under given prime number p equal to itself.",
      "function_name": "modular_inverse",
      "correct_solution": "def modular_inverse(arr, N, P):\r\n\tcurrent_element = 0\r\n\tfor i in range(0, N):\r\n\t\tif ((arr[i] * arr[i]) % P == 1):\r\n\t\t\tcurrent_element = current_element + 1\r\n\treturn current_element",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "modular_inverse([1, 6, 4, 5], 4, 7)",
          "expected_output": "2"
        },
        {
          "input": "modular_inverse([1, 3, 8, 12, 12], 5, 13)",
          "expected_output": "3"
        },
        {
          "input": "modular_inverse([2, 3, 4, 5], 4, 6)",
          "expected_output": "1"
        }
      ],
      "broken_test_cases": [
        {
          "input": "modular_inverse([1, 6, 4, 5], 4, 7)",
          "expected_output": "3"
        },
        {
          "input": "modular_inverse([1, 3, 8, 12, 12], 5, 13)",
          "expected_output": "2"
        },
        {
          "input": "modular_inverse([2, 3, 4, 5], 4, 6)",
          "expected_output": "2"
        }
      ]
    },
    {
      "problem_id": "mbpp_703",
      "description": "Write a function to check whether the given key is present in the dictionary or not.",
      "function_name": "is_key_present",
      "correct_solution": "def is_key_present(d,x):\r\n  if x in d:\r\n    return True\r\n  else:\r\n     return False",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60}, 5)",
          "expected_output": "True"
        },
        {
          "input": "is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60}, 6)",
          "expected_output": "True"
        },
        {
          "input": "is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60}, 10)",
          "expected_output": "False"
        }
      ],
      "broken_test_cases": [
        {
          "input": "is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60}, 5)",
          "expected_output": "False"
        },
        {
          "input": "is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60}, 6)",
          "expected_output": "False"
        },
        {
          "input": "is_key_present({1: 10, 2: 20, 3: 30, 4: 40, 5: 50, 6: 60}, 10)",
          "expected_output": "True"
        }
      ]
    },
    {
      "problem_id": "mbpp_649",
      "description": "Write a python function to calculate the sum of the numbers in a list between the indices of a specified range.",
      "function_name": "sum_Range_list",
      "correct_solution": "def sum_Range_list(nums, m, n):                                                                                                                                                                                                \r\n    sum_range = 0                                                                                                                                                                                                         \r\n    for i in range(m, n+1, 1):                                                                                                                                                                                        \r\n        sum_range += nums[i]                                                                                                                                                                                                  \r\n    return sum_range   ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "sum_Range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 8, 10)",
          "expected_output": "29"
        },
        {
          "input": "sum_Range_list([1, 2, 3, 4, 5], 1, 2)",
          "expected_output": "5"
        },
        {
          "input": "sum_Range_list([1, 0, 1, 2, 5, 6], 4, 5)",
          "expected_output": "11"
        }
      ],
      "broken_test_cases": [
        {
          "input": "sum_Range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 8, 10)",
          "expected_output": "30"
        },
        {
          "input": "sum_Range_list([1, 2, 3, 4, 5], 1, 2)",
          "expected_output": "6"
        },
        {
          "input": "sum_Range_list([1, 0, 1, 2, 5, 6], 4, 5)",
          "expected_output": "12"
        }
      ]
    },
    {
      "problem_id": "mbpp_743",
      "description": "Write a function to rotate a given list by specified number of items to the right direction.",
      "function_name": "rotate_right",
      "correct_solution": "def rotate_right(list1,m,n):\r\n  result =  list1[-(m):]+list1[:-(n)]\r\n  return result",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3, 4)",
          "expected_output": "[8, 9, 10, 1, 2, 3, 4, 5, 6]"
        },
        {
          "input": "rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2, 2)",
          "expected_output": "[9, 10, 1, 2, 3, 4, 5, 6, 7, 8]"
        },
        {
          "input": "rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5, 2)",
          "expected_output": "[6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3, 4)",
          "expected_output": "[7, 8, 9, 10, 1, 2, 3, 4, 5, 6]"
        },
        {
          "input": "rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2, 2)",
          "expected_output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
        },
        {
          "input": "rotate_right([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5, 2)",
          "expected_output": "[6, 7, 8, 9, 10, 1, 2, 3, 4, 5]"
        }
      ]
    },
    {
      "problem_id": "mbpp_442",
      "description": "Write a function to find the ration of positive numbers in an array of integers.",
      "function_name": "positive_count",
      "correct_solution": "from array import array\r\ndef positive_count(nums):\r\n    n = len(nums)\r\n    n1 = 0\r\n    for x in nums:\r\n        if x > 0:\r\n            n1 += 1\r\n        else:\r\n          None\r\n    return round(n1/n,2)",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])",
          "expected_output": "0.54"
        },
        {
          "input": "positive_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])",
          "expected_output": "0.69"
        },
        {
          "input": "positive_count([2, 4, -6, -9, 11, -12, 14, -5, 17])",
          "expected_output": "0.56"
        }
      ],
      "broken_test_cases": [
        {
          "input": "positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])",
          "expected_output": "0.55"
        },
        {
          "input": "positive_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])",
          "expected_output": "0.68"
        },
        {
          "input": "positive_count([2, 4, -6, -9, 11, -12, 14, -5, 17])",
          "expected_output": "0.55"
        }
      ]
    },
    {
      "problem_id": "mbpp_699",
      "description": "Write a python function to find the minimum number of swaps required to convert one binary string to another.",
      "function_name": "min_Swaps",
      "correct_solution": "def min_Swaps(str1,str2) : \r\n    count = 0\r\n    for i in range(len(str1)) : \r\n        if str1[i] != str2[i] : \r\n            count += 1\r\n    if count % 2 == 0 : \r\n        return (count // 2) \r\n    else : \r\n        return (\"Not Possible\") ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "min_Swaps('1101', '1110')",
          "expected_output": "1"
        },
        {
          "input": "min_Swaps('1111', '0100')",
          "expected_output": "Not Possible"
        },
        {
          "input": "min_Swaps('1110000', '0001101')",
          "expected_output": "3"
        }
      ],
      "broken_test_cases": [
        {
          "input": "min_Swaps('1101', '1110')",
          "expected_output": "2"
        },
        {
          "input": "min_Swaps('1111', '0100')",
          "expected_output": "2"
        },
        {
          "input": "min_Swaps('1110000', '0001101')",
          "expected_output": "4"
        }
      ]
    },
    {
      "problem_id": "mbpp_30",
      "description": "Write a python function to count all the substrings starting and ending with same characters.",
      "function_name": "count_Substring_With_Equal_Ends",
      "correct_solution": "def check_Equality(s): \r\n    return (ord(s[0]) == ord(s[len(s) - 1])); \r\ndef count_Substring_With_Equal_Ends(s): \r\n    result = 0; \r\n    n = len(s); \r\n    for i in range(n): \r\n        for j in range(1,n-i+1):  \r\n            if (check_Equality(s[i:i+j])): \r\n                result+=1; \r\n    return result; ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "count_Substring_With_Equal_Ends('abc')",
          "expected_output": "3"
        },
        {
          "input": "count_Substring_With_Equal_Ends('abcda')",
          "expected_output": "6"
        },
        {
          "input": "count_Substring_With_Equal_Ends('ab')",
          "expected_output": "2"
        }
      ],
      "broken_test_cases": [
        {
          "input": "count_Substring_With_Equal_Ends('abc')",
          "expected_output": "2"
        },
        {
          "input": "count_Substring_With_Equal_Ends('abcda')",
          "expected_output": "5"
        },
        {
          "input": "count_Substring_With_Equal_Ends('ab')",
          "expected_output": "3"
        }
      ]
    },
    {
      "problem_id": "mbpp_500",
      "description": "Write a function to concatenate all elements of the given list into a string.",
      "function_name": "concatenate_elements",
      "correct_solution": "def concatenate_elements(list):\r\n  ans = ' '\r\n  for i in list:\r\n    ans = ans+ ' '+i\r\n  return (ans) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "concatenate_elements(['hello', 'there', 'have', 'a', 'rocky', 'day'])",
          "expected_output": "  hello there have a rocky day"
        },
        {
          "input": "concatenate_elements(['Hi', 'there', 'How', 'are', 'you'])",
          "expected_output": "  Hi there How are you"
        },
        {
          "input": "concatenate_elements(['Part', 'of', 'the', 'journey', 'is', 'end'])",
          "expected_output": "  Part of the journey is end"
        }
      ],
      "broken_test_cases": [
        {
          "input": "concatenate_elements(['hello', 'there', 'have', 'a', 'rocky', 'day'])",
          "expected_output": "hello there have a rocky"
        },
        {
          "input": "concatenate_elements(['Hi', 'there', 'How', 'are', 'you'])",
          "expected_output": "Hi there How are you."
        },
        {
          "input": "concatenate_elements(['Part', 'of', 'the', 'journey', 'is', 'end'])",
          "expected_output": "Part of the journey is the end"
        }
      ]
    },
    {
      "problem_id": "mbpp_172",
      "description": "Write a function to find the occurence of characters 'std' in the given string 1. list item 1. list item 1. list item 2. list item 2. list item 2. list item",
      "function_name": "count_occurance",
      "correct_solution": "def count_occurance(s):\r\n  count=0\r\n  for i in range(len(s)):\r\n    if (s[i]== 's' and s[i+1]=='t' and s[i+2]== 'd'):\r\n      count = count + 1\r\n  return count",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "count_occurance('letstdlenstdporstd')",
          "expected_output": "3"
        },
        {
          "input": "count_occurance('truststdsolensporsd')",
          "expected_output": "1"
        },
        {
          "input": "count_occurance('makestdsostdworthit')",
          "expected_output": "2"
        }
      ],
      "broken_test_cases": [
        {
          "input": "count_occurance('letstdlenstdporstd')",
          "expected_output": "2"
        },
        {
          "input": "count_occurance('truststdsolensporsd')",
          "expected_output": "2"
        },
        {
          "input": "count_occurance('makestdsostdworthit')",
          "expected_output": "3"
        }
      ]
    },
    {
      "problem_id": "mbpp_3",
      "description": "Write a python function to identify non-prime numbers.",
      "function_name": "is_not_prime",
      "correct_solution": "import math\r\ndef is_not_prime(n):\r\n    result = False\r\n    for i in range(2,int(math.sqrt(n)) + 1):\r\n        if n % i == 0:\r\n            result = True\r\n    return result",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "is_not_prime(2)",
          "expected_output": "False"
        },
        {
          "input": "is_not_prime(10)",
          "expected_output": "True"
        },
        {
          "input": "is_not_prime(35)",
          "expected_output": "True"
        }
      ],
      "broken_test_cases": [
        {
          "input": "is_not_prime(2)",
          "expected_output": "True"
        },
        {
          "input": "is_not_prime(10)",
          "expected_output": "False"
        },
        {
          "input": "is_not_prime(35)",
          "expected_output": "False"
        }
      ]
    },
    {
      "problem_id": "mbpp_343",
      "description": "Write a function to calculate the number of digits and letters in a string.",
      "function_name": "dig_let",
      "correct_solution": "def dig_let(s):\r\n d=l=0\r\n for c in s:\r\n    if c.isdigit():\r\n        d=d+1\r\n    elif c.isalpha():\r\n        l=l+1\r\n    else:\r\n        pass\r\n return (l,d)",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "dig_let('python')",
          "expected_output": "(6, 0)"
        },
        {
          "input": "dig_let('program')",
          "expected_output": "(7, 0)"
        },
        {
          "input": "dig_let('python3.0')",
          "expected_output": "(6, 2)"
        }
      ],
      "broken_test_cases": [
        {
          "input": "dig_let('python')",
          "expected_output": "(5, 1)"
        },
        {
          "input": "dig_let('program')",
          "expected_output": "(6, 0)"
        },
        {
          "input": "dig_let('python3.0')",
          "expected_output": "(6, 1)"
        }
      ]
    },
    {
      "problem_id": "mbpp_680",
      "description": "Write a python function to check whether a sequence of numbers has an increasing trend or not.",
      "function_name": "increasing_trend",
      "correct_solution": "def increasing_trend(nums):\r\n    if (sorted(nums)== nums):\r\n        return True\r\n    else:\r\n        return False",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "increasing_trend([1, 2, 3, 4])",
          "expected_output": "True"
        },
        {
          "input": "increasing_trend([4, 3, 2, 1])",
          "expected_output": "False"
        },
        {
          "input": "increasing_trend([0, 1, 4, 9])",
          "expected_output": "True"
        }
      ],
      "broken_test_cases": [
        {
          "input": "increasing_trend([1, 2, 3, 4])",
          "expected_output": "False"
        },
        {
          "input": "increasing_trend([4, 3, 2, 1])",
          "expected_output": "True"
        },
        {
          "input": "increasing_trend([0, 1, 4, 9])",
          "expected_output": "False"
        }
      ]
    },
    {
      "problem_id": "mbpp_418",
      "description": "Write a python function to find the sublist having maximum length.",
      "function_name": "Find_Max",
      "correct_solution": "def Find_Max(lst): \r\n    maxList = max((x) for x in lst) \r\n    return maxList",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "Find_Max([['A'], ['A', 'B'], ['A', 'B', 'C']])",
          "expected_output": "['A', 'B', 'C']"
        },
        {
          "input": "Find_Max([[1], [1, 2], [1, 2, 3]])",
          "expected_output": "[1, 2, 3]"
        },
        {
          "input": "Find_Max([[1, 1], [1, 2, 3], [1, 5, 6, 1]])",
          "expected_output": "[1, 5, 6, 1]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "Find_Max([['A'], ['A', 'B'], ['A', 'B', 'C']])",
          "expected_output": "['A', 'B']"
        },
        {
          "input": "Find_Max([[1], [1, 2], [1, 2, 3]])",
          "expected_output": "[1, 2]"
        },
        {
          "input": "Find_Max([[1, 1], [1, 2, 3], [1, 5, 6, 1]])",
          "expected_output": "[1, 2, 3]"
        }
      ]
    },
    {
      "problem_id": "mbpp_657",
      "description": "Write a python function to find the first digit in factorial of a given number.",
      "function_name": "first_Digit",
      "correct_solution": "import math \r\ndef first_Digit(n) : \r\n    fact = 1\r\n    for i in range(2,n + 1) : \r\n        fact = fact * i \r\n        while (fact % 10 == 0) :  \r\n            fact = int(fact / 10) \r\n    while (fact >= 10) : \r\n        fact = int(fact / 10) \r\n    return math.floor(fact) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "first_Digit(5)",
          "expected_output": "1"
        },
        {
          "input": "first_Digit(10)",
          "expected_output": "3"
        },
        {
          "input": "first_Digit(7)",
          "expected_output": "5"
        }
      ],
      "broken_test_cases": [
        {
          "input": "first_Digit(5)",
          "expected_output": "2"
        },
        {
          "input": "first_Digit(10)",
          "expected_output": "2"
        },
        {
          "input": "first_Digit(7)",
          "expected_output": "6"
        }
      ]
    },
    {
      "problem_id": "mbpp_913",
      "description": "Write a function to check for a number at the end of a string.",
      "function_name": "end_num",
      "correct_solution": "import re\r\ndef end_num(string):\r\n    text = re.compile(r\".*[0-9]$\")\r\n    if text.match(string):\r\n        return True\r\n    else:\r\n        return False",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "end_num('abcdef')",
          "expected_output": "False"
        },
        {
          "input": "end_num('abcdef7')",
          "expected_output": "True"
        },
        {
          "input": "end_num('abc')",
          "expected_output": "False"
        }
      ],
      "broken_test_cases": [
        {
          "input": "end_num('abcdef')",
          "expected_output": "True"
        },
        {
          "input": "end_num('abcdef7')",
          "expected_output": "False"
        },
        {
          "input": "end_num('abc')",
          "expected_output": "True"
        }
      ]
    },
    {
      "problem_id": "mbpp_716",
      "description": "Write a function to find the perimeter of a rombus.",
      "function_name": "rombus_perimeter",
      "correct_solution": "def rombus_perimeter(a):\r\n  perimeter=4*a\r\n  return perimeter",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "rombus_perimeter(10)",
          "expected_output": "40"
        },
        {
          "input": "rombus_perimeter(5)",
          "expected_output": "20"
        },
        {
          "input": "rombus_perimeter(4)",
          "expected_output": "16"
        }
      ],
      "broken_test_cases": [
        {
          "input": "rombus_perimeter(10)",
          "expected_output": "50"
        },
        {
          "input": "rombus_perimeter(5)",
          "expected_output": "40"
        },
        {
          "input": "rombus_perimeter(4)",
          "expected_output": "20"
        }
      ]
    },
    {
      "problem_id": "mbpp_277",
      "description": "Write a function to filter a dictionary based on values.",
      "function_name": "dict_filter",
      "correct_solution": "def dict_filter(dict,n):\r\n result = {key:value for (key, value) in dict.items() if value >=n}\r\n return result",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190}, 170)",
          "expected_output": "{'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}"
        },
        {
          "input": "dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190}, 180)",
          "expected_output": "{'Alden Cantrell': 180, 'Pierre Cox': 190}"
        },
        {
          "input": "dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190}, 190)",
          "expected_output": "{'Pierre Cox': 190}"
        }
      ],
      "broken_test_cases": [
        {
          "input": "dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190}, 170)",
          "expected_output": "{'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190}"
        },
        {
          "input": "dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190}, 180)",
          "expected_output": "{'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190}"
        },
        {
          "input": "dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190}, 190)",
          "expected_output": "{'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190}"
        }
      ]
    },
    {
      "problem_id": "mbpp_870",
      "description": "Write a function to calculate the sum of the positive numbers of a given list of numbers using lambda function.",
      "function_name": "sum_positivenum",
      "correct_solution": "def sum_positivenum(nums):\r\n  sum_positivenum = list(filter(lambda nums:nums>0,nums))\r\n  return sum(sum_positivenum)",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "sum_positivenum([2, 4, -6, -9, 11, -12, 14, -5, 17])",
          "expected_output": "48"
        },
        {
          "input": "sum_positivenum([10, 15, -14, 13, -18, 12, -20])",
          "expected_output": "50"
        },
        {
          "input": "sum_positivenum([19, -65, 57, 39, 152, -639, 121, 44, 90, -190])",
          "expected_output": "522"
        }
      ],
      "broken_test_cases": [
        {
          "input": "sum_positivenum([2, 4, -6, -9, 11, -12, 14, -5, 17])",
          "expected_output": "50"
        },
        {
          "input": "sum_positivenum([10, 15, -14, 13, -18, 12, -20])",
          "expected_output": "40"
        },
        {
          "input": "sum_positivenum([19, -65, 57, 39, 152, -639, 121, 44, 90, -190])",
          "expected_output": "521"
        }
      ]
    },
    {
      "problem_id": "mbpp_905",
      "description": "Write a python function to find the sum of squares of binomial co-efficients.",
      "function_name": "sum_of_square",
      "correct_solution": "def factorial(start,end): \r\n    res = 1 \r\n    for i in range(start,end + 1): \r\n        res *= i      \r\n    return res \r\ndef sum_of_square(n): \r\n   return int(factorial(n + 1, 2 * n)  /factorial(1, n)) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "sum_of_square(4)",
          "expected_output": "70"
        },
        {
          "input": "sum_of_square(5)",
          "expected_output": "252"
        },
        {
          "input": "sum_of_square(2)",
          "expected_output": "6"
        }
      ],
      "broken_test_cases": [
        {
          "input": "sum_of_square(4)",
          "expected_output": "60"
        },
        {
          "input": "sum_of_square(5)",
          "expected_output": "251"
        },
        {
          "input": "sum_of_square(2)",
          "expected_output": "10"
        }
      ]
    },
    {
      "problem_id": "mbpp_279",
      "description": "Write a function to find the nth decagonal number.",
      "function_name": "is_num_decagonal",
      "correct_solution": "def is_num_decagonal(n): \r\n\treturn 4 * n * n - 3 * n ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "is_num_decagonal(3)",
          "expected_output": "27"
        },
        {
          "input": "is_num_decagonal(7)",
          "expected_output": "175"
        },
        {
          "input": "is_num_decagonal(10)",
          "expected_output": "370"
        }
      ],
      "broken_test_cases": [
        {
          "input": "is_num_decagonal(3)",
          "expected_output": "28"
        },
        {
          "input": "is_num_decagonal(7)",
          "expected_output": "174"
        },
        {
          "input": "is_num_decagonal(10)",
          "expected_output": "371"
        }
      ]
    },
    {
      "problem_id": "mbpp_576",
      "description": "Write a python function to check whether an array is subarray of another or not.",
      "function_name": "is_Sub_Array",
      "correct_solution": "def is_Sub_Array(A,B,n,m): \r\n    i = 0; j = 0; \r\n    while (i < n and j < m):  \r\n        if (A[i] == B[j]): \r\n            i += 1; \r\n            j += 1; \r\n            if (j == m): \r\n                return True;  \r\n        else: \r\n            i = i - j + 1; \r\n            j = 0;       \r\n    return False; ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "is_Sub_Array([1, 4, 3, 5], [1, 2], 4, 2)",
          "expected_output": "False"
        },
        {
          "input": "is_Sub_Array([1, 2, 1], [1, 2, 1], 3, 3)",
          "expected_output": "True"
        },
        {
          "input": "is_Sub_Array([1, 0, 2, 2], [2, 2, 0], 4, 3)",
          "expected_output": "False"
        }
      ],
      "broken_test_cases": [
        {
          "input": "is_Sub_Array([1, 4, 3, 5], [1, 2], 4, 2)",
          "expected_output": "True"
        },
        {
          "input": "is_Sub_Array([1, 2, 1], [1, 2, 1], 3, 3)",
          "expected_output": "False"
        },
        {
          "input": "is_Sub_Array([1, 0, 2, 2], [2, 2, 0], 4, 3)",
          "expected_output": "True"
        }
      ]
    },
    {
      "problem_id": "mbpp_388",
      "description": "Write a python function to find the highest power of 2 that is less than or equal to n.",
      "function_name": "highest_Power_of_2",
      "correct_solution": "def highest_Power_of_2(n): \r\n    res = 0; \r\n    for i in range(n, 0, -1): \r\n        if ((i & (i - 1)) == 0): \r\n            res = i; \r\n            break; \r\n    return res; ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "highest_Power_of_2(10)",
          "expected_output": "8"
        },
        {
          "input": "highest_Power_of_2(19)",
          "expected_output": "16"
        },
        {
          "input": "highest_Power_of_2(32)",
          "expected_output": "32"
        }
      ],
      "broken_test_cases": [
        {
          "input": "highest_Power_of_2(10)",
          "expected_output": "4"
        },
        {
          "input": "highest_Power_of_2(19)",
          "expected_output": "8"
        },
        {
          "input": "highest_Power_of_2(32)",
          "expected_output": "16"
        }
      ]
    },
    {
      "problem_id": "mbpp_851",
      "description": "Write a python function to find sum of inverse of divisors.",
      "function_name": "Sum_of_Inverse_Divisors",
      "correct_solution": "def Sum_of_Inverse_Divisors(N,Sum): \r\n    ans = float(Sum)*1.0 /float(N);  \r\n    return round(ans,2); ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "Sum_of_Inverse_Divisors(6, 12)",
          "expected_output": "2"
        },
        {
          "input": "Sum_of_Inverse_Divisors(9, 13)",
          "expected_output": "1.44"
        },
        {
          "input": "Sum_of_Inverse_Divisors(1, 4)",
          "expected_output": "4"
        }
      ],
      "broken_test_cases": [
        {
          "input": "Sum_of_Inverse_Divisors(6, 12)",
          "expected_output": "3"
        },
        {
          "input": "Sum_of_Inverse_Divisors(9, 13)",
          "expected_output": "4.0"
        },
        {
          "input": "Sum_of_Inverse_Divisors(1, 4)",
          "expected_output": "2"
        }
      ]
    },
    {
      "problem_id": "mbpp_45",
      "description": "Write a function to find the gcd of the given array elements.",
      "function_name": "get_gcd",
      "correct_solution": "def find_gcd(x, y): \r\n\twhile(y): \r\n\t\tx, y = y, x % y \r\n\treturn x \r\ndef get_gcd(l):\r\n  num1 = l[0]\r\n  num2 = l[1]\r\n  gcd = find_gcd(num1, num2)\r\n  for i in range(2, len(l)):\r\n    gcd = find_gcd(gcd, l[i])\r\n  return gcd",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "get_gcd([2, 4, 6, 8, 16])",
          "expected_output": "2"
        },
        {
          "input": "get_gcd([1, 2, 3])",
          "expected_output": "1"
        },
        {
          "input": "get_gcd([2, 4, 6, 8])",
          "expected_output": "2"
        }
      ],
      "broken_test_cases": [
        {
          "input": "get_gcd([2, 4, 6, 8, 16])",
          "expected_output": "4"
        },
        {
          "input": "get_gcd([1, 2, 3])",
          "expected_output": "2"
        },
        {
          "input": "get_gcd([2, 4, 6, 8])",
          "expected_output": "4"
        }
      ]
    },
    {
      "problem_id": "mbpp_896",
      "description": "Write a function to sort a list in increasing order by the last element in each tuple from a given list of non-empty tuples.",
      "function_name": "sort_list_last",
      "correct_solution": "def last(n):\r\n   return n[-1]\r\ndef sort_list_last(tuples):\r\n  return sorted(tuples, key=last)",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "sort_list_last([(2, 5), (1, 2), (4, 4), (2, 3), (2, 1)])",
          "expected_output": "[(2, 1), (1, 2), (2, 3), (4, 4), (2, 5)]"
        },
        {
          "input": "sort_list_last([(9, 8), (4, 7), (3, 5), (7, 9), (1, 2)])",
          "expected_output": "[(1, 2), (3, 5), (4, 7), (9, 8), (7, 9)]"
        },
        {
          "input": "sort_list_last([(20, 50), (10, 20), (40, 40)])",
          "expected_output": "[(10, 20), (40, 40), (20, 50)]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "sort_list_last([(2, 5), (1, 2), (4, 4), (2, 3), (2, 1)])",
          "expected_output": "[(2, 1), (1, 2), (2, 3), (2, 5), (4, 4)]"
        },
        {
          "input": "sort_list_last([(9, 8), (4, 7), (3, 5), (7, 9), (1, 2)])",
          "expected_output": "[(9, 8), (4, 7), (3, 5), (1, 2), (7, 9)]"
        },
        {
          "input": "sort_list_last([(20, 50), (10, 20), (40, 40)])",
          "expected_output": "[(40, 40), (10, 20), (20, 50)]"
        }
      ]
    },
    {
      "problem_id": "mbpp_402",
      "description": "Write a function to compute the value of ncr%p.",
      "function_name": "ncr_modp",
      "correct_solution": "def ncr_modp(n, r, p): \r\n    C = [0 for i in range(r+1)]   \r\n    C[0] = 1\r\n    for i in range(1, n+1): \r\n        for j in range(min(i, r), 0, -1): \r\n            C[j] = (C[j] + C[j-1]) % p   \r\n    return C[r] ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "ncr_modp(10, 2, 13)",
          "expected_output": "6"
        },
        {
          "input": "ncr_modp(15, 12, 43)",
          "expected_output": "25"
        },
        {
          "input": "ncr_modp(17, 9, 18)",
          "expected_output": "10"
        }
      ],
      "broken_test_cases": [
        {
          "input": "ncr_modp(10, 2, 13)",
          "expected_output": "7"
        },
        {
          "input": "ncr_modp(15, 12, 43)",
          "expected_output": "26"
        },
        {
          "input": "ncr_modp(17, 9, 18)",
          "expected_output": "11"
        }
      ]
    },
    {
      "problem_id": "mbpp_900",
      "description": "Write a function where a string will start with a specific number.",
      "function_name": "match_num",
      "correct_solution": "import re\r\ndef match_num(string):\r\n    text = re.compile(r\"^5\")\r\n    if text.match(string):\r\n        return True\r\n    else:\r\n        return False",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "match_num('5-2345861')",
          "expected_output": "True"
        },
        {
          "input": "match_num('6-2345861')",
          "expected_output": "False"
        },
        {
          "input": "match_num('78910')",
          "expected_output": "False"
        }
      ],
      "broken_test_cases": [
        {
          "input": "match_num('5-2345861')",
          "expected_output": "False"
        },
        {
          "input": "match_num('5-2345861')",
          "expected_output": "False"
        },
        {
          "input": "match_num('5-2345861')",
          "expected_output": "False"
        }
      ]
    },
    {
      "problem_id": "mbpp_437",
      "description": "Write a function to remove odd characters in a string.",
      "function_name": "remove_odd",
      "correct_solution": "def remove_odd(str1):\r\n str2 = ''\r\n for i in range(1, len(str1) + 1):\r\n    if(i % 2 == 0):\r\n        str2 = str2 + str1[i - 1]\r\n return str2",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "remove_odd('python')",
          "expected_output": "yhn"
        },
        {
          "input": "remove_odd('program')",
          "expected_output": "rga"
        },
        {
          "input": "remove_odd('language')",
          "expected_output": "agae"
        }
      ],
      "broken_test_cases": [
        {
          "input": "remove_odd('python')",
          "expected_output": "pto"
        },
        {
          "input": "remove_odd('program')",
          "expected_output": "rpro"
        },
        {
          "input": "remove_odd('language')",
          "expected_output": "angage"
        }
      ]
    },
    {
      "problem_id": "mbpp_592",
      "description": "Write a python function to find sum of product of binomial co-efficients.",
      "function_name": "sum_Of_product",
      "correct_solution": "def binomial_Coeff(n,k): \r\n    C = [0] * (k + 1); \r\n    C[0] = 1; # nC0 is 1 \r\n    for i in range(1,n + 1):  \r\n        for j in range(min(i, k),0,-1): \r\n            C[j] = C[j] + C[j - 1]; \r\n    return C[k]; \r\ndef sum_Of_product(n): \r\n    return binomial_Coeff(2 * n,n - 1); ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "sum_Of_product(3)",
          "expected_output": "15"
        },
        {
          "input": "sum_Of_product(4)",
          "expected_output": "56"
        },
        {
          "input": "sum_Of_product(1)",
          "expected_output": "1"
        }
      ],
      "broken_test_cases": [
        {
          "input": "sum_Of_product(3)",
          "expected_output": "16"
        },
        {
          "input": "sum_Of_product(4)",
          "expected_output": "55"
        },
        {
          "input": "sum_Of_product(1)",
          "expected_output": "2"
        }
      ]
    },
    {
      "problem_id": "mbpp_737",
      "description": "Write a function to check whether the given string is starting with a vowel or not using regex.",
      "function_name": "check_str",
      "correct_solution": "import re \r\nregex = '^[aeiouAEIOU][A-Za-z0-9_]*'\r\ndef check_str(string): \r\n\tif(re.search(regex, string)): \r\n\t\treturn (\"Valid\") \r\n\telse: \r\n\t\treturn (\"Invalid\") ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "check_str('annie')",
          "expected_output": "Valid"
        },
        {
          "input": "check_str('dawood')",
          "expected_output": "Invalid"
        },
        {
          "input": "check_str('Else')",
          "expected_output": "Valid"
        }
      ],
      "broken_test_cases": [
        {
          "input": "check_str('annie')",
          "expected_output": "Invalid"
        },
        {
          "input": "check_str('dawood')",
          "expected_output": "Valid"
        },
        {
          "input": "check_str('Else')",
          "expected_output": "Invalid"
        }
      ]
    },
    {
      "problem_id": "mbpp_186",
      "description": "Write a function to search some literals strings in a string by using regex.",
      "function_name": "check_literals",
      "correct_solution": "import re\r\ndef check_literals(text, patterns):\r\n  for pattern in patterns:\r\n    if re.search(pattern,  text):\r\n        return ('Matched!')\r\n    else:\r\n        return ('Not Matched!')",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "check_literals('The quick brown fox jumps over the lazy dog.', ['fox'])",
          "expected_output": "Matched!"
        },
        {
          "input": "check_literals('The quick brown fox jumps over the lazy dog.', ['horse'])",
          "expected_output": "Not Matched!"
        },
        {
          "input": "check_literals('The quick brown fox jumps over the lazy dog.', ['lazy'])",
          "expected_output": "Matched!"
        }
      ],
      "broken_test_cases": [
        {
          "input": "check_literals('The quick brown fox jumps over the lazy dog.', ['fox'])",
          "expected_output": "Not Matched!"
        },
        {
          "input": "check_literals('The quick brown fox jumps over the lazy dog.', ['fox'])",
          "expected_output": "Not Matched!"
        },
        {
          "input": "check_literals('The quick brown fox jumps over the lazy dog.', ['lazy'])",
          "expected_output": "Not Matched!"
        }
      ]
    },
    {
      "problem_id": "mbpp_155",
      "description": "Write a python function to toggle all even bits of a given number.",
      "function_name": "even_bit_toggle_number",
      "correct_solution": "def even_bit_toggle_number(n) : \r\n    res = 0; count = 0; temp = n \r\n    while (temp > 0) :     \r\n        if (count % 2 == 1) : \r\n            res = res | (1 << count)      \r\n        count = count + 1\r\n        temp >>= 1 \r\n    return n ^ res ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "even_bit_toggle_number(10)",
          "expected_output": "0"
        },
        {
          "input": "even_bit_toggle_number(20)",
          "expected_output": "30"
        },
        {
          "input": "even_bit_toggle_number(30)",
          "expected_output": "20"
        }
      ],
      "broken_test_cases": [
        {
          "input": "even_bit_toggle_number(10)",
          "expected_output": "5"
        },
        {
          "input": "even_bit_toggle_number(20)",
          "expected_output": "25"
        },
        {
          "input": "even_bit_toggle_number(30)",
          "expected_output": "10"
        }
      ]
    },
    {
      "problem_id": "mbpp_365",
      "description": "Write a python function to count the number of digits of a given number.",
      "function_name": "count_Digit",
      "correct_solution": "def count_Digit(n):\r\n    count = 0\r\n    while n != 0:\r\n        n //= 10\r\n        count += 1\r\n    return count",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "count_Digit(12345)",
          "expected_output": "5"
        },
        {
          "input": "count_Digit(11223305)",
          "expected_output": "8"
        },
        {
          "input": "count_Digit(4123459)",
          "expected_output": "7"
        }
      ],
      "broken_test_cases": [
        {
          "input": "count_Digit(12345)",
          "expected_output": "6"
        },
        {
          "input": "count_Digit(11223305)",
          "expected_output": "5"
        },
        {
          "input": "count_Digit(4123459)",
          "expected_output": "8"
        }
      ]
    },
    {
      "problem_id": "mbpp_363",
      "description": "Write a function to add the k elements to each element in the tuple.",
      "function_name": "add_K_element",
      "correct_solution": "def add_K_element(test_list, K):\r\n  res = [tuple(j + K for j in sub ) for sub in test_list]\r\n  return (res) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4)",
          "expected_output": "[(5, 7, 8), (6, 8, 10), (7, 12, 5)]"
        },
        {
          "input": "add_K_element([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 8)",
          "expected_output": "[(9, 10, 11), (12, 13, 14), (15, 16, 17)]"
        },
        {
          "input": "add_K_element([(11, 12, 13), (14, 15, 16), (17, 18, 19)], 9)",
          "expected_output": "[(20, 21, 22), (23, 24, 25), (26, 27, 28)]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4)",
          "expected_output": "[(5, 7, 8), (6, 8, 11), (7, 12, 5)]"
        },
        {
          "input": "add_K_element([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 8)",
          "expected_output": "[(8, 10, 12), (12, 13, 14), (15, 16, 17)]"
        },
        {
          "input": "add_K_element([(11, 12, 13), (14, 15, 16), (17, 18, 19)], 9)",
          "expected_output": "[(20, 21, 22), (23, 24, 26), (26, 27, 28)]"
        }
      ]
    },
    {
      "problem_id": "mbpp_139",
      "description": "Write a function to find the circumference of a circle.",
      "function_name": "circle_circumference",
      "correct_solution": "def circle_circumference(r):\r\n  perimeter=2*3.1415*r\r\n  return perimeter",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "circle_circumference(10)",
          "expected_output": "62.830000000000005"
        },
        {
          "input": "circle_circumference(5)",
          "expected_output": "31.415000000000003"
        },
        {
          "input": "circle_circumference(4)",
          "expected_output": "25.132"
        }
      ],
      "broken_test_cases": [
        {
          "input": "circle_circumference(10)",
          "expected_output": "60.0"
        },
        {
          "input": "circle_circumference(5)",
          "expected_output": "20.0"
        },
        {
          "input": "circle_circumference(4)",
          "expected_output": "30.0"
        }
      ]
    },
    {
      "problem_id": "mbpp_19",
      "description": "Write a function to find whether a given array of integers contains any duplicate element.",
      "function_name": "test_duplicate",
      "correct_solution": "def test_duplicate(arraynums):\r\n    nums_set = set(arraynums)    \r\n    return len(arraynums) != len(nums_set)     ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "test_duplicate([1, 2, 3, 4, 5])",
          "expected_output": "False"
        },
        {
          "input": "test_duplicate([1, 2, 3, 4, 4])",
          "expected_output": "True"
        },
        {
          "input": "test_duplicate([1, 1, 2, 2, 3, 3, 4, 4, 5])",
          "expected_output": "True"
        }
      ],
      "broken_test_cases": [
        {
          "input": "test_duplicate([1, 2, 3, 4, 5])",
          "expected_output": "True"
        },
        {
          "input": "test_duplicate([1, 2, 3, 4, 4])",
          "expected_output": "False"
        },
        {
          "input": "test_duplicate([1, 1, 2, 2, 3, 3, 4, 4, 5])",
          "expected_output": "False"
        }
      ]
    },
    {
      "problem_id": "mbpp_167",
      "description": "Write a python function to find smallest power of 2 greater than or equal to n.",
      "function_name": "next_Power_Of_2",
      "correct_solution": "def next_Power_Of_2(n): \r\n    count = 0; \r\n    if (n and not(n & (n - 1))): \r\n        return n   \r\n    while( n != 0): \r\n        n >>= 1\r\n        count += 1\r\n    return 1 << count; ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "next_Power_Of_2(0)",
          "expected_output": "1"
        },
        {
          "input": "next_Power_Of_2(5)",
          "expected_output": "8"
        },
        {
          "input": "next_Power_Of_2(17)",
          "expected_output": "32"
        }
      ],
      "broken_test_cases": [
        {
          "input": "next_Power_Of_2(0)",
          "expected_output": "2"
        },
        {
          "input": "next_Power_Of_2(5)",
          "expected_output": "16"
        },
        {
          "input": "next_Power_Of_2(17)",
          "expected_output": "16"
        }
      ]
    },
    {
      "problem_id": "mbpp_605",
      "description": "Write a function to check if the given integer is a prime number.",
      "function_name": "prime_num",
      "correct_solution": "def prime_num(num):\r\n  if num >=1:\r\n   for i in range(2, num//2):\r\n     if (num % i) == 0:\r\n                return False\r\n     else:\r\n                return True\r\n  else:\r\n          return False",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "prime_num(13)",
          "expected_output": "True"
        },
        {
          "input": "prime_num(7)",
          "expected_output": "True"
        },
        {
          "input": "prime_num(-1010)",
          "expected_output": "False"
        }
      ],
      "broken_test_cases": [
        {
          "input": "prime_num(13)",
          "expected_output": "False"
        },
        {
          "input": "prime_num(7)",
          "expected_output": "False"
        },
        {
          "input": "prime_num(-1010)",
          "expected_output": "True"
        }
      ]
    },
    {
      "problem_id": "mbpp_534",
      "description": "Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs.",
      "function_name": "search_literal",
      "correct_solution": "import re\r\ndef search_literal(pattern,text):\r\n match = re.search(pattern, text)\r\n s = match.start()\r\n e = match.end()\r\n return (s, e)",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "search_literal('python', 'python programming language')",
          "expected_output": "(0, 6)"
        },
        {
          "input": "search_literal('programming', 'python programming language')",
          "expected_output": "(7, 18)"
        },
        {
          "input": "search_literal('language', 'python programming language')",
          "expected_output": "(19, 27)"
        }
      ],
      "broken_test_cases": [
        {
          "input": "search_literal('python', 'python programming language')",
          "expected_output": "(0, 5)"
        },
        {
          "input": "search_literal('programming', 'python programming language')",
          "expected_output": "(0, 18)"
        },
        {
          "input": "search_literal('language', 'python programming language')",
          "expected_output": "(20, 28)"
        }
      ]
    },
    {
      "problem_id": "mbpp_942",
      "description": "Write a function to check if any list element is present in the given list.",
      "function_name": "check_element",
      "correct_solution": "def check_element(test_tup, check_list):\r\n  res = False\r\n  for ele in check_list:\r\n    if ele in test_tup:\r\n      res = True\r\n      break\r\n  return (res) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "check_element((4, 5, 7, 9, 3), [6, 7, 10, 11])",
          "expected_output": "True"
        },
        {
          "input": "check_element((1, 2, 3, 4), [4, 6, 7, 8, 9])",
          "expected_output": "True"
        },
        {
          "input": "check_element((3, 2, 1, 4, 5), [9, 8, 7, 6])",
          "expected_output": "False"
        }
      ],
      "broken_test_cases": [
        {
          "input": "check_element((4, 5, 7, 9, 3), [6, 7, 10, 11])",
          "expected_output": "False"
        },
        {
          "input": "check_element((1, 2, 3, 4), [4, 6, 7, 8, 9])",
          "expected_output": "False"
        },
        {
          "input": "check_element((3, 2, 1, 4, 5), [9, 8, 7, 6])",
          "expected_output": "True"
        }
      ]
    },
    {
      "problem_id": "mbpp_727",
      "description": "Write a function to remove all characters except letters and numbers using regex",
      "function_name": "remove_char",
      "correct_solution": "import re \r\ndef remove_char(S):\r\n  result = re.sub('[\\W_]+', '', S) \r\n  return result",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "remove_char('123abcjw:, .@! eiw')",
          "expected_output": "123abcjweiw"
        },
        {
          "input": "remove_char('Hello1234:, ! Howare33u')",
          "expected_output": "Hello1234Howare33u"
        },
        {
          "input": "remove_char('Cool543Triks@:, Make@987Trips')",
          "expected_output": "Cool543TriksMake987Trips"
        }
      ],
      "broken_test_cases": [
        {
          "input": "remove_char('123abcjw:, .@! eiw')",
          "expected_output": "123abcjwaeibw"
        },
        {
          "input": "remove_char('Hello1234:, ! Howare33u')",
          "expected_output": "Hello1234:, ! Howare33u"
        },
        {
          "input": "remove_char('Cool543Triks@:, Make@987Trips')",
          "expected_output": "Cool543TrikseMake987Trips"
        }
      ]
    },
    {
      "problem_id": "mbpp_715",
      "description": "Write a function to convert the given string of integers into a tuple.",
      "function_name": "str_to_tuple",
      "correct_solution": "def str_to_tuple(test_str):\r\n  res = tuple(map(int, test_str.split(', ')))\r\n  return (res) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "str_to_tuple('1, -5, 4, 6, 7')",
          "expected_output": "(1, -5, 4, 6, 7)"
        },
        {
          "input": "str_to_tuple('1, 2, 3, 4, 5')",
          "expected_output": "(1, 2, 3, 4, 5)"
        },
        {
          "input": "str_to_tuple('4, 6, 9, 11, 13, 14')",
          "expected_output": "(4, 6, 9, 11, 13, 14)"
        }
      ],
      "broken_test_cases": [
        {
          "input": "str_to_tuple('1, -5, 4, 6, 7')",
          "expected_output": "(1, -5, 4, 6, 8)"
        },
        {
          "input": "str_to_tuple('1, 2, 3, 4, 5')",
          "expected_output": "(1, 2, 3, 4, 6)"
        },
        {
          "input": "str_to_tuple('4, 6, 9, 11, 13, 14')",
          "expected_output": "(4, 6, 9, 11, 13)"
        }
      ]
    },
    {
      "problem_id": "mbpp_963",
      "description": "Write a function to calculate the discriminant value.",
      "function_name": "discriminant_value",
      "correct_solution": "def discriminant_value(x,y,z):\r\n    discriminant = (y**2) - (4*x*z)\r\n    if discriminant > 0:\r\n        return (\"Two solutions\",discriminant)\r\n    elif discriminant == 0:\r\n        return (\"one solution\",discriminant)\r\n    elif discriminant < 0:\r\n        return (\"no real solution\",discriminant)",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "discriminant_value(4, 8, 2)",
          "expected_output": "('Two solutions', 32)"
        },
        {
          "input": "discriminant_value(5, 7, 9)",
          "expected_output": "('no real solution', -131)"
        },
        {
          "input": "discriminant_value(0, 0, 9)",
          "expected_output": "('one solution', 0)"
        }
      ],
      "broken_test_cases": [
        {
          "input": "discriminant_value(4, 8, 2)",
          "expected_output": "('No solutions', 32)"
        },
        {
          "input": "discriminant_value(5, 7, 9)",
          "expected_output": "('Two solutions', -131)"
        },
        {
          "input": "discriminant_value(0, 0, 9)",
          "expected_output": "('no real solution', 0)"
        }
      ]
    },
    {
      "problem_id": "mbpp_159",
      "description": "Write a function to print the season for the given month and day.",
      "function_name": "month_season",
      "correct_solution": "def month_season(month,days):\r\n if month in ('January', 'February', 'March'):\r\n\t season = 'winter'\r\n elif month in ('April', 'May', 'June'):\r\n\t season = 'spring'\r\n elif month in ('July', 'August', 'September'):\r\n\t season = 'summer'\r\n else:\r\n\t season = 'autumn'\r\n if (month == 'March') and (days > 19):\r\n\t season = 'spring'\r\n elif (month == 'June') and (days > 20):\r\n\t season = 'summer'\r\n elif (month == 'September') and (days > 21):\r\n\t season = 'autumn'\r\n elif (month == 'October') and (days > 21):\r\n\t season = 'autumn'\r\n elif (month == 'November') and (days > 21):\r\n\t season = 'autumn'\r\n elif (month == 'December') and (days > 20):\r\n\t season = 'winter'\r\n return season",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "month_season('January', 4)",
          "expected_output": "winter"
        },
        {
          "input": "month_season('October', 28)",
          "expected_output": "autumn"
        },
        {
          "input": "month_season('June', 6)",
          "expected_output": "spring"
        }
      ],
      "broken_test_cases": [
        {
          "input": "month_season('January', 4)",
          "expected_output": "summer"
        },
        {
          "input": "month_season('October', 28)",
          "expected_output": "winter"
        },
        {
          "input": "month_season('June', 6)",
          "expected_output": "winter"
        }
      ]
    },
    {
      "problem_id": "mbpp_701",
      "description": "Write a function to find the equilibrium index of the given array.",
      "function_name": "equilibrium_index",
      "correct_solution": "def equilibrium_index(arr):\r\n  total_sum = sum(arr)\r\n  left_sum=0\r\n  for i, num in enumerate(arr):\r\n    total_sum -= num\r\n    if left_sum == total_sum:\r\n      return i\r\n    left_sum += num\r\n  return -1",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "equilibrium_index([1, 2, 3, 4, 1, 2, 3])",
          "expected_output": "3"
        },
        {
          "input": "equilibrium_index([-7, 1, 5, 2, -4, 3, 0])",
          "expected_output": "3"
        },
        {
          "input": "equilibrium_index([1, 2, 3])",
          "expected_output": "-1"
        }
      ],
      "broken_test_cases": [
        {
          "input": "equilibrium_index([1, 2, 3, 4, 1, 2, 3])",
          "expected_output": "0"
        },
        {
          "input": "equilibrium_index([-7, 1, 5, 2, -4, 3, 0])",
          "expected_output": "2"
        },
        {
          "input": "equilibrium_index([1, 2, 3])",
          "expected_output": "0"
        }
      ]
    },
    {
      "problem_id": "mbpp_615",
      "description": "Write a function to find average value of the numbers in a given tuple of tuples.",
      "function_name": "average_tuple",
      "correct_solution": "def average_tuple(nums):\r\n    result = [sum(x) / len(x) for x in zip(*nums)]\r\n    return result",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))",
          "expected_output": "[30.5, 34.25, 27.0, 23.25]"
        },
        {
          "input": "average_tuple(((1, 1, -5), (30, -15, 56), (81, -60, -39), (-10, 2, 3)))",
          "expected_output": "[25.5, -18.0, 3.75]"
        },
        {
          "input": "average_tuple(((100, 100, 100, 120), (300, 450, 560, 450), (810, 800, 390, 320), (10, 20, 30, 40)))",
          "expected_output": "[305.0, 342.5, 270.0, 232.5]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "average_tuple(((10, 10, 10, 12), (30, 45, 56, 45), (81, 80, 39, 32), (1, 2, 3, 4)))",
          "expected_output": "[30.0, 34.0, 27.0, 23.0]"
        },
        {
          "input": "average_tuple(((1, 1, -5), (30, -15, 56), (81, -60, -39), (-10, 2, 3)))",
          "expected_output": "[25.0, -18.0, 3.75]"
        },
        {
          "input": "average_tuple(((100, 100, 100, 120), (300, 450, 560, 450), (810, 800, 390, 320), (10, 20, 30, 40)))",
          "expected_output": "[300.0, 340.0, 275.0, 230.0]"
        }
      ]
    },
    {
      "problem_id": "mbpp_170",
      "description": "Write a function to find sum of the numbers in a list between the indices of a specified range.",
      "function_name": "sum_range_list",
      "correct_solution": "def sum_range_list(list1, m, n):                                                                                                                                                                                                \r\n    sum_range = 0                                                                                                                                                                                                         \r\n    for i in range(m, n+1, 1):                                                                                                                                                                                        \r\n        sum_range += list1[i]                                                                                                                                                                                                  \r\n    return sum_range   ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "sum_range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 8, 10)",
          "expected_output": "29"
        },
        {
          "input": "sum_range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 5, 7)",
          "expected_output": "16"
        },
        {
          "input": "sum_range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 7, 10)",
          "expected_output": "38"
        }
      ],
      "broken_test_cases": [
        {
          "input": "sum_range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 8, 10)",
          "expected_output": "30"
        },
        {
          "input": "sum_range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 5, 7)",
          "expected_output": "15"
        },
        {
          "input": "sum_range_list([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], 7, 10)",
          "expected_output": "39"
        }
      ]
    },
    {
      "problem_id": "mbpp_63",
      "description": "Write a function to find the maximum difference between available pairs in the given tuple list.",
      "function_name": "max_difference",
      "correct_solution": "def max_difference(test_list):\r\n  temp = [abs(b - a) for a, b in test_list]\r\n  res = max(temp)\r\n  return (res) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "max_difference([(3, 5), (1, 7), (10, 3), (1, 2)])",
          "expected_output": "7"
        },
        {
          "input": "max_difference([(4, 6), (2, 17), (9, 13), (11, 12)])",
          "expected_output": "15"
        },
        {
          "input": "max_difference([(12, 35), (21, 27), (13, 23), (41, 22)])",
          "expected_output": "23"
        }
      ],
      "broken_test_cases": [
        {
          "input": "max_difference([(3, 5), (1, 7), (10, 3), (1, 2)])",
          "expected_output": "0"
        },
        {
          "input": "max_difference([(4, 6), (2, 17), (9, 13), (11, 12)])",
          "expected_output": "1"
        },
        {
          "input": "max_difference([(12, 35), (21, 27), (13, 23), (41, 22)])",
          "expected_output": "22"
        }
      ]
    },
    {
      "problem_id": "mbpp_75",
      "description": "Write a function to find tuples which have all elements divisible by k from the given list of tuples.",
      "function_name": "find_tuples",
      "correct_solution": "def find_tuples(test_list, K):\r\n  res = [sub for sub in test_list if all(ele % K == 0 for ele in sub)]\r\n  return (str(res)) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6)",
          "expected_output": "[(6, 24, 12)]"
        },
        {
          "input": "find_tuples([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5)",
          "expected_output": "[(5, 25, 30)]"
        },
        {
          "input": "find_tuples([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4)",
          "expected_output": "[(8, 16, 4)]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6)",
          "expected_output": "[(6, 24, 12), (7, 9, 6), (12, 18, 21)]"
        },
        {
          "input": "find_tuples([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5)",
          "expected_output": "[(5, 25, 30), (4, 2, 3)]"
        },
        {
          "input": "find_tuples([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4)",
          "expected_output": "[(7, 9, 16), (8, 16, 4)]"
        }
      ]
    },
    {
      "problem_id": "mbpp_774",
      "description": "Write a function to check if the string is a valid email address or not using regex.",
      "function_name": "check_email",
      "correct_solution": "import re \r\nregex = '^[a-z0-9]+[\\._]?[a-z0-9]+[@]\\w+[.]\\w{2,3}$'\r\ndef check_email(email): \r\n\tif(re.search(regex,email)): \r\n\t\treturn (\"Valid Email\") \r\n\telse: \r\n\t\treturn (\"Invalid Email\") ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "check_email('ankitrai326@gmail.com')",
          "expected_output": "Valid Email"
        },
        {
          "input": "check_email('my.ownsite@ourearth.org')",
          "expected_output": "Valid Email"
        },
        {
          "input": "check_email('ankitaoie326.com')",
          "expected_output": "Invalid Email"
        }
      ],
      "broken_test_cases": [
        {
          "input": "check_email('ankitrai326@gmail.com')",
          "expected_output": "Invalid Email"
        },
        {
          "input": "check_email('my.ownsite@ourearth.org')",
          "expected_output": "Invalid Email"
        },
        {
          "input": "check_email('ankitaoie326.com')",
          "expected_output": "Valid Email"
        }
      ]
    },
    {
      "problem_id": "mbpp_903",
      "description": "Write a python function to count the total unset bits from 1 to n.",
      "function_name": "count_Unset_Bits",
      "correct_solution": "def count_Unset_Bits(n) :  \r\n    cnt = 0;  \r\n    for i in range(1,n + 1) : \r\n        temp = i;  \r\n        while (temp) :  \r\n            if (temp % 2 == 0) : \r\n                cnt += 1;  \r\n            temp = temp // 2;  \r\n    return cnt;  ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "count_Unset_Bits(2)",
          "expected_output": "1"
        },
        {
          "input": "count_Unset_Bits(5)",
          "expected_output": "4"
        },
        {
          "input": "count_Unset_Bits(14)",
          "expected_output": "17"
        }
      ],
      "broken_test_cases": [
        {
          "input": "count_Unset_Bits(2)",
          "expected_output": "2"
        },
        {
          "input": "count_Unset_Bits(5)",
          "expected_output": "5"
        },
        {
          "input": "count_Unset_Bits(14)",
          "expected_output": "16"
        }
      ]
    },
    {
      "problem_id": "mbpp_398",
      "description": "Write a function to compute the sum of digits of each number of a given list.",
      "function_name": "sum_of_digits",
      "correct_solution": "def sum_of_digits(nums):\r\n    return sum(int(el) for n in nums for el in str(n) if el.isdigit())",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "sum_of_digits([10, 2, 56])",
          "expected_output": "14"
        },
        {
          "input": "sum_of_digits([[10, 20, 4, 5, 'b', 70, 'a']])",
          "expected_output": "19"
        },
        {
          "input": "sum_of_digits([10, 20, -4, 5, -70])",
          "expected_output": "19"
        }
      ],
      "broken_test_cases": [
        {
          "input": "sum_of_digits([10, 2, 56])",
          "expected_output": "13"
        },
        {
          "input": "sum_of_digits([[10, 20, 4, 5, 'b', 70, 'a']])",
          "expected_output": "20"
        },
        {
          "input": "sum_of_digits([10, 20, -4, 5, -70])",
          "expected_output": "20"
        }
      ]
    },
    {
      "problem_id": "mbpp_449",
      "description": "Write a python function to check whether the triangle is valid or not if 3 points are given.",
      "function_name": "check_Triangle",
      "correct_solution": "def check_Triangle(x1,y1,x2,y2,x3,y3): \r\n    a = (x1*(y2-y3)+x2*(y3-y1)+x3*(y1-y2))   \r\n    if a == 0: \r\n        return ('No') \r\n    else: \r\n        return ('Yes') ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "check_Triangle(1, 5, 2, 5, 4, 6)",
          "expected_output": "Yes"
        },
        {
          "input": "check_Triangle(1, 1, 1, 4, 1, 5)",
          "expected_output": "No"
        },
        {
          "input": "check_Triangle(1, 1, 1, 1, 1, 1)",
          "expected_output": "No"
        }
      ],
      "broken_test_cases": [
        {
          "input": "check_Triangle(1, 5, 2, 5, 4, 6)",
          "expected_output": "No"
        },
        {
          "input": "check_Triangle(1, 1, 1, 4, 1, 5)",
          "expected_output": "Yes"
        },
        {
          "input": "check_Triangle(1, 1, 1, 1, 1, 1)",
          "expected_output": "Yes"
        }
      ]
    },
    {
      "problem_id": "mbpp_120",
      "description": "Write a function to find the maximum product from the pairs of tuples within a given list.",
      "function_name": "max_product_tuple",
      "correct_solution": "def max_product_tuple(list1):\r\n    result_max = max([abs(x * y) for x, y in list1] )\r\n    return result_max",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)])",
          "expected_output": "36"
        },
        {
          "input": "max_product_tuple([(10, 20), (15, 2), (5, 10)])",
          "expected_output": "200"
        },
        {
          "input": "max_product_tuple([(11, 44), (10, 15), (20, 5), (12, 9)])",
          "expected_output": "484"
        }
      ],
      "broken_test_cases": [
        {
          "input": "max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)])",
          "expected_output": "40"
        },
        {
          "input": "max_product_tuple([(10, 20), (15, 2), (5, 10)])",
          "expected_output": "100"
        },
        {
          "input": "max_product_tuple([(11, 44), (10, 15), (20, 5), (12, 9)])",
          "expected_output": "200"
        }
      ]
    },
    {
      "problem_id": "mbpp_683",
      "description": "Write a python function to check whether the given number can be represented by sum of two squares or not.",
      "function_name": "sum_Square",
      "correct_solution": "def sum_Square(n) : \r\n    i = 1 \r\n    while i*i <= n : \r\n        j = 1\r\n        while (j*j <= n) : \r\n            if (i*i+j*j == n) : \r\n                return True\r\n            j = j+1\r\n        i = i+1     \r\n    return False",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "sum_Square(25)",
          "expected_output": "True"
        },
        {
          "input": "sum_Square(24)",
          "expected_output": "False"
        },
        {
          "input": "sum_Square(17)",
          "expected_output": "True"
        }
      ],
      "broken_test_cases": [
        {
          "input": "sum_Square(25)",
          "expected_output": "False"
        },
        {
          "input": "sum_Square(25)",
          "expected_output": "False"
        },
        {
          "input": "sum_Square(17)",
          "expected_output": "False"
        }
      ]
    },
    {
      "problem_id": "mbpp_280",
      "description": "Write a function to search an element in the given array by using sequential search.",
      "function_name": "sequential_search",
      "correct_solution": "def sequential_search(dlist, item):\r\n    pos = 0\r\n    found = False\r\n    while pos < len(dlist) and not found:\r\n        if dlist[pos] == item:\r\n            found = True\r\n        else:\r\n            pos = pos + 1\r\n    return found, pos",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "sequential_search([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31)",
          "expected_output": "(True, 3)"
        },
        {
          "input": "sequential_search([12, 32, 45, 62, 35, 47, 44, 61], 61)",
          "expected_output": "(True, 7)"
        },
        {
          "input": "sequential_search([9, 10, 17, 19, 22, 39, 48, 56], 48)",
          "expected_output": "(True, 6)"
        }
      ],
      "broken_test_cases": [
        {
          "input": "sequential_search([11, 23, 58, 31, 56, 77, 43, 12, 65, 19], 31)",
          "expected_output": "(False, 5)"
        },
        {
          "input": "sequential_search([12, 32, 45, 62, 35, 47, 44, 61], 61)",
          "expected_output": "(False, 8)"
        },
        {
          "input": "sequential_search([9, 10, 17, 19, 22, 39, 48, 56], 48)",
          "expected_output": "(False, 7)"
        }
      ]
    },
    {
      "problem_id": "mbpp_509",
      "description": "Write a python function to find the average of odd numbers till a given odd number.",
      "function_name": "average_Odd",
      "correct_solution": "def average_Odd(n) : \r\n    if (n%2==0) : \r\n        return (\"Invalid Input\") \r\n        return -1 \r\n    sm =0\r\n    count =0\r\n    while (n>=1) : \r\n        count=count+1\r\n        sm = sm + n \r\n        n = n-2\r\n    return sm//count ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "average_Odd(9)",
          "expected_output": "5"
        },
        {
          "input": "average_Odd(5)",
          "expected_output": "3"
        },
        {
          "input": "average_Odd(11)",
          "expected_output": "6"
        }
      ],
      "broken_test_cases": [
        {
          "input": "average_Odd(9)",
          "expected_output": "6"
        },
        {
          "input": "average_Odd(5)",
          "expected_output": "4"
        },
        {
          "input": "average_Odd(11)",
          "expected_output": "7"
        }
      ]
    },
    {
      "problem_id": "mbpp_379",
      "description": "Write a function to find the surface area of a cuboid.",
      "function_name": "surfacearea_cuboid",
      "correct_solution": "def surfacearea_cuboid(l,w,h):\r\n  SA = 2*(l*w + l * h + w * h)\r\n  return SA",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "surfacearea_cuboid(1, 2, 3)",
          "expected_output": "22"
        },
        {
          "input": "surfacearea_cuboid(5, 7, 9)",
          "expected_output": "286"
        },
        {
          "input": "surfacearea_cuboid(10, 15, 21)",
          "expected_output": "1350"
        }
      ],
      "broken_test_cases": [
        {
          "input": "surfacearea_cuboid(1, 2, 3)",
          "expected_output": "21"
        },
        {
          "input": "surfacearea_cuboid(5, 7, 9)",
          "expected_output": "287"
        },
        {
          "input": "surfacearea_cuboid(10, 15, 21)",
          "expected_output": "1351"
        }
      ]
    },
    {
      "problem_id": "mbpp_869",
      "description": "Write a function to remove sublists from a given list of lists, which are outside a given range.",
      "function_name": "remove_list_range",
      "correct_solution": "def remove_list_range(list1, leftrange, rigthrange):\r\n   result = [i for i in list1 if (min(i)>=leftrange and max(i)<=rigthrange)]\r\n   return result",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]], 13, 17)",
          "expected_output": "[[13, 14, 15, 17]]"
        },
        {
          "input": "remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]], 1, 3)",
          "expected_output": "[[2], [1, 2, 3]]"
        },
        {
          "input": "remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]], 0, 7)",
          "expected_output": "[[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7]]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]], 13, 17)",
          "expected_output": "[[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11]]"
        },
        {
          "input": "remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]], 1, 3)",
          "expected_output": "[[2], [0], [1, 2, 3]]"
        },
        {
          "input": "remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]], 0, 7)",
          "expected_output": "[[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]]"
        }
      ]
    },
    {
      "problem_id": "mbpp_200",
      "description": "Write a function to find all index positions of the maximum values in a given list.",
      "function_name": "position_max",
      "correct_solution": "def position_max(list1):\r\n    max_val = max(list1)\r\n    max_result = [i for i, j in enumerate(list1) if j == max_val]\r\n    return max_result",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "position_max([12, 33, 23, 10, 67, 89, 45, 667, 23, 12, 11, 10, 54])",
          "expected_output": "[7]"
        },
        {
          "input": "position_max([1, 2, 2, 2, 4, 4, 4, 5, 5, 5, 5])",
          "expected_output": "[7, 8, 9, 10]"
        },
        {
          "input": "position_max([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12])",
          "expected_output": "[11]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "position_max([12, 33, 23, 10, 67, 89, 45, 667, 23, 12, 11, 10, 54])",
          "expected_output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]"
        },
        {
          "input": "position_max([1, 2, 2, 2, 4, 4, 4, 5, 5, 5, 5])",
          "expected_output": "[0, 1, 2, 3]"
        },
        {
          "input": "position_max([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12])",
          "expected_output": "[0, 11]"
        }
      ]
    },
    {
      "problem_id": "mbpp_570",
      "description": "Write a function to remove words from a given list of strings containing a character or string.",
      "function_name": "remove_words",
      "correct_solution": "def remove_words(list1, charlist):\r\n    new_list = []\r\n    for line in list1:\r\n        new_words = ' '.join([word for word in line.split() if not any([phrase in word for phrase in charlist])])\r\n        new_list.append(new_words)\r\n    return new_list",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "remove_words(['Red color', 'Orange#', 'Green', 'Orange @', 'White'], ['#', 'color', '@'])",
          "expected_output": "['Red', '', 'Green', 'Orange', 'White']"
        },
        {
          "input": "remove_words(['Red &', 'Orange+', 'Green', 'Orange @', 'White'], ['&', '+', '@'])",
          "expected_output": "['Red', '', 'Green', 'Orange', 'White']"
        },
        {
          "input": "remove_words(['Red &', 'Orange+', 'Green', 'Orange @', 'White'], ['@'])",
          "expected_output": "['Red &', 'Orange+', 'Green', 'Orange', 'White']"
        }
      ],
      "broken_test_cases": [
        {
          "input": "remove_words(['Red color', 'Orange#', 'Green', 'Orange @', 'White'], ['#', 'color', '@'])",
          "expected_output": "['Red color', 'Orange#', 'Green', 'Orange @', 'White']"
        },
        {
          "input": "remove_words(['Red &', 'Orange+', 'Green', 'Orange @', 'White'], ['&', '+', '@'])",
          "expected_output": "['Red', 'Orange', 'Green', 'Orange', 'White']"
        },
        {
          "input": "remove_words(['Red &', 'Orange+', 'Green', 'Orange @', 'White'], ['@'])",
          "expected_output": "['Red &', 'Orange+', 'Green', 'Orange @', 'White']"
        }
      ]
    },
    {
      "problem_id": "mbpp_713",
      "description": "Write a function to check if the given tuple contains all valid values or not.",
      "function_name": "check_valid",
      "correct_solution": "def check_valid(test_tup):\r\n  res = not any(map(lambda ele: not ele, test_tup))\r\n  return (res) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "check_valid((True, True, True, True))",
          "expected_output": "True"
        },
        {
          "input": "check_valid((True, False, True, True))",
          "expected_output": "False"
        },
        {
          "input": "check_valid((True, True, True, True))",
          "expected_output": "True"
        }
      ],
      "broken_test_cases": [
        {
          "input": "check_valid((True, True, True, True))",
          "expected_output": "False"
        },
        {
          "input": "check_valid((True, False, True, True))",
          "expected_output": "True"
        },
        {
          "input": "check_valid((True, True, True, True))",
          "expected_output": "False"
        }
      ]
    },
    {
      "problem_id": "mbpp_371",
      "description": "Write a function to find the smallest missing element in a sorted array.",
      "function_name": "smallest_missing",
      "correct_solution": "def smallest_missing(A, left_element, right_element):\r\n    if left_element > right_element:\r\n        return left_element\r\n    mid = left_element + (right_element - left_element) // 2\r\n    if A[mid] == mid:\r\n        return smallest_missing(A, mid + 1, right_element)\r\n    else:\r\n        return smallest_missing(A, left_element, mid - 1)",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6)",
          "expected_output": "7"
        },
        {
          "input": "smallest_missing([0, 1, 2, 6, 9, 11, 15], 0, 6)",
          "expected_output": "3"
        },
        {
          "input": "smallest_missing([1, 2, 3, 4, 6, 9, 11, 15], 0, 7)",
          "expected_output": "0"
        }
      ],
      "broken_test_cases": [
        {
          "input": "smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6)",
          "expected_output": "6"
        },
        {
          "input": "smallest_missing([0, 1, 2, 6, 9, 11, 15], 0, 6)",
          "expected_output": "4"
        },
        {
          "input": "smallest_missing([1, 2, 3, 4, 6, 9, 11, 15], 0, 7)",
          "expected_output": "5"
        }
      ]
    },
    {
      "problem_id": "mbpp_109",
      "description": "Write a python function to find the count of rotations of a binary string with odd value.",
      "function_name": "odd_Equivalent",
      "correct_solution": "def odd_Equivalent(s,n): \r\n    count=0\r\n    for i in range(0,n): \r\n        if (s[i] == '1'): \r\n            count = count + 1\r\n    return count ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "odd_Equivalent('011001', 6)",
          "expected_output": "3"
        },
        {
          "input": "odd_Equivalent('11011', 5)",
          "expected_output": "4"
        },
        {
          "input": "odd_Equivalent('1010', 4)",
          "expected_output": "2"
        }
      ],
      "broken_test_cases": [
        {
          "input": "odd_Equivalent('011001', 6)",
          "expected_output": "2"
        },
        {
          "input": "odd_Equivalent('11011', 5)",
          "expected_output": "3"
        },
        {
          "input": "odd_Equivalent('1010', 4)",
          "expected_output": "3"
        }
      ]
    },
    {
      "problem_id": "mbpp_641",
      "description": "Write a function to find the nth nonagonal number.",
      "function_name": "is_nonagonal",
      "correct_solution": "def is_nonagonal(n): \r\n\treturn int(n * (7 * n - 5) / 2) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "is_nonagonal(10)",
          "expected_output": "325"
        },
        {
          "input": "is_nonagonal(15)",
          "expected_output": "750"
        },
        {
          "input": "is_nonagonal(18)",
          "expected_output": "1089"
        }
      ],
      "broken_test_cases": [
        {
          "input": "is_nonagonal(10)",
          "expected_output": "326"
        },
        {
          "input": "is_nonagonal(15)",
          "expected_output": "751"
        },
        {
          "input": "is_nonagonal(18)",
          "expected_output": "1000"
        }
      ]
    },
    {
      "problem_id": "mbpp_690",
      "description": "Write a function to multiply consecutive numbers of a given list.",
      "function_name": "mul_consecutive_nums",
      "correct_solution": "def mul_consecutive_nums(nums):\r\n    result = [b*a for a, b in zip(nums[:-1], nums[1:])]\r\n    return result",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "mul_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])",
          "expected_output": "[1, 3, 12, 16, 20, 30, 42]"
        },
        {
          "input": "mul_consecutive_nums([4, 5, 8, 9, 6, 10])",
          "expected_output": "[20, 40, 72, 54, 60]"
        },
        {
          "input": "mul_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
          "expected_output": "[2, 6, 12, 20, 30, 42, 56, 72, 90]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "mul_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])",
          "expected_output": "[1, 3, 12, 16, 20, 30, 41]"
        },
        {
          "input": "mul_consecutive_nums([4, 5, 8, 9, 6, 10])",
          "expected_output": "[20, 40, 72, 54, 55]"
        },
        {
          "input": "mul_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
          "expected_output": "[2, 6, 12, 20, 30, 42, 56, 72, 91]"
        }
      ]
    },
    {
      "problem_id": "mbpp_132",
      "description": "Write a function to convert tuple to a string.",
      "function_name": "tup_string",
      "correct_solution": "def tup_string(tup1):\r\n  str =  ''.join(tup1)\r\n  return str",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))",
          "expected_output": "exercises"
        },
        {
          "input": "tup_string(('p', 'y', 't', 'h', 'o', 'n'))",
          "expected_output": "python"
        },
        {
          "input": "tup_string(('p', 'r', 'o', 'g', 'r', 'a', 'm'))",
          "expected_output": "program"
        }
      ],
      "broken_test_cases": [
        {
          "input": "tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))",
          "expected_output": "wrong_exercises"
        },
        {
          "input": "tup_string(('p', 'y', 't', 'h', 'o', 'n'))",
          "expected_output": "pythonnn"
        },
        {
          "input": "tup_string(('p', 'r', 'o', 'g', 'r', 'a', 'm'))",
          "expected_output": "programx"
        }
      ]
    },
    {
      "problem_id": "mbpp_565",
      "description": "Write a python function to split a string into characters.",
      "function_name": "split",
      "correct_solution": "def split(word): \r\n    return [char for char in word] ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "split('python')",
          "expected_output": "['p', 'y', 't', 'h', 'o', 'n']"
        },
        {
          "input": "split('Name')",
          "expected_output": "['N', 'a', 'm', 'e']"
        },
        {
          "input": "split('program')",
          "expected_output": "['p', 'r', 'o', 'g', 'r', 'a', 'm']"
        }
      ],
      "broken_test_cases": [
        {
          "input": "split('python')",
          "expected_output": "['p', 'y', 'T', 'h', 'o', 'n']"
        },
        {
          "input": "split('Name')",
          "expected_output": "['n', 'a', 'm', 'e']"
        },
        {
          "input": "split('program')",
          "expected_output": "['p', 'r', 'o', 'g', 'r', 'a', 'm', 'x']"
        }
      ]
    },
    {
      "problem_id": "mbpp_404",
      "description": "Write a python function to find the minimum of two numbers.",
      "function_name": "minimum",
      "correct_solution": "def minimum(a,b):   \r\n    if a <= b: \r\n        return a \r\n    else: \r\n        return b ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "minimum(1, 2)",
          "expected_output": "1"
        },
        {
          "input": "minimum(-5, -4)",
          "expected_output": "-5"
        },
        {
          "input": "minimum(0, 0)",
          "expected_output": "0"
        }
      ],
      "broken_test_cases": [
        {
          "input": "minimum(1, 2)",
          "expected_output": "2"
        },
        {
          "input": "minimum(-5, -4)",
          "expected_output": "-4"
        },
        {
          "input": "minimum(0, 0)",
          "expected_output": "1"
        }
      ]
    },
    {
      "problem_id": "mbpp_158",
      "description": "Write a python function to find k number of operations required to make all elements equal.",
      "function_name": "min_Ops",
      "correct_solution": "def min_Ops(arr,n,k): \r\n    max1 = max(arr) \r\n    res = 0\r\n    for i in range(0,n):  \r\n        if ((max1 - arr[i]) % k != 0): \r\n            return -1 \r\n        else: \r\n            res += (max1 - arr[i]) / k \r\n    return int(res) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "min_Ops([2, 2, 2, 2], 4, 3)",
          "expected_output": "0"
        },
        {
          "input": "min_Ops([4, 2, 6, 8], 4, 3)",
          "expected_output": "-1"
        },
        {
          "input": "min_Ops([21, 33, 9, 45, 63], 5, 6)",
          "expected_output": "24"
        }
      ],
      "broken_test_cases": [
        {
          "input": "min_Ops([2, 2, 2, 2], 4, 3)",
          "expected_output": "1"
        },
        {
          "input": "min_Ops([4, 2, 6, 8], 4, 3)",
          "expected_output": "4"
        },
        {
          "input": "min_Ops([21, 33, 9, 45, 63], 5, 6)",
          "expected_output": "25"
        }
      ]
    },
    {
      "problem_id": "mbpp_152",
      "description": "Write a function to sort the given array by using merge sort.",
      "function_name": "merge_sort",
      "correct_solution": "def merge(a,b):\r\n    c = []\r\n    while len(a) != 0 and len(b) != 0:\r\n        if a[0] < b[0]:\r\n            c.append(a[0])\r\n            a.remove(a[0])\r\n        else:\r\n            c.append(b[0])\r\n            b.remove(b[0])\r\n    if len(a) == 0:\r\n        c += b\r\n    else:\r\n        c += a\r\n    return c\r\ndef merge_sort(x):\r\n    if len(x) == 0 or len(x) == 1:\r\n        return x\r\n    else:\r\n        middle = len(x)//2\r\n        a = merge_sort(x[:middle])\r\n        b = merge_sort(x[middle:])\r\n        return merge(a,b)\r\n",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "merge_sort([3, 4, 2, 6, 5, 7, 1, 9])",
          "expected_output": "[1, 2, 3, 4, 5, 6, 7, 9]"
        },
        {
          "input": "merge_sort([7, 25, 45, 78, 11, 33, 19])",
          "expected_output": "[7, 11, 19, 25, 33, 45, 78]"
        },
        {
          "input": "merge_sort([3, 1, 4, 9, 8])",
          "expected_output": "[1, 3, 4, 8, 9]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "merge_sort([3, 4, 2, 6, 5, 7, 1, 9])",
          "expected_output": "[1, 2, 3, 4, 5, 6, 8, 9]"
        },
        {
          "input": "merge_sort([7, 25, 45, 78, 11, 33, 19])",
          "expected_output": "[7, 11, 19, 25, 33, 45, 80]"
        },
        {
          "input": "merge_sort([3, 1, 4, 9, 8])",
          "expected_output": "[1, 3, 4, 9, 8]"
        }
      ]
    },
    {
      "problem_id": "mbpp_53",
      "description": "Write a python function to check whether the first and last characters of a given string are equal or not.",
      "function_name": "check_Equality",
      "correct_solution": "def check_Equality(str):\r\n  if (str[0] == str[-1]):  \r\n    return (\"Equal\") \r\n  else:  \r\n    return (\"Not Equal\") ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "check_Equality('abcda')",
          "expected_output": "Equal"
        },
        {
          "input": "check_Equality('ab')",
          "expected_output": "Not Equal"
        },
        {
          "input": "check_Equality('mad')",
          "expected_output": "Not Equal"
        }
      ],
      "broken_test_cases": [
        {
          "input": "check_Equality('abcda')",
          "expected_output": "Not Equal"
        },
        {
          "input": "check_Equality('ab')",
          "expected_output": "Equal"
        },
        {
          "input": "check_Equality('mad')",
          "expected_output": "Equal"
        }
      ]
    },
    {
      "problem_id": "mbpp_492",
      "description": "Write a function to search an element in the given array by using binary search.",
      "function_name": "binary_search",
      "correct_solution": "def binary_search(item_list,item):\r\n\tfirst = 0\r\n\tlast = len(item_list)-1\r\n\tfound = False\r\n\twhile( first<=last and not found):\r\n\t\tmid = (first + last)//2\r\n\t\tif item_list[mid] == item :\r\n\t\t\tfound = True\r\n\t\telse:\r\n\t\t\tif item < item_list[mid]:\r\n\t\t\t\tlast = mid - 1\r\n\t\t\telse:\r\n\t\t\t\tfirst = mid + 1\t\r\n\treturn found",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "binary_search([1, 2, 3, 5, 8], 6)",
          "expected_output": "False"
        },
        {
          "input": "binary_search([7, 8, 9, 10, 13], 10)",
          "expected_output": "True"
        },
        {
          "input": "binary_search([11, 13, 14, 19, 22, 36], 23)",
          "expected_output": "False"
        }
      ],
      "broken_test_cases": [
        {
          "input": "binary_search([1, 2, 3, 5, 8], 6)",
          "expected_output": "True"
        },
        {
          "input": "binary_search([7, 8, 9, 10, 13], 10)",
          "expected_output": "False"
        },
        {
          "input": "binary_search([11, 13, 14, 19, 22, 36], 23)",
          "expected_output": "True"
        }
      ]
    },
    {
      "problem_id": "mbpp_222",
      "description": "Write a function to check if all the elements in tuple have same data type or not.",
      "function_name": "check_type",
      "correct_solution": "def check_type(test_tuple):\r\n  res = True\r\n  for ele in test_tuple:\r\n    if not isinstance(ele, type(test_tuple[0])):\r\n      res = False\r\n      break\r\n  return (res) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "check_type((5, 6, 7, 3, 5, 6))",
          "expected_output": "True"
        },
        {
          "input": "check_type((1, 2, '4'))",
          "expected_output": "False"
        },
        {
          "input": "check_type((3, 2, 1, 4, 5))",
          "expected_output": "True"
        }
      ],
      "broken_test_cases": [
        {
          "input": "check_type((5, 6, 7, 3, 5, 6))",
          "expected_output": "False"
        },
        {
          "input": "check_type((1, 2, '4'))",
          "expected_output": "True"
        },
        {
          "input": "check_type((3, 2, 1, 4, 5))",
          "expected_output": "False"
        }
      ]
    },
    {
      "problem_id": "mbpp_301",
      "description": "Write a function to find the depth of a dictionary.",
      "function_name": "dict_depth",
      "correct_solution": "def dict_depth(d):\r\n    if isinstance(d, dict):\r\n        return 1 + (max(map(dict_depth, d.values())) if d else 0)\r\n    return 0",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "dict_depth({'a': 1, 'b': {'c': {'d': {}}}})",
          "expected_output": "4"
        },
        {
          "input": "dict_depth({'a': 1, 'b': {'c': 'python'}})",
          "expected_output": "2"
        },
        {
          "input": "dict_depth({1: 'Sun', 2: {3: {4: 'Mon'}}})",
          "expected_output": "3"
        }
      ],
      "broken_test_cases": [
        {
          "input": "dict_depth({'a': 1, 'b': {'c': {'d': {}}}})",
          "expected_output": "3"
        },
        {
          "input": "dict_depth({'a': 1, 'b': {'c': 'python'}})",
          "expected_output": "1"
        },
        {
          "input": "dict_depth({1: 'Sun', 2: {3: {4: 'Mon'}}})",
          "expected_output": "2"
        }
      ]
    },
    {
      "problem_id": "mbpp_836",
      "description": "Write a function to find length of the subarray having maximum sum.",
      "function_name": "max_sub_array_sum",
      "correct_solution": "from sys import maxsize \r\ndef max_sub_array_sum(a,size): \r\n\tmax_so_far = -maxsize - 1\r\n\tmax_ending_here = 0\r\n\tstart = 0\r\n\tend = 0\r\n\ts = 0\r\n\tfor i in range(0,size): \r\n\t\tmax_ending_here += a[i] \r\n\t\tif max_so_far < max_ending_here: \r\n\t\t\tmax_so_far = max_ending_here \r\n\t\t\tstart = s \r\n\t\t\tend = i \r\n\t\tif max_ending_here < 0: \r\n\t\t\tmax_ending_here = 0\r\n\t\t\ts = i+1\r\n\treturn (end - start + 1)",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8)",
          "expected_output": "5"
        },
        {
          "input": "max_sub_array_sum([1, -2, 1, 1, -2, 1], 6)",
          "expected_output": "2"
        },
        {
          "input": "max_sub_array_sum([-1, -2, 3, 4, 5], 5)",
          "expected_output": "3"
        }
      ],
      "broken_test_cases": [
        {
          "input": "max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8)",
          "expected_output": "4"
        },
        {
          "input": "max_sub_array_sum([1, -2, 1, 1, -2, 1], 6)",
          "expected_output": "4"
        },
        {
          "input": "max_sub_array_sum([-1, -2, 3, 4, 5], 5)",
          "expected_output": "4"
        }
      ]
    },
    {
      "problem_id": "mbpp_74",
      "description": "Write a function to check whether it follows the sequence given in the patterns array.",
      "function_name": "is_samepatterns",
      "correct_solution": "def is_samepatterns(colors, patterns):    \r\n    if len(colors) != len(patterns):\r\n        return False    \r\n    sdict = {}\r\n    pset = set()\r\n    sset = set()    \r\n    for i in range(len(patterns)):\r\n        pset.add(patterns[i])\r\n        sset.add(colors[i])\r\n        if patterns[i] not in sdict.keys():\r\n            sdict[patterns[i]] = []\r\n\r\n        keys = sdict[patterns[i]]\r\n        keys.append(colors[i])\r\n        sdict[patterns[i]] = keys\r\n\r\n    if len(pset) != len(sset):\r\n        return False   \r\n\r\n    for values in sdict.values():\r\n\r\n        for i in range(len(values) - 1):\r\n            if values[i] != values[i+1]:\r\n                return False\r\n\r\n    return True",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "is_samepatterns(['red', 'green', 'green'], ['a', 'b', 'b'])",
          "expected_output": "True"
        },
        {
          "input": "is_samepatterns(['red', 'green', 'greenn'], ['a', 'b', 'b'])",
          "expected_output": "False"
        },
        {
          "input": "is_samepatterns(['red', 'green', 'greenn'], ['a', 'b'])",
          "expected_output": "False"
        }
      ],
      "broken_test_cases": [
        {
          "input": "is_samepatterns(['red', 'green', 'green'], ['a', 'b', 'b'])",
          "expected_output": "False"
        },
        {
          "input": "is_samepatterns(['red', 'green', 'greenn'], ['a', 'b', 'b'])",
          "expected_output": "True"
        },
        {
          "input": "is_samepatterns(['red', 'green', 'greenn'], ['a', 'b', 'b'])",
          "expected_output": "True"
        }
      ]
    },
    {
      "problem_id": "mbpp_394",
      "description": "Write a function to check if given tuple is distinct or not.",
      "function_name": "check_distinct",
      "correct_solution": "def check_distinct(test_tup):\r\n  res = True\r\n  temp = set()\r\n  for ele in test_tup:\r\n    if ele in temp:\r\n      res = False\r\n      break\r\n    temp.add(ele)\r\n  return (res) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "check_distinct((1, 4, 5, 6, 1, 4))",
          "expected_output": "False"
        },
        {
          "input": "check_distinct((1, 4, 5, 6))",
          "expected_output": "True"
        },
        {
          "input": "check_distinct((2, 3, 4, 5, 6))",
          "expected_output": "True"
        }
      ],
      "broken_test_cases": [
        {
          "input": "check_distinct((1, 4, 5, 6, 1, 4))",
          "expected_output": "True"
        },
        {
          "input": "check_distinct((1, 4, 5, 6))",
          "expected_output": "False"
        },
        {
          "input": "check_distinct((2, 3, 4, 5, 6))",
          "expected_output": "False"
        }
      ]
    },
    {
      "problem_id": "mbpp_655",
      "description": "Write a python function to find the sum of fifth power of n natural numbers.",
      "function_name": "fifth_Power_Sum",
      "correct_solution": "def fifth_Power_Sum(n) : \r\n    sm = 0 \r\n    for i in range(1,n+1) : \r\n        sm = sm + (i*i*i*i*i) \r\n    return sm ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "fifth_Power_Sum(2)",
          "expected_output": "33"
        },
        {
          "input": "fifth_Power_Sum(4)",
          "expected_output": "1300"
        },
        {
          "input": "fifth_Power_Sum(3)",
          "expected_output": "276"
        }
      ],
      "broken_test_cases": [
        {
          "input": "fifth_Power_Sum(2)",
          "expected_output": "32"
        },
        {
          "input": "fifth_Power_Sum(4)",
          "expected_output": "1301"
        },
        {
          "input": "fifth_Power_Sum(3)",
          "expected_output": "277"
        }
      ]
    },
    {
      "problem_id": "mbpp_435",
      "description": "Write a python function to find the last digit of a given number.",
      "function_name": "last_Digit",
      "correct_solution": "def last_Digit(n) :\r\n    return (n % 10) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "last_Digit(123)",
          "expected_output": "3"
        },
        {
          "input": "last_Digit(25)",
          "expected_output": "5"
        },
        {
          "input": "last_Digit(30)",
          "expected_output": "0"
        }
      ],
      "broken_test_cases": [
        {
          "input": "last_Digit(123)",
          "expected_output": "4"
        },
        {
          "input": "last_Digit(25)",
          "expected_output": "6"
        },
        {
          "input": "last_Digit(30)",
          "expected_output": "1"
        }
      ]
    },
    {
      "problem_id": "mbpp_331",
      "description": "Write a python function to count unset bits of a given number.",
      "function_name": "count_unset_bits",
      "correct_solution": "def count_unset_bits(n): \r\n    count = 0\r\n    x = 1\r\n    while(x < n + 1): \r\n        if ((x & n) == 0): \r\n            count += 1\r\n        x = x << 1\r\n    return count  ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "count_unset_bits(2)",
          "expected_output": "1"
        },
        {
          "input": "count_unset_bits(4)",
          "expected_output": "2"
        },
        {
          "input": "count_unset_bits(6)",
          "expected_output": "1"
        }
      ],
      "broken_test_cases": [
        {
          "input": "count_unset_bits(2)",
          "expected_output": "2"
        },
        {
          "input": "count_unset_bits(4)",
          "expected_output": "1"
        },
        {
          "input": "count_unset_bits(6)",
          "expected_output": "2"
        }
      ]
    },
    {
      "problem_id": "mbpp_953",
      "description": "Write a python function to find the minimun number of subsets with distinct elements.",
      "function_name": "subset",
      "correct_solution": "def subset(ar, n): \r\n    res = 0\r\n    ar.sort() \r\n    for i in range(0, n) : \r\n        count = 1\r\n        for i in range(n - 1): \r\n            if ar[i] == ar[i + 1]: \r\n                count+=1\r\n            else: \r\n                break \r\n        res = max(res, count)  \r\n    return res ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "subset([1, 2, 3, 4], 4)",
          "expected_output": "1"
        },
        {
          "input": "subset([5, 6, 9, 3, 4, 3, 4], 7)",
          "expected_output": "2"
        },
        {
          "input": "subset([1, 2, 3], 3)",
          "expected_output": "1"
        }
      ],
      "broken_test_cases": [
        {
          "input": "subset([1, 2, 3, 4], 4)",
          "expected_output": "2"
        },
        {
          "input": "subset([5, 6, 9, 3, 4, 3, 4], 7)",
          "expected_output": "3"
        },
        {
          "input": "subset([1, 2, 3], 3)",
          "expected_output": "2"
        }
      ]
    },
    {
      "problem_id": "mbpp_362",
      "description": "Write a python function to find the item with maximum occurrences in a given list.",
      "function_name": "max_occurrences",
      "correct_solution": "def max_occurrences(nums):\r\n    max_val = 0\r\n    result = nums[0] \r\n    for i in nums:\r\n        occu = nums.count(i)\r\n        if occu > max_val:\r\n            max_val = occu\r\n            result = i \r\n    return result",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "max_occurrences([1, 2, 3, 1, 2, 3, 12, 4, 2])",
          "expected_output": "2"
        },
        {
          "input": "max_occurrences([1, 2, 3, 1, 2, 4, 1])",
          "expected_output": "1"
        }
      ],
      "broken_test_cases": [
        {
          "input": "max_occurrences([1, 2, 3, 1, 2, 3, 12, 4, 2])",
          "expected_output": "3"
        },
        {
          "input": "max_occurrences([1, 2, 3, 1, 2, 4, 1])",
          "expected_output": "2"
        }
      ]
    },
    {
      "problem_id": "mbpp_503",
      "description": "Write a function to add consecutive numbers of a given list.",
      "function_name": "add_consecutive_nums",
      "correct_solution": "def add_consecutive_nums(nums):\r\n    result = [b+a for a, b in zip(nums[:-1], nums[1:])]\r\n    return result",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])",
          "expected_output": "[2, 4, 7, 8, 9, 11, 13]"
        },
        {
          "input": "add_consecutive_nums([4, 5, 8, 9, 6, 10])",
          "expected_output": "[9, 13, 17, 15, 16]"
        },
        {
          "input": "add_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
          "expected_output": "[3, 5, 7, 9, 11, 13, 15, 17, 19]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])",
          "expected_output": "[2, 4, 7, 8, 9, 10, 13]"
        },
        {
          "input": "add_consecutive_nums([4, 5, 8, 9, 6, 10])",
          "expected_output": "[9, 13, 17, 16, 16]"
        },
        {
          "input": "add_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
          "expected_output": "[3, 5, 7, 9, 11, 13, 15, 17, 18]"
        }
      ]
    },
    {
      "problem_id": "mbpp_877",
      "description": "Write a python function to sort the given string.",
      "function_name": "sort_String",
      "correct_solution": "def sort_String(str) : \r\n    str = ''.join(sorted(str)) \r\n    return (str) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "sort_String('cba')",
          "expected_output": "abc"
        },
        {
          "input": "sort_String('data')",
          "expected_output": "aadt"
        },
        {
          "input": "sort_String('zxy')",
          "expected_output": "xyz"
        }
      ],
      "broken_test_cases": [
        {
          "input": "sort_String('cba')",
          "expected_output": "cba"
        },
        {
          "input": "sort_String('data')",
          "expected_output": "adta"
        },
        {
          "input": "sort_String('zxy')",
          "expected_output": "zyx"
        }
      ]
    },
    {
      "problem_id": "mbpp_844",
      "description": "Write a python function to find the kth element in an array containing odd elements first and then even elements.",
      "function_name": "get_Number",
      "correct_solution": "def get_Number(n, k): \r\n    arr = [0] * n; \r\n    i = 0; \r\n    odd = 1; \r\n    while (odd <= n):   \r\n        arr[i] = odd; \r\n        i += 1; \r\n        odd += 2;\r\n    even = 2; \r\n    while (even <= n): \r\n        arr[i] = even; \r\n        i += 1;\r\n        even += 2; \r\n    return arr[k - 1]; ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "get_Number(8, 5)",
          "expected_output": "2"
        },
        {
          "input": "get_Number(7, 2)",
          "expected_output": "3"
        },
        {
          "input": "get_Number(5, 2)",
          "expected_output": "3"
        }
      ],
      "broken_test_cases": [
        {
          "input": "get_Number(8, 5)",
          "expected_output": "3"
        },
        {
          "input": "get_Number(7, 2)",
          "expected_output": "5"
        },
        {
          "input": "get_Number(5, 2)",
          "expected_output": "5"
        }
      ]
    },
    {
      "problem_id": "mbpp_453",
      "description": "Write a python function to find the sum of even factors of a number.",
      "function_name": "sumofFactors",
      "correct_solution": "import math \r\ndef sumofFactors(n) : \r\n    if (n % 2 != 0) : \r\n        return 0\r\n    res = 1\r\n    for i in range(2, (int)(math.sqrt(n)) + 1) :    \r\n        count = 0\r\n        curr_sum = 1\r\n        curr_term = 1\r\n        while (n % i == 0) : \r\n            count= count + 1\r\n            n = n // i \r\n            if (i == 2 and count == 1) : \r\n                curr_sum = 0\r\n            curr_term = curr_term * i \r\n            curr_sum = curr_sum + curr_term \r\n        res = res * curr_sum  \r\n    if (n >= 2) : \r\n        res = res * (1 + n) \r\n    return res ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "sumofFactors(18)",
          "expected_output": "26"
        },
        {
          "input": "sumofFactors(30)",
          "expected_output": "48"
        },
        {
          "input": "sumofFactors(6)",
          "expected_output": "8"
        }
      ],
      "broken_test_cases": [
        {
          "input": "sumofFactors(18)",
          "expected_output": "30"
        },
        {
          "input": "sumofFactors(30)",
          "expected_output": "40"
        },
        {
          "input": "sumofFactors(6)",
          "expected_output": "10"
        }
      ]
    },
    {
      "problem_id": "mbpp_940",
      "description": "Write a function to sort the given array by using heap sort.",
      "function_name": "heap_sort",
      "correct_solution": "def heap_sort(arr):\r\n    heapify(arr)  \r\n    end = len(arr) - 1\r\n    while end > 0:\r\n        arr[end], arr[0] = arr[0], arr[end]\r\n        shift_down(arr, 0, end - 1)\r\n        end -= 1\r\n    return arr\r\n\r\ndef heapify(arr):\r\n    start = len(arr) // 2\r\n    while start >= 0:\r\n        shift_down(arr, start, len(arr) - 1)\r\n        start -= 1\r\ndef shift_down(arr, start, end):\r\n    root = start\r\n    while root * 2 + 1 <= end:\r\n        child = root * 2 + 1\r\n        if child + 1 <= end and arr[child] < arr[child + 1]:\r\n            child += 1\r\n        if child <= end and arr[root] < arr[child]:\r\n            arr[root], arr[child] = arr[child], arr[root]\r\n            root = child\r\n        else:\r\n            return\r\n",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "heap_sort([12, 2, 4, 5, 2, 3])",
          "expected_output": "[2, 2, 3, 4, 5, 12]"
        },
        {
          "input": "heap_sort([32, 14, 5, 6, 7, 19])",
          "expected_output": "[5, 6, 7, 14, 19, 32]"
        },
        {
          "input": "heap_sort([21, 15, 29, 78, 65])",
          "expected_output": "[15, 21, 29, 65, 78]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "heap_sort([12, 2, 4, 5, 2, 3])",
          "expected_output": "[2, 2, 4, 5, 3, 12]"
        },
        {
          "input": "heap_sort([32, 14, 5, 6, 7, 19])",
          "expected_output": "[6, 7, 5, 14, 19, 32]"
        },
        {
          "input": "heap_sort([21, 15, 29, 78, 65])",
          "expected_output": "[15, 29, 21, 65, 78]"
        }
      ]
    },
    {
      "problem_id": "mbpp_717",
      "description": "Write a function to calculate the standard deviation.",
      "function_name": "sd_calc",
      "correct_solution": "import math\r\nimport sys\r\ndef sd_calc(data):\r\n    n = len(data)\r\n    if n <= 1:\r\n        return 0.0\r\n    mean, sd = avg_calc(data), 0.0\r\n    for el in data:\r\n        sd += (float(el) - mean)**2\r\n    sd = math.sqrt(sd / float(n-1))\r\n    return sd\r\ndef avg_calc(ls):\r\n    n, mean = len(ls), 0.0\r\n    if n <= 1:\r\n        return ls[0]\r\n    for el in ls:\r\n        mean = mean + float(el)\r\n    mean = mean / float(n)\r\n    return mean",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "sd_calc([4, 2, 5, 8, 6])",
          "expected_output": "2.23606797749979"
        },
        {
          "input": "sd_calc([1, 2, 3, 4, 5, 6, 7])",
          "expected_output": "2.160246899469287"
        }
      ],
      "broken_test_cases": [
        {
          "input": "sd_calc([4, 2, 5, 8, 6])",
          "expected_output": "4.23606797749979"
        },
        {
          "input": "sd_calc([1, 2, 3, 4, 5, 6, 7])",
          "expected_output": "3.160246899469287"
        }
      ]
    },
    {
      "problem_id": "mbpp_112",
      "description": "Write a python function to find the perimeter of a cylinder.",
      "function_name": "perimeter",
      "correct_solution": "def perimeter(diameter,height) : \r\n    return 2*(diameter+height)  ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "perimeter(2, 4)",
          "expected_output": "12"
        },
        {
          "input": "perimeter(1, 2)",
          "expected_output": "6"
        },
        {
          "input": "perimeter(3, 1)",
          "expected_output": "8"
        }
      ],
      "broken_test_cases": [
        {
          "input": "perimeter(2, 4)",
          "expected_output": "10"
        },
        {
          "input": "perimeter(1, 2)",
          "expected_output": "8"
        },
        {
          "input": "perimeter(3, 1)",
          "expected_output": "6"
        }
      ]
    },
    {
      "problem_id": "mbpp_480",
      "description": "Write a python function to find the maximum occurring character in a given string.",
      "function_name": "get_max_occuring_char",
      "correct_solution": "def get_max_occuring_char(str1):\r\n  ASCII_SIZE = 256\r\n  ctr = [0] * ASCII_SIZE\r\n  max = -1\r\n  ch = ''\r\n  for i in str1:\r\n    ctr[ord(i)]+=1;\r\n  for i in str1:\r\n    if max < ctr[ord(i)]:\r\n      max = ctr[ord(i)]\r\n      ch = i\r\n  return ch",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "get_max_occuring_char('data')",
          "expected_output": "a"
        },
        {
          "input": "get_max_occuring_char('create')",
          "expected_output": "e"
        },
        {
          "input": "get_max_occuring_char('brilliant girl')",
          "expected_output": "i"
        }
      ],
      "broken_test_cases": [
        {
          "input": "get_max_occuring_char('data')",
          "expected_output": "b"
        },
        {
          "input": "get_max_occuring_char('create')",
          "expected_output": "'c'"
        },
        {
          "input": "get_max_occuring_char('brilliant girl')",
          "expected_output": "e"
        }
      ]
    },
    {
      "problem_id": "mbpp_179",
      "description": "Write a function to find if the given number is a keith number or not.",
      "function_name": "is_num_keith",
      "correct_solution": "def is_num_keith(x): \r\n\tterms = [] \r\n\ttemp = x \r\n\tn = 0 \r\n\twhile (temp > 0): \r\n\t\tterms.append(temp % 10) \r\n\t\ttemp = int(temp / 10) \r\n\t\tn+=1 \r\n\tterms.reverse() \r\n\tnext_term = 0 \r\n\ti = n \r\n\twhile (next_term < x): \r\n\t\tnext_term = 0 \r\n\t\tfor j in range(1,n+1): \r\n\t\t\tnext_term += terms[i - j] \r\n\t\tterms.append(next_term) \r\n\t\ti+=1 \r\n\treturn (next_term == x) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "is_num_keith(14)",
          "expected_output": "True"
        },
        {
          "input": "is_num_keith(12)",
          "expected_output": "False"
        },
        {
          "input": "is_num_keith(197)",
          "expected_output": "True"
        }
      ],
      "broken_test_cases": [
        {
          "input": "is_num_keith(14)",
          "expected_output": "False"
        },
        {
          "input": "is_num_keith(12)",
          "expected_output": "True"
        },
        {
          "input": "is_num_keith(197)",
          "expected_output": "False"
        }
      ]
    },
    {
      "problem_id": "mbpp_742",
      "description": "Write a function to caluclate the area of a tetrahedron.",
      "function_name": "area_tetrahedron",
      "correct_solution": "import math\r\ndef area_tetrahedron(side):\r\n  area = math.sqrt(3)*(side*side)\r\n  return area",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "area_tetrahedron(3)",
          "expected_output": "15.588457268119894"
        },
        {
          "input": "area_tetrahedron(20)",
          "expected_output": "692.8203230275509"
        },
        {
          "input": "area_tetrahedron(10)",
          "expected_output": "173.20508075688772"
        }
      ],
      "broken_test_cases": [
        {
          "input": "area_tetrahedron(3)",
          "expected_output": "10.0"
        },
        {
          "input": "area_tetrahedron(20)",
          "expected_output": "10.0"
        },
        {
          "input": "area_tetrahedron(10)",
          "expected_output": "100.0"
        }
      ]
    },
    {
      "problem_id": "mbpp_826",
      "description": "Write a python function to find the type of triangle from the given sides.",
      "function_name": "check_Type_Of_Triangle",
      "correct_solution": "def check_Type_Of_Triangle(a,b,c): \r\n    sqa = pow(a,2) \r\n    sqb = pow(b,2) \r\n    sqc = pow(c,2) \r\n    if (sqa == sqa + sqb or sqb == sqa + sqc or sqc == sqa + sqb): \r\n        return (\"Right-angled Triangle\") \r\n    elif (sqa > sqc + sqb or sqb > sqa + sqc or sqc > sqa + sqb): \r\n        return (\"Obtuse-angled Triangle\") \r\n    else: \r\n        return (\"Acute-angled Triangle\") ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "check_Type_Of_Triangle(1, 2, 3)",
          "expected_output": "Obtuse-angled Triangle"
        },
        {
          "input": "check_Type_Of_Triangle(2, 2, 2)",
          "expected_output": "Acute-angled Triangle"
        },
        {
          "input": "check_Type_Of_Triangle(1, 0, 1)",
          "expected_output": "Right-angled Triangle"
        }
      ],
      "broken_test_cases": [
        {
          "input": "check_Type_Of_Triangle(1, 2, 3)",
          "expected_output": "Acute-angled Triangle"
        },
        {
          "input": "check_Type_Of_Triangle(2, 2, 2)",
          "expected_output": "Right-angled Triangle"
        },
        {
          "input": "check_Type_Of_Triangle(1, 0, 1)",
          "expected_output": "Acute-angled Triangle"
        }
      ]
    },
    {
      "problem_id": "mbpp_799",
      "description": "Write a python function to left rotate the bits of a given number.",
      "function_name": "left_Rotate",
      "correct_solution": "INT_BITS = 32\r\ndef left_Rotate(n,d):   \r\n    return (n << d)|(n >> (INT_BITS - d))  ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "left_Rotate(16, 2)",
          "expected_output": "64"
        },
        {
          "input": "left_Rotate(10, 2)",
          "expected_output": "40"
        },
        {
          "input": "left_Rotate(99, 3)",
          "expected_output": "792"
        }
      ],
      "broken_test_cases": [
        {
          "input": "left_Rotate(16, 2)",
          "expected_output": "32"
        },
        {
          "input": "left_Rotate(10, 2)",
          "expected_output": "41"
        },
        {
          "input": "left_Rotate(99, 3)",
          "expected_output": "793"
        }
      ]
    },
    {
      "problem_id": "mbpp_485",
      "description": "Write a function to find the largest palindromic number in the given array.",
      "function_name": "largest_palindrome",
      "correct_solution": "def is_palindrome(n) : \r\n\tdivisor = 1\r\n\twhile (n / divisor >= 10) : \r\n\t\tdivisor *= 10\r\n\twhile (n != 0) : \r\n\t\tleading = n // divisor \r\n\t\ttrailing = n % 10\r\n\t\tif (leading != trailing) : \r\n\t\t\treturn False\r\n\t\tn = (n % divisor) // 10\r\n\t\tdivisor = divisor // 100\r\n\treturn True\r\ndef largest_palindrome(A, n) : \r\n\tA.sort() \r\n\tfor i in range(n - 1, -1, -1) : \r\n\t\tif (is_palindrome(A[i])) : \r\n\t\t\treturn A[i] \r\n\treturn -1",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "largest_palindrome([1, 232, 54545, 999991], 4)",
          "expected_output": "54545"
        },
        {
          "input": "largest_palindrome([1, 2, 3, 4, 5, 50], 6)",
          "expected_output": "5"
        },
        {
          "input": "largest_palindrome([1, 3, 7, 9, 45], 5)",
          "expected_output": "9"
        }
      ],
      "broken_test_cases": [
        {
          "input": "largest_palindrome([1, 232, 54545, 999991], 4)",
          "expected_output": "999991"
        },
        {
          "input": "largest_palindrome([1, 2, 3, 4, 5, 50], 6)",
          "expected_output": "50"
        },
        {
          "input": "largest_palindrome([1, 3, 7, 9, 45], 5)",
          "expected_output": "45"
        }
      ]
    },
    {
      "problem_id": "mbpp_426",
      "description": "Write a function to filter odd numbers using lambda function.",
      "function_name": "filter_oddnumbers",
      "correct_solution": "def filter_oddnumbers(nums):\r\n odd_nums = list(filter(lambda x: x%2 != 0, nums))\r\n return odd_nums",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
          "expected_output": "[1, 3, 5, 7, 9]"
        },
        {
          "input": "filter_oddnumbers([10, 20, 45, 67, 84, 93])",
          "expected_output": "[45, 67, 93]"
        },
        {
          "input": "filter_oddnumbers([5, 7, 9, 8, 6, 4, 3])",
          "expected_output": "[5, 7, 9, 3]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
          "expected_output": "[2, 4, 6, 8, 10]"
        },
        {
          "input": "filter_oddnumbers([10, 20, 45, 67, 84, 93])",
          "expected_output": "[10, 20, 45, 67, 84, 93]"
        },
        {
          "input": "filter_oddnumbers([5, 7, 9, 8, 6, 4, 3])",
          "expected_output": "[5, 7, 9, 8, 6, 4, 3]"
        }
      ]
    },
    {
      "problem_id": "mbpp_122",
      "description": "Write a function to find n\u2019th smart number.",
      "function_name": "smartNumber",
      "correct_solution": "MAX = 3000 \r\ndef smartNumber(n): \r\n\tprimes = [0] * MAX \r\n\tresult = [] \r\n\tfor i in range(2, MAX): \r\n\t\tif (primes[i] == 0): \r\n\t\t\tprimes[i] = 1 \r\n\t\t\tj = i * 2 \r\n\t\t\twhile (j < MAX): \r\n\t\t\t\tprimes[j] -= 1 \r\n\t\t\t\tif ( (primes[j] + 3) == 0): \r\n\t\t\t\t\tresult.append(j) \r\n\t\t\t\tj = j + i \r\n\tresult.sort() \r\n\treturn result[n - 1] ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "smartNumber(1)",
          "expected_output": "30"
        },
        {
          "input": "smartNumber(50)",
          "expected_output": "273"
        },
        {
          "input": "smartNumber(1000)",
          "expected_output": "2664"
        }
      ],
      "broken_test_cases": [
        {
          "input": "smartNumber(1)",
          "expected_output": "31"
        },
        {
          "input": "smartNumber(50)",
          "expected_output": "274"
        },
        {
          "input": "smartNumber(1000)",
          "expected_output": "2665"
        }
      ]
    },
    {
      "problem_id": "mbpp_271",
      "description": "Write a python function to find the sum of fifth power of first n even natural numbers.",
      "function_name": "even_Power_Sum",
      "correct_solution": "def even_Power_Sum(n): \r\n    sum = 0; \r\n    for i in range(1,n+1): \r\n        j = 2*i; \r\n        sum = sum + (j*j*j*j*j); \r\n    return sum; ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "even_Power_Sum(2)",
          "expected_output": "1056"
        },
        {
          "input": "even_Power_Sum(3)",
          "expected_output": "8832"
        },
        {
          "input": "even_Power_Sum(1)",
          "expected_output": "32"
        }
      ],
      "broken_test_cases": [
        {
          "input": "even_Power_Sum(2)",
          "expected_output": "1057"
        },
        {
          "input": "even_Power_Sum(3)",
          "expected_output": "8833"
        },
        {
          "input": "even_Power_Sum(1)",
          "expected_output": "31"
        }
      ]
    },
    {
      "problem_id": "mbpp_65",
      "description": "Write a function of recursion list sum.",
      "function_name": "recursive_list_sum",
      "correct_solution": "def recursive_list_sum(data_list):\r\n\ttotal = 0\r\n\tfor element in data_list:\r\n\t\tif type(element) == type([]):\r\n\t\t\ttotal = total + recursive_list_sum(element)\r\n\t\telse:\r\n\t\t\ttotal = total + element\r\n\treturn total",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "recursive_list_sum([1, 2, [3, 4], [5, 6]])",
          "expected_output": "21"
        },
        {
          "input": "recursive_list_sum([7, 10, [15, 14], [19, 41]])",
          "expected_output": "106"
        },
        {
          "input": "recursive_list_sum([10, 20, [30, 40], [50, 60]])",
          "expected_output": "210"
        }
      ],
      "broken_test_cases": [
        {
          "input": "recursive_list_sum([1, 2, [3, 4], [5, 6]])",
          "expected_output": "20"
        },
        {
          "input": "recursive_list_sum([7, 10, [15, 14], [19, 41]])",
          "expected_output": "105"
        },
        {
          "input": "recursive_list_sum([10, 20, [30, 40], [50, 60]])",
          "expected_output": "211"
        }
      ]
    },
    {
      "problem_id": "mbpp_580",
      "description": "Write a function to extract the even elements in the nested mixed tuple.",
      "function_name": "extract_even",
      "correct_solution": "def even_ele(test_tuple, even_fnc): \r\n\tres = tuple() \r\n\tfor ele in test_tuple: \r\n\t\tif isinstance(ele, tuple): \r\n\t\t\tres += (even_ele(ele, even_fnc), ) \r\n\t\telif even_fnc(ele): \r\n\t\t\tres += (ele, ) \r\n\treturn res \r\ndef extract_even(test_tuple):\r\n  res = even_ele(test_tuple, lambda x: x % 2 == 0)\r\n  return (res) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "extract_even((4, 5, (7, 6, (2, 4)), 6, 8))",
          "expected_output": "(4, (6, (2, 4)), 6, 8)"
        },
        {
          "input": "extract_even((5, 6, (8, 7, (4, 8)), 7, 9))",
          "expected_output": "(6, (8, (4, 8)))"
        },
        {
          "input": "extract_even((5, 6, (9, 8, (4, 6)), 8, 10))",
          "expected_output": "(6, (8, (4, 6)), 8, 10)"
        }
      ],
      "broken_test_cases": [
        {
          "input": "extract_even((4, 5, (7, 6, (2, 4)), 6, 8))",
          "expected_output": "(4, (7, 6, (2, 4)), 6, 8)"
        },
        {
          "input": "extract_even((5, 6, (8, 7, (4, 8)), 7, 9))",
          "expected_output": "(6, (8, (4, 8)), 7)"
        },
        {
          "input": "extract_even((5, 6, (9, 8, (4, 6)), 8, 10))",
          "expected_output": "(6, (8, (4, 6)), 8)"
        }
      ]
    },
    {
      "problem_id": "mbpp_558",
      "description": "Write a python function to find the digit distance between two integers.",
      "function_name": "digit_distance_nums",
      "correct_solution": "def digit_distance_nums(n1, n2):\r\n         return sum(map(int,str(abs(n1-n2))))",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "digit_distance_nums(1, 2)",
          "expected_output": "1"
        },
        {
          "input": "digit_distance_nums(23, 56)",
          "expected_output": "6"
        },
        {
          "input": "digit_distance_nums(123, 256)",
          "expected_output": "7"
        }
      ],
      "broken_test_cases": [
        {
          "input": "digit_distance_nums(1, 2)",
          "expected_output": "2"
        },
        {
          "input": "digit_distance_nums(23, 56)",
          "expected_output": "10"
        },
        {
          "input": "digit_distance_nums(123, 256)",
          "expected_output": "6"
        }
      ]
    },
    {
      "problem_id": "mbpp_278",
      "description": "Write a function to find the element count that occurs before the record in the given tuple.",
      "function_name": "count_first_elements",
      "correct_solution": "def count_first_elements(test_tup):\r\n  for count, ele in enumerate(test_tup):\r\n    if isinstance(ele, tuple):\r\n      break\r\n  return (count) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "count_first_elements((1, 5, 7, (4, 6), 10))",
          "expected_output": "3"
        },
        {
          "input": "count_first_elements((2, 9, (5, 7), 11))",
          "expected_output": "2"
        },
        {
          "input": "count_first_elements((11, 15, 5, 8, (2, 3), 8))",
          "expected_output": "4"
        }
      ],
      "broken_test_cases": [
        {
          "input": "count_first_elements((1, 5, 7, (4, 6), 10))",
          "expected_output": "4"
        },
        {
          "input": "count_first_elements((2, 9, (5, 7), 11))",
          "expected_output": "3"
        },
        {
          "input": "count_first_elements((11, 15, 5, 8, (2, 3), 8))",
          "expected_output": "3"
        }
      ]
    },
    {
      "problem_id": "mbpp_188",
      "description": "Write a python function to check whether the given number can be represented by product of two squares or not.",
      "function_name": "prod_Square",
      "correct_solution": "def prod_Square(n):\r\n    for i in range(2,(n) + 1):\r\n        if (i*i < (n+1)):\r\n            for j in range(2,n + 1):\r\n                if ((i*i*j*j) == n):\r\n                    return True;\r\n    return False;",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "prod_Square(25)",
          "expected_output": "False"
        },
        {
          "input": "prod_Square(30)",
          "expected_output": "False"
        },
        {
          "input": "prod_Square(16)",
          "expected_output": "True"
        }
      ],
      "broken_test_cases": [
        {
          "input": "prod_Square(25)",
          "expected_output": "True"
        },
        {
          "input": "prod_Square(30)",
          "expected_output": "True"
        },
        {
          "input": "prod_Square(16)",
          "expected_output": "False"
        }
      ]
    },
    {
      "problem_id": "mbpp_213",
      "description": "Write a function to perform the concatenation of two string tuples.",
      "function_name": "concatenate_strings",
      "correct_solution": "def concatenate_strings(test_tup1, test_tup2):\r\n  res = tuple(ele1 + ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "concatenate_strings(('Manjeet', 'Nikhil', 'Akshat'), (' Singh', ' Meherwal', ' Garg'))",
          "expected_output": "('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')"
        },
        {
          "input": "concatenate_strings(('Shaik', 'Ayesha', 'Sanya'), (' Dawood', ' Begum', ' Singh'))",
          "expected_output": "('Shaik Dawood', 'Ayesha Begum', 'Sanya Singh')"
        },
        {
          "input": "concatenate_strings(('Harpreet', 'Priyanka', 'Muskan'), ('Kour', ' Agarwal', 'Sethi'))",
          "expected_output": "('HarpreetKour', 'Priyanka Agarwal', 'MuskanSethi')"
        }
      ],
      "broken_test_cases": [
        {
          "input": "concatenate_strings(('Manjeet', 'Nikhil', 'Akshat'), (' Singh', ' Meherwal', ' Garg'))",
          "expected_output": "('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg', 'Extra string')"
        },
        {
          "input": "concatenate_strings(('Shaik', 'Ayesha', 'Sanya'), (' Dawood', ' Begum', ' Singh'))",
          "expected_output": "('Shaik Dawood', 'Ayesha Begum', 'Sanya Singh', 'Extra String')"
        },
        {
          "input": "concatenate_strings(('Harpreet', 'Priyanka', 'Muskan'), ('Kour', ' Agarwal', 'Sethi'))",
          "expected_output": "('HarpreetKour', 'Priyanka Agarwal', 'MuskanSingh')"
        }
      ]
    },
    {
      "problem_id": "mbpp_612",
      "description": "Write a python function to merge the first and last elements separately in a list of lists.",
      "function_name": "merge",
      "correct_solution": "def merge(lst):  \r\n    return [list(ele) for ele in list(zip(*lst))] ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "merge([['x', 'y'], ['a', 'b'], ['m', 'n']])",
          "expected_output": "[['x', 'a', 'm'], ['y', 'b', 'n']]"
        },
        {
          "input": "merge([[1, 2], [3, 4], [5, 6], [7, 8]])",
          "expected_output": "[[1, 3, 5, 7], [2, 4, 6, 8]]"
        },
        {
          "input": "merge([['x', 'y', 'z'], ['a', 'b', 'c'], ['m', 'n', 'o']])",
          "expected_output": "[['x', 'a', 'm'], ['y', 'b', 'n'], ['z', 'c', 'o']]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "merge([['x', 'y'], ['a', 'b'], ['m', 'n']])",
          "expected_output": "[['x', 'a'], ['y', 'b', 'm', 'n']]"
        },
        {
          "input": "merge([[1, 2], [3, 4], [5, 6], [7, 8]])",
          "expected_output": "[[1, 3, 5, 8], [2, 4, 6, 7]]"
        },
        {
          "input": "merge([['x', 'y', 'z'], ['a', 'b', 'c'], ['m', 'n', 'o']])",
          "expected_output": "[['x', 'a', 'n'], ['y', 'b', 'm'], ['z', 'c', 'o']]"
        }
      ]
    },
    {
      "problem_id": "mbpp_811",
      "description": "Write a function to check if two lists of tuples are identical or not.",
      "function_name": "check_identical",
      "correct_solution": "def check_identical(test_list1, test_list2):\r\n  res = test_list1 == test_list2\r\n  return (res) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "check_identical([(10, 4), (2, 5)], [(10, 4), (2, 5)])",
          "expected_output": "True"
        },
        {
          "input": "check_identical([(1, 2), (3, 7)], [(12, 14), (12, 45)])",
          "expected_output": "False"
        },
        {
          "input": "check_identical([(2, 14), (12, 25)], [(2, 14), (12, 25)])",
          "expected_output": "True"
        }
      ],
      "broken_test_cases": [
        {
          "input": "check_identical([(10, 4), (2, 5)], [(10, 4), (2, 5)])",
          "expected_output": "False"
        },
        {
          "input": "check_identical([(1, 2), (3, 7)], [(12, 14), (12, 45)])",
          "expected_output": "True"
        },
        {
          "input": "check_identical([(2, 14), (12, 25)], [(2, 14), (12, 25)])",
          "expected_output": "False"
        }
      ]
    },
    {
      "problem_id": "mbpp_126",
      "description": "Write a python function to find the sum of common divisors of two given numbers.",
      "function_name": "sum",
      "correct_solution": "def sum(a,b): \r\n    sum = 0\r\n    for i in range (1,min(a,b)): \r\n        if (a % i == 0 and b % i == 0): \r\n            sum += i \r\n    return sum",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "sum(10, 15)",
          "expected_output": "6"
        },
        {
          "input": "sum(100, 150)",
          "expected_output": "93"
        },
        {
          "input": "sum(4, 6)",
          "expected_output": "3"
        }
      ],
      "broken_test_cases": [
        {
          "input": "sum(10, 15)",
          "expected_output": "7"
        },
        {
          "input": "sum(100, 150)",
          "expected_output": "94"
        },
        {
          "input": "sum(4, 6)",
          "expected_output": "4"
        }
      ]
    },
    {
      "problem_id": "mbpp_455",
      "description": "Write a function to check whether the given month number contains 31 days or not.",
      "function_name": "check_monthnumb_number",
      "correct_solution": "def check_monthnumb_number(monthnum2):\r\n  if(monthnum2==1 or monthnum2==3 or monthnum2==5 or monthnum2==7 or monthnum2==8 or monthnum2==10 or monthnum2==12):\r\n    return True\r\n  else:\r\n    return False",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "check_monthnumb_number(5)",
          "expected_output": "True"
        },
        {
          "input": "check_monthnumb_number(2)",
          "expected_output": "False"
        },
        {
          "input": "check_monthnumb_number(6)",
          "expected_output": "False"
        }
      ],
      "broken_test_cases": [
        {
          "input": "check_monthnumb_number(5)",
          "expected_output": "False"
        },
        {
          "input": "check_monthnumb_number(2)",
          "expected_output": "True"
        },
        {
          "input": "check_monthnumb_number(6)",
          "expected_output": "True"
        }
      ]
    },
    {
      "problem_id": "mbpp_969",
      "description": "Write a function to join the tuples if they have similar initial elements.",
      "function_name": "join_tuples",
      "correct_solution": "def join_tuples(test_list):\r\n  res = []\r\n  for sub in test_list:\r\n    if res and res[-1][0] == sub[0]:\r\n      res[-1].extend(sub[1:])\r\n    else:\r\n      res.append([ele for ele in sub])\r\n  res = list(map(tuple, res))\r\n  return (res) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "join_tuples([(5, 6), (5, 7), (6, 8), (6, 10), (7, 13)])",
          "expected_output": "[(5, 6, 7), (6, 8, 10), (7, 13)]"
        },
        {
          "input": "join_tuples([(6, 7), (6, 8), (7, 9), (7, 11), (8, 14)])",
          "expected_output": "[(6, 7, 8), (7, 9, 11), (8, 14)]"
        },
        {
          "input": "join_tuples([(7, 8), (7, 9), (8, 10), (8, 12), (9, 15)])",
          "expected_output": "[(7, 8, 9), (8, 10, 12), (9, 15)]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "join_tuples([(5, 6), (5, 7), (6, 8), (6, 10), (7, 13)])",
          "expected_output": "[(5, 6, 7), (6, 8), (6, 10), (7, 13)]"
        },
        {
          "input": "join_tuples([(6, 7), (6, 8), (7, 9), (7, 11), (8, 14)])",
          "expected_output": "[(6, 7, 8), (7, 9, 11), (8, 14, 6)]"
        },
        {
          "input": "join_tuples([(7, 8), (7, 9), (8, 10), (8, 12), (9, 15)])",
          "expected_output": "[(7, 8, 9), (8, 10, 12), (9, 15, 7)]"
        }
      ]
    },
    {
      "problem_id": "mbpp_767",
      "description": "Write a python function to count the number of pairs whose sum is equal to \u2018sum\u2019.",
      "function_name": "get_Pairs_Count",
      "correct_solution": "def get_Pairs_Count(arr,n,sum):\r\n    count = 0  \r\n    for i in range(0,n):\r\n        for j in range(i + 1,n):\r\n            if arr[i] + arr[j] == sum:\r\n                count += 1\r\n    return count",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "get_Pairs_Count([1, 1, 1, 1], 4, 2)",
          "expected_output": "6"
        },
        {
          "input": "get_Pairs_Count([1, 5, 7, -1, 5], 5, 6)",
          "expected_output": "3"
        },
        {
          "input": "get_Pairs_Count([1, -2, 3], 3, 1)",
          "expected_output": "1"
        }
      ],
      "broken_test_cases": [
        {
          "input": "get_Pairs_Count([1, 1, 1, 1], 4, 2)",
          "expected_output": "7"
        },
        {
          "input": "get_Pairs_Count([1, 5, 7, -1, 5], 5, 6)",
          "expected_output": "5"
        },
        {
          "input": "get_Pairs_Count([1, -2, 3], 3, 1)",
          "expected_output": "2"
        }
      ]
    },
    {
      "problem_id": "mbpp_488",
      "description": "Write a function to find the area of a pentagon.",
      "function_name": "area_pentagon",
      "correct_solution": "import math\r\ndef area_pentagon(a):\r\n  area=(math.sqrt(5*(5+2*math.sqrt(5)))*pow(a,2))/4.0\r\n  return area",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "area_pentagon(5)",
          "expected_output": "43.01193501472417"
        },
        {
          "input": "area_pentagon(10)",
          "expected_output": "172.0477400588967"
        }
      ],
      "broken_test_cases": [
        {
          "input": "area_pentagon(5)",
          "expected_output": "30.0"
        },
        {
          "input": "area_pentagon(10)",
          "expected_output": "100.0477400588967"
        }
      ]
    },
    {
      "problem_id": "mbpp_264",
      "description": "Write a function to calculate a dog's age in dog's years.",
      "function_name": "dog_age",
      "correct_solution": "def dog_age(h_age):\r\n if h_age < 0:\r\n \texit()\r\n elif h_age <= 2:\r\n\t d_age = h_age * 10.5\r\n else:\r\n\t d_age = 21 + (h_age - 2)*4\r\n return d_age",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "dog_age(12)",
          "expected_output": "61"
        },
        {
          "input": "dog_age(15)",
          "expected_output": "73"
        },
        {
          "input": "dog_age(24)",
          "expected_output": "109"
        }
      ],
      "broken_test_cases": [
        {
          "input": "dog_age(12)",
          "expected_output": "60"
        },
        {
          "input": "dog_age(15)",
          "expected_output": "75"
        },
        {
          "input": "dog_age(24)",
          "expected_output": "110"
        }
      ]
    },
    {
      "problem_id": "mbpp_914",
      "description": "Write a python function to check whether the given string is made up of two alternating characters or not.",
      "function_name": "is_Two_Alter",
      "correct_solution": "def is_Two_Alter(s):  \r\n    for i in range (len( s) - 2) : \r\n        if (s[i] != s[i + 2]) : \r\n            return False\r\n    if (s[0] == s[1]): \r\n        return False\r\n    return True",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "is_Two_Alter('abab')",
          "expected_output": "True"
        },
        {
          "input": "is_Two_Alter('aaaa')",
          "expected_output": "False"
        },
        {
          "input": "is_Two_Alter('xyz')",
          "expected_output": "False"
        }
      ],
      "broken_test_cases": [
        {
          "input": "is_Two_Alter('abab')",
          "expected_output": "False"
        },
        {
          "input": "is_Two_Alter('aaaa')",
          "expected_output": "True"
        },
        {
          "input": "is_Two_Alter('xyz')",
          "expected_output": "True"
        }
      ]
    },
    {
      "problem_id": "mbpp_644",
      "description": "Write a python function to reverse an array upto a given position.",
      "function_name": "reverse_Array_Upto_K",
      "correct_solution": "def reverse_Array_Upto_K(input, k): \r\n  return (input[k-1::-1] + input[k:]) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "reverse_Array_Upto_K([1, 2, 3, 4, 5, 6], 4)",
          "expected_output": "[4, 3, 2, 1, 5, 6]"
        },
        {
          "input": "reverse_Array_Upto_K([4, 5, 6, 7], 2)",
          "expected_output": "[5, 4, 6, 7]"
        },
        {
          "input": "reverse_Array_Upto_K([9, 8, 7, 6, 5], 3)",
          "expected_output": "[7, 8, 9, 6, 5]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "reverse_Array_Upto_K([1, 2, 3, 4, 5, 6], 4)",
          "expected_output": "[4, 3, 2, 1, 6, 5]"
        },
        {
          "input": "reverse_Array_Upto_K([4, 5, 6, 7], 2)",
          "expected_output": "[6, 5, 4, 7]"
        },
        {
          "input": "reverse_Array_Upto_K([9, 8, 7, 6, 5], 3)",
          "expected_output": "[7, 8, 6, 5, 9]"
        }
      ]
    },
    {
      "problem_id": "mbpp_807",
      "description": "Write a python function to find the first odd number in a given list of numbers.",
      "function_name": "first_odd",
      "correct_solution": "def first_odd(nums):\r\n  first_odd = next((el for el in nums if el%2!=0),-1)\r\n  return first_odd",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "first_odd([1, 3, 5])",
          "expected_output": "1"
        },
        {
          "input": "first_odd([2, 4, 1, 3])",
          "expected_output": "1"
        },
        {
          "input": "first_odd([8, 9, 1])",
          "expected_output": "9"
        }
      ],
      "broken_test_cases": [
        {
          "input": "first_odd([1, 3, 5])",
          "expected_output": "5"
        },
        {
          "input": "first_odd([2, 4, 1, 3])",
          "expected_output": "3"
        },
        {
          "input": "first_odd([8, 9, 1])",
          "expected_output": "8"
        }
      ]
    },
    {
      "problem_id": "mbpp_687",
      "description": "Write a function to find the greatest common divisor (gcd) of two integers by using recursion.",
      "function_name": "recur_gcd",
      "correct_solution": "def recur_gcd(a, b):\r\n\tlow = min(a, b)\r\n\thigh = max(a, b)\r\n\tif low == 0:\r\n\t\treturn high\r\n\telif low == 1:\r\n\t\treturn 1\r\n\telse:\r\n\t\treturn recur_gcd(low, high%low)",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "recur_gcd(12, 14)",
          "expected_output": "2"
        },
        {
          "input": "recur_gcd(13, 17)",
          "expected_output": "1"
        },
        {
          "input": "recur_gcd(9, 3)",
          "expected_output": "3"
        }
      ],
      "broken_test_cases": [
        {
          "input": "recur_gcd(12, 14)",
          "expected_output": "3"
        },
        {
          "input": "recur_gcd(13, 17)",
          "expected_output": "2"
        },
        {
          "input": "recur_gcd(9, 3)",
          "expected_output": "1"
        }
      ]
    },
    {
      "problem_id": "mbpp_18",
      "description": "Write a function to remove characters from the first string which are present in the second string.",
      "function_name": "remove_dirty_chars",
      "correct_solution": "NO_OF_CHARS = 256\r\ndef str_to_list(string): \r\n\ttemp = [] \r\n\tfor x in string: \r\n\t\ttemp.append(x) \r\n\treturn temp \r\ndef lst_to_string(List): \r\n\treturn ''.join(List) \r\ndef get_char_count_array(string): \r\n\tcount = [0] * NO_OF_CHARS \r\n\tfor i in string: \r\n\t\tcount[ord(i)] += 1\r\n\treturn count \r\ndef remove_dirty_chars(string, second_string): \r\n\tcount = get_char_count_array(second_string) \r\n\tip_ind = 0\r\n\tres_ind = 0\r\n\ttemp = '' \r\n\tstr_list = str_to_list(string) \r\n\twhile ip_ind != len(str_list): \r\n\t\ttemp = str_list[ip_ind] \r\n\t\tif count[ord(temp)] == 0: \r\n\t\t\tstr_list[res_ind] = str_list[ip_ind] \r\n\t\t\tres_ind += 1\r\n\t\tip_ind+=1\r\n\treturn lst_to_string(str_list[0:res_ind]) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "remove_dirty_chars('probasscurve', 'pros')",
          "expected_output": "bacuve"
        },
        {
          "input": "remove_dirty_chars('digitalindia', 'talent')",
          "expected_output": "digiidi"
        },
        {
          "input": "remove_dirty_chars('exoticmiles', 'toxic')",
          "expected_output": "emles"
        }
      ],
      "broken_test_cases": [
        {
          "input": "remove_dirty_chars('probasscurve', 'pros')",
          "expected_output": "bacueve"
        },
        {
          "input": "remove_dirty_chars('digitalindia', 'talent')",
          "expected_output": "digiindia"
        },
        {
          "input": "remove_dirty_chars('exoticmiles', 'toxic')",
          "expected_output": "emils"
        }
      ]
    },
    {
      "problem_id": "mbpp_397",
      "description": "Write a function to find the median of three specific numbers.",
      "function_name": "median_numbers",
      "correct_solution": "def median_numbers(a,b,c):\r\n if a > b:\r\n    if a < c:\r\n        median = a\r\n    elif b > c:\r\n        median = b\r\n    else:\r\n        median = c\r\n else:\r\n    if a > c:\r\n        median = a\r\n    elif b < c:\r\n        median = b\r\n    else:\r\n        median = c\r\n return median",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "median_numbers(25, 55, 65)",
          "expected_output": "55.0"
        },
        {
          "input": "median_numbers(20, 10, 30)",
          "expected_output": "20.0"
        },
        {
          "input": "median_numbers(15, 45, 75)",
          "expected_output": "45.0"
        }
      ],
      "broken_test_cases": [
        {
          "input": "median_numbers(25, 55, 65)",
          "expected_output": "65.0"
        },
        {
          "input": "median_numbers(20, 10, 30)",
          "expected_output": "10.0"
        },
        {
          "input": "median_numbers(15, 45, 75)",
          "expected_output": "25.0"
        }
      ]
    },
    {
      "problem_id": "mbpp_825",
      "description": "Write a python function to access multiple elements of specified index from a given list.",
      "function_name": "access_elements",
      "correct_solution": "def access_elements(nums, list_index):\r\n    result = [nums[i] for i in list_index]\r\n    return result",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "access_elements([2, 3, 8, 4, 7, 9], [0, 3, 5])",
          "expected_output": "[2, 4, 9]"
        },
        {
          "input": "access_elements([1, 2, 3, 4, 5], [1, 2])",
          "expected_output": "[2, 3]"
        },
        {
          "input": "access_elements([1, 0, 2, 3], [0, 1])",
          "expected_output": "[1, 0]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "access_elements([2, 3, 8, 4, 7, 9], [0, 3, 5])",
          "expected_output": "[2, 4, 8]"
        },
        {
          "input": "access_elements([1, 2, 3, 4, 5], [1, 2])",
          "expected_output": "[1, 4]"
        },
        {
          "input": "access_elements([1, 0, 2, 3], [0, 1])",
          "expected_output": "[0, 1]"
        }
      ]
    },
    {
      "problem_id": "mbpp_60",
      "description": "Write a function to find the maximum length of the subsequence with difference between adjacent elements for the given array.",
      "function_name": "max_len_sub",
      "correct_solution": "def max_len_sub( arr, n): \r\n\tmls=[] \r\n\tmax = 0\r\n\tfor i in range(n): \r\n\t\tmls.append(1) \r\n\tfor i in range(n): \r\n\t\tfor j in range(i): \r\n\t\t\tif (abs(arr[i] - arr[j]) <= 1 and mls[i] < mls[j] + 1): \r\n\t\t\t\tmls[i] = mls[j] + 1\r\n\tfor i in range(n): \r\n\t\tif (max < mls[i]): \r\n\t\t\tmax = mls[i] \r\n\treturn max",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8)",
          "expected_output": "5"
        },
        {
          "input": "max_len_sub([-2, -1, 5, -1, 4, 0, 3], 7)",
          "expected_output": "4"
        },
        {
          "input": "max_len_sub([9, 11, 13, 15, 18], 5)",
          "expected_output": "1"
        }
      ],
      "broken_test_cases": [
        {
          "input": "max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8)",
          "expected_output": "3"
        },
        {
          "input": "max_len_sub([-2, -1, 5, -1, 4, 0, 3], 7)",
          "expected_output": "3"
        },
        {
          "input": "max_len_sub([9, 11, 13, 15, 18], 5)",
          "expected_output": "5"
        }
      ]
    },
    {
      "problem_id": "mbpp_189",
      "description": "Write a python function to find the first missing positive number.",
      "function_name": "first_Missing_Positive",
      "correct_solution": "def first_Missing_Positive(arr,n): \r\n    ptr = 0\r\n    for i in range(n):\r\n        if arr[i] == 1:\r\n            ptr = 1\r\n            break\r\n    if ptr == 0:\r\n        return(1)\r\n    for i in range(n):\r\n        if arr[i] <= 0 or arr[i] > n:\r\n            arr[i] = 1\r\n    for i in range(n):\r\n        arr[(arr[i] - 1) % n] += n\r\n    for i in range(n):\r\n        if arr[i] <= n:\r\n            return(i + 1)\r\n    return(n + 1)",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "first_Missing_Positive([1, 2, 3, -1, 5], 5)",
          "expected_output": "4"
        },
        {
          "input": "first_Missing_Positive([0, -1, -2, 1, 5, 8], 6)",
          "expected_output": "2"
        },
        {
          "input": "first_Missing_Positive([0, 1, 2, 5, -8], 5)",
          "expected_output": "3"
        }
      ],
      "broken_test_cases": [
        {
          "input": "first_Missing_Positive([1, 2, 3, -1, 5], 5)",
          "expected_output": "5"
        },
        {
          "input": "first_Missing_Positive([0, -1, -2, 1, 5, 8], 6)",
          "expected_output": "3"
        },
        {
          "input": "first_Missing_Positive([0, 1, 2, 5, -8], 5)",
          "expected_output": "4"
        }
      ]
    },
    {
      "problem_id": "mbpp_220",
      "description": "Write a function to replace maximum n occurrences of spaces, commas, or dots with a colon.",
      "function_name": "replace_max_specialchar",
      "correct_solution": "import re\r\ndef replace_max_specialchar(text,n):\r\n return (re.sub(\"[ ,.]\", \":\", text, n))",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "replace_max_specialchar('Python language, Programming language.', 2)",
          "expected_output": "Python:language: Programming language."
        },
        {
          "input": "replace_max_specialchar('a b c,d e f', 3)",
          "expected_output": "a:b:c:d e f"
        },
        {
          "input": "replace_max_specialchar('ram reshma,ram rahim', 1)",
          "expected_output": "ram:reshma,ram rahim"
        }
      ],
      "broken_test_cases": [
        {
          "input": "replace_max_specialchar('Python language, Programming language.', 2)",
          "expected_output": "Python:language, Programming:language."
        },
        {
          "input": "replace_max_specialchar('a b c,d e f', 3)",
          "expected_output": "a b c:d e f"
        },
        {
          "input": "replace_max_specialchar('ram reshma,ram rahim', 1)",
          "expected_output": "ram reshma:ram rahim"
        }
      ]
    },
    {
      "problem_id": "mbpp_776",
      "description": "Write a function to count those characters which have vowels as their neighbors in the given string.",
      "function_name": "count_vowels",
      "correct_solution": "def count_vowels(test_str):\r\n  res = 0\r\n  vow_list = ['a', 'e', 'i', 'o', 'u']\r\n  for idx in range(1, len(test_str) - 1):\r\n    if test_str[idx] not in vow_list and (test_str[idx - 1] in vow_list or test_str[idx + 1] in vow_list):\r\n      res += 1\r\n  if test_str[0] not in vow_list and test_str[1] in vow_list:\r\n    res += 1\r\n  if test_str[-1] not in vow_list and test_str[-2] in vow_list:\r\n    res += 1\r\n  return (res) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "count_vowels('bestinstareels')",
          "expected_output": "7"
        },
        {
          "input": "count_vowels('partofthejourneyistheend')",
          "expected_output": "12"
        },
        {
          "input": "count_vowels('amazonprime')",
          "expected_output": "5"
        }
      ],
      "broken_test_cases": [
        {
          "input": "count_vowels('bestinstareels')",
          "expected_output": "6"
        },
        {
          "input": "count_vowels('partofthejourneyistheend')",
          "expected_output": "11"
        },
        {
          "input": "count_vowels('amazonprime')",
          "expected_output": "6"
        }
      ]
    },
    {
      "problem_id": "mbpp_43",
      "description": "Write a function to find sequences of lowercase letters joined with an underscore using regex.",
      "function_name": "text_match",
      "correct_solution": "import re\r\ndef text_match(text):\r\n  patterns = '^[a-z]+_[a-z]+$'\r\n  if re.search(patterns,  text):\r\n    return ('Found a match!')\r\n  else:\r\n    return ('Not matched!')",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "text_match('aab_cbbbc')",
          "expected_output": "Found a match!"
        },
        {
          "input": "text_match('aab_Abbbc')",
          "expected_output": "Not matched!"
        },
        {
          "input": "text_match('Aaab_abbbc')",
          "expected_output": "Not matched!"
        }
      ],
      "broken_test_cases": [
        {
          "input": "text_match('aab_cbbbc')",
          "expected_output": "Not matched!"
        },
        {
          "input": "text_match('aab_Abbbc')",
          "expected_output": "Found a match!"
        },
        {
          "input": "text_match('Aaab_abbbc')",
          "expected_output": "Found a match!"
        }
      ]
    },
    {
      "problem_id": "mbpp_106",
      "description": "Write a function to add the given list to the given tuples.",
      "function_name": "add_lists",
      "correct_solution": "def add_lists(test_list, test_tup):\r\n  res = tuple(list(test_tup) + test_list)\r\n  return (res) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "add_lists([5, 6, 7], (9, 10))",
          "expected_output": "(9, 10, 5, 6, 7)"
        },
        {
          "input": "add_lists([6, 7, 8], (10, 11))",
          "expected_output": "(10, 11, 6, 7, 8)"
        },
        {
          "input": "add_lists([7, 8, 9], (11, 12))",
          "expected_output": "(11, 12, 7, 8, 9)"
        }
      ],
      "broken_test_cases": [
        {
          "input": "add_lists([5, 6, 7], (9, 10))",
          "expected_output": "(9, 10, 7, 6, 5)"
        },
        {
          "input": "add_lists([6, 7, 8], (10, 11))",
          "expected_output": "(10, 11, 8, 7, 6)"
        },
        {
          "input": "add_lists([7, 8, 9], (11, 12))",
          "expected_output": "(11, 12, 7, 8)"
        }
      ]
    },
    {
      "problem_id": "mbpp_784",
      "description": "Write a function to find the product of first even and odd number of a given list.",
      "function_name": "mul_even_odd",
      "correct_solution": "def mul_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even*first_odd)",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "mul_even_odd([1, 3, 5, 7, 4, 1, 6, 8])",
          "expected_output": "4"
        },
        {
          "input": "mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
          "expected_output": "2"
        },
        {
          "input": "mul_even_odd([1, 5, 7, 9, 10])",
          "expected_output": "10"
        }
      ],
      "broken_test_cases": [
        {
          "input": "mul_even_odd([1, 3, 5, 7, 4, 1, 6, 8])",
          "expected_output": "8"
        },
        {
          "input": "mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
          "expected_output": "4"
        },
        {
          "input": "mul_even_odd([1, 5, 7, 9, 10])",
          "expected_output": "20"
        }
      ]
    },
    {
      "problem_id": "mbpp_415",
      "description": "Write a python function to find a pair with highest product from a given array of integers.",
      "function_name": "max_Product",
      "correct_solution": "def max_Product(arr): \r\n    arr_len = len(arr) \r\n    if (arr_len < 2): \r\n        return (\"No pairs exists\")           \r\n    x = arr[0]; y = arr[1]      \r\n    for i in range(0,arr_len): \r\n        for j in range(i + 1,arr_len): \r\n            if (arr[i] * arr[j] > x * y): \r\n                x = arr[i]; y = arr[j] \r\n    return x,y    ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "max_Product([1, 2, 3, 4, 7, 0, 8, 4])",
          "expected_output": "(7, 8)"
        },
        {
          "input": "max_Product([0, -1, -2, -4, 5, 0, -6])",
          "expected_output": "(-4, -6)"
        },
        {
          "input": "max_Product([1, 2, 3])",
          "expected_output": "(2, 3)"
        }
      ],
      "broken_test_cases": [
        {
          "input": "max_Product([1, 2, 3, 4, 7, 0, 8, 4])",
          "expected_output": "(8, 7)"
        },
        {
          "input": "max_Product([0, -1, -2, -4, 5, 0, -6])",
          "expected_output": "(5, -6)"
        },
        {
          "input": "max_Product([1, 2, 3])",
          "expected_output": "(3, 2)"
        }
      ]
    },
    {
      "problem_id": "mbpp_87",
      "description": "Write a function to merge three dictionaries into a single expression.",
      "function_name": "merge_dictionaries_three",
      "correct_solution": "import collections as ct\r\ndef merge_dictionaries_three(dict1,dict2, dict3):\r\n    merged_dict = dict(ct.ChainMap({},dict1,dict2,dict3))\r\n    return merged_dict",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "merge_dictionaries_three({'R': 'Red', 'B': 'Black', 'P': 'Pink'}, {'G': 'Green', 'W': 'White'}, {'O': 'Orange', 'W': 'White', 'B': 'Black'})",
          "expected_output": "{'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}"
        },
        {
          "input": "merge_dictionaries_three({'R': 'Red', 'B': 'Black', 'P': 'Pink'}, {'G': 'Green', 'W': 'White'}, {'L': 'lavender', 'B': 'Blue'})",
          "expected_output": "{'W': 'White', 'P': 'Pink', 'B': 'Black', 'R': 'Red', 'G': 'Green', 'L': 'lavender'}"
        },
        {
          "input": "merge_dictionaries_three({'R': 'Red', 'B': 'Black', 'P': 'Pink'}, {'L': 'lavender', 'B': 'Blue'}, {'G': 'Green', 'W': 'White'})",
          "expected_output": "{'B': 'Black', 'P': 'Pink', 'R': 'Red', 'G': 'Green', 'L': 'lavender', 'W': 'White'}"
        }
      ],
      "broken_test_cases": [
        {
          "input": "merge_dictionaries_three({'R': 'Red', 'B': 'Black', 'P': 'Pink'}, {'G': 'Green', 'W': 'White'}, {'O': 'Orange', 'W': 'White', 'B': 'Black'})",
          "expected_output": "{'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White'}"
        },
        {
          "input": "merge_dictionaries_three({'R': 'Red', 'B': 'Black', 'P': 'Pink'}, {'G': 'Green', 'W': 'White'}, {'L': 'lavender', 'B': 'Blue'})",
          "expected_output": "{'W': 'White', 'P': 'Pink', 'B': 'Blue', 'R': 'Red', 'G': 'Green', 'L': 'lavender'}"
        },
        {
          "input": "merge_dictionaries_three({'R': 'Red', 'B': 'Black', 'P': 'Pink'}, {'L': 'lavender', 'B': 'Blue'}, {'G': 'Green', 'W': 'White'})",
          "expected_output": "{'B': 'Blue', 'P': 'Pink', 'R': 'Red', 'G': 'Green', 'L': 'lavender', 'W': 'White'}"
        }
      ]
    },
    {
      "problem_id": "mbpp_915",
      "description": "Write a function to rearrange positive and negative numbers in a given array using lambda function.",
      "function_name": "rearrange_numbs",
      "correct_solution": "def rearrange_numbs(array_nums):\r\n  result = sorted(array_nums, key = lambda i: 0 if i == 0 else -1 / i)\r\n  return result ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "rearrange_numbs([-1, 2, -3, 5, 7, 8, 9, -10])",
          "expected_output": "[2, 5, 7, 8, 9, -10, -3, -1]"
        },
        {
          "input": "rearrange_numbs([10, 15, 14, 13, -18, 12, -20])",
          "expected_output": "[10, 12, 13, 14, 15, -20, -18]"
        },
        {
          "input": "rearrange_numbs([-20, 20, -10, 10, -30, 30])",
          "expected_output": "[10, 20, 30, -30, -20, -10]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "rearrange_numbs([-1, 2, -3, 5, 7, 8, 9, -10])",
          "expected_output": "[2, 5, 7, 8, 9, -1, -3, -10]"
        },
        {
          "input": "rearrange_numbs([10, 15, 14, 13, -18, 12, -20])",
          "expected_output": "[10, 12, 13, 14, 15, -18, -20]"
        },
        {
          "input": "rearrange_numbs([-20, 20, -10, 10, -30, 30])",
          "expected_output": "[20, 10, 30, -10, -20, -30]"
        }
      ]
    },
    {
      "problem_id": "mbpp_191",
      "description": "Write a function to check whether the given month name contains 30 days or not.",
      "function_name": "check_monthnumber",
      "correct_solution": "def check_monthnumber(monthname3):\r\n  if monthname3 ==\"April\" or monthname3== \"June\" or monthname3== \"September\" or monthname3== \"November\":\r\n    return True\r\n  else:\r\n    return False",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "check_monthnumber('February')",
          "expected_output": "False"
        },
        {
          "input": "check_monthnumber('June')",
          "expected_output": "True"
        },
        {
          "input": "check_monthnumber('April')",
          "expected_output": "True"
        }
      ],
      "broken_test_cases": [
        {
          "input": "check_monthnumber('February')",
          "expected_output": "True"
        },
        {
          "input": "check_monthnumber('June')",
          "expected_output": "False"
        },
        {
          "input": "check_monthnumber('April')",
          "expected_output": "False"
        }
      ]
    },
    {
      "problem_id": "mbpp_219",
      "description": "Write a function to extract maximum and minimum k elements in the given tuple.",
      "function_name": "extract_min_max",
      "correct_solution": "\r\ndef extract_min_max(test_tup, K):\r\n  res = []\r\n  test_tup = list(test_tup)\r\n  temp = sorted(test_tup)\r\n  for idx, val in enumerate(temp):\r\n    if idx < K or idx >= len(temp) - K:\r\n      res.append(val)\r\n  res = tuple(res)\r\n  return (res) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "extract_min_max((5, 20, 3, 7, 6, 8), 2)",
          "expected_output": "(3, 5, 8, 20)"
        },
        {
          "input": "extract_min_max((4, 5, 6, 1, 2, 7), 3)",
          "expected_output": "(1, 2, 4, 5, 6, 7)"
        },
        {
          "input": "extract_min_max((2, 3, 4, 8, 9, 11, 7), 4)",
          "expected_output": "(2, 3, 4, 7, 8, 9, 11)"
        }
      ],
      "broken_test_cases": [
        {
          "input": "extract_min_max((5, 20, 3, 7, 6, 8), 2)",
          "expected_output": "(3, 5, 7, 20)"
        },
        {
          "input": "extract_min_max((4, 5, 6, 1, 2, 7), 3)",
          "expected_output": "(1, 2, 5, 6, 7, 4)"
        },
        {
          "input": "extract_min_max((2, 3, 4, 8, 9, 11, 7), 4)",
          "expected_output": "(2, 3, 4, 7, 8, 9, 11, 12)"
        }
      ]
    },
    {
      "problem_id": "mbpp_597",
      "description": "Write a function to find kth element from the given two sorted arrays.",
      "function_name": "find_kth",
      "correct_solution": "def find_kth(arr1, arr2, m, n, k):\r\n\tsorted1 = [0] * (m + n)\r\n\ti = 0\r\n\tj = 0\r\n\td = 0\r\n\twhile (i < m and j < n):\r\n\t\tif (arr1[i] < arr2[j]):\r\n\t\t\tsorted1[d] = arr1[i]\r\n\t\t\ti += 1\r\n\t\telse:\r\n\t\t\tsorted1[d] = arr2[j]\r\n\t\t\tj += 1\r\n\t\td += 1\r\n\twhile (i < m):\r\n\t\tsorted1[d] = arr1[i]\r\n\t\td += 1\r\n\t\ti += 1\r\n\twhile (j < n):\r\n\t\tsorted1[d] = arr2[j]\r\n\t\td += 1\r\n\t\tj += 1\r\n\treturn sorted1[k - 1]",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5, 4, 5)",
          "expected_output": "6"
        },
        {
          "input": "find_kth([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 5, 7, 7)",
          "expected_output": "256"
        },
        {
          "input": "find_kth([3, 4, 7, 8, 10], [2, 5, 9, 11], 5, 4, 6)",
          "expected_output": "8"
        }
      ],
      "broken_test_cases": [
        {
          "input": "find_kth([2, 3, 6, 7, 9], [1, 4, 8, 10], 5, 4, 5)",
          "expected_output": "7"
        },
        {
          "input": "find_kth([100, 112, 256, 349, 770], [72, 86, 113, 119, 265, 445, 892], 5, 7, 7)",
          "expected_output": "257"
        },
        {
          "input": "find_kth([3, 4, 7, 8, 10], [2, 5, 9, 11], 5, 4, 6)",
          "expected_output": "9"
        }
      ]
    },
    {
      "problem_id": "mbpp_62",
      "description": "Write a python function to find smallest number in a list.",
      "function_name": "smallest_num",
      "correct_solution": "def smallest_num(xs):\n  return min(xs)\n",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "smallest_num([10, 20, 1, 45, 99])",
          "expected_output": "1"
        },
        {
          "input": "smallest_num([1, 2, 3])",
          "expected_output": "1"
        },
        {
          "input": "smallest_num([45, 46, 50, 60])",
          "expected_output": "45"
        }
      ],
      "broken_test_cases": [
        {
          "input": "smallest_num([10, 20, 1, 45, 99])",
          "expected_output": "10"
        },
        {
          "input": "smallest_num([1, 2, 3])",
          "expected_output": "2"
        },
        {
          "input": "smallest_num([45, 46, 50, 60])",
          "expected_output": "46"
        }
      ]
    },
    {
      "problem_id": "mbpp_171",
      "description": "Write a function to find the perimeter of a pentagon.",
      "function_name": "perimeter_pentagon",
      "correct_solution": "import math\r\ndef perimeter_pentagon(a):\r\n  perimeter=(5*a)\r\n  return perimeter",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "perimeter_pentagon(5)",
          "expected_output": "25"
        },
        {
          "input": "perimeter_pentagon(10)",
          "expected_output": "50"
        },
        {
          "input": "perimeter_pentagon(15)",
          "expected_output": "75"
        }
      ],
      "broken_test_cases": [
        {
          "input": "perimeter_pentagon(5)",
          "expected_output": "24"
        },
        {
          "input": "perimeter_pentagon(10)",
          "expected_output": "51"
        },
        {
          "input": "perimeter_pentagon(15)",
          "expected_output": "76"
        }
      ]
    },
    {
      "problem_id": "mbpp_506",
      "description": "Write a function to calculate the permutation coefficient of given p(n, k).",
      "function_name": "permutation_coefficient",
      "correct_solution": "def permutation_coefficient(n, k): \r\n\tP = [[0 for i in range(k + 1)] \r\n\t\t\tfor j in range(n + 1)] \r\n\tfor i in range(n + 1): \r\n\t\tfor j in range(min(i, k) + 1): \r\n\t\t\tif (j == 0): \r\n\t\t\t\tP[i][j] = 1\r\n\t\t\telse: \r\n\t\t\t\tP[i][j] = P[i - 1][j] + ( \r\n\t\t\t\t\t\tj * P[i - 1][j - 1]) \r\n\t\t\tif (j < k): \r\n\t\t\t\tP[i][j + 1] = 0\r\n\treturn P[n][k] ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "permutation_coefficient(10, 2)",
          "expected_output": "90"
        },
        {
          "input": "permutation_coefficient(10, 3)",
          "expected_output": "720"
        },
        {
          "input": "permutation_coefficient(10, 1)",
          "expected_output": "10"
        }
      ],
      "broken_test_cases": [
        {
          "input": "permutation_coefficient(10, 2)",
          "expected_output": "100"
        },
        {
          "input": "permutation_coefficient(10, 3)",
          "expected_output": "1000"
        },
        {
          "input": "permutation_coefficient(10, 1)",
          "expected_output": "5"
        }
      ]
    },
    {
      "problem_id": "mbpp_556",
      "description": "Write a python function to count the pairs with xor as an odd number.",
      "function_name": "find_Odd_Pair",
      "correct_solution": "def find_Odd_Pair(A,N) : \r\n    oddPair = 0\r\n    for i in range(0,N) :  \r\n        for j in range(i+1,N) :  \r\n            if ((A[i] ^ A[j]) % 2 != 0):  \r\n                oddPair+=1  \r\n    return oddPair  ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "find_Odd_Pair([5, 4, 7, 2, 1], 5)",
          "expected_output": "6"
        },
        {
          "input": "find_Odd_Pair([7, 2, 8, 1, 0, 5, 11], 7)",
          "expected_output": "12"
        },
        {
          "input": "find_Odd_Pair([1, 2, 3], 3)",
          "expected_output": "2"
        }
      ],
      "broken_test_cases": [
        {
          "input": "find_Odd_Pair([5, 4, 7, 2, 1], 5)",
          "expected_output": "7"
        },
        {
          "input": "find_Odd_Pair([7, 2, 8, 1, 0, 5, 11], 7)",
          "expected_output": "13"
        },
        {
          "input": "find_Odd_Pair([1, 2, 3], 3)",
          "expected_output": "3"
        }
      ]
    },
    {
      "problem_id": "mbpp_482",
      "description": "Write a function to find sequences of one upper case letter followed by lower case letters in the given string by using regex.",
      "function_name": "match",
      "correct_solution": "import re \r\ndef match(text): \r\n\t\tpattern = '[A-Z]+[a-z]+$'\r\n\t\tif re.search(pattern, text): \r\n\t\t\t\treturn('Yes') \r\n\t\telse: \r\n\t\t\t\treturn('No') ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "match('Geeks')",
          "expected_output": "Yes"
        },
        {
          "input": "match('geeksforGeeks')",
          "expected_output": "Yes"
        },
        {
          "input": "match('geeks')",
          "expected_output": "No"
        }
      ],
      "broken_test_cases": [
        {
          "input": "match('Geeks')",
          "expected_output": "No"
        },
        {
          "input": "match('geeksforgeeks')",
          "expected_output": "Yes"
        },
        {
          "input": "match('geeks')",
          "expected_output": "Yes"
        }
      ]
    },
    {
      "problem_id": "mbpp_165",
      "description": "Write a python function to count characters at same position in a given string (lower and uppercase characters) as in english alphabet.",
      "function_name": "count_char_position",
      "correct_solution": "def count_char_position(str1): \r\n    count_chars = 0\r\n    for i in range(len(str1)):\r\n        if ((i == ord(str1[i]) - ord('A')) or \r\n            (i == ord(str1[i]) - ord('a'))): \r\n            count_chars += 1\r\n    return count_chars ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "count_char_position('xbcefg')",
          "expected_output": "2"
        },
        {
          "input": "count_char_position('ABcED')",
          "expected_output": "3"
        },
        {
          "input": "count_char_position('AbgdeF')",
          "expected_output": "5"
        }
      ],
      "broken_test_cases": [
        {
          "input": "count_char_position('xbcefg')",
          "expected_output": "1"
        },
        {
          "input": "count_char_position('ABcED')",
          "expected_output": "2"
        },
        {
          "input": "count_char_position('AbgdeF')",
          "expected_output": "4"
        }
      ]
    },
    {
      "problem_id": "mbpp_494",
      "description": "Write a function to convert the given binary tuple to integer.",
      "function_name": "binary_to_integer",
      "correct_solution": "def binary_to_integer(test_tup):\r\n  res = int(\"\".join(str(ele) for ele in test_tup), 2)\r\n  return (str(res)) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "binary_to_integer((1, 1, 0, 1, 0, 0, 1))",
          "expected_output": "105"
        },
        {
          "input": "binary_to_integer((0, 1, 1, 0, 0, 1, 0, 1))",
          "expected_output": "101"
        },
        {
          "input": "binary_to_integer((1, 1, 0, 1, 0, 1))",
          "expected_output": "53"
        }
      ],
      "broken_test_cases": [
        {
          "input": "binary_to_integer((1, 1, 0, 1, 0, 0, 1))",
          "expected_output": "106"
        },
        {
          "input": "binary_to_integer((0, 1, 1, 0, 0, 1, 0, 1))",
          "expected_output": "100"
        },
        {
          "input": "binary_to_integer((1, 1, 0, 1, 0, 1))",
          "expected_output": "54"
        }
      ]
    },
    {
      "problem_id": "mbpp_805",
      "description": "Write a function to find the list in a list of lists whose sum of elements is the highest.",
      "function_name": "max_sum_list",
      "correct_solution": "def max_sum_list(lists):\r\n return max(lists, key=sum)",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "max_sum_list([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]])",
          "expected_output": "[10, 11, 12]"
        },
        {
          "input": "max_sum_list([[3, 2, 1], [6, 5, 4], [12, 11, 10]])",
          "expected_output": "[12, 11, 10]"
        },
        {
          "input": "max_sum_list([[2, 3, 1]])",
          "expected_output": "[2, 3, 1]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "max_sum_list([[1, 2, 3], [4, 5, 6], [10, 11, 12], [7, 8, 9]])",
          "expected_output": "[4, 5, 6]"
        },
        {
          "input": "max_sum_list([[3, 2, 1], [6, 5, 4], [12, 11, 10]])",
          "expected_output": "[6, 5, 4]"
        },
        {
          "input": "max_sum_list([[2, 3, 1]])",
          "expected_output": "[1, 2, 3]"
        }
      ]
    },
    {
      "problem_id": "mbpp_298",
      "description": "Write a function to find the nested list elements which are present in another list.",
      "function_name": "intersection_nested_lists",
      "correct_solution": "def intersection_nested_lists(l1, l2):\r\n    result = [[n for n in lst if n in l1] for lst in l2]\r\n    return result",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "intersection_nested_lists([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])",
          "expected_output": "[[12], [7, 11], [1, 5, 8]]"
        },
        {
          "input": "intersection_nested_lists([[2, 3, 1], [4, 5], [6, 8]], [[4, 5], [6, 8]])",
          "expected_output": "[[], []]"
        },
        {
          "input": "intersection_nested_lists(['john', 'amal', 'joel', 'george'], [['john'], ['jack', 'john', 'mary'], ['howard', 'john'], ['jude']])",
          "expected_output": "[['john'], ['john'], ['john'], []]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "intersection_nested_lists([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])",
          "expected_output": "[[12, 18], [7, 11, 19], [1, 5, 8, 18]]"
        },
        {
          "input": "intersection_nested_lists([[2, 3, 1], [4, 5], [6, 8]], [[4, 5], [6, 8]])",
          "expected_output": "[[4, 5], [6, 8]]"
        },
        {
          "input": "intersection_nested_lists(['john', 'amal', 'joel', 'george'], [['john'], ['jack', 'john', 'mary'], ['howard', 'john'], ['jude']])",
          "expected_output": "[['john'], ['john', 'mary'], ['howard', 'john'], ['jude']]"
        }
      ]
    },
    {
      "problem_id": "mbpp_850",
      "description": "Write a function to check if a triangle of positive area is possible with the given angles.",
      "function_name": "is_triangleexists",
      "correct_solution": "def is_triangleexists(a,b,c): \r\n    if(a != 0 and b != 0 and c != 0 and (a + b + c)== 180): \r\n        if((a + b)>= c or (b + c)>= a or (a + c)>= b): \r\n            return True \r\n        else:\r\n            return False\r\n    else:\r\n        return False",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "is_triangleexists(50, 60, 70)",
          "expected_output": "True"
        },
        {
          "input": "is_triangleexists(90, 45, 45)",
          "expected_output": "True"
        },
        {
          "input": "is_triangleexists(150, 30, 70)",
          "expected_output": "False"
        }
      ],
      "broken_test_cases": [
        {
          "input": "is_triangleexists(50, 60, 70)",
          "expected_output": "False"
        },
        {
          "input": "is_triangleexists(90, 45, 45)",
          "expected_output": "False"
        },
        {
          "input": "is_triangleexists(150, 30, 70)",
          "expected_output": "True"
        }
      ]
    },
    {
      "problem_id": "mbpp_197",
      "description": "Write a function to perform the exponentiation of the given two tuples.",
      "function_name": "find_exponentio",
      "correct_solution": "def find_exponentio(test_tup1, test_tup2):\r\n  res = tuple(ele1 ** ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res)\r\n",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "find_exponentio((10, 4, 5, 6), (5, 6, 7, 5))",
          "expected_output": "(100000, 4096, 78125, 7776)"
        },
        {
          "input": "find_exponentio((11, 5, 6, 7), (6, 7, 8, 6))",
          "expected_output": "(1771561, 78125, 1679616, 117649)"
        },
        {
          "input": "find_exponentio((12, 6, 7, 8), (7, 8, 9, 7))",
          "expected_output": "(35831808, 1679616, 40353607, 2097152)"
        }
      ],
      "broken_test_cases": [
        {
          "input": "find_exponentio((10, 4, 5, 6), (5, 6, 7, 5))",
          "expected_output": "(100000, 4096, 78125, 7777)"
        },
        {
          "input": "find_exponentio((11, 5, 6, 7), (6, 7, 8, 6))",
          "expected_output": "(1771561, 78125, 1679616, 117650)"
        },
        {
          "input": "find_exponentio((12, 6, 7, 8), (7, 8, 9, 7))",
          "expected_output": "(35831808, 1679616, 40353607, 2097153)"
        }
      ]
    },
    {
      "problem_id": "mbpp_481",
      "description": "Write a function to determine if there is a subset of the given set with sum equal to the given sum.",
      "function_name": "is_subset_sum",
      "correct_solution": "def is_subset_sum(set, n, sum):\r\n\tif (sum == 0):\r\n\t\treturn True\r\n\tif (n == 0):\r\n\t\treturn False\r\n\tif (set[n - 1] > sum):\r\n\t\treturn is_subset_sum(set, n - 1, sum)\r\n\treturn is_subset_sum(set, n-1, sum) or is_subset_sum(set, n-1, sum-set[n-1])",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9)",
          "expected_output": "True"
        },
        {
          "input": "is_subset_sum([3, 34, 4, 12, 5, 2], 6, 30)",
          "expected_output": "False"
        },
        {
          "input": "is_subset_sum([3, 34, 4, 12, 5, 2], 6, 15)",
          "expected_output": "True"
        }
      ],
      "broken_test_cases": [
        {
          "input": "is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9)",
          "expected_output": "False"
        },
        {
          "input": "is_subset_sum([3, 34, 4, 12, 5, 2], 6, 30)",
          "expected_output": "True"
        },
        {
          "input": "is_subset_sum([3, 34, 4, 12, 5, 2], 6, 15)",
          "expected_output": "False"
        }
      ]
    },
    {
      "problem_id": "mbpp_78",
      "description": "Write a python function to find number of integers with odd number of set bits.",
      "function_name": "count_With_Odd_SetBits",
      "correct_solution": "def count_With_Odd_SetBits(n): \r\n    if (n % 2 != 0): \r\n        return (n + 1) / 2\r\n    count = bin(n).count('1') \r\n    ans = n / 2\r\n    if (count % 2 != 0): \r\n        ans += 1\r\n    return ans ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "count_With_Odd_SetBits(5)",
          "expected_output": "3"
        },
        {
          "input": "count_With_Odd_SetBits(10)",
          "expected_output": "5"
        },
        {
          "input": "count_With_Odd_SetBits(15)",
          "expected_output": "8"
        }
      ],
      "broken_test_cases": [
        {
          "input": "count_With_Odd_SetBits(5)",
          "expected_output": "2"
        },
        {
          "input": "count_With_Odd_SetBits(10)",
          "expected_output": "4"
        },
        {
          "input": "count_With_Odd_SetBits(15)",
          "expected_output": "7"
        }
      ]
    },
    {
      "problem_id": "mbpp_832",
      "description": "Write a function to extract the maximum numeric value from a string by using regex.",
      "function_name": "extract_max",
      "correct_solution": "import re \r\ndef extract_max(input): \r\n\tnumbers = re.findall('\\d+',input) \r\n\tnumbers = map(int,numbers) \r\n\treturn max(numbers)",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "extract_max('100klh564abc365bg')",
          "expected_output": "564"
        },
        {
          "input": "extract_max('hello300how546mer231')",
          "expected_output": "546"
        },
        {
          "input": "extract_max('its233beenalong343journey234')",
          "expected_output": "343"
        }
      ],
      "broken_test_cases": [
        {
          "input": "extract_max('100klh564abc365bg')",
          "expected_output": "100"
        },
        {
          "input": "extract_max('hello300how546mer231')",
          "expected_output": "231"
        },
        {
          "input": "extract_max('its233beenalong343journey234')",
          "expected_output": "233"
        }
      ]
    },
    {
      "problem_id": "mbpp_646",
      "description": "Write a python function to count number of cubes of size k in a cube of size n.",
      "function_name": "No_of_cubes",
      "correct_solution": "def No_of_cubes(N,K):\r\n    No = 0\r\n    No = (N - K + 1)\r\n    No = pow(No, 3)\r\n    return No",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "No_of_cubes(2, 1)",
          "expected_output": "8"
        },
        {
          "input": "No_of_cubes(5, 2)",
          "expected_output": "64"
        },
        {
          "input": "No_of_cubes(1, 1)",
          "expected_output": "1"
        }
      ],
      "broken_test_cases": [
        {
          "input": "No_of_cubes(2, 1)",
          "expected_output": "7"
        },
        {
          "input": "No_of_cubes(5, 2)",
          "expected_output": "65"
        },
        {
          "input": "No_of_cubes(1, 1)",
          "expected_output": "2"
        }
      ]
    },
    {
      "problem_id": "mbpp_86",
      "description": "Write a function to find nth centered hexagonal number.",
      "function_name": "centered_hexagonal_number",
      "correct_solution": "def centered_hexagonal_number(n):\r\n  return 3 * n * (n - 1) + 1",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "centered_hexagonal_number(10)",
          "expected_output": "271"
        },
        {
          "input": "centered_hexagonal_number(2)",
          "expected_output": "7"
        },
        {
          "input": "centered_hexagonal_number(9)",
          "expected_output": "217"
        }
      ],
      "broken_test_cases": [
        {
          "input": "centered_hexagonal_number(10)",
          "expected_output": "272"
        },
        {
          "input": "centered_hexagonal_number(2)",
          "expected_output": "8"
        },
        {
          "input": "centered_hexagonal_number(9)",
          "expected_output": "218"
        }
      ]
    },
    {
      "problem_id": "mbpp_370",
      "description": "Write a function to sort a tuple by its float element.",
      "function_name": "float_sort",
      "correct_solution": "def float_sort(price):\r\n  float_sort=sorted(price, key=lambda x: float(x[1]), reverse=True)\r\n  return float_sort",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])",
          "expected_output": "[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')]"
        },
        {
          "input": "float_sort([('item1', '15'), ('item2', '10'), ('item3', '20')])",
          "expected_output": "[('item3', '20'), ('item1', '15'), ('item2', '10')]"
        },
        {
          "input": "float_sort([('item1', '5'), ('item2', '10'), ('item3', '14')])",
          "expected_output": "[('item3', '14'), ('item2', '10'), ('item1', '5')]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])",
          "expected_output": "[('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')]"
        },
        {
          "input": "float_sort([('item1', '15'), ('item2', '10'), ('item3', '20')])",
          "expected_output": "[('item1', '15'), ('item2', '10'), ('item3', '20')]"
        },
        {
          "input": "float_sort([('item1', '5'), ('item2', '10'), ('item3', '14')])",
          "expected_output": "[('item1', '5'), ('item2', '10'), ('item3', '14')]"
        }
      ]
    },
    {
      "problem_id": "mbpp_302",
      "description": "Write a python function to find the most significant bit number which is also a set bit.",
      "function_name": "set_Bit_Number",
      "correct_solution": "def set_Bit_Number(n): \r\n    if (n == 0): \r\n        return 0; \r\n    msb = 0; \r\n    n = int(n / 2); \r\n    while (n > 0): \r\n        n = int(n / 2); \r\n        msb += 1; \r\n    return (1 << msb)",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "set_Bit_Number(6)",
          "expected_output": "4"
        },
        {
          "input": "set_Bit_Number(10)",
          "expected_output": "8"
        },
        {
          "input": "set_Bit_Number(18)",
          "expected_output": "16"
        }
      ],
      "broken_test_cases": [
        {
          "input": "set_Bit_Number(6)",
          "expected_output": "8"
        },
        {
          "input": "set_Bit_Number(10)",
          "expected_output": "4"
        },
        {
          "input": "set_Bit_Number(18)",
          "expected_output": "8"
        }
      ]
    },
    {
      "problem_id": "mbpp_907",
      "description": "Write a function to print the first n lucky numbers.",
      "function_name": "lucky_num",
      "correct_solution": "def lucky_num(n):\r\n List=range(-1,n*n+9,2)\r\n i=2\r\n while List[i:]:List=sorted(set(List)-set(List[List[i]::List[i]]));i+=1\r\n return List[1:n+1]",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "lucky_num(10)",
          "expected_output": "[1, 3, 7, 9, 13, 15, 21, 25, 31, 33]"
        },
        {
          "input": "lucky_num(5)",
          "expected_output": "[1, 3, 7, 9, 13]"
        },
        {
          "input": "lucky_num(8)",
          "expected_output": "[1, 3, 7, 9, 13, 15, 21, 25]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "lucky_num(10)",
          "expected_output": "[1, 3, 7, 9, 13, 15, 21, 25, 31, 35]"
        },
        {
          "input": "lucky_num(5)",
          "expected_output": "[1, 3, 7, 9, 12]"
        },
        {
          "input": "lucky_num(8)",
          "expected_output": "[1, 3, 7, 9, 13, 15, 21, 26]"
        }
      ]
    },
    {
      "problem_id": "mbpp_795",
      "description": "Write a function to find the n - cheap price items from a given dataset using heap queue algorithm.",
      "function_name": "cheap_items",
      "correct_solution": "import heapq\r\ndef cheap_items(items,n):\r\n  cheap_items = heapq.nsmallest(n, items, key=lambda s: s['price'])\r\n  return cheap_items",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "cheap_items([{'name': 'Item-1', 'price': 101.1}, {'name': 'Item-2', 'price': 555.22}], 1)",
          "expected_output": "[{'name': 'Item-1', 'price': 101.1}]"
        },
        {
          "input": "cheap_items([{'name': 'Item-1', 'price': 101.1}, {'name': 'Item-2', 'price': 555.22}], 2)",
          "expected_output": "[{'name': 'Item-1', 'price': 101.1}, {'name': 'Item-2', 'price': 555.22}]"
        },
        {
          "input": "cheap_items([{'name': 'Item-1', 'price': 101.1}, {'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09}, {'name': 'Item-4', 'price': 22.75}], 1)",
          "expected_output": "[{'name': 'Item-4', 'price': 22.75}]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "cheap_items([{'name': 'Item-1', 'price': 101.1}, {'name': 'Item-2', 'price': 555.22}], 1)",
          "expected_output": "[{'name': 'Item-2', 'price': 555.22}]"
        },
        {
          "input": "cheap_items([{'name': 'Item-1', 'price': 101.1}, {'name': 'Item-2', 'price': 555.22}], 2)",
          "expected_output": "[{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-1', 'price': 101.1}]"
        },
        {
          "input": "cheap_items([{'name': 'Item-1', 'price': 101.1}, {'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09}, {'name': 'Item-4', 'price': 22.75}], 1)",
          "expected_output": "[{'name': 'Item-1', 'price': 101.1}]"
        }
      ]
    },
    {
      "problem_id": "mbpp_771",
      "description": "Write a function to check if the given expression is balanced or not.",
      "function_name": "check_expression",
      "correct_solution": "from collections import deque\r\ndef check_expression(exp):\r\n    if len(exp) & 1:\r\n        return False\r\n    stack = deque()\r\n    for ch in exp:\r\n        if ch == '(' or ch == '{' or ch == '[':\r\n            stack.append(ch)\r\n        if ch == ')' or ch == '}' or ch == ']':\r\n            if not stack:\r\n                return False\r\n            top = stack.pop()\r\n            if (top == '(' and ch != ')') or (top == '{' and ch != '}' or (top == '[' and ch != ']')):\r\n                return False\r\n    return not stack",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "check_expression('{()}[{}]')",
          "expected_output": "True"
        },
        {
          "input": "check_expression('{()}[{]')",
          "expected_output": "False"
        },
        {
          "input": "check_expression('{()}[{}][]({})')",
          "expected_output": "True"
        }
      ],
      "broken_test_cases": [
        {
          "input": "check_expression('{()}[{}]')",
          "expected_output": "False"
        },
        {
          "input": "check_expression('{()}[{]')",
          "expected_output": "True"
        },
        {
          "input": "check_expression('{()}[{}][]({}')",
          "expected_output": "True"
        }
      ]
    },
    {
      "problem_id": "mbpp_527",
      "description": "Write a function to find all pairs in an integer array whose sum is equal to a given number.",
      "function_name": "get_pairs_count",
      "correct_solution": "def get_pairs_count(arr, n, sum):\r\n    count = 0 \r\n    for i in range(0, n):\r\n        for j in range(i + 1, n):\r\n            if arr[i] + arr[j] == sum:\r\n                count += 1\r\n    return count",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "get_pairs_count([1, 5, 7, -1, 5], 5, 6)",
          "expected_output": "3"
        },
        {
          "input": "get_pairs_count([1, 5, 7, -1], 4, 6)",
          "expected_output": "2"
        },
        {
          "input": "get_pairs_count([1, 1, 1, 1], 4, 2)",
          "expected_output": "6"
        }
      ],
      "broken_test_cases": [
        {
          "input": "get_pairs_count([1, 5, 7, -1, 5], 5, 6)",
          "expected_output": "2"
        },
        {
          "input": "get_pairs_count([1, 5, 7, -1], 4, 6)",
          "expected_output": "3"
        },
        {
          "input": "get_pairs_count([1, 1, 1, 1], 4, 2)",
          "expected_output": "4"
        }
      ]
    },
    {
      "problem_id": "mbpp_181",
      "description": "Write a function to find the longest common prefix in the given set of strings.",
      "function_name": "common_prefix",
      "correct_solution": "def common_prefix_util(str1, str2): \r\n\tresult = \"\"; \r\n\tn1 = len(str1) \r\n\tn2 = len(str2) \r\n\ti = 0\r\n\tj = 0\r\n\twhile i <= n1 - 1 and j <= n2 - 1: \r\n\t\tif (str1[i] != str2[j]): \r\n\t\t\tbreak\r\n\t\tresult += str1[i] \r\n\t\ti += 1\r\n\t\tj += 1\r\n\treturn (result) \r\ndef common_prefix (arr, n): \r\n\tprefix = arr[0] \r\n\tfor i in range (1, n): \r\n\t\tprefix = common_prefix_util(prefix, arr[i]) \r\n\treturn (prefix) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "common_prefix(['tablets', 'tables', 'taxi', 'tamarind'], 4)",
          "expected_output": "ta"
        },
        {
          "input": "common_prefix(['apples', 'ape', 'april'], 3)",
          "expected_output": "ap"
        },
        {
          "input": "common_prefix(['teens', 'teenager', 'teenmar'], 3)",
          "expected_output": "teen"
        }
      ],
      "broken_test_cases": [
        {
          "input": "common_prefix(['tablets', 'tables', 'taxi', 'tamarind'], 4)",
          "expected_output": "tab"
        },
        {
          "input": "common_prefix(['apples', 'ape', 'april'], 3)",
          "expected_output": "a"
        },
        {
          "input": "common_prefix(['teens', 'teenager', 'teenmar'], 3)",
          "expected_output": "teen_s"
        }
      ]
    },
    {
      "problem_id": "mbpp_263",
      "description": "Write a function to merge two dictionaries.",
      "function_name": "merge_dict",
      "correct_solution": "def merge_dict(d1,d2):\r\n d = d1.copy()\r\n d.update(d2)\r\n return d",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "merge_dict({'a': 100, 'b': 200}, {'x': 300, 'y': 200})",
          "expected_output": "{'x': 300, 'y': 200, 'a': 100, 'b': 200}"
        },
        {
          "input": "merge_dict({'a': 10, 'b': 20}, {'x': 30, 'y': 40})",
          "expected_output": "{'x': 30, 'y': 40, 'a': 10, 'b': 20}"
        }
      ],
      "broken_test_cases": [
        {
          "input": "merge_dict({'a': 100, 'b': 200}, {'x': 300, 'y': 200})",
          "expected_output": "{'x': 300, 'y': 200, 'a': 100, 'b': 200, 'c': 400}"
        },
        {
          "input": "merge_dict({'a': 10, 'b': 20}, {'x': 30, 'y': 40})",
          "expected_output": "{'x': 30, 'y': 40, 'a': 10}"
        }
      ]
    },
    {
      "problem_id": "mbpp_88",
      "description": "Write a function to get the frequency of the elements in a list.",
      "function_name": "freq_count",
      "correct_solution": "import collections\r\ndef freq_count(list1):\r\n  freq_count= collections.Counter(list1)\r\n  return freq_count",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "freq_count([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4])",
          "expected_output": "{1: 3, 2: 2, 3: 3, 4: 3}"
        },
        {
          "input": "freq_count([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5])",
          "expected_output": "{10: 1, 5: 3, 6: 2, 7: 2, 4: 2, 9: 2}"
        }
      ],
      "broken_test_cases": [
        {
          "input": "freq_count([1, 2, 3, 4, 3, 2, 4, 1, 3, 1, 4])",
          "expected_output": "{1: 4, 2: 2, 3: 3, 4: 2}"
        },
        {
          "input": "freq_count([5, 6, 7, 4, 9, 10, 4, 5, 6, 7, 9, 5])",
          "expected_output": "{10: 1, 5: 2, 6: 3, 7: 2, 4: 2, 9: 2}"
        }
      ]
    },
    {
      "problem_id": "mbpp_14",
      "description": "Write a python function to find the volume of a triangular prism.",
      "function_name": "find_Volume",
      "correct_solution": "def find_Volume(l,b,h) : \r\n    return ((l * b * h) / 2) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "find_Volume(10, 8, 6)",
          "expected_output": "240"
        },
        {
          "input": "find_Volume(3, 2, 2)",
          "expected_output": "6"
        },
        {
          "input": "find_Volume(1, 2, 1)",
          "expected_output": "1"
        }
      ],
      "broken_test_cases": [
        {
          "input": "find_Volume(10, 8, 6)",
          "expected_output": "120"
        },
        {
          "input": "find_Volume(3, 2, 2)",
          "expected_output": "0"
        },
        {
          "input": "find_Volume(1, 2, 1)",
          "expected_output": "2"
        }
      ]
    },
    {
      "problem_id": "mbpp_406",
      "description": "Write a python function to find the parity of a given number.",
      "function_name": "find_Parity",
      "correct_solution": "def find_Parity(x): \r\n    y = x ^ (x >> 1); \r\n    y = y ^ (y >> 2); \r\n    y = y ^ (y >> 4); \r\n    y = y ^ (y >> 8); \r\n    y = y ^ (y >> 16); \r\n    if (y & 1): \r\n        return (\"Odd Parity\"); \r\n    return (\"Even Parity\"); ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "find_Parity(12)",
          "expected_output": "Even Parity"
        },
        {
          "input": "find_Parity(7)",
          "expected_output": "Odd Parity"
        },
        {
          "input": "find_Parity(10)",
          "expected_output": "Even Parity"
        }
      ],
      "broken_test_cases": [
        {
          "input": "find_Parity(12)",
          "expected_output": "Odd Parity"
        },
        {
          "input": "find_Parity(7)",
          "expected_output": "Even Parity"
        },
        {
          "input": "find_Parity(10)",
          "expected_output": "Odd Parity"
        }
      ]
    },
    {
      "problem_id": "mbpp_95",
      "description": "Write a python function to find the minimum length of sublist.",
      "function_name": "Find_Min_Length",
      "correct_solution": "def Find_Min_Length(lst):  \r\n    minLength = min(len(x) for x in lst )\r\n    return minLength ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "Find_Min_Length([[1], [1, 2]])",
          "expected_output": "1"
        },
        {
          "input": "Find_Min_Length([[1, 2], [1, 2, 3], [1, 2, 3, 4]])",
          "expected_output": "2"
        },
        {
          "input": "Find_Min_Length([[3, 3, 3], [4, 4, 4, 4]])",
          "expected_output": "3"
        }
      ],
      "broken_test_cases": [
        {
          "input": "Find_Min_Length([[1], [1, 2]])",
          "expected_output": "2"
        },
        {
          "input": "Find_Min_Length([[1, 2], [1, 2, 3], [1, 2, 3, 4]])",
          "expected_output": "3"
        },
        {
          "input": "Find_Min_Length([[3, 3, 3], [4, 4, 4, 4]])",
          "expected_output": "4"
        }
      ]
    },
    {
      "problem_id": "mbpp_48",
      "description": "Write a python function to set all odd bits of a given number.",
      "function_name": "odd_bit_set_number",
      "correct_solution": "def odd_bit_set_number(n):\r\n    count = 0;res = 0;temp = n\r\n    while temp > 0:\r\n        if count % 2 == 0:\r\n            res |= (1 << count)\r\n        count += 1\r\n        temp >>= 1\r\n    return (n | res)",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "odd_bit_set_number(10)",
          "expected_output": "15"
        },
        {
          "input": "odd_bit_set_number(20)",
          "expected_output": "21"
        },
        {
          "input": "odd_bit_set_number(30)",
          "expected_output": "31"
        }
      ],
      "broken_test_cases": [
        {
          "input": "odd_bit_set_number(10)",
          "expected_output": "14"
        },
        {
          "input": "odd_bit_set_number(20)",
          "expected_output": "20"
        },
        {
          "input": "odd_bit_set_number(30)",
          "expected_output": "30"
        }
      ]
    },
    {
      "problem_id": "mbpp_166",
      "description": "Write a python function to count the pairs with xor as an even number.",
      "function_name": "find_even_Pair",
      "correct_solution": "def find_even_Pair(A,N): \r\n    evenPair = 0\r\n    for i in range(0,N): \r\n        for j in range(i+1,N): \r\n            if ((A[i] ^ A[j]) % 2 == 0): \r\n                evenPair+=1\r\n    return evenPair; ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "find_even_Pair([5, 4, 7, 2, 1], 5)",
          "expected_output": "4"
        },
        {
          "input": "find_even_Pair([7, 2, 8, 1, 0, 5, 11], 7)",
          "expected_output": "9"
        },
        {
          "input": "find_even_Pair([1, 2, 3], 3)",
          "expected_output": "1"
        }
      ],
      "broken_test_cases": [
        {
          "input": "find_even_Pair([5, 4, 7, 2, 1], 5)",
          "expected_output": "3"
        },
        {
          "input": "find_even_Pair([7, 2, 8, 1, 0, 5, 11], 7)",
          "expected_output": "8"
        },
        {
          "input": "find_even_Pair([1, 2, 3], 3)",
          "expected_output": "2"
        }
      ]
    },
    {
      "problem_id": "mbpp_670",
      "description": "Write a python function to check whether a sequence of numbers has a decreasing trend or not.",
      "function_name": "decreasing_trend",
      "correct_solution": "def decreasing_trend(nums):\r\n    if (sorted(nums)== nums):\r\n        return True\r\n    else:\r\n        return False",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "decreasing_trend([-4, -3, -2, -1])",
          "expected_output": "True"
        },
        {
          "input": "decreasing_trend([1, 2, 3])",
          "expected_output": "True"
        },
        {
          "input": "decreasing_trend([3, 2, 1])",
          "expected_output": "False"
        }
      ],
      "broken_test_cases": [
        {
          "input": "decreasing_trend([-4, -3, -2, -1])",
          "expected_output": "False"
        },
        {
          "input": "decreasing_trend([1, 2, 3])",
          "expected_output": "False"
        },
        {
          "input": "decreasing_trend([3, 2, 1])",
          "expected_output": "True"
        }
      ]
    },
    {
      "problem_id": "mbpp_469",
      "description": "Write a function to find the maximum profit earned from a maximum of k stock transactions",
      "function_name": "max_profit",
      "correct_solution": "def max_profit(price, k):\r\n    n = len(price)\r\n    final_profit = [[None for x in range(n)] for y in range(k + 1)]\r\n    for i in range(k + 1):\r\n        for j in range(n):\r\n            if i == 0 or j == 0:\r\n                final_profit[i][j] = 0\r\n            else:\r\n                max_so_far = 0\r\n                for x in range(j):\r\n                    curr_price = price[j] - price[x] + final_profit[i-1][x]\r\n                    if max_so_far < curr_price:\r\n                        max_so_far = curr_price\r\n                final_profit[i][j] = max(final_profit[i][j-1], max_so_far)\r\n    return final_profit[k][n-1]",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3)",
          "expected_output": "10"
        },
        {
          "input": "max_profit([2, 4, 7, 5, 4, 3, 5], 2)",
          "expected_output": "7"
        },
        {
          "input": "max_profit([10, 6, 8, 4, 2], 2)",
          "expected_output": "2"
        }
      ],
      "broken_test_cases": [
        {
          "input": "max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3)",
          "expected_output": "11"
        },
        {
          "input": "max_profit([2, 4, 7, 5, 4, 3, 5], 2)",
          "expected_output": "6"
        },
        {
          "input": "max_profit([10, 6, 8, 4, 2], 2)",
          "expected_output": "3"
        }
      ]
    },
    {
      "problem_id": "mbpp_156",
      "description": "Write a function to convert a tuple of string values to a tuple of integer values.",
      "function_name": "tuple_int_str",
      "correct_solution": "def tuple_int_str(tuple_str):\r\n    result = tuple((int(x[0]), int(x[1])) for x in tuple_str)\r\n    return result",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "tuple_int_str((('333', '33'), ('1416', '55')))",
          "expected_output": "((333, 33), (1416, 55))"
        },
        {
          "input": "tuple_int_str((('999', '99'), ('1000', '500')))",
          "expected_output": "((999, 99), (1000, 500))"
        },
        {
          "input": "tuple_int_str((('666', '66'), ('1500', '555')))",
          "expected_output": "((666, 66), (1500, 555))"
        }
      ],
      "broken_test_cases": [
        {
          "input": "tuple_int_str((('333', '33'), ('1416', '55')))",
          "expected_output": "((333, 33), (1416, 56))"
        },
        {
          "input": "tuple_int_str((('999', '99'), ('1000', '500')))",
          "expected_output": "((999, 99), (1001, 500))"
        },
        {
          "input": "tuple_int_str((('666', '66'), ('1500', '555')))",
          "expected_output": "((667, 66), (1500, 555))"
        }
      ]
    },
    {
      "problem_id": "mbpp_312",
      "description": "Write a function to find the volume of a cone.",
      "function_name": "volume_cone",
      "correct_solution": "import math\r\ndef volume_cone(r,h):\r\n  volume = (1.0/3) * math.pi * r * r * h\r\n  return volume",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "volume_cone(5, 12)",
          "expected_output": "314.15926535897927"
        },
        {
          "input": "volume_cone(10, 15)",
          "expected_output": "1570.7963267948965"
        },
        {
          "input": "volume_cone(19, 17)",
          "expected_output": "6426.651371693521"
        }
      ],
      "broken_test_cases": [
        {
          "input": "volume_cone(5, 12)",
          "expected_output": "300.0"
        },
        {
          "input": "volume_cone(10, 15)",
          "expected_output": "1600.0"
        },
        {
          "input": "volume_cone(19, 17)",
          "expected_output": "0"
        }
      ]
    },
    {
      "problem_id": "mbpp_317",
      "description": "Write a function to reflect the modified run-length encoding from a list.",
      "function_name": "modified_encode",
      "correct_solution": "from itertools import groupby\r\ndef modified_encode(alist):\r\n        def ctr_ele(el):\r\n            if len(el)>1: return [len(el), el[0]]\r\n            else: return el[0]\r\n        return [ctr_ele(list(group)) for key, group in groupby(alist)]",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "modified_encode([1, 1, 2, 3, 4, 4, 5, 1])",
          "expected_output": "[[2, 1], 2, 3, [2, 4], 5, 1]"
        },
        {
          "input": "modified_encode('automatically')",
          "expected_output": "['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y']"
        },
        {
          "input": "modified_encode('python')",
          "expected_output": "['p', 'y', 't', 'h', 'o', 'n']"
        }
      ],
      "broken_test_cases": [
        {
          "input": "modified_encode([1, 1, 2, 3, 4, 4, 5, 1])",
          "expected_output": "[[2, 1], 2, 3, [2, 4], 5, 2]"
        },
        {
          "input": "modified_encode('automatically')",
          "expected_output": "['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y', 'z']"
        },
        {
          "input": "modified_encode('python')",
          "expected_output": "['p', 'y', 't', 'h', 'o', 'n', 'a']"
        }
      ]
    },
    {
      "problem_id": "mbpp_57",
      "description": "Write a python function to find the largest number that can be formed with the given digits.",
      "function_name": "find_Max_Num",
      "correct_solution": "def find_Max_Num(arr,n) : \r\n    arr.sort(reverse = True) \r\n    num = arr[0] \r\n    for i in range(1,n) : \r\n        num = num * 10 + arr[i] \r\n    return num ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "find_Max_Num([1, 2, 3], 3)",
          "expected_output": "321"
        },
        {
          "input": "find_Max_Num([4, 5, 6, 1], 4)",
          "expected_output": "6541"
        },
        {
          "input": "find_Max_Num([1, 2, 3, 9], 4)",
          "expected_output": "9321"
        }
      ],
      "broken_test_cases": [
        {
          "input": "find_Max_Num([1, 2, 3], 3)",
          "expected_output": "123"
        },
        {
          "input": "find_Max_Num([4, 5, 6, 1], 4)",
          "expected_output": "1654"
        },
        {
          "input": "find_Max_Num([1, 2, 3, 9], 4)",
          "expected_output": "3921"
        }
      ]
    },
    {
      "problem_id": "mbpp_577",
      "description": "Write a python function to find the last digit in factorial of a given number.",
      "function_name": "last_Digit_Factorial",
      "correct_solution": "def last_Digit_Factorial(n): \r\n    if (n == 0): return 1\r\n    elif (n <= 2): return n  \r\n    elif (n == 3): return 6\r\n    elif (n == 4): return 4 \r\n    else: \r\n      return 0",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "last_Digit_Factorial(4)",
          "expected_output": "4"
        },
        {
          "input": "last_Digit_Factorial(21)",
          "expected_output": "0"
        },
        {
          "input": "last_Digit_Factorial(30)",
          "expected_output": "0"
        }
      ],
      "broken_test_cases": [
        {
          "input": "last_Digit_Factorial(4)",
          "expected_output": "3"
        },
        {
          "input": "last_Digit_Factorial(21)",
          "expected_output": "1"
        },
        {
          "input": "last_Digit_Factorial(30)",
          "expected_output": "1"
        }
      ]
    },
    {
      "problem_id": "mbpp_116",
      "description": "Write a function to convert a given tuple of positive integers into an integer.",
      "function_name": "tuple_to_int",
      "correct_solution": "def tuple_to_int(nums):\r\n    result = int(''.join(map(str,nums)))\r\n    return result",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "tuple_to_int((1, 2, 3))",
          "expected_output": "123"
        },
        {
          "input": "tuple_to_int((4, 5, 6))",
          "expected_output": "456"
        },
        {
          "input": "tuple_to_int((5, 6, 7))",
          "expected_output": "567"
        }
      ],
      "broken_test_cases": [
        {
          "input": "tuple_to_int((1, 2, 3))",
          "expected_output": "321"
        },
        {
          "input": "tuple_to_int((4, 5, 6))",
          "expected_output": "654"
        },
        {
          "input": "tuple_to_int((5, 6, 7))",
          "expected_output": "765"
        }
      ]
    },
    {
      "problem_id": "mbpp_490",
      "description": "Write a function to extract all the pairs which are symmetric in the given tuple list.",
      "function_name": "extract_symmetric",
      "correct_solution": "def extract_symmetric(test_list):\r\n  temp = set(test_list) & {(b, a) for a, b in test_list}\r\n  res = {(a, b) for a, b in temp if a < b}\r\n  return (res) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)])",
          "expected_output": "{(8, 9), (6, 7)}"
        },
        {
          "input": "extract_symmetric([(7, 8), (3, 4), (8, 7), (10, 9), (11, 3), (9, 10)])",
          "expected_output": "{(9, 10), (7, 8)}"
        },
        {
          "input": "extract_symmetric([(8, 9), (4, 5), (9, 8), (11, 10), (12, 4), (10, 11)])",
          "expected_output": "{(8, 9), (10, 11)}"
        }
      ],
      "broken_test_cases": [
        {
          "input": "extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)])",
          "expected_output": "{(8, 9), (7, 6)}"
        },
        {
          "input": "extract_symmetric([(7, 8), (3, 4), (8, 7), (10, 9), (11, 3), (9, 10)])",
          "expected_output": "{(9, 10), (8, 7)}"
        },
        {
          "input": "extract_symmetric([(8, 9), (4, 5), (9, 8), (11, 10), (12, 4), (10, 11)])",
          "expected_output": "{(8, 9), (4, 5), (9, 8), (11, 10), (12, 4), (10, 11)}"
        }
      ]
    },
    {
      "problem_id": "mbpp_513",
      "description": "Write a function to convert tuple into list by adding the given string after every element.",
      "function_name": "add_str",
      "correct_solution": "def add_str(test_tup, K):\r\n  res = [ele for sub in test_tup for ele in (sub, K)]\r\n  return (res) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "add_str((5, 6, 7, 4, 9), 'FDF')",
          "expected_output": "[5, 'FDF', 6, 'FDF', 7, 'FDF', 4, 'FDF', 9, 'FDF']"
        },
        {
          "input": "add_str((7, 8, 9, 10), 'PF')",
          "expected_output": "[7, 'PF', 8, 'PF', 9, 'PF', 10, 'PF']"
        },
        {
          "input": "add_str((11, 14, 12, 1, 4), 'JH')",
          "expected_output": "[11, 'JH', 14, 'JH', 12, 'JH', 1, 'JH', 4, 'JH']"
        }
      ],
      "broken_test_cases": [
        {
          "input": "add_str((5, 6, 7, 4, 9), 'FDF')",
          "expected_output": "[5, 'FDF', 6, 'FDF', 7, 'FDF', 4, 'FDF']"
        },
        {
          "input": "add_str((7, 8, 9, 10), 'PF')",
          "expected_output": "[7, 'PF', 8, 'PF', 9, 'PF', 10, 'PF', 'extra_element']"
        },
        {
          "input": "add_str((11, 14, 12, 1, 4), 'JH')",
          "expected_output": "[11, 'JH', 14, 'JH', 12, 'JH', 1, 'JH']"
        }
      ]
    },
    {
      "problem_id": "mbpp_552",
      "description": "Write a python function to check whether a given sequence is linear or not.",
      "function_name": "Seq_Linear",
      "correct_solution": "def Seq_Linear(seq_nums):\r\n  seq_nums = [seq_nums[x] - seq_nums[x-1] for x in range(1, len(seq_nums))]\r\n  if len(set(seq_nums)) == 1: \r\n    return \"Linear Sequence\"\r\n  else:\r\n    return \"Non Linear Sequence\"",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "Seq_Linear([0, 2, 4, 6, 8, 10])",
          "expected_output": "Linear Sequence"
        },
        {
          "input": "Seq_Linear([1, 2, 3])",
          "expected_output": "Linear Sequence"
        },
        {
          "input": "Seq_Linear([1, 5, 2])",
          "expected_output": "Non Linear Sequence"
        }
      ],
      "broken_test_cases": [
        {
          "input": "Seq_Linear([0, 2, 4, 6, 8, 10])",
          "expected_output": "Non Linear Sequence"
        },
        {
          "input": "Seq_Linear([1, 2, 3])",
          "expected_output": "Non Linear Sequence"
        },
        {
          "input": "Seq_Linear([1, 5, 2])",
          "expected_output": "Linear Sequence"
        }
      ]
    },
    {
      "problem_id": "mbpp_320",
      "description": "Write a function to calculate the difference between the squared sum of first n natural numbers and the sum of squared first n natural numbers.",
      "function_name": "sum_difference",
      "correct_solution": "def sum_difference(n):\r\n    sumofsquares = 0\r\n    squareofsum = 0\r\n    for num in range(1, n+1):\r\n        sumofsquares += num * num\r\n        squareofsum += num\r\n    squareofsum = squareofsum ** 2\r\n    return squareofsum - sumofsquares",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "sum_difference(12)",
          "expected_output": "5434"
        },
        {
          "input": "sum_difference(20)",
          "expected_output": "41230"
        },
        {
          "input": "sum_difference(54)",
          "expected_output": "2151270"
        }
      ],
      "broken_test_cases": [
        {
          "input": "sum_difference(12)",
          "expected_output": "5435"
        },
        {
          "input": "sum_difference(20)",
          "expected_output": "41231"
        },
        {
          "input": "sum_difference(54)",
          "expected_output": "2151271"
        }
      ]
    },
    {
      "problem_id": "mbpp_671",
      "description": "Write a python function to set the right most unset bit.",
      "function_name": "set_Right_most_Unset_Bit",
      "correct_solution": "import math \r\ndef get_Pos_Of_Right_most_Set_Bit(n): \r\n    return int(math.log2(n&-n)+1)   \r\ndef set_Right_most_Unset_Bit(n): \r\n    if (n == 0): \r\n        return 1\r\n    if ((n & (n + 1)) == 0):     \r\n        return n \r\n    pos = get_Pos_Of_Right_most_Set_Bit(~n)      \r\n    return ((1 << (pos - 1)) | n) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "set_Right_most_Unset_Bit(21)",
          "expected_output": "23"
        },
        {
          "input": "set_Right_most_Unset_Bit(11)",
          "expected_output": "15"
        },
        {
          "input": "set_Right_most_Unset_Bit(15)",
          "expected_output": "15"
        }
      ],
      "broken_test_cases": [
        {
          "input": "set_Right_most_Unset_Bit(21)",
          "expected_output": "25"
        },
        {
          "input": "set_Right_most_Unset_Bit(11)",
          "expected_output": "14"
        },
        {
          "input": "set_Right_most_Unset_Bit(15)",
          "expected_output": "14"
        }
      ]
    },
    {
      "problem_id": "mbpp_244",
      "description": "Write a python function to find the next perfect square greater than a given number.",
      "function_name": "next_Perfect_Square",
      "correct_solution": "import math  \r\ndef next_Perfect_Square(N): \r\n    nextN = math.floor(math.sqrt(N)) + 1\r\n    return nextN * nextN ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "next_Perfect_Square(35)",
          "expected_output": "36"
        },
        {
          "input": "next_Perfect_Square(6)",
          "expected_output": "9"
        },
        {
          "input": "next_Perfect_Square(9)",
          "expected_output": "16"
        }
      ],
      "broken_test_cases": [
        {
          "input": "next_Perfect_Square(35)",
          "expected_output": "100"
        },
        {
          "input": "next_Perfect_Square(6)",
          "expected_output": "8"
        },
        {
          "input": "next_Perfect_Square(9)",
          "expected_output": "25"
        }
      ]
    },
    {
      "problem_id": "mbpp_839",
      "description": "Write a function to sort the tuples alphabetically by the first item of each tuple.",
      "function_name": "sort_tuple",
      "correct_solution": "def sort_tuple(tup): \r\n\tn = len(tup) \r\n\tfor i in range(n): \r\n\t\tfor j in range(n-i-1): \r\n\t\t\tif tup[j][0] > tup[j + 1][0]: \r\n\t\t\t\ttup[j], tup[j + 1] = tup[j + 1], tup[j] \r\n\treturn tup",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "sort_tuple([('Amana', 28), ('Zenat', 30), ('Abhishek', 29), ('Nikhil', 21), ('B', 'C')])",
          "expected_output": "[('Abhishek', 29), ('Amana', 28), ('B', 'C'), ('Nikhil', 21), ('Zenat', 30)]"
        },
        {
          "input": "sort_tuple([('aaaa', 28), ('aa', 30), ('bab', 29), ('bb', 21), ('csa', 'C')])",
          "expected_output": "[('aa', 30), ('aaaa', 28), ('bab', 29), ('bb', 21), ('csa', 'C')]"
        },
        {
          "input": "sort_tuple([('Sarala', 28), ('Ayesha', 30), ('Suman', 29), ('Sai', 21), ('G', 'H')])",
          "expected_output": "[('Ayesha', 30), ('G', 'H'), ('Sai', 21), ('Sarala', 28), ('Suman', 29)]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "sort_tuple([('Amana', 28), ('Zenat', 30), ('Abhishek', 29), ('Nikhil', 21), ('B', 'C')])",
          "expected_output": "[('Amana', 28), ('B', 'C'), ('Nikhil', 21), ('Abhishek', 29), ('Zenat', 30)]"
        },
        {
          "input": "sort_tuple([('aaaa', 28), ('aa', 30), ('bab', 29), ('bb', 21), ('csa', 'C')])",
          "expected_output": "[('aaaa', 28), ('aa', 30), ('bab', 29), ('bb', 21), ('csa', 'C')]"
        },
        {
          "input": "sort_tuple([('Sarala', 28), ('Ayesha', 30), ('Suman', 29), ('Sai', 21), ('G', 'H')])",
          "expected_output": "[('Sarala', 28), ('Ayesha', 30), ('Suman', 29), ('Sai', 21), ('G', 'H')]"
        }
      ]
    },
    {
      "problem_id": "mbpp_772",
      "description": "Write a function to remove all the words with k length in the given string.",
      "function_name": "remove_length",
      "correct_solution": "def remove_length(test_str, K):\r\n  temp = test_str.split()\r\n  res = [ele for ele in temp if len(ele) != K]\r\n  res = ' '.join(res)\r\n  return (res) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "remove_length('The person is most value tet', 3)",
          "expected_output": "person is most value"
        },
        {
          "input": "remove_length('If you told me about this ok', 4)",
          "expected_output": "If you me about ok"
        },
        {
          "input": "remove_length('Forces of darkeness is come into the play', 4)",
          "expected_output": "Forces of darkeness is the"
        }
      ],
      "broken_test_cases": [
        {
          "input": "remove_length('The person is most value tet', 3)",
          "expected_output": "The is most value"
        },
        {
          "input": "remove_length('If you told me about this ok', 4)",
          "expected_output": "If you told me about this ok"
        },
        {
          "input": "remove_length('Forces of darkeness is come into the play', 4)",
          "expected_output": "Forces of darkeness is come into the play"
        }
      ]
    },
    {
      "problem_id": "mbpp_38",
      "description": "Write a function to find the division of first even and odd number of a given list.",
      "function_name": "div_even_odd",
      "correct_solution": "def div_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even/first_odd)",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "div_even_odd([1, 3, 5, 7, 4, 1, 6, 8])",
          "expected_output": "4"
        },
        {
          "input": "div_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
          "expected_output": "2"
        },
        {
          "input": "div_even_odd([1, 5, 7, 9, 10])",
          "expected_output": "10"
        }
      ],
      "broken_test_cases": [
        {
          "input": "div_even_odd([1, 3, 5, 7, 4, 1, 6, 8])",
          "expected_output": "2"
        },
        {
          "input": "div_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
          "expected_output": "1"
        },
        {
          "input": "div_even_odd([1, 5, 7, 9, 10])",
          "expected_output": "0"
        }
      ]
    },
    {
      "problem_id": "mbpp_419",
      "description": "Write a function to round every number of a given list of numbers and print the total sum multiplied by the length of the list.",
      "function_name": "round_and_sum",
      "correct_solution": "def round_and_sum(list1):\r\n  lenght=len(list1)\r\n  round_and_sum=sum(list(map(round,list1))* lenght)\r\n  return round_and_sum",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "round_and_sum([22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5])",
          "expected_output": "243"
        },
        {
          "input": "round_and_sum([5, 2, 9, 24.3, 29])",
          "expected_output": "345"
        },
        {
          "input": "round_and_sum([25.0, 56.7, 89.2])",
          "expected_output": "513"
        }
      ],
      "broken_test_cases": [
        {
          "input": "round_and_sum([22.4, 4.0, -16.22, -9.1, 11.0, -12.22, 14.2, -5.2, 17.5])",
          "expected_output": "244"
        },
        {
          "input": "round_and_sum([5, 2, 9, 24.3, 29])",
          "expected_output": "346"
        },
        {
          "input": "round_and_sum([25.0, 56.7, 89.2])",
          "expected_output": "500"
        }
      ]
    },
    {
      "problem_id": "mbpp_230",
      "description": "Write a function to replace blank spaces with any character in a string.",
      "function_name": "replace_blank",
      "correct_solution": "def replace_blank(str1,char):\r\n str2 = str1.replace(' ', char)\r\n return str2",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "replace_blank('hello people', '@')",
          "expected_output": "hello@people"
        },
        {
          "input": "replace_blank('python program language', '$')",
          "expected_output": "python$program$language"
        },
        {
          "input": "replace_blank('blank space', '-')",
          "expected_output": "blank-space"
        }
      ],
      "broken_test_cases": [
        {
          "input": "replace_blank('hello people', '@')",
          "expected_output": "hello people"
        },
        {
          "input": "replace_blank('python program language', '$')",
          "expected_output": "python$program$language$"
        },
        {
          "input": "replace_blank('blank space', '-')",
          "expected_output": "blank space"
        }
      ]
    },
    {
      "problem_id": "mbpp_143",
      "description": "Write a function to find number of lists present in the given tuple.",
      "function_name": "find_lists",
      "correct_solution": "def find_lists(Input): \r\n\tif isinstance(Input, list): \r\n\t\treturn 1\r\n\telse: \r\n\t\treturn len(Input) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "find_lists(([1, 2, 3, 4], [5, 6, 7, 8]))",
          "expected_output": "2"
        },
        {
          "input": "find_lists(([1, 2], [3, 4], [5, 6]))",
          "expected_output": "3"
        },
        {
          "input": "find_lists([9, 8, 7, 6, 5, 4, 3, 2, 1])",
          "expected_output": "1"
        }
      ],
      "broken_test_cases": [
        {
          "input": "find_lists(([1, 2, 3, 4], [5, 6, 7, 8]))",
          "expected_output": "1"
        },
        {
          "input": "find_lists(([1, 2], [3, 4], [5, 6]))",
          "expected_output": "2"
        },
        {
          "input": "find_lists([9, 8, 7, 6, 5, 4, 3, 2, 1])",
          "expected_output": "2"
        }
      ]
    },
    {
      "problem_id": "mbpp_141",
      "description": "Write a function to sort a list of elements using pancake sort.",
      "function_name": "pancake_sort",
      "correct_solution": "def pancake_sort(nums):\r\n    arr_len = len(nums)\r\n    while arr_len > 1:\r\n        mi = nums.index(max(nums[0:arr_len]))\r\n        nums = nums[mi::-1] + nums[mi+1:len(nums)]\r\n        nums = nums[arr_len-1::-1] + nums[arr_len:len(nums)]\r\n        arr_len -= 1\r\n    return nums",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "pancake_sort([15, 79, 25, 38, 69])",
          "expected_output": "[15, 25, 38, 69, 79]"
        },
        {
          "input": "pancake_sort([98, 12, 54, 36, 85])",
          "expected_output": "[12, 36, 54, 85, 98]"
        },
        {
          "input": "pancake_sort([41, 42, 32, 12, 23])",
          "expected_output": "[12, 23, 32, 41, 42]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "pancake_sort([15, 79, 25, 38, 69])",
          "expected_output": "[15, 38, 25, 69, 79]"
        },
        {
          "input": "pancake_sort([98, 12, 54, 36, 85])",
          "expected_output": "[12, 36, 54, 85, 99]"
        },
        {
          "input": "pancake_sort([41, 42, 32, 12, 23])",
          "expected_output": "[12, 23, 41, 32, 42]"
        }
      ]
    },
    {
      "problem_id": "mbpp_405",
      "description": "Write a function to check whether an element exists within a tuple.",
      "function_name": "check_tuplex",
      "correct_solution": "def check_tuplex(tuplex,tuple1): \r\n  if tuple1 in tuplex:\r\n    return True\r\n  else:\r\n     return False",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "check_tuplex(('w', 3, 'r', 'e', 's', 'o', 'u', 'r', 'c', 'e'), 'r')",
          "expected_output": "True"
        },
        {
          "input": "check_tuplex(('w', 3, 'r', 'e', 's', 'o', 'u', 'r', 'c', 'e'), '5')",
          "expected_output": "False"
        },
        {
          "input": "check_tuplex(('w', 3, 'r', 'e', 's', 'o', 'u', 'r', 'c', 'e'), 3)",
          "expected_output": "True"
        }
      ],
      "broken_test_cases": [
        {
          "input": "check_tuplex(('w', 3, 'r', 'e', 's', 'o', 'u', 'r', 'c', 'e'), 'r')",
          "expected_output": "False"
        },
        {
          "input": "check_tuplex(('w', 3, 'r', 'e', 's', 'o', 'u', 'r', 'c', 'e'), '5')",
          "expected_output": "True"
        },
        {
          "input": "check_tuplex(('w', 3, 'r', 'e', 's', 'o', 'u', 'r', 'c', 'e'), 3)",
          "expected_output": "False"
        }
      ]
    },
    {
      "problem_id": "mbpp_145",
      "description": "Write a python function to find the maximum difference between any two elements in a given array.",
      "function_name": "max_Abs_Diff",
      "correct_solution": "def max_Abs_Diff(arr,n): \r\n    minEle = arr[0] \r\n    maxEle = arr[0] \r\n    for i in range(1, n): \r\n        minEle = min(minEle,arr[i]) \r\n        maxEle = max(maxEle,arr[i]) \r\n    return (maxEle - minEle) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "max_Abs_Diff((2, 1, 5, 3), 4)",
          "expected_output": "4"
        },
        {
          "input": "max_Abs_Diff((9, 3, 2, 5, 1), 5)",
          "expected_output": "8"
        },
        {
          "input": "max_Abs_Diff((3, 2, 1), 3)",
          "expected_output": "2"
        }
      ],
      "broken_test_cases": [
        {
          "input": "max_Abs_Diff((2, 1, 5, 3), 4)",
          "expected_output": "10"
        },
        {
          "input": "max_Abs_Diff((9, 3, 2, 5, 1), 5)",
          "expected_output": "7"
        },
        {
          "input": "max_Abs_Diff((3, 2, 1), 3)",
          "expected_output": "3"
        }
      ]
    },
    {
      "problem_id": "mbpp_925",
      "description": "Write a python function to calculate the product of all the numbers of a given tuple.",
      "function_name": "mutiple_tuple",
      "correct_solution": "def mutiple_tuple(nums):\r\n    temp = list(nums)\r\n    product = 1 \r\n    for x in temp:\r\n        product *= x\r\n    return product",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "mutiple_tuple((4, 3, 2, 2, -1, 18))",
          "expected_output": "-864"
        },
        {
          "input": "mutiple_tuple((1, 2, 3))",
          "expected_output": "6"
        },
        {
          "input": "mutiple_tuple((-2, -4, -6))",
          "expected_output": "-48"
        }
      ],
      "broken_test_cases": [
        {
          "input": "mutiple_tuple((4, 3, 2, 2, -1, 18))",
          "expected_output": "864"
        },
        {
          "input": "mutiple_tuple((1, 2, 3))",
          "expected_output": "7"
        },
        {
          "input": "mutiple_tuple((-2, -4, -6))",
          "expected_output": "-47"
        }
      ]
    },
    {
      "problem_id": "mbpp_854",
      "description": "Write a function which accepts an arbitrary list and converts it to a heap using heap queue algorithm.",
      "function_name": "raw_heap",
      "correct_solution": "import heapq as hq\r\ndef raw_heap(rawheap):\r\n  hq.heapify(rawheap)\r\n  return rawheap",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "raw_heap([25, 44, 68, 21, 39, 23, 89])",
          "expected_output": "[21, 25, 23, 44, 39, 68, 89]"
        },
        {
          "input": "raw_heap([25, 35, 22, 85, 14, 65, 75, 25, 58])",
          "expected_output": "[14, 25, 22, 25, 35, 65, 75, 85, 58]"
        },
        {
          "input": "raw_heap([4, 5, 6, 2])",
          "expected_output": "[2, 4, 6, 5]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "raw_heap([25, 44, 68, 21, 39, 23, 89])",
          "expected_output": "[25, 21, 23, 44, 39, 68, 89]"
        },
        {
          "input": "raw_heap([25, 35, 22, 85, 14, 65, 75, 25, 58])",
          "expected_output": "[25, 14, 22, 25, 35, 65, 75, 85, 58]"
        },
        {
          "input": "raw_heap([4, 5, 6, 2])",
          "expected_output": "[4, 2, 6, 5]"
        }
      ]
    },
    {
      "problem_id": "mbpp_211",
      "description": "Write a python function to count numbers whose oth and nth bits are set.",
      "function_name": "count_Num",
      "correct_solution": "def count_Num(n): \r\n    if (n == 1): \r\n        return 1\r\n    count = pow(2,n - 2) \r\n    return count ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "count_Num(2)",
          "expected_output": "1"
        },
        {
          "input": "count_Num(3)",
          "expected_output": "2"
        },
        {
          "input": "count_Num(1)",
          "expected_output": "1"
        }
      ],
      "broken_test_cases": [
        {
          "input": "count_Num(2)",
          "expected_output": "0"
        },
        {
          "input": "count_Num(3)",
          "expected_output": "3"
        },
        {
          "input": "count_Num(1)",
          "expected_output": "2"
        }
      ]
    },
    {
      "problem_id": "mbpp_458",
      "description": "Write a function to find the area of a rectangle.",
      "function_name": "rectangle_area",
      "correct_solution": "def rectangle_area(l,b):\r\n  area=l*b\r\n  return area",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "rectangle_area(10, 20)",
          "expected_output": "200"
        },
        {
          "input": "rectangle_area(10, 5)",
          "expected_output": "50"
        },
        {
          "input": "rectangle_area(4, 2)",
          "expected_output": "8"
        }
      ],
      "broken_test_cases": [
        {
          "input": "rectangle_area(10, 20)",
          "expected_output": "201"
        },
        {
          "input": "rectangle_area(10, 5)",
          "expected_output": "25"
        },
        {
          "input": "rectangle_area(4, 2)",
          "expected_output": "10"
        }
      ]
    },
    {
      "problem_id": "mbpp_944",
      "description": "Write a function to separate and print the numbers and their position of a given string.",
      "function_name": "num_position",
      "correct_solution": "import re\r\ndef num_position(text):\r\n for m in re.finditer(\"\\d+\", text):\r\n    return m.start()",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "num_position('there are 70 flats in this apartment')",
          "expected_output": "10"
        },
        {
          "input": "num_position('every adult have 32 teeth')",
          "expected_output": "17"
        },
        {
          "input": "num_position('isha has 79 chocolates in her bag')",
          "expected_output": "9"
        }
      ],
      "broken_test_cases": [
        {
          "input": "num_position('there are 70 flats in this apartment')",
          "expected_output": "11"
        },
        {
          "input": "num_position('every adult have 32 teeth')",
          "expected_output": "18"
        },
        {
          "input": "num_position('isha has 79 chocolates in her bag')",
          "expected_output": "10"
        }
      ]
    },
    {
      "problem_id": "mbpp_732",
      "description": "Write a function to replace all occurrences of spaces, commas, or dots with a colon.",
      "function_name": "replace_specialchar",
      "correct_solution": "import re\r\ndef replace_specialchar(text):\r\n return (re.sub(\"[ ,.]\", \":\", text))\r",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "replace_specialchar('Python language, Programming language.')",
          "expected_output": "Python:language::Programming:language:"
        },
        {
          "input": "replace_specialchar('a b c,d e f')",
          "expected_output": "a:b:c:d:e:f"
        },
        {
          "input": "replace_specialchar('ram reshma,ram rahim')",
          "expected_output": "ram:reshma:ram:rahim"
        }
      ],
      "broken_test_cases": [
        {
          "input": "replace_specialchar('Python language, Programming language.')",
          "expected_output": "Python:language,Programming:language."
        },
        {
          "input": "replace_specialchar('a b c,d e f')",
          "expected_output": "a b c,d e f"
        },
        {
          "input": "replace_specialchar('ram reshma,ram rahim')",
          "expected_output": "ram:reshma:ram-rahim"
        }
      ]
    },
    {
      "problem_id": "mbpp_157",
      "description": "Write a function to reflect the run-length encoding from a list.",
      "function_name": "encode_list",
      "correct_solution": "from itertools import groupby\r\ndef encode_list(list1):\r\n    return [[len(list(group)), key] for key, group in groupby(list1)]",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "encode_list([1, 1, 2, 3, 4, 4.3, 5, 1])",
          "expected_output": "[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]"
        },
        {
          "input": "encode_list('automatically')",
          "expected_output": "[[1, 'a'], [1, 'u'], [1, 't'], [1, 'o'], [1, 'm'], [1, 'a'], [1, 't'], [1, 'i'], [1, 'c'], [1, 'a'], [2, 'l'], [1, 'y']]"
        },
        {
          "input": "encode_list('python')",
          "expected_output": "[[1, 'p'], [1, 'y'], [1, 't'], [1, 'h'], [1, 'o'], [1, 'n']]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "encode_list([1, 1, 2, 3, 4, 4.3, 5, 1])",
          "expected_output": "[[1, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]"
        },
        {
          "input": "encode_list('automatically')",
          "expected_output": "[[1, 'a'], [1, 'u'], [1, 't'], [1, 'o'], [1, 'm'], [1, 'a'], [1, 't'], [1, 'i'], [1, 'c'], [1, 'a'], [1, 'l'], [1, 'y']]"
        },
        {
          "input": "encode_list('python')",
          "expected_output": "[[1, 'p'], [1, 'y'], [1, 't'], [1, 'h'], [1, 'o'], [2, 'n']]"
        }
      ]
    },
    {
      "problem_id": "mbpp_71",
      "description": "Write a function to sort a list of elements using comb sort.",
      "function_name": "comb_sort",
      "correct_solution": "def comb_sort(nums):\r\n    shrink_fact = 1.3\r\n    gaps = len(nums)\r\n    swapped = True\r\n    i = 0\r\n    while gaps > 1 or swapped:\r\n        gaps = int(float(gaps) / shrink_fact)\r\n        swapped = False\r\n        i = 0\r\n        while gaps + i < len(nums):\r\n            if nums[i] > nums[i+gaps]:\r\n                nums[i], nums[i+gaps] = nums[i+gaps], nums[i]\r\n                swapped = True\r\n            i += 1\r\n    return nums",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "comb_sort([5, 15, 37, 25, 79])",
          "expected_output": "[5, 15, 25, 37, 79]"
        },
        {
          "input": "comb_sort([41, 32, 15, 19, 22])",
          "expected_output": "[15, 19, 22, 32, 41]"
        },
        {
          "input": "comb_sort([99, 15, 13, 47])",
          "expected_output": "[13, 15, 47, 99]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "comb_sort([5, 15, 37, 25, 79])",
          "expected_output": "[5, 15, 37, 25, 80]"
        },
        {
          "input": "comb_sort([41, 32, 15, 19, 22])",
          "expected_output": "[15, 19, 32, 22, 41]"
        },
        {
          "input": "comb_sort([99, 15, 13, 47])",
          "expected_output": "[99, 15, 13, 47]"
        }
      ]
    },
    {
      "problem_id": "mbpp_796",
      "description": "Write function to find the sum of all items in the given dictionary.",
      "function_name": "return_sum",
      "correct_solution": "def return_sum(dict):\r\n  sum = 0\r\n  for i in dict.values():\r\n    sum = sum + i\r\n  return sum",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "return_sum({'a': 100, 'b': 200, 'c': 300})",
          "expected_output": "600"
        },
        {
          "input": "return_sum({'a': 25, 'b': 18, 'c': 45})",
          "expected_output": "88"
        },
        {
          "input": "return_sum({'a': 36, 'b': 39, 'c': 49})",
          "expected_output": "124"
        }
      ],
      "broken_test_cases": [
        {
          "input": "return_sum({'a': 100, 'b': 200, 'c': 300})",
          "expected_output": "550"
        },
        {
          "input": "return_sum({'a': 25, 'b': 18, 'c': 45})",
          "expected_output": "89"
        },
        {
          "input": "return_sum({'a': 36, 'b': 39, 'c': 49})",
          "expected_output": "122"
        }
      ]
    },
    {
      "problem_id": "mbpp_339",
      "description": "Write a python function to find the maximum occuring divisor in an interval.",
      "function_name": "find_Divisor",
      "correct_solution": "def find_Divisor(x,y):  \r\n    if (x==y): \r\n        return y \r\n    return 2",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "find_Divisor(2, 2)",
          "expected_output": "2"
        },
        {
          "input": "find_Divisor(2, 5)",
          "expected_output": "2"
        },
        {
          "input": "find_Divisor(5, 10)",
          "expected_output": "2"
        }
      ],
      "broken_test_cases": [
        {
          "input": "find_Divisor(2, 2)",
          "expected_output": "3"
        },
        {
          "input": "find_Divisor(2, 5)",
          "expected_output": "5"
        },
        {
          "input": "find_Divisor(5, 10)",
          "expected_output": "5"
        }
      ]
    },
    {
      "problem_id": "mbpp_766",
      "description": "Write a function to iterate over all pairs of consecutive items in a given list.",
      "function_name": "pair_wise",
      "correct_solution": "def pair_wise(l1):\r\n    temp = []\r\n    for i in range(len(l1) - 1):\r\n        current_element, next_element = l1[i], l1[i + 1]\r\n        x = (current_element, next_element)\r\n        temp.append(x)\r\n    return temp",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "pair_wise([1, 1, 2, 3, 3, 4, 4, 5])",
          "expected_output": "[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (4, 5)]"
        },
        {
          "input": "pair_wise([1, 5, 7, 9, 10])",
          "expected_output": "[(1, 5), (5, 7), (7, 9), (9, 10)]"
        },
        {
          "input": "pair_wise([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
          "expected_output": "[(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9), (9, 10)]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "pair_wise([1, 1, 2, 3, 3, 4, 4, 5])",
          "expected_output": "[(1, 1), (1, 2), (2, 3), (3, 3), (3, 4), (4, 4), (5, 5)]"
        },
        {
          "input": "pair_wise([1, 5, 7, 9, 10])",
          "expected_output": "[(1, 5), (5, 7), (7, 9), (9, 10), (10, 1)]"
        },
        {
          "input": "pair_wise([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
          "expected_output": "[(1, 2), (2, 3), (3, 4), (4, 5), (5, 6), (6, 7), (7, 8), (8, 9)]"
        }
      ]
    },
    {
      "problem_id": "mbpp_471",
      "description": "Write a python function to find remainder of array multiplication divided by n.",
      "function_name": "find_remainder",
      "correct_solution": "def find_remainder(arr, lens, n): \r\n    mul = 1\r\n    for i in range(lens):  \r\n        mul = (mul * (arr[i] % n)) % n \r\n    return mul % n ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "find_remainder([100, 10, 5, 25, 35, 14], 6, 11)",
          "expected_output": "9"
        },
        {
          "input": "find_remainder([1, 1, 1], 3, 1)",
          "expected_output": "0"
        },
        {
          "input": "find_remainder([1, 2, 1], 3, 2)",
          "expected_output": "0"
        }
      ],
      "broken_test_cases": [
        {
          "input": "find_remainder([100, 10, 5, 25, 35, 14], 6, 11)",
          "expected_output": "10"
        },
        {
          "input": "find_remainder([1, 1, 1], 3, 1)",
          "expected_output": "1"
        },
        {
          "input": "find_remainder([1, 2, 1], 3, 2)",
          "expected_output": "1"
        }
      ]
    },
    {
      "problem_id": "mbpp_718",
      "description": "Write a function to create a list taking alternate elements from another given list.",
      "function_name": "alternate_elements",
      "correct_solution": "def alternate_elements(list1):\r\n    result=[]\r\n    for item in list1[::2]:\r\n        result.append(item)\r\n    return result ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "alternate_elements(['red', 'black', 'white', 'green', 'orange'])",
          "expected_output": "['red', 'white', 'orange']"
        },
        {
          "input": "alternate_elements([2, 0, 3, 4, 0, 2, 8, 3, 4, 2])",
          "expected_output": "[2, 3, 0, 8, 4]"
        },
        {
          "input": "alternate_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
          "expected_output": "[1, 3, 5, 7, 9]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "alternate_elements(['red', 'black', 'white', 'green', 'orange'])",
          "expected_output": "['red', 'black', 'white']"
        },
        {
          "input": "alternate_elements([2, 0, 3, 4, 0, 2, 8, 3, 4, 2])",
          "expected_output": "[2, 0, 3, 0, 8, 2]"
        },
        {
          "input": "alternate_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
          "expected_output": "[1, 2, 3, 4, 5]"
        }
      ]
    },
    {
      "problem_id": "mbpp_611",
      "description": "Write a function to find the maximum of nth column from the given tuple list.",
      "function_name": "max_of_nth",
      "correct_solution": "def max_of_nth(test_list, N):\r\n  res = max([sub[N] for sub in test_list])\r\n  return (res) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "max_of_nth([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2)",
          "expected_output": "19"
        },
        {
          "input": "max_of_nth([(6, 7, 8), (2, 4, 6), (9, 10, 20)], 1)",
          "expected_output": "10"
        },
        {
          "input": "max_of_nth([(7, 8, 9), (3, 5, 7), (10, 11, 21)], 1)",
          "expected_output": "11"
        }
      ],
      "broken_test_cases": [
        {
          "input": "max_of_nth([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2)",
          "expected_output": "18"
        },
        {
          "input": "max_of_nth([(6, 7, 8), (2, 4, 6), (9, 10, 20)], 1)",
          "expected_output": "7"
        },
        {
          "input": "max_of_nth([(7, 8, 9), (3, 5, 7), (10, 11, 21)], 1)",
          "expected_output": "10"
        }
      ]
    },
    {
      "problem_id": "mbpp_583",
      "description": "Write a function for nth catalan number.",
      "function_name": "catalan_number",
      "correct_solution": "def catalan_number(num):\r\n    if num <=1:\r\n         return 1   \r\n    res_num = 0\r\n    for i in range(num):\r\n        res_num += catalan_number(i) * catalan_number(num-i-1)\r\n    return res_num",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "catalan_number(10)",
          "expected_output": "16796"
        },
        {
          "input": "catalan_number(9)",
          "expected_output": "4862"
        },
        {
          "input": "catalan_number(7)",
          "expected_output": "429"
        }
      ],
      "broken_test_cases": [
        {
          "input": "catalan_number(10)",
          "expected_output": "1234"
        },
        {
          "input": "catalan_number(9)",
          "expected_output": "4863"
        },
        {
          "input": "catalan_number(7)",
          "expected_output": "428"
        }
      ]
    },
    {
      "problem_id": "mbpp_959",
      "description": "Write a python function to find the average of a list.",
      "function_name": "Average",
      "correct_solution": "def Average(lst): \r\n    return sum(lst) / len(lst) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "Average([15, 9, 55, 41, 35, 20, 62, 49])",
          "expected_output": "35.75"
        },
        {
          "input": "Average([4, 5, 1, 2, 9, 7, 10, 8])",
          "expected_output": "5.75"
        },
        {
          "input": "Average([1, 2, 3])",
          "expected_output": "2"
        }
      ],
      "broken_test_cases": [
        {
          "input": "Average([15, 9, 55, 41, 35, 20, 62, 49])",
          "expected_output": "36.75"
        },
        {
          "input": "Average([4, 5, 1, 2, 9, 7, 10, 8])",
          "expected_output": "4.75"
        },
        {
          "input": "Average([1, 2, 3])",
          "expected_output": "1"
        }
      ]
    },
    {
      "problem_id": "mbpp_873",
      "description": "Write a function to solve the fibonacci sequence using recursion.",
      "function_name": "fibonacci",
      "correct_solution": "def fibonacci(n):\r\n  if n == 1 or n == 2:\r\n    return 1\r\n  else:\r\n    return (fibonacci(n - 1) + (fibonacci(n - 2)))",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "fibonacci(7)",
          "expected_output": "13"
        },
        {
          "input": "fibonacci(8)",
          "expected_output": "21"
        },
        {
          "input": "fibonacci(9)",
          "expected_output": "34"
        }
      ],
      "broken_test_cases": [
        {
          "input": "fibonacci(7)",
          "expected_output": "12"
        },
        {
          "input": "fibonacci(8)",
          "expected_output": "34"
        },
        {
          "input": "fibonacci(9)",
          "expected_output": "35"
        }
      ]
    },
    {
      "problem_id": "mbpp_859",
      "description": "Write a function to generate all sublists of a given list.",
      "function_name": "sub_lists",
      "correct_solution": "from itertools import combinations\r\ndef sub_lists(my_list):\r\n\tsubs = []\r\n\tfor i in range(0, len(my_list)+1):\r\n\t  temp = [list(x) for x in combinations(my_list, i)]\r\n\t  if len(temp)>0:\r\n\t    subs.extend(temp)\r\n\treturn subs",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "sub_lists([10, 20, 30, 40])",
          "expected_output": "[[], [10], [20], [30], [40], [10, 20], [10, 30], [10, 40], [20, 30], [20, 40], [30, 40], [10, 20, 30], [10, 20, 40], [10, 30, 40], [20, 30, 40], [10, 20, 30, 40]]"
        },
        {
          "input": "sub_lists(['X', 'Y', 'Z'])",
          "expected_output": "[[], ['X'], ['Y'], ['Z'], ['X', 'Y'], ['X', 'Z'], ['Y', 'Z'], ['X', 'Y', 'Z']]"
        },
        {
          "input": "sub_lists([1, 2, 3])",
          "expected_output": "[[], [1], [2], [3], [1, 2], [1, 3], [2, 3], [1, 2, 3]]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "sub_lists([10, 20, 30, 40])",
          "expected_output": "[[], [10], [20], [30], [40], [10, 20], [10, 30], [10, 40], [20, 30], [20, 40], [30, 40], [10, 20, 30], [10, 20, 40], [10, 30, 40], [20, 30, 40]]"
        },
        {
          "input": "sub_lists(['X', 'Y', 'Z'])",
          "expected_output": "[['X'], ['Y'], ['Z'], ['X', 'Y'], ['X', 'Z'], ['Y', 'Z']]"
        },
        {
          "input": "sub_lists([1, 2, 3])",
          "expected_output": "[[], [1], [2], [3], [1, 2], [1, 3], [2, 3]]"
        }
      ]
    },
    {
      "problem_id": "mbpp_734",
      "description": "Write a python function to find sum of products of all possible subarrays.",
      "function_name": "sum_Of_Subarray_Prod",
      "correct_solution": "def sum_Of_Subarray_Prod(arr,n):\r\n    ans = 0\r\n    res = 0\r\n    i = n - 1\r\n    while (i >= 0):\r\n        incr = arr[i]*(1 + res)\r\n        ans += incr\r\n        res = incr\r\n        i -= 1\r\n    return (ans)",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "sum_Of_Subarray_Prod([1, 2, 3], 3)",
          "expected_output": "20"
        },
        {
          "input": "sum_Of_Subarray_Prod([1, 2], 2)",
          "expected_output": "5"
        },
        {
          "input": "sum_Of_Subarray_Prod([1, 2, 3, 4], 4)",
          "expected_output": "84"
        }
      ],
      "broken_test_cases": [
        {
          "input": "sum_Of_Subarray_Prod([1, 2, 3], 3)",
          "expected_output": "21"
        },
        {
          "input": "sum_Of_Subarray_Prod([1, 2], 2)",
          "expected_output": "6"
        },
        {
          "input": "sum_Of_Subarray_Prod([1, 2, 3, 4], 4)",
          "expected_output": "85"
        }
      ]
    },
    {
      "problem_id": "mbpp_882",
      "description": "Write a function to caluclate perimeter of a parallelogram.",
      "function_name": "parallelogram_perimeter",
      "correct_solution": "def parallelogram_perimeter(b,h):\r\n  perimeter=2*(b*h)\r\n  return perimeter",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "parallelogram_perimeter(10, 20)",
          "expected_output": "400"
        },
        {
          "input": "parallelogram_perimeter(15, 20)",
          "expected_output": "600"
        },
        {
          "input": "parallelogram_perimeter(8, 9)",
          "expected_output": "144"
        }
      ],
      "broken_test_cases": [
        {
          "input": "parallelogram_perimeter(10, 20)",
          "expected_output": "500"
        },
        {
          "input": "parallelogram_perimeter(15, 20)",
          "expected_output": "400"
        },
        {
          "input": "parallelogram_perimeter(8, 9)",
          "expected_output": "160"
        }
      ]
    },
    {
      "problem_id": "mbpp_744",
      "description": "Write a function to check if the given tuple has any none value or not.",
      "function_name": "check_none",
      "correct_solution": "def check_none(test_tup):\r\n  res = any(map(lambda ele: ele is None, test_tup))\r\n  return (res) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "check_none((10, 4, 5, 6, None))",
          "expected_output": "True"
        },
        {
          "input": "check_none((7, 8, 9, 11, 14))",
          "expected_output": "False"
        },
        {
          "input": "check_none((1, 2, 3, 4, None))",
          "expected_output": "True"
        }
      ],
      "broken_test_cases": [
        {
          "input": "check_none((10, 4, 5, 6, None))",
          "expected_output": "False"
        },
        {
          "input": "check_none((7, 8, 9, 11, 14))",
          "expected_output": "True"
        },
        {
          "input": "check_none((1, 2, 3, 4, None))",
          "expected_output": "False"
        }
      ]
    },
    {
      "problem_id": "mbpp_99",
      "description": "Write a function to convert the given decimal number to its binary equivalent.",
      "function_name": "decimal_to_binary",
      "correct_solution": "def decimal_to_binary(n): \r\n    return bin(n).replace(\"0b\",\"\") ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "decimal_to_binary(8)",
          "expected_output": "1000"
        },
        {
          "input": "decimal_to_binary(18)",
          "expected_output": "10010"
        },
        {
          "input": "decimal_to_binary(7)",
          "expected_output": "111"
        }
      ],
      "broken_test_cases": [
        {
          "input": "decimal_to_binary(8)",
          "expected_output": "1001"
        },
        {
          "input": "decimal_to_binary(18)",
          "expected_output": "10011"
        },
        {
          "input": "decimal_to_binary(7)",
          "expected_output": "1010"
        }
      ]
    },
    {
      "problem_id": "mbpp_868",
      "description": "Write a python function to find the length of the last word in a given string.",
      "function_name": "length_Of_Last_Word",
      "correct_solution": "def length_Of_Last_Word(a): \r\n    l = 0\r\n    x = a.strip() \r\n    for i in range(len(x)): \r\n        if x[i] == \" \": \r\n            l = 0\r\n        else: \r\n            l += 1\r\n    return l ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "length_Of_Last_Word('python language')",
          "expected_output": "8"
        },
        {
          "input": "length_Of_Last_Word('PHP')",
          "expected_output": "3"
        },
        {
          "input": "length_Of_Last_Word('')",
          "expected_output": "0"
        }
      ],
      "broken_test_cases": [
        {
          "input": "length_Of_Last_Word('python language')",
          "expected_output": "7"
        },
        {
          "input": "length_Of_Last_Word('PHP')",
          "expected_output": "2"
        },
        {
          "input": "length_Of_Last_Word('')",
          "expected_output": "1"
        }
      ]
    },
    {
      "problem_id": "mbpp_700",
      "description": "Write a function to count the number of elements in a list which are within a specific range.",
      "function_name": "count_range_in_list",
      "correct_solution": "def count_range_in_list(li, min, max):\r\n\tctr = 0\r\n\tfor x in li:\r\n\t\tif min <= x <= max:\r\n\t\t\tctr += 1\r\n\treturn ctr",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "count_range_in_list([10, 20, 30, 40, 40, 40, 70, 80, 99], 40, 100)",
          "expected_output": "6"
        },
        {
          "input": "count_range_in_list(['a', 'b', 'c', 'd', 'e', 'f'], 'a', 'e')",
          "expected_output": "5"
        },
        {
          "input": "count_range_in_list([7, 8, 9, 15, 17, 19, 45], 15, 20)",
          "expected_output": "3"
        }
      ],
      "broken_test_cases": [
        {
          "input": "count_range_in_list([10, 20, 30, 40, 40, 40, 70, 80, 99], 40, 100)",
          "expected_output": "5"
        },
        {
          "input": "count_range_in_list(['a', 'b', 'c', 'd', 'e', 'f'], 'a', 'e')",
          "expected_output": "4"
        },
        {
          "input": "count_range_in_list([7, 8, 9, 15, 17, 19, 45], 15, 20)",
          "expected_output": "2"
        }
      ]
    },
    {
      "problem_id": "mbpp_314",
      "description": "Write a function to find out the maximum sum such that no two chosen numbers are adjacent for the given rectangular grid of dimension 2 x n.",
      "function_name": "max_sum_rectangular_grid",
      "correct_solution": "def max_sum_rectangular_grid(grid, n) : \r\n\tincl = max(grid[0][0], grid[1][0]) \r\n\texcl = 0\r\n\tfor i in range(1, n) : \r\n\t\texcl_new = max(excl, incl) \r\n\t\tincl = excl + max(grid[0][i], grid[1][i]) \r\n\t\texcl = excl_new \r\n\treturn max(excl, incl)",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "max_sum_rectangular_grid([[1, 4, 5], [2, 0, 0]], 3)",
          "expected_output": "7"
        },
        {
          "input": "max_sum_rectangular_grid([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]], 5)",
          "expected_output": "24"
        },
        {
          "input": "max_sum_rectangular_grid([[7, 9, 11, 15, 19], [21, 25, 28, 31, 32]], 5)",
          "expected_output": "81"
        }
      ],
      "broken_test_cases": [
        {
          "input": "max_sum_rectangular_grid([[1, 4, 5], [2, 0, 0]], 3)",
          "expected_output": "8"
        },
        {
          "input": "max_sum_rectangular_grid([[1, 2, 3, 4, 5], [6, 7, 8, 9, 10]], 5)",
          "expected_output": "25"
        },
        {
          "input": "max_sum_rectangular_grid([[7, 9, 11, 15, 19], [21, 25, 28, 31, 32]], 5)",
          "expected_output": "80"
        }
      ]
    },
    {
      "problem_id": "mbpp_180",
      "description": "Write a function to calculate distance between two points using latitude and longitude.",
      "function_name": "distance_lat_long",
      "correct_solution": "from math import radians, sin, cos, acos\r\ndef distance_lat_long(slat,slon,elat,elon):\r\n dist = 6371.01 * acos(sin(slat)*sin(elat) + cos(slat)*cos(elat)*cos(slon - elon))\r\n return dist",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "distance_lat_long(23.5, 67.5, 25.5, 69.5)",
          "expected_output": "12179.372041317429"
        },
        {
          "input": "distance_lat_long(10.5, 20.5, 30.5, 40.5)",
          "expected_output": "6069.397933300514"
        }
      ],
      "broken_test_cases": [
        {
          "input": "distance_lat_long(23.5, 67.5, 25.5, 69.5)",
          "expected_output": "1234.567"
        },
        {
          "input": "distance_lat_long(10.5, 20.5, 30.5, 40.5)",
          "expected_output": "12345.6789"
        }
      ]
    },
    {
      "problem_id": "mbpp_347",
      "description": "Write a python function to count the number of squares in a rectangle.",
      "function_name": "count_Squares",
      "correct_solution": "def count_Squares(m,n): \r\n    if (n < m): \r\n        temp = m \r\n        m = n \r\n        n = temp \r\n    return n * (n + 1) * (3 * m - n + 1) // 6",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "count_Squares(4, 3)",
          "expected_output": "20"
        },
        {
          "input": "count_Squares(1, 2)",
          "expected_output": "2"
        },
        {
          "input": "count_Squares(2, 2)",
          "expected_output": "5"
        }
      ],
      "broken_test_cases": [
        {
          "input": "count_Squares(4, 3)",
          "expected_output": "21"
        },
        {
          "input": "count_Squares(1, 2)",
          "expected_output": "5"
        },
        {
          "input": "count_Squares(2, 2)",
          "expected_output": "6"
        }
      ]
    },
    {
      "problem_id": "mbpp_815",
      "description": "Write a function to sort the given array without using any sorting algorithm. the given array consists of only 0, 1, and 2.",
      "function_name": "sort_by_dnf",
      "correct_solution": "def sort_by_dnf(arr, n):\r\n  low=0\r\n  mid=0\r\n  high=n-1\r\n  while mid <= high:\r\n    if arr[mid] == 0:\r\n      arr[low], arr[mid] = arr[mid], arr[low]\r\n      low = low + 1\r\n      mid = mid + 1\r\n    elif arr[mid] == 1:\r\n      mid = mid + 1\r\n    else:\r\n      arr[mid], arr[high] = arr[high], arr[mid]\r\n      high = high - 1\r\n  return arr",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "sort_by_dnf([1, 2, 0, 1, 0, 1, 2, 1, 1], 9)",
          "expected_output": "[0, 0, 1, 1, 1, 1, 1, 2, 2]"
        },
        {
          "input": "sort_by_dnf([1, 0, 0, 1, 2, 1, 2, 2, 1, 0], 10)",
          "expected_output": "[0, 0, 0, 1, 1, 1, 1, 2, 2, 2]"
        },
        {
          "input": "sort_by_dnf([2, 2, 1, 0, 0, 0, 1, 1, 2, 1], 10)",
          "expected_output": "[0, 0, 0, 1, 1, 1, 1, 2, 2, 2]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "sort_by_dnf([1, 2, 0, 1, 0, 1, 2, 1, 1], 9)",
          "expected_output": "[1, 0, 0, 1, 1, 1, 1, 2, 2]"
        },
        {
          "input": "sort_by_dnf([1, 0, 0, 1, 2, 1, 2, 2, 1, 0], 10)",
          "expected_output": "[1, 0, 0, 1, 2, 1, 2, 2, 0, 1]"
        },
        {
          "input": "sort_by_dnf([2, 2, 1, 0, 0, 0, 1, 1, 2, 1], 10)",
          "expected_output": "[0, 0, 0, 1, 1, 1, 2, 2, 2, 1]"
        }
      ]
    },
    {
      "problem_id": "mbpp_499",
      "description": "Write a function to find the diameter of a circle.",
      "function_name": "diameter_circle",
      "correct_solution": "def diameter_circle(r):\r\n  diameter=2*r\r\n  return diameter",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "diameter_circle(10)",
          "expected_output": "20"
        },
        {
          "input": "diameter_circle(40)",
          "expected_output": "80"
        },
        {
          "input": "diameter_circle(15)",
          "expected_output": "30"
        }
      ],
      "broken_test_cases": [
        {
          "input": "diameter_circle(10)",
          "expected_output": "19"
        },
        {
          "input": "diameter_circle(40)",
          "expected_output": "40"
        },
        {
          "input": "diameter_circle(15)",
          "expected_output": "25"
        }
      ]
    },
    {
      "problem_id": "mbpp_174",
      "description": "Write a function to group a sequence of key-value pairs into a dictionary of lists.",
      "function_name": "group_keyvalue",
      "correct_solution": "def group_keyvalue(l):\r\n    result = {}\r\n    for k, v in l:\r\n         result.setdefault(k, []).append(v)\r\n    return result",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])",
          "expected_output": "{'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}"
        }
      ],
      "broken_test_cases": [
        {
          "input": "group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])",
          "expected_output": "{'yellow': [1, 3], 'blue': [2, 4]}"
        }
      ]
    },
    {
      "problem_id": "mbpp_856",
      "description": "Write a python function to find minimum adjacent swaps required to sort binary array.",
      "function_name": "find_Min_Swaps",
      "correct_solution": "def find_Min_Swaps(arr,n) : \r\n    noOfZeroes = [0] * n \r\n    count = 0 \r\n    noOfZeroes[n - 1] = 1 - arr[n - 1] \r\n    for i in range(n-2,-1,-1) : \r\n        noOfZeroes[i] = noOfZeroes[i + 1] \r\n        if (arr[i] == 0) : \r\n            noOfZeroes[i] = noOfZeroes[i] + 1\r\n    for i in range(0,n) : \r\n        if (arr[i] == 1) : \r\n            count = count + noOfZeroes[i] \r\n    return count ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "find_Min_Swaps([1, 0, 1, 0], 4)",
          "expected_output": "3"
        },
        {
          "input": "find_Min_Swaps([0, 1, 0], 3)",
          "expected_output": "1"
        },
        {
          "input": "find_Min_Swaps([0, 0, 1, 1, 0], 5)",
          "expected_output": "2"
        }
      ],
      "broken_test_cases": [
        {
          "input": "find_Min_Swaps([1, 0, 1, 0], 4)",
          "expected_output": "2"
        },
        {
          "input": "find_Min_Swaps([0, 1, 0], 3)",
          "expected_output": "2"
        },
        {
          "input": "find_Min_Swaps([0, 0, 1, 1, 0], 5)",
          "expected_output": "3"
        }
      ]
    },
    {
      "problem_id": "mbpp_785",
      "description": "Write a function to convert tuple string to integer tuple.",
      "function_name": "tuple_str_int",
      "correct_solution": "def tuple_str_int(test_str):\r\n  res = tuple(int(num) for num in test_str.replace('(', '').replace(')', '').replace('...', '').split(', '))\r\n  return (res) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "tuple_str_int('(7, 8, 9)')",
          "expected_output": "(7, 8, 9)"
        },
        {
          "input": "tuple_str_int('(1, 2, 3)')",
          "expected_output": "(1, 2, 3)"
        },
        {
          "input": "tuple_str_int('(4, 5, 6)')",
          "expected_output": "(4, 5, 6)"
        }
      ],
      "broken_test_cases": [
        {
          "input": "tuple_str_int('(7, 8, 9)')",
          "expected_output": "(7, 8, 10)"
        },
        {
          "input": "tuple_str_int('(1, 2, 3)')",
          "expected_output": "(2, 3, 1)"
        },
        {
          "input": "tuple_str_int('(4, 5, 6)')",
          "expected_output": "(4, 5, 7)"
        }
      ]
    },
    {
      "problem_id": "mbpp_466",
      "description": "Write a function to find the peak element in the given array.",
      "function_name": "find_peak",
      "correct_solution": "def find_peak_util(arr, low, high, n): \r\n\tmid = low + (high - low)/2\r\n\tmid = int(mid) \r\n\tif ((mid == 0 or arr[mid - 1] <= arr[mid]) and\r\n\t\t(mid == n - 1 or arr[mid + 1] <= arr[mid])): \r\n\t\treturn mid \r\n\telif (mid > 0 and arr[mid - 1] > arr[mid]): \r\n\t\treturn find_peak_util(arr, low, (mid - 1), n) \r\n\telse: \r\n\t\treturn find_peak_util(arr, (mid + 1), high, n) \r\ndef find_peak(arr, n): \r\n\treturn find_peak_util(arr, 0, n - 1, n) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "find_peak([1, 3, 20, 4, 1, 0], 6)",
          "expected_output": "2"
        },
        {
          "input": "find_peak([2, 3, 4, 5, 6], 5)",
          "expected_output": "4"
        },
        {
          "input": "find_peak([8, 9, 11, 12, 14, 15], 6)",
          "expected_output": "5"
        }
      ],
      "broken_test_cases": [
        {
          "input": "find_peak([1, 3, 20, 4, 1, 0], 6)",
          "expected_output": "0"
        },
        {
          "input": "find_peak([2, 3, 4, 5, 6], 5)",
          "expected_output": "3"
        },
        {
          "input": "find_peak([8, 9, 11, 12, 14, 15], 6)",
          "expected_output": "0"
        }
      ]
    },
    {
      "problem_id": "mbpp_821",
      "description": "Write a function to merge two dictionaries into a single expression.",
      "function_name": "merge_dictionaries",
      "correct_solution": "import collections as ct\r\ndef merge_dictionaries(dict1,dict2):\r\n    merged_dict = dict(ct.ChainMap({}, dict1, dict2))\r\n    return merged_dict",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "merge_dictionaries({'R': 'Red', 'B': 'Black', 'P': 'Pink'}, {'G': 'Green', 'W': 'White'})",
          "expected_output": "{'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White'}"
        },
        {
          "input": "merge_dictionaries({'R': 'Red', 'B': 'Black', 'P': 'Pink'}, {'O': 'Orange', 'W': 'White', 'B': 'Black'})",
          "expected_output": "{'O': 'Orange', 'P': 'Pink', 'B': 'Black', 'W': 'White', 'R': 'Red'}"
        },
        {
          "input": "merge_dictionaries({'G': 'Green', 'W': 'White'}, {'O': 'Orange', 'W': 'White', 'B': 'Black'})",
          "expected_output": "{'W': 'White', 'O': 'Orange', 'G': 'Green', 'B': 'Black'}"
        }
      ],
      "broken_test_cases": [
        {
          "input": "merge_dictionaries({'R': 'Red', 'B': 'Black', 'P': 'Pink'}, {'G': 'Green', 'W': 'White'})",
          "expected_output": "{'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'X': 'Extra'}"
        },
        {
          "input": "merge_dictionaries({'R': 'Red', 'B': 'Black', 'P': 'Pink'}, {'O': 'Orange', 'W': 'White', 'B': 'Black'})",
          "expected_output": "{'O': 'Orange', 'P': 'Pink', 'B': 'Black', 'W': 'White', 'R': 'Reddish'}"
        },
        {
          "input": "merge_dictionaries({'G': 'Green', 'W': 'White'}, {'O': 'Orange', 'W': 'White', 'B': 'Black'})",
          "expected_output": "{'W': 'White', 'O': 'Orange', 'G': 'Green'}"
        }
      ]
    },
    {
      "problem_id": "mbpp_828",
      "description": "Write a function to count alphabets,digits and special charactes in a given string.",
      "function_name": "count_alpha_dig_spl",
      "correct_solution": "def count_alpha_dig_spl(string):\r\n  alphabets=digits = special = 0\r\n  for i in range(len(string)):\r\n    if(string[i].isalpha()):\r\n        alphabets = alphabets + 1\r\n    elif(string[i].isdigit()):\r\n        digits = digits + 1\r\n    else:\r\n        special = special + 1\r\n  return (alphabets,digits,special)   ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "count_alpha_dig_spl('abc!@#123')",
          "expected_output": "(3, 3, 3)"
        },
        {
          "input": "count_alpha_dig_spl('dgsuy@#$%&1255')",
          "expected_output": "(5, 4, 5)"
        },
        {
          "input": "count_alpha_dig_spl('fjdsif627348#%$^&')",
          "expected_output": "(6, 6, 5)"
        }
      ],
      "broken_test_cases": [
        {
          "input": "count_alpha_dig_spl('abc!@#123')",
          "expected_output": "(4, 3, 2)"
        },
        {
          "input": "count_alpha_dig_spl('dgsuy@#$%&1255')",
          "expected_output": "(5, 3, 6)"
        },
        {
          "input": "count_alpha_dig_spl('fjdsif627348#%$^&')",
          "expected_output": "(6, 5, 6)"
        }
      ]
    },
    {
      "problem_id": "mbpp_338",
      "description": "Write a python function to count the number of substrings with same first and last characters.",
      "function_name": "count_Substring_With_Equal_Ends",
      "correct_solution": "def check_Equality(s): \r\n    return (ord(s[0]) == ord(s[len(s) - 1])); \r\ndef count_Substring_With_Equal_Ends(s): \r\n    result = 0; \r\n    n = len(s); \r\n    for i in range(n):\r\n        for j in range(1,n-i+1): \r\n            if (check_Equality(s[i:i+j])): \r\n                result+=1; \r\n    return result; ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "count_Substring_With_Equal_Ends('aba')",
          "expected_output": "4"
        },
        {
          "input": "count_Substring_With_Equal_Ends('abcab')",
          "expected_output": "7"
        },
        {
          "input": "count_Substring_With_Equal_Ends('abc')",
          "expected_output": "3"
        }
      ],
      "broken_test_cases": [
        {
          "input": "count_Substring_With_Equal_Ends('aba')",
          "expected_output": "5"
        },
        {
          "input": "count_Substring_With_Equal_Ends('abcab')",
          "expected_output": "6"
        },
        {
          "input": "count_Substring_With_Equal_Ends('abc')",
          "expected_output": "2"
        }
      ]
    },
    {
      "problem_id": "mbpp_84",
      "description": "Write a function to find the n-th number in newman conway sequence.",
      "function_name": "sequence",
      "correct_solution": "def sequence(n): \r\n\tif n == 1 or n == 2: \r\n\t\treturn 1\r\n\telse: \r\n\t\treturn sequence(sequence(n-1)) + sequence(n-sequence(n-1))",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "sequence(10)",
          "expected_output": "6"
        },
        {
          "input": "sequence(2)",
          "expected_output": "1"
        },
        {
          "input": "sequence(3)",
          "expected_output": "2"
        }
      ],
      "broken_test_cases": [
        {
          "input": "sequence(10)",
          "expected_output": "5"
        },
        {
          "input": "sequence(2)",
          "expected_output": "2"
        },
        {
          "input": "sequence(3)",
          "expected_output": "3"
        }
      ]
    },
    {
      "problem_id": "mbpp_667",
      "description": "Write a python function to count number of vowels in the string.",
      "function_name": "Check_Vow",
      "correct_solution": "def Check_Vow(string, vowels): \r\n    final = [each for each in string if each in vowels] \r\n    return(len(final)) \r\n",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "Check_Vow('corner', 'AaEeIiOoUu')",
          "expected_output": "2"
        },
        {
          "input": "Check_Vow('valid', 'AaEeIiOoUu')",
          "expected_output": "2"
        },
        {
          "input": "Check_Vow('true', 'AaEeIiOoUu')",
          "expected_output": "2"
        }
      ],
      "broken_test_cases": [
        {
          "input": "Check_Vow('corner', 'AaEeIiOoUu')",
          "expected_output": "3"
        },
        {
          "input": "Check_Vow('valid', 'AaEeIiOoUu')",
          "expected_output": "3"
        },
        {
          "input": "Check_Vow('true', 'AaEeIiOoUu')",
          "expected_output": "1"
        }
      ]
    },
    {
      "problem_id": "mbpp_674",
      "description": "Write a function to remove duplicate words from a given string using collections module.",
      "function_name": "remove_duplicate",
      "correct_solution": "from collections import OrderedDict\r\ndef remove_duplicate(string):\r\n  result = ' '.join(OrderedDict((w,w) for w in string.split()).keys())\r\n  return result",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "remove_duplicate('Python Exercises Practice Solution Exercises')",
          "expected_output": "Python Exercises Practice Solution"
        },
        {
          "input": "remove_duplicate('Python Exercises Practice Solution Python')",
          "expected_output": "Python Exercises Practice Solution"
        },
        {
          "input": "remove_duplicate('Python Exercises Practice Solution Practice')",
          "expected_output": "Python Exercises Practice Solution"
        }
      ],
      "broken_test_cases": [
        {
          "input": "remove_duplicate('Python Exercises Practice Solution Exercises')",
          "expected_output": "Python Exercises Practice Solution Exercises"
        },
        {
          "input": "remove_duplicate('Python Exercises Practice Solution Python')",
          "expected_output": "Python Exercises Practice Solution Python"
        },
        {
          "input": "remove_duplicate('Python Exercises Practice Solution Practice')",
          "expected_output": "Python Exercises Practice Solution Practice"
        }
      ]
    },
    {
      "problem_id": "mbpp_7",
      "description": "Write a function to find all words which are at least 4 characters long in a string by using regex.",
      "function_name": "find_char_long",
      "correct_solution": "import re\r\ndef find_char_long(text):\r\n  return (re.findall(r\"\\b\\w{4,}\\b\", text))",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "find_char_long('Please move back to stream')",
          "expected_output": "['Please', 'move', 'back', 'stream']"
        },
        {
          "input": "find_char_long('Jing Eco and Tech')",
          "expected_output": "['Jing', 'Tech']"
        },
        {
          "input": "find_char_long('Jhingai wulu road Zone 3')",
          "expected_output": "['Jhingai', 'wulu', 'road', 'Zone']"
        }
      ],
      "broken_test_cases": [
        {
          "input": "find_char_long('Please move back to stream')",
          "expected_output": "['Please', 'move', 'back', 'to']"
        },
        {
          "input": "find_char_long('Jing Eco and Tech')",
          "expected_output": "['Jing', 'Eco', 'Tech']"
        },
        {
          "input": "find_char_long('Jhingai wulu road Zone 3')",
          "expected_output": "['Jhingai', 'wulu', 'road']"
        }
      ]
    },
    {
      "problem_id": "mbpp_606",
      "description": "Write a function to convert degrees to radians.",
      "function_name": "radian_degree",
      "correct_solution": "import math\r\ndef radian_degree(degree):\r\n radian = degree*(math.pi/180)\r\n return radian",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "radian_degree(90)",
          "expected_output": "1.5707963267948966"
        },
        {
          "input": "radian_degree(60)",
          "expected_output": "1.0471975511965976"
        },
        {
          "input": "radian_degree(120)",
          "expected_output": "2.0943951023931953"
        }
      ],
      "broken_test_cases": [
        {
          "input": "radian_degree(90)",
          "expected_output": "1.0"
        },
        {
          "input": "radian_degree(60)",
          "expected_output": "2.0943951023931953"
        },
        {
          "input": "radian_degree(120)",
          "expected_output": "3.0943951023931953"
        }
      ]
    },
    {
      "problem_id": "mbpp_409",
      "description": "Write a function to find the minimum product from the pairs of tuples within a given list.",
      "function_name": "min_product_tuple",
      "correct_solution": "def min_product_tuple(list1):\r\n    result_min = min([abs(x * y) for x, y in list1] )\r\n    return result_min",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)])",
          "expected_output": "8"
        },
        {
          "input": "min_product_tuple([(10, 20), (15, 2), (5, 10)])",
          "expected_output": "30"
        },
        {
          "input": "min_product_tuple([(11, 44), (10, 15), (20, 5), (12, 9)])",
          "expected_output": "100"
        }
      ],
      "broken_test_cases": [
        {
          "input": "min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)])",
          "expected_output": "9"
        },
        {
          "input": "min_product_tuple([(10, 20), (15, 2), (5, 10)])",
          "expected_output": "50"
        },
        {
          "input": "min_product_tuple([(11, 44), (10, 15), (20, 5), (12, 9)])",
          "expected_output": "99"
        }
      ]
    },
    {
      "problem_id": "mbpp_233",
      "description": "Write a function to find the lateral surface area of a cylinder.",
      "function_name": "lateralsuface_cylinder",
      "correct_solution": "def lateralsuface_cylinder(r,h):\r\n  lateralsurface= 2*3.1415*r*h\r\n  return lateralsurface",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "lateralsuface_cylinder(10, 5)",
          "expected_output": "314.15000000000003"
        },
        {
          "input": "lateralsuface_cylinder(4, 5)",
          "expected_output": "125.66000000000001"
        },
        {
          "input": "lateralsuface_cylinder(4, 10)",
          "expected_output": "251.32000000000002"
        }
      ],
      "broken_test_cases": [
        {
          "input": "lateralsuface_cylinder(10, 5)",
          "expected_output": "1000"
        },
        {
          "input": "lateralsuface_cylinder(4, 5)",
          "expected_output": "130.66000000000001"
        },
        {
          "input": "lateralsuface_cylinder(4, 10)",
          "expected_output": "300.0"
        }
      ]
    },
    {
      "problem_id": "mbpp_912",
      "description": "Write a function to find ln, m lobb number.",
      "function_name": "int",
      "correct_solution": "def binomial_coeff(n, k): \r\n\tC = [[0 for j in range(k + 1)] \r\n\t\t\tfor i in range(n + 1)] \r\n\tfor i in range(0, n + 1): \r\n\t\tfor j in range(0, min(i, k) + 1): \r\n\t\t\tif (j == 0 or j == i): \r\n\t\t\t\tC[i][j] = 1\r\n\t\t\telse: \r\n\t\t\t\tC[i][j] = (C[i - 1][j - 1] \r\n\t\t\t\t\t\t\t+ C[i - 1][j]) \r\n\treturn C[n][k] \r\ndef lobb_num(n, m): \r\n\treturn (((2 * m + 1) *\r\n\t\tbinomial_coeff(2 * n, m + n)) \r\n\t\t\t\t\t/ (m + n + 1))",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "int(lobb_num(5, 3))",
          "expected_output": "35"
        },
        {
          "input": "int(lobb_num(3, 2))",
          "expected_output": "5"
        },
        {
          "input": "int(lobb_num(4, 2))",
          "expected_output": "20"
        }
      ],
      "broken_test_cases": [
        {
          "input": "int(lobb_num(5, 3))",
          "expected_output": "36"
        },
        {
          "input": "int(lobb_num(3, 2))",
          "expected_output": "10"
        },
        {
          "input": "int(lobb_num(4, 2))",
          "expected_output": "25"
        }
      ]
    },
    {
      "problem_id": "mbpp_770",
      "description": "Write a python function to find the sum of fourth power of first n odd natural numbers.",
      "function_name": "odd_Num_Sum",
      "correct_solution": "def odd_Num_Sum(n) : \r\n    j = 0\r\n    sm = 0\r\n    for i in range(1,n + 1) : \r\n        j = (2*i-1) \r\n        sm = sm + (j*j*j*j)   \r\n    return sm ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "odd_Num_Sum(2)",
          "expected_output": "82"
        },
        {
          "input": "odd_Num_Sum(3)",
          "expected_output": "707"
        },
        {
          "input": "odd_Num_Sum(4)",
          "expected_output": "3108"
        }
      ],
      "broken_test_cases": [
        {
          "input": "odd_Num_Sum(2)",
          "expected_output": "84"
        },
        {
          "input": "odd_Num_Sum(3)",
          "expected_output": "800"
        },
        {
          "input": "odd_Num_Sum(4)",
          "expected_output": "3107"
        }
      ]
    },
    {
      "problem_id": "mbpp_323",
      "description": "Write a function to re-arrange the given array in alternating positive and negative items.",
      "function_name": "re_arrange",
      "correct_solution": "def right_rotate(arr, n, out_of_place, cur):\r\n\ttemp = arr[cur]\r\n\tfor i in range(cur, out_of_place, -1):\r\n\t\tarr[i] = arr[i - 1]\r\n\tarr[out_of_place] = temp\r\n\treturn arr\r\ndef re_arrange(arr, n):\r\n\tout_of_place = -1\r\n\tfor index in range(n):\r\n\t\tif (out_of_place >= 0):\r\n\t\t\tif ((arr[index] >= 0 and arr[out_of_place] < 0) or\r\n\t\t\t(arr[index] < 0 and arr[out_of_place] >= 0)):\r\n\t\t\t\tarr = right_rotate(arr, n, out_of_place, index)\r\n\t\t\t\tif (index-out_of_place > 2):\r\n\t\t\t\t\tout_of_place += 2\r\n\t\t\t\telse:\r\n\t\t\t\t\tout_of_place = - 1\r\n\t\tif (out_of_place == -1):\r\n\t\t\tif ((arr[index] >= 0 and index % 2 == 0) or\r\n\t\t\t (arr[index] < 0 and index % 2 == 1)):\r\n\t\t\t\tout_of_place = index\r\n\treturn arr",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "re_arrange([-5, -2, 5, 2, 4, 7, 1, 8, 0, -8], 10)",
          "expected_output": "[-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]"
        },
        {
          "input": "re_arrange([1, 2, 3, -4, -1, 4], 6)",
          "expected_output": "[-4, 1, -1, 2, 3, 4]"
        },
        {
          "input": "re_arrange([4, 7, 9, 77, -4, 5, -3, -9], 8)",
          "expected_output": "[-4, 4, -3, 7, -9, 9, 77, 5]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "re_arrange([-5, -2, 5, 2, 4, 7, 1, 8, 0, -8], 10)",
          "expected_output": "[-5, 5, -2, 2, 4, 7, 1, 8, 0, -8]"
        },
        {
          "input": "re_arrange([1, 2, 3, -4, -1, 4], 6)",
          "expected_output": "[1, -4, 2, -1, 3, 4]"
        },
        {
          "input": "re_arrange([4, 7, 9, 77, -4, 5, -3, -9], 8)",
          "expected_output": "[4, -4, 7, -3, 9, -9, 77, 5]"
        }
      ]
    },
    {
      "problem_id": "mbpp_77",
      "description": "Write a python function to find the difference between sum of even and odd digits.",
      "function_name": "is_Diff",
      "correct_solution": "def is_Diff(n): \r\n    return (n % 11 == 0) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "is_Diff(12345)",
          "expected_output": "False"
        },
        {
          "input": "is_Diff(1212112)",
          "expected_output": "True"
        },
        {
          "input": "is_Diff(1212)",
          "expected_output": "False"
        }
      ],
      "broken_test_cases": [
        {
          "input": "is_Diff(12345)",
          "expected_output": "True"
        },
        {
          "input": "is_Diff(1212112)",
          "expected_output": "False"
        },
        {
          "input": "is_Diff(1212)",
          "expected_output": "True"
        }
      ]
    },
    {
      "problem_id": "mbpp_546",
      "description": "Write a function to find the last occurrence of a character in a string.",
      "function_name": "last_occurence_char",
      "correct_solution": "def last_occurence_char(string,char):\r\n flag = -1\r\n for i in range(len(string)):\r\n     if(string[i] == char):\r\n         flag = i\r\n if(flag == -1):\r\n    return None\r\n else:\r\n    return flag + 1",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "last_occurence_char('hello world', 'l')",
          "expected_output": "10"
        },
        {
          "input": "last_occurence_char('language', 'g')",
          "expected_output": "7"
        },
        {
          "input": "last_occurence_char('little', 'y')",
          "expected_output": "None"
        }
      ],
      "broken_test_cases": [
        {
          "input": "last_occurence_char('hello world', 'l')",
          "expected_output": "9"
        },
        {
          "input": "last_occurence_char('language', 'g')",
          "expected_output": "6"
        },
        {
          "input": "last_occurence_char('little', 'y')",
          "expected_output": "0"
        }
      ]
    },
    {
      "problem_id": "mbpp_395",
      "description": "Write a python function to find the first non-repeated character in a given string.",
      "function_name": "first_non_repeating_character",
      "correct_solution": "def first_non_repeating_character(str1):\r\n  char_order = []\r\n  ctr = {}\r\n  for c in str1:\r\n    if c in ctr:\r\n      ctr[c] += 1\r\n    else:\r\n      ctr[c] = 1 \r\n      char_order.append(c)\r\n  for c in char_order:\r\n    if ctr[c] == 1:\r\n      return c\r\n  return None",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "first_non_repeating_character('abcabc')",
          "expected_output": "None"
        },
        {
          "input": "first_non_repeating_character('abc')",
          "expected_output": "a"
        },
        {
          "input": "first_non_repeating_character('ababc')",
          "expected_output": "c"
        }
      ],
      "broken_test_cases": [
        {
          "input": "first_non_repeating_character('abcabc')",
          "expected_output": "'a'"
        },
        {
          "input": "first_non_repeating_character('abc')",
          "expected_output": "b"
        },
        {
          "input": "first_non_repeating_character('ababc')",
          "expected_output": "a"
        }
      ]
    },
    {
      "problem_id": "mbpp_668",
      "description": "Write a python function to replace multiple occurence of character by single.",
      "function_name": "replace",
      "correct_solution": "import re \r\ndef replace(string, char): \r\n    pattern = char + '{2,}'\r\n    string = re.sub(pattern, char, string) \r\n    return string ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "replace('peep', 'e')",
          "expected_output": "pep"
        },
        {
          "input": "replace('Greek', 'e')",
          "expected_output": "Grek"
        },
        {
          "input": "replace('Moon', 'o')",
          "expected_output": "Mon"
        }
      ],
      "broken_test_cases": [
        {
          "input": "replace('peep', 'e')",
          "expected_output": "peeep"
        },
        {
          "input": "replace('Greek', 'e')",
          "expected_output": "Grk"
        },
        {
          "input": "replace('Moon', 'o')",
          "expected_output": "Mnn"
        }
      ]
    },
    {
      "problem_id": "mbpp_349",
      "description": "Write a python function to check whether the given string is a binary string or not.",
      "function_name": "check",
      "correct_solution": "def check(string) :\r\n    p = set(string) \r\n    s = {'0', '1'} \r\n    if s == p or p == {'0'} or p == {'1'}: \r\n        return (\"Yes\") \r\n    else : \r\n        return (\"No\") ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "check('01010101010')",
          "expected_output": "Yes"
        },
        {
          "input": "check('name0')",
          "expected_output": "No"
        },
        {
          "input": "check('101')",
          "expected_output": "Yes"
        }
      ],
      "broken_test_cases": [
        {
          "input": "check('01010101010')",
          "expected_output": "No"
        },
        {
          "input": "check('name0')",
          "expected_output": "Yes"
        },
        {
          "input": "check('101')",
          "expected_output": "No"
        }
      ]
    },
    {
      "problem_id": "mbpp_510",
      "description": "Write a function to find the number of subsequences having product smaller than k for the given non negative array.",
      "function_name": "no_of_subsequences",
      "correct_solution": "def no_of_subsequences(arr, k): \r\n\tn = len(arr) \r\n\tdp = [[0 for i in range(n + 1)] \r\n\t\t\tfor j in range(k + 1)] \r\n\tfor i in range(1, k + 1): \r\n\t\tfor j in range(1, n + 1): \r\n\t\t\tdp[i][j] = dp[i][j - 1] \r\n\t\t\tif arr[j - 1] <= i and arr[j - 1] > 0: \r\n\t\t\t\tdp[i][j] += dp[i // arr[j - 1]][j - 1] + 1\r\n\treturn dp[k][n]",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "no_of_subsequences([1, 2, 3, 4], 10)",
          "expected_output": "11"
        },
        {
          "input": "no_of_subsequences([4, 8, 7, 2], 50)",
          "expected_output": "9"
        },
        {
          "input": "no_of_subsequences([5, 6, 7, 8], 15)",
          "expected_output": "4"
        }
      ],
      "broken_test_cases": [
        {
          "input": "no_of_subsequences([1, 2, 3, 4], 10)",
          "expected_output": "10"
        },
        {
          "input": "no_of_subsequences([4, 8, 7, 2], 50)",
          "expected_output": "10"
        },
        {
          "input": "no_of_subsequences([5, 6, 7, 8], 15)",
          "expected_output": "5"
        }
      ]
    },
    {
      "problem_id": "mbpp_121",
      "description": "Write a function to find the triplet with sum of the given array",
      "function_name": "check_triplet",
      "correct_solution": "def check_triplet(A, n, sum, count):\r\n    if count == 3 and sum == 0:\r\n        return True\r\n    if count == 3 or n == 0 or sum < 0:\r\n        return False\r\n    return check_triplet(A, n - 1, sum - A[n - 1], count + 1) or\\\r\n           check_triplet(A, n - 1, sum, count)",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0)",
          "expected_output": "True"
        },
        {
          "input": "check_triplet([1, 4, 5, 6, 7, 8, 5, 9], 8, 6, 0)",
          "expected_output": "False"
        },
        {
          "input": "check_triplet([10, 4, 2, 3, 5], 5, 15, 0)",
          "expected_output": "True"
        }
      ],
      "broken_test_cases": [
        {
          "input": "check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0)",
          "expected_output": "False"
        },
        {
          "input": "check_triplet([1, 4, 5, 6, 7, 8, 5, 9], 8, 6, 0)",
          "expected_output": "True"
        },
        {
          "input": "check_triplet([10, 4, 2, 3, 5], 5, 15, 0)",
          "expected_output": "False"
        }
      ]
    },
    {
      "problem_id": "mbpp_8",
      "description": "Write a function to find squares of individual elements in a list using lambda function.",
      "function_name": "square_nums",
      "correct_solution": "def square_nums(nums):\r\n square_nums = list(map(lambda x: x ** 2, nums))\r\n return square_nums",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
          "expected_output": "[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]"
        },
        {
          "input": "square_nums([10, 20, 30])",
          "expected_output": "[100, 400, 900]"
        },
        {
          "input": "square_nums([12, 15])",
          "expected_output": "[144, 225]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "square_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])",
          "expected_output": "[2, 8, 18, 32, 50, 72, 98, 128, 162, 200]"
        },
        {
          "input": "square_nums([10, 20, 30])",
          "expected_output": "[101, 401, 901]"
        },
        {
          "input": "square_nums([12, 15])",
          "expected_output": "[144, 230]"
        }
      ]
    },
    {
      "problem_id": "mbpp_318",
      "description": "Write a python function to find the maximum volume of a cuboid with given sum of sides.",
      "function_name": "max_volume",
      "correct_solution": "def max_volume (s): \r\n    maxvalue = 0\r\n    i = 1\r\n    for i in range(s - 1): \r\n        j = 1\r\n        for j in range(s): \r\n            k = s - i - j \r\n            maxvalue = max(maxvalue, i * j * k)         \r\n    return maxvalue ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "max_volume(8)",
          "expected_output": "18"
        },
        {
          "input": "max_volume(4)",
          "expected_output": "2"
        },
        {
          "input": "max_volume(1)",
          "expected_output": "0"
        }
      ],
      "broken_test_cases": [
        {
          "input": "max_volume(8)",
          "expected_output": "17"
        },
        {
          "input": "max_volume(4)",
          "expected_output": "3"
        },
        {
          "input": "max_volume(1)",
          "expected_output": "1"
        }
      ]
    },
    {
      "problem_id": "mbpp_617",
      "description": "Write a function to check for the number of jumps required of given length to reach a point of form (d, 0) from origin in a 2d plane.",
      "function_name": "min_Jumps",
      "correct_solution": "def min_Jumps(a, b, d): \r\n    temp = a \r\n    a = min(a, b) \r\n    b = max(temp, b) \r\n    if (d >= b): \r\n        return (d + b - 1) / b \r\n    if (d == 0): \r\n        return 0\r\n    if (d == a): \r\n        return 1\r\n    else:\r\n        return 2",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "min_Jumps(3, 4, 11)",
          "expected_output": "3.5"
        },
        {
          "input": "min_Jumps(3, 4, 0)",
          "expected_output": "0"
        },
        {
          "input": "min_Jumps(11, 14, 11)",
          "expected_output": "1"
        }
      ],
      "broken_test_cases": [
        {
          "input": "min_Jumps(3, 4, 11)",
          "expected_output": "2"
        },
        {
          "input": "min_Jumps(3, 4, 0)",
          "expected_output": "1"
        },
        {
          "input": "min_Jumps(11, 14, 11)",
          "expected_output": "2"
        }
      ]
    },
    {
      "problem_id": "mbpp_792",
      "description": "Write a python function to count the number of lists in a given number of lists.",
      "function_name": "count_list",
      "correct_solution": "def count_list(input_list): \r\n    return len(input_list)",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]])",
          "expected_output": "4"
        },
        {
          "input": "count_list([[1, 2], [2, 3], [4, 5]])",
          "expected_output": "3"
        },
        {
          "input": "count_list([[1, 0], [2, 0]])",
          "expected_output": "2"
        }
      ],
      "broken_test_cases": [
        {
          "input": "count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]])",
          "expected_output": "3"
        },
        {
          "input": "count_list([[1, 2], [2, 3], [4, 5]])",
          "expected_output": "4"
        },
        {
          "input": "count_list([[1, 0], [2, 0]])",
          "expected_output": "3"
        }
      ]
    },
    {
      "problem_id": "mbpp_164",
      "description": "Write a python function to check whether the sum of divisors are same or not.",
      "function_name": "areEquivalent",
      "correct_solution": "import math \r\ndef divSum(n): \r\n    sum = 1; \r\n    i = 2; \r\n    while(i * i <= n): \r\n        if (n % i == 0): \r\n            sum = (sum + i +math.floor(n / i)); \r\n        i += 1; \r\n    return sum; \r\ndef areEquivalent(num1,num2): \r\n    return divSum(num1) == divSum(num2); ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "areEquivalent(36, 57)",
          "expected_output": "False"
        },
        {
          "input": "areEquivalent(2, 4)",
          "expected_output": "False"
        },
        {
          "input": "areEquivalent(23, 47)",
          "expected_output": "True"
        }
      ],
      "broken_test_cases": [
        {
          "input": "areEquivalent(36, 57)",
          "expected_output": "True"
        },
        {
          "input": "areEquivalent(2, 4)",
          "expected_output": "True"
        },
        {
          "input": "areEquivalent(23, 47)",
          "expected_output": "False"
        }
      ]
    },
    {
      "problem_id": "mbpp_340",
      "description": "Write a python function to find the sum of the three lowest positive numbers from a given list of numbers.",
      "function_name": "sum_three_smallest_nums",
      "correct_solution": "def sum_three_smallest_nums(lst):\r\n\treturn sum(sorted([x for x in lst if x > 0])[:3])",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "sum_three_smallest_nums([10, 20, 30, 40, 50, 60, 7])",
          "expected_output": "37"
        },
        {
          "input": "sum_three_smallest_nums([1, 2, 3, 4, 5])",
          "expected_output": "6"
        },
        {
          "input": "sum_three_smallest_nums([0, 1, 2, 3, 4, 5])",
          "expected_output": "6"
        }
      ],
      "broken_test_cases": [
        {
          "input": "sum_three_smallest_nums([10, 20, 30, 40, 50, 60, 7])",
          "expected_output": "36"
        },
        {
          "input": "sum_three_smallest_nums([1, 2, 3, 4, 5])",
          "expected_output": "15"
        },
        {
          "input": "sum_three_smallest_nums([0, 1, 2, 3, 4, 5])",
          "expected_output": "7"
        }
      ]
    },
    {
      "problem_id": "mbpp_696",
      "description": "Write a function to zip two given lists of lists.",
      "function_name": "zip_list",
      "correct_solution": "def zip_list(list1,list2):  \r\n result = list(map(list.__add__, list1, list2)) \r\n return result",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "zip_list([[1, 3], [5, 7], [9, 11]], [[2, 4], [6, 8], [10, 12, 14]])",
          "expected_output": "[[1, 3, 2, 4], [5, 7, 6, 8], [9, 11, 10, 12, 14]]"
        },
        {
          "input": "zip_list([[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10], [11, 12]])",
          "expected_output": "[[1, 2, 7, 8], [3, 4, 9, 10], [5, 6, 11, 12]]"
        },
        {
          "input": "zip_list([['a', 'b'], ['c', 'd']], [['e', 'f'], ['g', 'h']])",
          "expected_output": "[['a', 'b', 'e', 'f'], ['c', 'd', 'g', 'h']]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "zip_list([[1, 3], [5, 7], [9, 11]], [[2, 4], [6, 8], [10, 12, 14]])",
          "expected_output": "[[1, 3, 2, 4], [5, 7, 6, 8], [9, 11, 10, 12]]"
        },
        {
          "input": "zip_list([[1, 2], [3, 4], [5, 6]], [[7, 8], [9, 10], [11, 12]])",
          "expected_output": "[[1, 2, 7, 8], [3, 4, 9, 10], [5, 6, 11]]"
        },
        {
          "input": "zip_list([['a', 'b'], ['c', 'd']], [['e', 'f'], ['g', 'h']])",
          "expected_output": "[['a', 'b', 'e', 'f'], ['c', 'd', 'g']]"
        }
      ]
    },
    {
      "problem_id": "mbpp_501",
      "description": "Write a python function to find common divisor between two numbers in a given pair.",
      "function_name": "num_comm_div",
      "correct_solution": "def ngcd(x,y):\r\n    i=1\r\n    while(i<=x and i<=y):\r\n        if(x%i==0 and y%i == 0):\r\n            gcd=i;\r\n        i+=1\r\n    return gcd;\r\ndef num_comm_div(x,y):\r\n  n = ngcd(x,y)\r\n  result = 0\r\n  z = int(n**0.5)\r\n  i = 1\r\n  while(i <= z):\r\n    if(n % i == 0):\r\n      result += 2 \r\n      if(i == n/i):\r\n        result-=1\r\n    i+=1\r\n  return result",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "num_comm_div(2, 4)",
          "expected_output": "2"
        },
        {
          "input": "num_comm_div(2, 8)",
          "expected_output": "2"
        },
        {
          "input": "num_comm_div(12, 24)",
          "expected_output": "6"
        }
      ],
      "broken_test_cases": [
        {
          "input": "num_comm_div(2, 4)",
          "expected_output": "1"
        },
        {
          "input": "num_comm_div(2, 8)",
          "expected_output": "3"
        },
        {
          "input": "num_comm_div(12, 24)",
          "expected_output": "5"
        }
      ]
    },
    {
      "problem_id": "mbpp_532",
      "description": "Write a function to check if the two given strings are permutations of each other.",
      "function_name": "check_permutation",
      "correct_solution": "def check_permutation(str1, str2):\r\n  n1=len(str1)\r\n  n2=len(str2)\r\n  if(n1!=n2):\r\n    return False\r\n  a=sorted(str1)\r\n  str1=\" \".join(a)\r\n  b=sorted(str2)\r\n  str2=\" \".join(b)\r\n  for i in range(0, n1, 1):\r\n    if(str1[i] != str2[i]):\r\n      return False\r\n  return True",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "check_permutation('abc', 'cba')",
          "expected_output": "True"
        },
        {
          "input": "check_permutation('test', 'ttew')",
          "expected_output": "False"
        },
        {
          "input": "check_permutation('xxyz', 'yxzx')",
          "expected_output": "True"
        }
      ],
      "broken_test_cases": [
        {
          "input": "check_permutation('abc', 'cba')",
          "expected_output": "False"
        },
        {
          "input": "check_permutation('test', 'ttew')",
          "expected_output": "True"
        },
        {
          "input": "check_permutation('xxyz', 'yxzx')",
          "expected_output": "False"
        }
      ]
    },
    {
      "problem_id": "mbpp_2",
      "description": "Write a function to find the similar elements from the given two tuple lists.",
      "function_name": "similar_elements",
      "correct_solution": "def similar_elements(test_tup1, test_tup2):\r\n  res = tuple(set(test_tup1) & set(test_tup2))\r\n  return (res) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "similar_elements((3, 4, 5, 6), (5, 7, 4, 10))",
          "expected_output": "(4, 5)"
        },
        {
          "input": "similar_elements((1, 2, 3, 4), (5, 4, 3, 7))",
          "expected_output": "(3, 4)"
        },
        {
          "input": "similar_elements((11, 12, 14, 13), (17, 15, 14, 13))",
          "expected_output": "(13, 14)"
        }
      ],
      "broken_test_cases": [
        {
          "input": "similar_elements((3, 4, 5, 6), (5, 7, 4, 10))",
          "expected_output": "(3, 4, 5)"
        },
        {
          "input": "similar_elements((1, 2, 3, 4), (5, 4, 3, 7))",
          "expected_output": "(3, 5)"
        },
        {
          "input": "similar_elements((11, 12, 14, 13), (17, 15, 14, 13))",
          "expected_output": "(13, 14, 15)"
        }
      ]
    },
    {
      "problem_id": "mbpp_629",
      "description": "Write a python function to find even numbers from a mixed list.",
      "function_name": "Split",
      "correct_solution": "def Split(list): \r\n    ev_li = [] \r\n    for i in list: \r\n        if (i % 2 == 0): \r\n            ev_li.append(i)  \r\n    return ev_li",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "Split([1, 2, 3, 4, 5])",
          "expected_output": "[2, 4]"
        },
        {
          "input": "Split([4, 5, 6, 7, 8, 0, 1])",
          "expected_output": "[4, 6, 8, 0]"
        },
        {
          "input": "Split([8, 12, 15, 19])",
          "expected_output": "[8, 12]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "Split([1, 2, 3, 4, 5])",
          "expected_output": "[1, 2, 3, 4, 5]"
        },
        {
          "input": "Split([4, 5, 6, 7, 8, 0, 1])",
          "expected_output": "[4, 5, 6, 8, 0]"
        },
        {
          "input": "Split([8, 12, 15, 19])",
          "expected_output": "[8, 12, 15]"
        }
      ]
    },
    {
      "problem_id": "mbpp_956",
      "description": "Write a function to split the given string at uppercase letters by using regex.",
      "function_name": "split_list",
      "correct_solution": "import re\r\ndef split_list(text):\r\n  return (re.findall('[A-Z][^A-Z]*', text))",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "split_list('LearnToBuildAnythingWithGoogle')",
          "expected_output": "['Learn', 'To', 'Build', 'Anything', 'With', 'Google']"
        },
        {
          "input": "split_list('ApmlifyingTheBlack+DeveloperCommunity')",
          "expected_output": "['Apmlifying', 'The', 'Black+', 'Developer', 'Community']"
        },
        {
          "input": "split_list('UpdateInTheGoEcoSystem')",
          "expected_output": "['Update', 'In', 'The', 'Go', 'Eco', 'System']"
        }
      ],
      "broken_test_cases": [
        {
          "input": "split_list('LearnToBuildAnythingWithGoogle')",
          "expected_output": "['Learn', 'To', 'Build', 'Anything', 'With', 'Google', 'extra']"
        },
        {
          "input": "split_list('ApmlifyingTheBlack+DeveloperCommunity')",
          "expected_output": "['Apmlifying', 'The', 'Black', '+', 'Developer', 'Community']"
        },
        {
          "input": "split_list('UpdateInTheGoEcoSystem')",
          "expected_output": "['Update', 'In', 'The', 'Go', 'Eco', 'System', 'Extra']"
        }
      ]
    },
    {
      "problem_id": "mbpp_199",
      "description": "Write a python function to find highest power of 2 less than or equal to given number.",
      "function_name": "highest_Power_of_2",
      "correct_solution": "def highest_Power_of_2(n): \r\n    res = 0; \r\n    for i in range(n, 0, -1):  \r\n        if ((i & (i - 1)) == 0): \r\n            res = i; \r\n            break;      \r\n    return res; ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "highest_Power_of_2(10)",
          "expected_output": "8"
        },
        {
          "input": "highest_Power_of_2(19)",
          "expected_output": "16"
        },
        {
          "input": "highest_Power_of_2(32)",
          "expected_output": "32"
        }
      ],
      "broken_test_cases": [
        {
          "input": "highest_Power_of_2(10)",
          "expected_output": "4"
        },
        {
          "input": "highest_Power_of_2(19)",
          "expected_output": "8"
        },
        {
          "input": "highest_Power_of_2(32)",
          "expected_output": "16"
        }
      ]
    },
    {
      "problem_id": "mbpp_584",
      "description": "Write a function to find all adverbs and their positions in a given sentence by using regex.",
      "function_name": "find_adverbs",
      "correct_solution": "import re\r\ndef find_adverbs(text):\r\n  for m in re.finditer(r\"\\w+ly\", text):\r\n    return ('%d-%d: %s' % (m.start(), m.end(), m.group(0)))",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "find_adverbs('Clearly, he has no excuse for such behavior.')",
          "expected_output": "0-7: Clearly"
        },
        {
          "input": "find_adverbs('Please handle the situation carefuly')",
          "expected_output": "28-36: carefuly"
        },
        {
          "input": "find_adverbs('Complete the task quickly')",
          "expected_output": "18-25: quickly"
        }
      ],
      "broken_test_cases": [
        {
          "input": "find_adverbs('Clearly, he has no excuse for such behavior.')",
          "expected_output": "0-6: Clearly"
        },
        {
          "input": "find_adverbs('Please handle the situation carefuly')",
          "expected_output": "0-7: Clearly"
        },
        {
          "input": "find_adverbs('Complete the task quickly')",
          "expected_output": "0-7: Clearly"
        }
      ]
    },
    {
      "problem_id": "mbpp_573",
      "description": "Write a python function to calculate the product of the unique numbers of a given list.",
      "function_name": "unique_product",
      "correct_solution": "def unique_product(list_data):\r\n    temp = list(set(list_data))\r\n    p = 1\r\n    for i in temp:\r\n        p *= i\r\n    return p",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "unique_product([10, 20, 30, 40, 20, 50, 60, 40])",
          "expected_output": "720000000"
        },
        {
          "input": "unique_product([1, 2, 3, 1])",
          "expected_output": "6"
        },
        {
          "input": "unique_product([7, 8, 9, 0, 1, 1])",
          "expected_output": "0"
        }
      ],
      "broken_test_cases": [
        {
          "input": "unique_product([10, 20, 30, 40, 20, 50, 60, 40])",
          "expected_output": "720000001"
        },
        {
          "input": "unique_product([1, 2, 3, 1])",
          "expected_output": "12"
        },
        {
          "input": "unique_product([7, 8, 9, 0, 1, 1])",
          "expected_output": "7200"
        }
      ]
    },
    {
      "problem_id": "mbpp_817",
      "description": "Write a function to find numbers divisible by m or n from a list of numbers using lambda function.",
      "function_name": "div_of_nums",
      "correct_solution": "def div_of_nums(nums,m,n):\r\n result = list(filter(lambda x: (x % m == 0 or x % n == 0), nums)) \r\n return result",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "div_of_nums([19, 65, 57, 39, 152, 639, 121, 44, 90, 190], 19, 13)",
          "expected_output": "[19, 65, 57, 39, 152, 190]"
        },
        {
          "input": "div_of_nums([1, 2, 3, 5, 7, 8, 10], 2, 5)",
          "expected_output": "[2, 5, 8, 10]"
        },
        {
          "input": "div_of_nums([10, 15, 14, 13, 18, 12, 20], 10, 5)",
          "expected_output": "[10, 15, 20]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "div_of_nums([19, 65, 57, 39, 152, 639, 121, 44, 90, 190], 19, 13)",
          "expected_output": "[19, 65, 57, 39, 152, 639, 121, 44, 90]"
        },
        {
          "input": "div_of_nums([1, 2, 3, 5, 7, 8, 10], 2, 5)",
          "expected_output": "[1, 3, 7]"
        },
        {
          "input": "div_of_nums([10, 15, 14, 13, 18, 12, 20], 10, 5)",
          "expected_output": "[10, 15, 14, 18, 12, 20]"
        }
      ]
    },
    {
      "problem_id": "mbpp_725",
      "description": "Write a function to extract values between quotation marks of the given string by using regex.",
      "function_name": "extract_quotation",
      "correct_solution": "import re\r\ndef extract_quotation(text1):\r\n  return (re.findall(r'\"(.*?)\"', text1))",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"')",
          "expected_output": "['A53', 'multi', 'Processor']"
        },
        {
          "input": "extract_quotation('Cast your \"favorite\" entertainment \"apps\"')",
          "expected_output": "['favorite', 'apps']"
        },
        {
          "input": "extract_quotation('Watch content \"4k Ultra HD\" resolution with \"HDR 10\" Support')",
          "expected_output": "['4k Ultra HD', 'HDR 10']"
        }
      ],
      "broken_test_cases": [
        {
          "input": "extract_quotation('Cortex \"A53\" Based \"multi\" tasking \"Processor\"')",
          "expected_output": "['A53', 'multi']"
        },
        {
          "input": "extract_quotation('Cast your \"favorite\" entertainment \"apps\"')",
          "expected_output": "['favorite', 'apps', 'extra']"
        },
        {
          "input": "extract_quotation('Watch content \"4k Ultra HD\" resolution with \"HDR 10\" Support')",
          "expected_output": "['4k Ultra HD', 'HDR 10', 'extra']"
        }
      ]
    },
    {
      "problem_id": "mbpp_31",
      "description": "Write a function to find the top k integers that occur most frequently from given lists of sorted and distinct integers using heap queue algorithm.",
      "function_name": "func",
      "correct_solution": "def func(nums, k):\r\n    import collections\r\n    d = collections.defaultdict(int)\r\n    for row in nums:\r\n        for i in row:\r\n            d[i] += 1\r\n    temp = []\r\n    import heapq\r\n    for key, v in d.items():\r\n        if len(temp) < k:\r\n            temp.append((v, key))\r\n            if len(temp) == k:\r\n                heapq.heapify(temp)\r\n        else:\r\n            if v > temp[0][0]:\r\n                heapq.heappop(temp)\r\n                heapq.heappush(temp, (v, key))\r\n    result = []\r\n    while temp:\r\n        v, key = heapq.heappop(temp)\r\n        result.append(key)\r\n    return result",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]], 3)",
          "expected_output": "[5, 7, 1]"
        },
        {
          "input": "func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]], 1)",
          "expected_output": "[1]"
        },
        {
          "input": "func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]], 5)",
          "expected_output": "[6, 5, 7, 8, 1]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]], 3)",
          "expected_output": "[1, 5, 7]"
        },
        {
          "input": "func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]], 1)",
          "expected_output": "[2]"
        },
        {
          "input": "func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]], 5)",
          "expected_output": "[1, 7, 8, 5, 6]"
        }
      ]
    },
    {
      "problem_id": "mbpp_928",
      "description": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.",
      "function_name": "change_date_format",
      "correct_solution": "import re\r\ndef change_date_format(dt):\r\n        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)\r\n        return change_date_format(dt)",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "change_date_format('2026-01-02')",
          "expected_output": "02-01-2026"
        },
        {
          "input": "change_date_format('2021-01-04')",
          "expected_output": "04-01-2021"
        },
        {
          "input": "change_date_format('2030-06-06')",
          "expected_output": "06-06-2030"
        }
      ],
      "broken_test_cases": [
        {
          "input": "change_date_format('2026-01-02')",
          "expected_output": "01-02-2026"
        },
        {
          "input": "change_date_format('2021-01-04')",
          "expected_output": "04-01-2020"
        },
        {
          "input": "change_date_format('2030-06-06')",
          "expected_output": "06-06-2031"
        }
      ]
    },
    {
      "problem_id": "mbpp_780",
      "description": "Write a function to find the combinations of sums with tuples in the given tuple list.",
      "function_name": "find_combinations",
      "correct_solution": "from itertools import combinations \r\ndef find_combinations(test_list):\r\n  res = [(b1 + a1, b2 + a2) for (a1, a2), (b1, b2) in combinations(test_list, 2)]\r\n  return (res) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)])",
          "expected_output": "[(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 11)]"
        },
        {
          "input": "find_combinations([(3, 5), (7, 8), (6, 2), (7, 11)])",
          "expected_output": "[(10, 13), (9, 7), (10, 16), (13, 10), (14, 19), (13, 13)]"
        },
        {
          "input": "find_combinations([(4, 6), (8, 9), (7, 3), (8, 12)])",
          "expected_output": "[(12, 15), (11, 9), (12, 18), (15, 12), (16, 21), (15, 15)]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "find_combinations([(2, 4), (6, 7), (5, 1), (6, 10)])",
          "expected_output": "[(8, 11), (7, 5), (8, 14), (11, 8), (12, 17), (11, 10)]"
        },
        {
          "input": "find_combinations([(3, 5), (7, 8), (6, 2), (7, 11)])",
          "expected_output": "[(10, 13), (9, 7), (10, 16), (13, 10), (14, 19), (13, 14)]"
        },
        {
          "input": "find_combinations([(4, 6), (8, 9), (7, 3), (8, 12)])",
          "expected_output": "[(12, 15), (11, 9), (12, 18), (15, 12), (16, 21), (15, 16)]"
        }
      ]
    },
    {
      "problem_id": "mbpp_614",
      "description": "Write a function to find the cumulative sum of all the values that are present in the given tuple list.",
      "function_name": "cummulative_sum",
      "correct_solution": "def cummulative_sum(test_list):\r\n  res = sum(map(sum, test_list))\r\n  return (res)",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "cummulative_sum([(1, 3), (5, 6, 7), (2, 6)])",
          "expected_output": "30"
        },
        {
          "input": "cummulative_sum([(2, 4), (6, 7, 8), (3, 7)])",
          "expected_output": "37"
        },
        {
          "input": "cummulative_sum([(3, 5), (7, 8, 9), (4, 8)])",
          "expected_output": "44"
        }
      ],
      "broken_test_cases": [
        {
          "input": "cummulative_sum([(1, 3), (5, 6, 7), (2, 6)])",
          "expected_output": "29"
        },
        {
          "input": "cummulative_sum([(2, 4), (6, 7, 8), (3, 7)])",
          "expected_output": "36"
        },
        {
          "input": "cummulative_sum([(3, 5), (7, 8, 9), (4, 8)])",
          "expected_output": "45"
        }
      ]
    },
    {
      "problem_id": "mbpp_85",
      "description": "Write a function to find the surface area of a sphere.",
      "function_name": "surfacearea_sphere",
      "correct_solution": "import math\r\ndef surfacearea_sphere(r):\r\n  surfacearea=4*math.pi*r*r\r\n  return surfacearea",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "surfacearea_sphere(10)",
          "expected_output": "1256.6370614359173"
        },
        {
          "input": "surfacearea_sphere(15)",
          "expected_output": "2827.4333882308138"
        },
        {
          "input": "surfacearea_sphere(20)",
          "expected_output": "5026.548245743669"
        }
      ],
      "broken_test_cases": [
        {
          "input": "surfacearea_sphere(10)",
          "expected_output": "12345.6789"
        },
        {
          "input": "surfacearea_sphere(15)",
          "expected_output": "1234.5678"
        },
        {
          "input": "surfacearea_sphere(20)",
          "expected_output": "4000.0"
        }
      ]
    },
    {
      "problem_id": "mbpp_303",
      "description": "Write a python function to check whether the count of inversion of two types are same or not.",
      "function_name": "solve",
      "correct_solution": "import sys \r\ndef solve(a,n):   \r\n    mx = -sys.maxsize - 1\r\n    for j in range(1,n):  \r\n        if (mx > a[j]):  \r\n            return False  \r\n        mx = max(mx,a[j - 1])    \r\n    return True",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "solve([1, 0, 2], 3)",
          "expected_output": "True"
        },
        {
          "input": "solve([1, 2, 0], 3)",
          "expected_output": "False"
        },
        {
          "input": "solve([1, 2, 1], 3)",
          "expected_output": "True"
        }
      ],
      "broken_test_cases": [
        {
          "input": "solve([1, 0, 2], 3)",
          "expected_output": "False"
        },
        {
          "input": "solve([1, 2, 0], 3)",
          "expected_output": "True"
        },
        {
          "input": "solve([1, 2, 1], 3)",
          "expected_output": "False"
        }
      ]
    },
    {
      "problem_id": "mbpp_241",
      "description": "Write a function to generate a 3d array having each element as '*'.",
      "function_name": "array_3d",
      "correct_solution": "def array_3d(m,n,o):\r\n array_3d = [[ ['*' for col in range(m)] for col in range(n)] for row in range(o)]\r\n return array_3d",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "array_3d(6, 4, 3)",
          "expected_output": "[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]"
        },
        {
          "input": "array_3d(5, 3, 4)",
          "expected_output": "[[['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']]]"
        },
        {
          "input": "array_3d(1, 2, 3)",
          "expected_output": "[[['*'], ['*']], [['*'], ['*']], [['*'], ['*']]]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "array_3d(6, 4, 3)",
          "expected_output": "[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]"
        },
        {
          "input": "array_3d(5, 3, 4)",
          "expected_output": "[[['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']]]"
        },
        {
          "input": "array_3d(1, 2, 3)",
          "expected_output": "[[['*'], ['*']], [['*'], ['*']], [['*'], ['*'], ['*']]]"
        }
      ]
    },
    {
      "problem_id": "mbpp_948",
      "description": "Write a function to get an item of a tuple.",
      "function_name": "get_item",
      "correct_solution": "def get_item(tup1,index):\r\n  item = tup1[index]\r\n  return item",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "get_item(('w', 3, 'r', 'e', 's', 'o', 'u', 'r', 'c', 'e'), 3)",
          "expected_output": "e"
        },
        {
          "input": "get_item(('w', 3, 'r', 'e', 's', 'o', 'u', 'r', 'c', 'e'), -4)",
          "expected_output": "u"
        },
        {
          "input": "get_item(('w', 3, 'r', 'e', 's', 'o', 'u', 'r', 'c', 'e'), -3)",
          "expected_output": "r"
        }
      ],
      "broken_test_cases": [
        {
          "input": "get_item(('w', 3, 'r', 'e', 's', 'o', 'u', 'r', 'c', 'e'), 3)",
          "expected_output": "r"
        },
        {
          "input": "get_item(('w', 3, 'r', 'e', 's', 'o', 'u', 'r', 'c', 'e'), -4)",
          "expected_output": "r"
        },
        {
          "input": "get_item(('w', 3, 'r', 'e', 's', 'o', 'u', 'r', 'c', 'e'), -3)",
          "expected_output": "s"
        }
      ]
    },
    {
      "problem_id": "mbpp_677",
      "description": "Write a function to check if the triangle is valid or not.",
      "function_name": "validity_triangle",
      "correct_solution": "def validity_triangle(a,b,c):\r\n total = a + b + c\r\n if total == 180:\r\n    return True\r\n else:\r\n    return False",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "validity_triangle(60, 50, 90)",
          "expected_output": "False"
        },
        {
          "input": "validity_triangle(45, 75, 60)",
          "expected_output": "True"
        },
        {
          "input": "validity_triangle(30, 50, 100)",
          "expected_output": "True"
        }
      ],
      "broken_test_cases": [
        {
          "input": "validity_triangle(60, 50, 90)",
          "expected_output": "True"
        },
        {
          "input": "validity_triangle(45, 75, 60)",
          "expected_output": "False"
        },
        {
          "input": "validity_triangle(30, 50, 100)",
          "expected_output": "False"
        }
      ]
    },
    {
      "problem_id": "mbpp_736",
      "description": "Write a function to locate the left insertion point for a specified value in sorted order.",
      "function_name": "left_insertion",
      "correct_solution": "import bisect\r\ndef left_insertion(a, x):\r\n    i = bisect.bisect_left(a, x)\r\n    return i",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "left_insertion([1, 2, 4, 5], 6)",
          "expected_output": "4"
        },
        {
          "input": "left_insertion([1, 2, 4, 5], 3)",
          "expected_output": "2"
        },
        {
          "input": "left_insertion([1, 2, 4, 5], 7)",
          "expected_output": "4"
        }
      ],
      "broken_test_cases": [
        {
          "input": "left_insertion([1, 2, 4, 5], 6)",
          "expected_output": "2"
        },
        {
          "input": "left_insertion([1, 2, 4, 5], 3)",
          "expected_output": "3"
        },
        {
          "input": "left_insertion([1, 2, 4, 5], 7)",
          "expected_output": "3"
        }
      ]
    },
    {
      "problem_id": "mbpp_353",
      "description": "Write a function to remove a specified column from a given nested list.",
      "function_name": "remove_column",
      "correct_solution": "def remove_column(list1, n):\r\n   for i in list1: \r\n    del i[n] \r\n   return list1",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]], 0)",
          "expected_output": "[[2, 3], [4, 5], [1, 1]]"
        },
        {
          "input": "remove_column([[1, 2, 3], [-2, 4, -5], [1, -1, 1]], 2)",
          "expected_output": "[[1, 2], [-2, 4], [1, -1]]"
        },
        {
          "input": "remove_column([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]], 0)",
          "expected_output": "[[3], [7], [3], [15, 17], [7], [11]]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]], 0)",
          "expected_output": "[[1, 2, 3], [2, 4, 5], [1, 1, 1]]"
        },
        {
          "input": "remove_column([[1, 2, 3], [-2, 4, -5], [1, -1, 1]], 2)",
          "expected_output": "[[1, 2, 3], [-2, 4], [1, -1]]"
        },
        {
          "input": "remove_column([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]], 0)",
          "expected_output": "[[1, 3], [5, 7], [1, 3], [13, 15], [5, 7], [9, 11]]"
        }
      ]
    },
    {
      "problem_id": "mbpp_304",
      "description": "Write a python function to find element at a given index after number of rotations.",
      "function_name": "find_Element",
      "correct_solution": "def find_Element(arr,ranges,rotations,index) :  \r\n    for i in range(rotations - 1,-1,-1 ) : \r\n        left = ranges[i][0] \r\n        right = ranges[i][1] \r\n        if (left <= index and right >= index) : \r\n            if (index == left) : \r\n                index = right \r\n            else : \r\n                index = index - 1 \r\n    return arr[index] ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "find_Element([1, 2, 3, 4, 5], [[0, 2], [0, 3]], 2, 1)",
          "expected_output": "3"
        },
        {
          "input": "find_Element([1, 2, 3, 4], [[0, 1], [0, 2]], 1, 2)",
          "expected_output": "3"
        },
        {
          "input": "find_Element([1, 2, 3, 4, 5, 6], [[0, 1], [0, 2]], 1, 1)",
          "expected_output": "1"
        }
      ],
      "broken_test_cases": [
        {
          "input": "find_Element([1, 2, 3, 4, 5], [[0, 2], [0, 3]], 2, 1)",
          "expected_output": "4"
        },
        {
          "input": "find_Element([1, 2, 3, 4], [[0, 1], [0, 2]], 1, 2)",
          "expected_output": "4"
        },
        {
          "input": "find_Element([1, 2, 3, 4, 5, 6], [[0, 1], [0, 2]], 1, 1)",
          "expected_output": "5"
        }
      ]
    },
    {
      "problem_id": "mbpp_333",
      "description": "Write a python function to sort a list according to the second element in sublist.",
      "function_name": "Sort",
      "correct_solution": "def Sort(sub_li): \r\n    sub_li.sort(key = lambda x: x[1]) \r\n    return sub_li ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]])",
          "expected_output": "[['b', 5], ['a', 10], ['d', 15], ['c', 20]]"
        },
        {
          "input": "Sort([['452', 10], ['256', 5], ['100', 20], ['135', 15]])",
          "expected_output": "[['256', 5], ['452', 10], ['135', 15], ['100', 20]]"
        },
        {
          "input": "Sort([['rishi', 10], ['akhil', 5], ['ramya', 20], ['gaur', 15]])",
          "expected_output": "[['akhil', 5], ['rishi', 10], ['gaur', 15], ['ramya', 20]]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]])",
          "expected_output": "[['a', 10], ['b', 5], ['c', 20], ['d', 15]]"
        },
        {
          "input": "Sort([['452', 10], ['256', 5], ['100', 20], ['135', 15]])",
          "expected_output": "[['100', 20], ['135', 15], ['256', 5], ['452', 10]]"
        },
        {
          "input": "Sort([['rishi', 10], ['akhil', 5], ['ramya', 20], ['gaur', 15]])",
          "expected_output": "[['rishi', 10], ['akhil', 5], ['gaur', 15], ['ramya', 20]]"
        }
      ]
    },
    {
      "problem_id": "mbpp_658",
      "description": "Write a function to find the item with maximum occurrences in a given list.",
      "function_name": "max_occurrences",
      "correct_solution": "def max_occurrences(list1):\r\n    max_val = 0\r\n    result = list1[0] \r\n    for i in list1:\r\n        occu = list1.count(i)\r\n        if occu > max_val:\r\n            max_val = occu\r\n            result = i \r\n    return result",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "max_occurrences([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 4, 6, 9, 1, 2])",
          "expected_output": "2"
        },
        {
          "input": "max_occurrences([1, 3, 5, 7, 1, 3, 13, 15, 17, 5, 7, 9, 1, 11])",
          "expected_output": "1"
        },
        {
          "input": "max_occurrences([1, 2, 3, 2, 4, 5, 1, 1, 1])",
          "expected_output": "1"
        }
      ],
      "broken_test_cases": [
        {
          "input": "max_occurrences([2, 3, 8, 4, 7, 9, 8, 2, 6, 5, 1, 6, 1, 2, 3, 4, 6, 9, 1, 2])",
          "expected_output": "8"
        },
        {
          "input": "max_occurrences([1, 3, 5, 7, 1, 3, 13, 15, 17, 5, 7, 9, 1, 11])",
          "expected_output": "3"
        },
        {
          "input": "max_occurrences([1, 2, 3, 2, 4, 5, 1, 1, 1])",
          "expected_output": "2"
        }
      ]
    },
    {
      "problem_id": "mbpp_439",
      "description": "Write a function to convert a list of multiple integers into a single integer.",
      "function_name": "multiple_to_single",
      "correct_solution": "def multiple_to_single(L):\r\n  x = int(\"\".join(map(str, L)))\r\n  return x",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "multiple_to_single([11, 33, 50])",
          "expected_output": "113350"
        },
        {
          "input": "multiple_to_single([-1, 2, 3, 4, 5, 6])",
          "expected_output": "-123456"
        },
        {
          "input": "multiple_to_single([10, 15, 20, 25])",
          "expected_output": "10152025"
        }
      ],
      "broken_test_cases": [
        {
          "input": "multiple_to_single([11, 33, 50])",
          "expected_output": "113351"
        },
        {
          "input": "multiple_to_single([-1, 2, 3, 4, 5, 6])",
          "expected_output": "-123457"
        },
        {
          "input": "multiple_to_single([10, 15, 20, 25])",
          "expected_output": "10152026"
        }
      ]
    },
    {
      "problem_id": "mbpp_268",
      "description": "Write a function to find the n'th star number.",
      "function_name": "find_star_num",
      "correct_solution": "def find_star_num(n): \r\n\treturn (6 * n * (n - 1) + 1) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "find_star_num(3)",
          "expected_output": "37"
        },
        {
          "input": "find_star_num(4)",
          "expected_output": "73"
        },
        {
          "input": "find_star_num(5)",
          "expected_output": "121"
        }
      ],
      "broken_test_cases": [
        {
          "input": "find_star_num(3)",
          "expected_output": "38"
        },
        {
          "input": "find_star_num(4)",
          "expected_output": "70"
        },
        {
          "input": "find_star_num(5)",
          "expected_output": "122"
        }
      ]
    },
    {
      "problem_id": "mbpp_443",
      "description": "Write a python function to find the largest negative number from the given list.",
      "function_name": "largest_neg",
      "correct_solution": "def largest_neg(list1): \r\n    max = list1[0] \r\n    for x in list1: \r\n        if x < max : \r\n             max = x  \r\n    return max",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "largest_neg([1, 2, 3, -4, -6])",
          "expected_output": "-6"
        },
        {
          "input": "largest_neg([1, 2, 3, -8, -9])",
          "expected_output": "-9"
        },
        {
          "input": "largest_neg([1, 2, 3, 4, -1])",
          "expected_output": "-1"
        }
      ],
      "broken_test_cases": [
        {
          "input": "largest_neg([1, 2, 3, -4, -6])",
          "expected_output": "-4"
        },
        {
          "input": "largest_neg([1, 2, 3, -8, -9])",
          "expected_output": "-8"
        },
        {
          "input": "largest_neg([1, 2, 3, 4, -1])",
          "expected_output": "1"
        }
      ]
    },
    {
      "problem_id": "mbpp_647",
      "description": "Write a function to split a string at uppercase letters.",
      "function_name": "split_upperstring",
      "correct_solution": "import re\r\ndef split_upperstring(text):\r\n return (re.findall('[A-Z][^A-Z]*', text))",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "split_upperstring('PythonProgramLanguage')",
          "expected_output": "['Python', 'Program', 'Language']"
        },
        {
          "input": "split_upperstring('PythonProgram')",
          "expected_output": "['Python', 'Program']"
        },
        {
          "input": "split_upperstring('ProgrammingLanguage')",
          "expected_output": "['Programming', 'Language']"
        }
      ],
      "broken_test_cases": [
        {
          "input": "split_upperstring('PythonProgramLanguage')",
          "expected_output": "['Python', 'Program', 'Language', 'Extra']"
        },
        {
          "input": "split_upperstring('PythonProgram')",
          "expected_output": "['Python', 'rogram']"
        },
        {
          "input": "split_upperstring('ProgrammingLanguage')",
          "expected_output": "['Programming', 'Language', 'Unexpected']"
        }
      ]
    },
    {
      "problem_id": "mbpp_684",
      "description": "Write a python function to count occurences of a character in a repeated string.",
      "function_name": "count_Char",
      "correct_solution": "def count_Char(str,x): \r\n    count = 0\r\n    for i in range(len(str)):  \r\n        if (str[i] == x) : \r\n            count += 1\r\n    n = 10\r\n    repititions = n // len(str)  \r\n    count = count * repititions  \r\n    l = n % len(str)  \r\n    for i in range(l): \r\n        if (str[i] == x):  \r\n            count += 1\r\n    return count  ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "count_Char('abcac', 'a')",
          "expected_output": "4"
        },
        {
          "input": "count_Char('abca', 'c')",
          "expected_output": "2"
        },
        {
          "input": "count_Char('aba', 'a')",
          "expected_output": "7"
        }
      ],
      "broken_test_cases": [
        {
          "input": "count_Char('abcac', 'a')",
          "expected_output": "2"
        },
        {
          "input": "count_Char('abca', 'c')",
          "expected_output": "3"
        },
        {
          "input": "count_Char('aba', 'a')",
          "expected_output": "6"
        }
      ]
    },
    {
      "problem_id": "mbpp_728",
      "description": "Write a function to sum elements in two lists.",
      "function_name": "sum_list",
      "correct_solution": "def sum_list(lst1,lst2):\r\n  res_list = [lst1[i] + lst2[i] for i in range(len(lst1))] \r\n  return res_list",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "sum_list([10, 20, 30], [15, 25, 35])",
          "expected_output": "[25, 45, 65]"
        },
        {
          "input": "sum_list([1, 2, 3], [5, 6, 7])",
          "expected_output": "[6, 8, 10]"
        },
        {
          "input": "sum_list([15, 20, 30], [15, 45, 75])",
          "expected_output": "[30, 65, 105]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "sum_list([10, 20, 30], [15, 25, 35])",
          "expected_output": "[26, 45, 65]"
        },
        {
          "input": "sum_list([1, 2, 3], [5, 6, 7])",
          "expected_output": "[7, 9, 11]"
        },
        {
          "input": "sum_list([15, 20, 30], [15, 45, 75])",
          "expected_output": "[30, 60, 105]"
        }
      ]
    },
    {
      "problem_id": "mbpp_413",
      "description": "Write a function to extract the nth element from a given list of tuples.",
      "function_name": "extract_nth_element",
      "correct_solution": "def extract_nth_element(list1, n):\r\n    result = [x[n] for x in list1]\r\n    return result",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 0)",
          "expected_output": "['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']"
        },
        {
          "input": "extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 2)",
          "expected_output": "[99, 96, 94, 98]"
        },
        {
          "input": "extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 1)",
          "expected_output": "[98, 97, 91, 94]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 0)",
          "expected_output": "['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull', 'extra_element']"
        },
        {
          "input": "extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 2)",
          "expected_output": "[98, 97, 91, 94]"
        },
        {
          "input": "extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)], 1)",
          "expected_output": "[99, 96, 94, 98]"
        }
      ]
    },
    {
      "problem_id": "mbpp_595",
      "description": "Write a python function to count minimum number of swaps required to convert one binary string to another.",
      "function_name": "min_Swaps",
      "correct_solution": "def min_Swaps(str1,str2) : \r\n    count = 0\r\n    for i in range(len(str1)) :  \r\n        if str1[i] != str2[i] : \r\n            count += 1\r\n    if count % 2 == 0 : \r\n        return (count // 2) \r\n    else : \r\n        return (\"Not Possible\") ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "min_Swaps('1101', '1110')",
          "expected_output": "1"
        },
        {
          "input": "min_Swaps('111', '000')",
          "expected_output": "Not Possible"
        },
        {
          "input": "min_Swaps('111', '110')",
          "expected_output": "Not Possible"
        }
      ],
      "broken_test_cases": [
        {
          "input": "min_Swaps('1101', '1110')",
          "expected_output": "2"
        },
        {
          "input": "min_Swaps('111', '000')",
          "expected_output": "1"
        },
        {
          "input": "min_Swaps('111', '110')",
          "expected_output": "1"
        }
      ]
    },
    {
      "problem_id": "mbpp_971",
      "description": "Write a function to find the maximum number of segments of lengths a, b and c that can be formed from n.",
      "function_name": "maximum_segments",
      "correct_solution": "def maximum_segments(n, a, b, c) : \r\n\tdp = [-1] * (n + 10) \r\n\tdp[0] = 0\r\n\tfor i in range(0, n) : \r\n\t\tif (dp[i] != -1) : \r\n\t\t\tif(i + a <= n ): \r\n\t\t\t\tdp[i + a] = max(dp[i] + 1, \r\n\t\t\t\t\t\t\tdp[i + a]) \r\n\t\t\tif(i + b <= n ): \r\n\t\t\t\tdp[i + b] = max(dp[i] + 1, \r\n\t\t\t\t\t\t\tdp[i + b]) \r\n\t\t\tif(i + c <= n ): \r\n\t\t\t\tdp[i + c] = max(dp[i] + 1, \r\n\t\t\t\t\t\t\tdp[i + c]) \r\n\treturn dp[n]",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "maximum_segments(7, 5, 2, 5)",
          "expected_output": "2"
        },
        {
          "input": "maximum_segments(17, 2, 1, 3)",
          "expected_output": "17"
        },
        {
          "input": "maximum_segments(18, 16, 3, 6)",
          "expected_output": "6"
        }
      ],
      "broken_test_cases": [
        {
          "input": "maximum_segments(7, 5, 2, 5)",
          "expected_output": "3"
        },
        {
          "input": "maximum_segments(17, 2, 1, 3)",
          "expected_output": "18"
        },
        {
          "input": "maximum_segments(18, 16, 3, 6)",
          "expected_output": "7"
        }
      ]
    },
    {
      "problem_id": "mbpp_626",
      "description": "Write a python function to find the largest triangle that can be inscribed in the semicircle.",
      "function_name": "triangle_area",
      "correct_solution": "def triangle_area(r) :  \r\n    if r < 0 : \r\n        return -1\r\n    return r * r ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "triangle_area(0)",
          "expected_output": "0"
        },
        {
          "input": "triangle_area(-1)",
          "expected_output": "-1"
        },
        {
          "input": "triangle_area(2)",
          "expected_output": "4"
        }
      ],
      "broken_test_cases": [
        {
          "input": "triangle_area(0)",
          "expected_output": "1"
        },
        {
          "input": "triangle_area(-1)",
          "expected_output": "0"
        },
        {
          "input": "triangle_area(2)",
          "expected_output": "5"
        }
      ]
    },
    {
      "problem_id": "mbpp_259",
      "description": "Write a function to maximize the given two tuples.",
      "function_name": "maximize_elements",
      "correct_solution": "def maximize_elements(test_tup1, test_tup2):\r\n  res = tuple(tuple(max(a, b) for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3)))",
          "expected_output": "((6, 7), (4, 9), (2, 9), (7, 10))"
        },
        {
          "input": "maximize_elements(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4)))",
          "expected_output": "((7, 8), (5, 10), (3, 10), (8, 11))"
        },
        {
          "input": "maximize_elements(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5)))",
          "expected_output": "((8, 9), (6, 11), (4, 11), (9, 12))"
        }
      ],
      "broken_test_cases": [
        {
          "input": "maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3)))",
          "expected_output": "((6, 7), (4, 5), (2, 9), (7, 10))"
        },
        {
          "input": "maximize_elements(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4)))",
          "expected_output": "((7, 8), (5, 10), (3, 10), (2, 11))"
        },
        {
          "input": "maximize_elements(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5)))",
          "expected_output": "((8, 9), (6, 7), (4, 11), (9, 12))"
        }
      ]
    },
    {
      "problem_id": "mbpp_800",
      "description": "Write a function to remove all whitespaces from a string.",
      "function_name": "remove_all_spaces",
      "correct_solution": "import re\r\ndef remove_all_spaces(text):\r\n return (re.sub(r'\\s+', '',text))",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "remove_all_spaces('python  program')",
          "expected_output": "pythonprogram"
        },
        {
          "input": "remove_all_spaces('python   programming    language')",
          "expected_output": "pythonprogramminglanguage"
        },
        {
          "input": "remove_all_spaces('python                     program')",
          "expected_output": "pythonprogram"
        }
      ],
      "broken_test_cases": [
        {
          "input": "remove_all_spaces('python  program')",
          "expected_output": "python program"
        },
        {
          "input": "remove_all_spaces('python   programming    language')",
          "expected_output": "pythonprogramminglanguage_"
        },
        {
          "input": "remove_all_spaces('python                     program')",
          "expected_output": "pythonandprogram"
        }
      ]
    },
    {
      "problem_id": "mbpp_12",
      "description": "Write a function to sort a given matrix in ascending order according to the sum of its rows.",
      "function_name": "sort_matrix",
      "correct_solution": "def sort_matrix(M):\r\n    result = sorted(M, key=sum)\r\n    return result",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])",
          "expected_output": "[[1, 1, 1], [1, 2, 3], [2, 4, 5]]"
        },
        {
          "input": "sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])",
          "expected_output": "[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]"
        },
        {
          "input": "sort_matrix([[5, 8, 9], [6, 4, 3], [2, 1, 4]])",
          "expected_output": "[[2, 1, 4], [6, 4, 3], [5, 8, 9]]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])",
          "expected_output": "[[1, 2, 3], [1, 1, 1], [2, 4, 5]]"
        },
        {
          "input": "sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])",
          "expected_output": "[[1, 2, 3], [1, -1, 1], [-2, 4, -5]]"
        },
        {
          "input": "sort_matrix([[5, 8, 9], [6, 4, 3], [2, 1, 4]])",
          "expected_output": "[[5, 8, 9], [2, 1, 4], [6, 4, 3]]"
        }
      ]
    },
    {
      "problem_id": "mbpp_102",
      "description": "Write a function to convert snake case string to camel case string.",
      "function_name": "snake_to_camel",
      "correct_solution": "def snake_to_camel(word):\r\n        import re\r\n        return ''.join(x.capitalize() or '_' for x in word.split('_'))",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "snake_to_camel('python_program')",
          "expected_output": "PythonProgram"
        },
        {
          "input": "snake_to_camel('python_language')",
          "expected_output": "PythonLanguage"
        },
        {
          "input": "snake_to_camel('programming_language')",
          "expected_output": "ProgrammingLanguage"
        }
      ],
      "broken_test_cases": [
        {
          "input": "snake_to_camel('python_program')",
          "expected_output": "python_Program"
        },
        {
          "input": "snake_to_camel('python_language')",
          "expected_output": "PythonLAnguage"
        },
        {
          "input": "snake_to_camel('programming_language')",
          "expected_output": "ProgramminglanguagE"
        }
      ]
    },
    {
      "problem_id": "mbpp_867",
      "description": "Write a python function to add a minimum number such that the sum of array becomes even.",
      "function_name": "min_Num",
      "correct_solution": "def min_Num(arr,n):  \r\n    odd = 0\r\n    for i in range(n): \r\n        if (arr[i] % 2): \r\n            odd += 1 \r\n    if (odd % 2): \r\n        return 1\r\n    return 2",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "min_Num([1, 2, 3, 4, 5, 6, 7, 8, 9], 9)",
          "expected_output": "1"
        },
        {
          "input": "min_Num([1, 2, 3, 4, 5, 6, 7, 8], 8)",
          "expected_output": "2"
        },
        {
          "input": "min_Num([1, 2, 3], 3)",
          "expected_output": "2"
        }
      ],
      "broken_test_cases": [
        {
          "input": "min_Num([1, 2, 3, 4, 5, 6, 7, 8, 9], 9)",
          "expected_output": "2"
        },
        {
          "input": "min_Num([1, 2, 3, 4, 5, 6, 7, 8], 8)",
          "expected_output": "1"
        },
        {
          "input": "min_Num([1, 2, 3], 3)",
          "expected_output": "1"
        }
      ]
    },
    {
      "problem_id": "mbpp_829",
      "description": "Write a function to find out the second most repeated (or frequent) string in the given sequence.",
      "function_name": "second_frequent",
      "correct_solution": "from collections import Counter \r\n\t\r\ndef second_frequent(input): \r\n\tdict = Counter(input) \r\n\tvalue = sorted(dict.values(), reverse=True)  \r\n\tsecond_large = value[1] \r\n\tfor (key, val) in dict.items(): \r\n\t\tif val == second_large: \r\n\t\t\treturn (key) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "second_frequent(['aaa', 'bbb', 'ccc', 'bbb', 'aaa', 'aaa'])",
          "expected_output": "bbb"
        },
        {
          "input": "second_frequent(['abc', 'bcd', 'abc', 'bcd', 'bcd', 'bcd'])",
          "expected_output": "abc"
        },
        {
          "input": "second_frequent(['cdma', 'gsm', 'hspa', 'gsm', 'cdma', 'cdma'])",
          "expected_output": "gsm"
        }
      ],
      "broken_test_cases": [
        {
          "input": "second_frequent(['aaa', 'bbb', 'ccc', 'bbb', 'aaa', 'aaa'])",
          "expected_output": "ccc"
        },
        {
          "input": "second_frequent(['abc', 'bcd', 'abc', 'bcd', 'bcd', 'bcd'])",
          "expected_output": "bcd"
        },
        {
          "input": "second_frequent(['cdma', 'gsm', 'hspa', 'gsm', 'cdma', 'cdma'])",
          "expected_output": "cdma"
        }
      ]
    },
    {
      "problem_id": "mbpp_966",
      "description": "Write a function to remove an empty tuple from a list of tuples.",
      "function_name": "remove_empty",
      "correct_solution": "def remove_empty(tuple1): #L = [(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]\r\n   tuple1 = [t for t in tuple1 if t]\r\n   return tuple1",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "remove_empty([(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), 'd'])",
          "expected_output": "[('',), ('a', 'b'), ('a', 'b', 'c'), 'd']"
        },
        {
          "input": "remove_empty([(), (), ('',), 'python', 'program'])",
          "expected_output": "[('',), 'python', 'program']"
        },
        {
          "input": "remove_empty([(), (), ('',), 'java'])",
          "expected_output": "[('',), 'java']"
        }
      ],
      "broken_test_cases": [
        {
          "input": "remove_empty([(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), 'd'])",
          "expected_output": "[(), ('',), ('a', 'b'), ('a', 'b', 'c'), 'd']"
        },
        {
          "input": "remove_empty([(), (), ('',), 'python', 'program'])",
          "expected_output": "[(), (), ('',), 'python', 'program']"
        },
        {
          "input": "remove_empty([(), (), ('',), 'java'])",
          "expected_output": "[(), (), ('',), 'java', 'python']"
        }
      ]
    },
    {
      "problem_id": "mbpp_229",
      "description": "Write a function to re-arrange the elements of the given array so that all negative elements appear before positive ones.",
      "function_name": "re_arrange_array",
      "correct_solution": "def re_arrange_array(arr, n):\r\n  j=0\r\n  for i in range(0, n):\r\n    if (arr[i] < 0):\r\n      temp = arr[i]\r\n      arr[i] = arr[j]\r\n      arr[j] = temp\r\n      j = j + 1\r\n  return arr",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9)",
          "expected_output": "[-1, -3, -7, 4, 5, 6, 2, 8, 9]"
        },
        {
          "input": "re_arrange_array([12, -14, -26, 13, 15], 5)",
          "expected_output": "[-14, -26, 12, 13, 15]"
        },
        {
          "input": "re_arrange_array([10, 24, 36, -42, -39, -78, 85], 7)",
          "expected_output": "[-42, -39, -78, 10, 24, 36, 85]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9)",
          "expected_output": "[2, -1, -3, 4, 5, 6, -7, 8, 9]"
        },
        {
          "input": "re_arrange_array([12, -14, -26, 13, 15], 5)",
          "expected_output": "[12, -14, -26, 15, 13]"
        },
        {
          "input": "re_arrange_array([10, 24, 36, -42, -39, -78, 85], 7)",
          "expected_output": "[10, 24, 36, 85, -42, -39, -78]"
        }
      ]
    },
    {
      "problem_id": "mbpp_215",
      "description": "Write a function to decode a run-length encoded given list.",
      "function_name": "decode_list",
      "correct_solution": "def decode_list(alist):\r\n    def aux(g):\r\n        if isinstance(g, list):\r\n            return [(g[1], range(g[0]))]\r\n        else:\r\n            return [(g, [0])]\r\n    return [x for g in alist for x, R in aux(g) for i in R]",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "decode_list([[2, 1], 2, 3, [2, 4], 5, 1])",
          "expected_output": "[1, 1, 2, 3, 4, 4, 5, 1]"
        },
        {
          "input": "decode_list(['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y'])",
          "expected_output": "['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', 'l', 'l', 'y']"
        },
        {
          "input": "decode_list(['p', 'y', 't', 'h', 'o', 'n'])",
          "expected_output": "['p', 'y', 't', 'h', 'o', 'n']"
        }
      ],
      "broken_test_cases": [
        {
          "input": "decode_list([[2, 1], 2, 3, [2, 4], 5, 1])",
          "expected_output": "[1, 1, 2, 3, 4, 4, 5, 2]"
        },
        {
          "input": "decode_list(['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y'])",
          "expected_output": "['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', 'l', 'l', 'z']"
        },
        {
          "input": "decode_list(['p', 'y', 't', 'h', 'o', 'n'])",
          "expected_output": "['p', 'y', 't', 'h', 'o', 'n', 'x']"
        }
      ]
    },
    {
      "problem_id": "mbpp_820",
      "description": "Write a function to check whether the given month number contains 28 days or not.",
      "function_name": "check_monthnum_number",
      "correct_solution": "def check_monthnum_number(monthnum1):\r\n  if monthnum1 == 2:\r\n    return True\r\n  else:\r\n    return False",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "check_monthnum_number(2)",
          "expected_output": "True"
        },
        {
          "input": "check_monthnum_number(1)",
          "expected_output": "False"
        },
        {
          "input": "check_monthnum_number(3)",
          "expected_output": "False"
        }
      ],
      "broken_test_cases": [
        {
          "input": "check_monthnum_number(2)",
          "expected_output": "False"
        },
        {
          "input": "check_monthnum_number(1)",
          "expected_output": "True"
        },
        {
          "input": "check_monthnum_number(3)",
          "expected_output": "True"
        }
      ]
    },
    {
      "problem_id": "mbpp_961",
      "description": "Write a function to convert a roman numeral to an integer.",
      "function_name": "roman_to_int",
      "correct_solution": "def roman_to_int(s):\r\n        rom_val = {'I': 1, 'V': 5, 'X': 10, 'L': 50, 'C': 100, 'D': 500, 'M': 1000}\r\n        int_val = 0\r\n        for i in range(len(s)):\r\n            if i > 0 and rom_val[s[i]] > rom_val[s[i - 1]]:\r\n                int_val += rom_val[s[i]] - 2 * rom_val[s[i - 1]]\r\n            else:\r\n                int_val += rom_val[s[i]]\r\n        return int_val",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "roman_to_int('MMMCMLXXXVI')",
          "expected_output": "3986"
        },
        {
          "input": "roman_to_int('MMMM')",
          "expected_output": "4000"
        },
        {
          "input": "roman_to_int('C')",
          "expected_output": "100"
        }
      ],
      "broken_test_cases": [
        {
          "input": "roman_to_int('MMMCMLXXXVI')",
          "expected_output": "3985"
        },
        {
          "input": "roman_to_int('MMMM')",
          "expected_output": "3000"
        },
        {
          "input": "roman_to_int('C')",
          "expected_output": "99"
        }
      ]
    },
    {
      "problem_id": "mbpp_841",
      "description": "Write a function to count the number of inversions in the given array.",
      "function_name": "get_inv_count",
      "correct_solution": "def get_inv_count(arr, n): \r\n\tinv_count = 0\r\n\tfor i in range(n): \r\n\t\tfor j in range(i + 1, n): \r\n\t\t\tif (arr[i] > arr[j]): \r\n\t\t\t\tinv_count += 1\r\n\treturn inv_count ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "get_inv_count([1, 20, 6, 4, 5], 5)",
          "expected_output": "5"
        },
        {
          "input": "get_inv_count([8, 4, 2, 1], 4)",
          "expected_output": "6"
        },
        {
          "input": "get_inv_count([3, 1, 2], 3)",
          "expected_output": "2"
        }
      ],
      "broken_test_cases": [
        {
          "input": "get_inv_count([1, 20, 6, 4, 5], 5)",
          "expected_output": "6"
        },
        {
          "input": "get_inv_count([8, 4, 2, 1], 4)",
          "expected_output": "5"
        },
        {
          "input": "get_inv_count([3, 1, 2], 3)",
          "expected_output": "3"
        }
      ]
    },
    {
      "problem_id": "mbpp_125",
      "description": "Write a function to find the maximum difference between the number of 0s and number of 1s in any sub-string of the given binary string.",
      "function_name": "find_length",
      "correct_solution": "def find_length(string, n): \r\n\tcurrent_sum = 0\r\n\tmax_sum = 0\r\n\tfor i in range(n): \r\n\t\tcurrent_sum += (1 if string[i] == '0' else -1) \r\n\t\tif current_sum < 0: \r\n\t\t\tcurrent_sum = 0\r\n\t\tmax_sum = max(current_sum, max_sum) \r\n\treturn max_sum if max_sum else 0",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "find_length('11000010001', 11)",
          "expected_output": "6"
        },
        {
          "input": "find_length('10111', 5)",
          "expected_output": "1"
        },
        {
          "input": "find_length('11011101100101', 14)",
          "expected_output": "2"
        }
      ],
      "broken_test_cases": [
        {
          "input": "find_length('11000010001', 11)",
          "expected_output": "5"
        },
        {
          "input": "find_length('10111', 5)",
          "expected_output": "2"
        },
        {
          "input": "find_length('11011101100101', 14)",
          "expected_output": "3"
        }
      ]
    },
    {
      "problem_id": "mbpp_866",
      "description": "Write a function to check whether the given month name contains 31 days or not.",
      "function_name": "check_monthnumb",
      "correct_solution": "def check_monthnumb(monthname2):\r\n  if(monthname2==\"January\" or monthname2==\"March\"or monthname2==\"May\" or monthname2==\"July\" or monthname2==\"Augest\" or monthname2==\"October\" or monthname2==\"December\"):\r\n    return True\r\n  else:\r\n    return False",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "check_monthnumb('February')",
          "expected_output": "False"
        },
        {
          "input": "check_monthnumb('January')",
          "expected_output": "True"
        },
        {
          "input": "check_monthnumb('March')",
          "expected_output": "True"
        }
      ],
      "broken_test_cases": [
        {
          "input": "check_monthnumb('February')",
          "expected_output": "True"
        },
        {
          "input": "check_monthnumb('January')",
          "expected_output": "False"
        },
        {
          "input": "check_monthnumb('March')",
          "expected_output": "False"
        }
      ]
    },
    {
      "problem_id": "mbpp_392",
      "description": "Write a function to find the maximum sum possible by using the given equation f(n) = max( (f(n/2) + f(n/3) + f(n/4) + f(n/5)), n).",
      "function_name": "get_max_sum",
      "correct_solution": "def get_max_sum (n):\r\n\tres = list()\r\n\tres.append(0)\r\n\tres.append(1)\r\n\ti = 2\r\n\twhile i<n + 1:\r\n\t\tres.append(max(i, (res[int(i / 2)] \r\n\t\t\t\t\t\t+ res[int(i / 3)] +\r\n\t\t\t\t\t\t\tres[int(i / 4)]\r\n\t\t\t\t\t\t+ res[int(i / 5)])))\r\n\t\ti = i + 1\r\n\treturn res[n]",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "get_max_sum(60)",
          "expected_output": "106"
        },
        {
          "input": "get_max_sum(10)",
          "expected_output": "12"
        },
        {
          "input": "get_max_sum(2)",
          "expected_output": "2"
        }
      ],
      "broken_test_cases": [
        {
          "input": "get_max_sum(60)",
          "expected_output": "105"
        },
        {
          "input": "get_max_sum(10)",
          "expected_output": "13"
        },
        {
          "input": "get_max_sum(2)",
          "expected_output": "3"
        }
      ]
    },
    {
      "problem_id": "mbpp_562",
      "description": "Write a python function to find the maximum length of sublist.",
      "function_name": "Find_Max_Length",
      "correct_solution": "def Find_Max_Length(lst):  \r\n    maxLength = max(len(x) for x in lst )\r\n    return maxLength ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "Find_Max_Length([[1], [1, 4], [5, 6, 7, 8]])",
          "expected_output": "4"
        },
        {
          "input": "Find_Max_Length([[0, 1], [2, 2], [3, 2, 1]])",
          "expected_output": "3"
        },
        {
          "input": "Find_Max_Length([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]])",
          "expected_output": "5"
        }
      ],
      "broken_test_cases": [
        {
          "input": "Find_Max_Length([[1], [1, 4], [5, 6, 7, 8]])",
          "expected_output": "3"
        },
        {
          "input": "Find_Max_Length([[0, 1], [2, 2], [3, 2, 1]])",
          "expected_output": "4"
        },
        {
          "input": "Find_Max_Length([[7], [22, 23], [13, 14, 15], [10, 20, 30, 40, 50]])",
          "expected_output": "4"
        }
      ]
    },
    {
      "problem_id": "mbpp_160",
      "description": "Write a function to find x and y that satisfies ax + by = n.",
      "function_name": "solution",
      "correct_solution": "def solution (a, b, n): \r\n\ti = 0\r\n\twhile i * a <= n: \r\n\t\tif (n - (i * a)) % b == 0: \r\n\t\t\treturn (\"x = \",i ,\", y = \", \r\n\t\t\tint((n - (i * a)) / b)) \r\n\t\t\treturn 0\r\n\t\ti = i + 1\r\n\treturn (\"No solution\") ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "solution(2, 3, 7)",
          "expected_output": "('x = ', 2, ', y = ', 1)"
        },
        {
          "input": "solution(4, 2, 7)",
          "expected_output": "No solution"
        },
        {
          "input": "solution(1, 13, 17)",
          "expected_output": "('x = ', 4, ', y = ', 1)"
        }
      ],
      "broken_test_cases": [
        {
          "input": "solution(2, 3, 7)",
          "expected_output": "('x = ', 1, ', y = ', 2)"
        },
        {
          "input": "solution(4, 2, 7)",
          "expected_output": "('x = ', 1, ', y = ', 2)"
        },
        {
          "input": "solution(1, 13, 17)",
          "expected_output": "('x = ', 4, ', y = ', 2)"
        }
      ]
    },
    {
      "problem_id": "mbpp_11",
      "description": "Write a python function to remove first and last occurrence of a given character from the string.",
      "function_name": "remove_Occ",
      "correct_solution": "def remove_Occ(s,ch): \r\n    for i in range(len(s)): \r\n        if (s[i] == ch): \r\n            s = s[0 : i] + s[i + 1:] \r\n            break\r\n    for i in range(len(s) - 1,-1,-1):  \r\n        if (s[i] == ch): \r\n            s = s[0 : i] + s[i + 1:] \r\n            break\r\n    return s ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "remove_Occ('hello', 'l')",
          "expected_output": "heo"
        },
        {
          "input": "remove_Occ('abcda', 'a')",
          "expected_output": "bcd"
        },
        {
          "input": "remove_Occ('PHP', 'P')",
          "expected_output": "H"
        }
      ],
      "broken_test_cases": [
        {
          "input": "remove_Occ('hello', 'l')",
          "expected_output": "hello"
        },
        {
          "input": "remove_Occ('abcda', 'a')",
          "expected_output": "bdc"
        },
        {
          "input": "remove_Occ('PHP', 'P')",
          "expected_output": "HP"
        }
      ]
    },
    {
      "problem_id": "mbpp_618",
      "description": "Write a function to divide two lists using map and lambda function.",
      "function_name": "div_list",
      "correct_solution": "def div_list(nums1,nums2):\r\n  result = map(lambda x, y: x / y, nums1, nums2)\r\n  return list(result)",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "div_list([4, 5, 6], [1, 2, 3])",
          "expected_output": "[4.0, 2.5, 2.0]"
        },
        {
          "input": "div_list([3, 2], [1, 4])",
          "expected_output": "[3.0, 0.5]"
        },
        {
          "input": "div_list([90, 120], [50, 70])",
          "expected_output": "[1.8, 1.7142857142857142]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "div_list([4, 5, 6], [1, 2, 3])",
          "expected_output": "[4.0, 2.5, 2.1]"
        },
        {
          "input": "div_list([3, 2], [1, 4])",
          "expected_output": "[3.0, 0.6]"
        },
        {
          "input": "div_list([90, 120], [50, 70])",
          "expected_output": "[1.8, 1.71]"
        }
      ]
    },
    {
      "problem_id": "mbpp_386",
      "description": "Write a function to find out the minimum no of swaps required for bracket balancing in the given string.",
      "function_name": "swap_count",
      "correct_solution": "def swap_count(s):\r\n\tchars = s\r\n\tcount_left = 0\r\n\tcount_right = 0\r\n\tswap = 0\r\n\timbalance = 0; \r\n\tfor i in range(len(chars)):\r\n\t\tif chars[i] == '[':\r\n\t\t\tcount_left += 1\r\n\t\t\tif imbalance > 0:\r\n\t\t\t\tswap += imbalance\r\n\t\t\t\timbalance -= 1\r\n\t\telif chars[i] == ']':\r\n\t\t\tcount_right += 1\r\n\t\t\timbalance = (count_right - count_left) \r\n\treturn swap",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "swap_count('[]][][')",
          "expected_output": "2"
        },
        {
          "input": "swap_count('[[][]]')",
          "expected_output": "0"
        },
        {
          "input": "swap_count('[[][]]][')",
          "expected_output": "1"
        }
      ],
      "broken_test_cases": [
        {
          "input": "swap_count('[]][][')",
          "expected_output": "3"
        },
        {
          "input": "swap_count('[[][]]')",
          "expected_output": "1"
        },
        {
          "input": "swap_count('[[][]]][')",
          "expected_output": "2"
        }
      ]
    },
    {
      "problem_id": "mbpp_589",
      "description": "Write a function to find perfect squares between two given numbers.",
      "function_name": "perfect_squares",
      "correct_solution": "def perfect_squares(a, b):\r\n    lists=[]\r\n    for i in range (a,b+1):\r\n        j = 1;\r\n        while j*j <= i:\r\n            if j*j == i:\r\n                 lists.append(i)  \r\n            j = j+1\r\n        i = i+1\r\n    return lists",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "perfect_squares(1, 30)",
          "expected_output": "[1, 4, 9, 16, 25]"
        },
        {
          "input": "perfect_squares(50, 100)",
          "expected_output": "[64, 81, 100]"
        },
        {
          "input": "perfect_squares(100, 200)",
          "expected_output": "[100, 121, 144, 169, 196]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "perfect_squares(1, 30)",
          "expected_output": "[1, 4, 9, 16, 25, 36]"
        },
        {
          "input": "perfect_squares(50, 100)",
          "expected_output": "[64, 81, 121]"
        },
        {
          "input": "perfect_squares(100, 200)",
          "expected_output": "[100, 121, 144, 169, 200]"
        }
      ]
    },
    {
      "problem_id": "mbpp_131",
      "description": "Write a python function to reverse only the vowels of a given string.",
      "function_name": "reverse_vowels",
      "correct_solution": "def reverse_vowels(str1):\r\n\tvowels = \"\"\r\n\tfor char in str1:\r\n\t\tif char in \"aeiouAEIOU\":\r\n\t\t\tvowels += char\r\n\tresult_string = \"\"\r\n\tfor char in str1:\r\n\t\tif char in \"aeiouAEIOU\":\r\n\t\t\tresult_string += vowels[-1]\r\n\t\t\tvowels = vowels[:-1]\r\n\t\telse:\r\n\t\t\tresult_string += char\r\n\treturn result_string",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "reverse_vowels('Python')",
          "expected_output": "Python"
        },
        {
          "input": "reverse_vowels('USA')",
          "expected_output": "ASU"
        },
        {
          "input": "reverse_vowels('ab')",
          "expected_output": "ab"
        }
      ],
      "broken_test_cases": [
        {
          "input": "reverse_vowels('Python')",
          "expected_output": "Pytahn"
        },
        {
          "input": "reverse_vowels('USA')",
          "expected_output": "USA"
        },
        {
          "input": "reverse_vowels('ab')",
          "expected_output": "ba"
        }
      ]
    },
    {
      "problem_id": "mbpp_292",
      "description": "Write a python function to find quotient of two numbers.",
      "function_name": "find",
      "correct_solution": "def find(n,m):  \r\n    q = n//m \r\n    return (q)",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "find(10, 3)",
          "expected_output": "3"
        },
        {
          "input": "find(4, 2)",
          "expected_output": "2"
        },
        {
          "input": "find(20, 5)",
          "expected_output": "4"
        }
      ],
      "broken_test_cases": [
        {
          "input": "find(10, 3)",
          "expected_output": "4"
        },
        {
          "input": "find(4, 2)",
          "expected_output": "3"
        },
        {
          "input": "find(20, 5)",
          "expected_output": "5"
        }
      ]
    },
    {
      "problem_id": "mbpp_21",
      "description": "Write a function to find m number of multiples of n.",
      "function_name": "multiples_of_num",
      "correct_solution": "def multiples_of_num(m,n): \r\n    multiples_of_num= list(range(n,(m+1)*n, n)) \r\n    return list(multiples_of_num)",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "multiples_of_num(4, 3)",
          "expected_output": "[3, 6, 9, 12]"
        },
        {
          "input": "multiples_of_num(2, 5)",
          "expected_output": "[5, 10]"
        },
        {
          "input": "multiples_of_num(9, 2)",
          "expected_output": "[2, 4, 6, 8, 10, 12, 14, 16, 18]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "multiples_of_num(4, 3)",
          "expected_output": "[3, 6, 9, 15]"
        },
        {
          "input": "multiples_of_num(2, 5)",
          "expected_output": "[5, 11]"
        },
        {
          "input": "multiples_of_num(9, 2)",
          "expected_output": "[2, 4, 6, 8, 10, 12, 14, 16, 19]"
        }
      ]
    },
    {
      "problem_id": "mbpp_243",
      "description": "Write a function to sort the given list based on the occurrence of first element of tuples.",
      "function_name": "sort_on_occurence",
      "correct_solution": "def sort_on_occurence(lst): \r\n\tdct = {} \r\n\tfor i, j in lst: \r\n\t\tdct.setdefault(i, []).append(j) \r\n\treturn ([(i, *dict.fromkeys(j), len(j)) \r\n\t\t\t\tfor i, j in dct.items()]) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')])",
          "expected_output": "[(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]"
        },
        {
          "input": "sort_on_occurence([('b', 'ball'), ('a', 'arm'), ('b', 'b'), ('a', 'ant')])",
          "expected_output": "[('b', 'ball', 'b', 2), ('a', 'arm', 'ant', 2)]"
        },
        {
          "input": "sort_on_occurence([(2, 'Mark'), (3, 'Maze'), (2, 'Sara')])",
          "expected_output": "[(2, 'Mark', 'Sara', 2), (3, 'Maze', 1)]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')])",
          "expected_output": "[(1, 'Cara', 'Jake', 2), (2, 'Bob', 1)]"
        },
        {
          "input": "sort_on_occurence([('b', 'ball'), ('a', 'arm'), ('b', 'b'), ('a', 'ant')])",
          "expected_output": "[('a', 'arm', 'ant', 2), ('b', 'ball', 'b', 2)]"
        },
        {
          "input": "sort_on_occurence([(2, 'Mark'), (3, 'Maze'), (2, 'Sara')])",
          "expected_output": "[(2, 'Mark', 'Sara', 2), (3, 'Maze', 2)]"
        }
      ]
    },
    {
      "problem_id": "mbpp_255",
      "description": "Write a function to choose specified number of colours from three different colours and generate all the combinations with repetitions.",
      "function_name": "combinations_colors",
      "correct_solution": "from itertools import combinations_with_replacement \r\ndef combinations_colors(l, n):\r\n    return list(combinations_with_replacement(l,n))\r",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "combinations_colors(['Red', 'Green', 'Blue'], 1)",
          "expected_output": "[('Red',), ('Green',), ('Blue',)]"
        },
        {
          "input": "combinations_colors(['Red', 'Green', 'Blue'], 2)",
          "expected_output": "[('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Blue')]"
        },
        {
          "input": "combinations_colors(['Red', 'Green', 'Blue'], 3)",
          "expected_output": "[('Red', 'Red', 'Red'), ('Red', 'Red', 'Green'), ('Red', 'Red', 'Blue'), ('Red', 'Green', 'Green'), ('Red', 'Green', 'Blue'), ('Red', 'Blue', 'Blue'), ('Green', 'Green', 'Green'), ('Green', 'Green', 'Blue'), ('Green', 'Blue', 'Blue'), ('Blue', 'Blue', 'Blue')]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "combinations_colors(['Red', 'Green', 'Blue'], 1)",
          "expected_output": "[('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Blue')]"
        },
        {
          "input": "combinations_colors(['Red', 'Green', 'Blue'], 2)",
          "expected_output": "[('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Blue'), ('Red', 'Red')]"
        },
        {
          "input": "combinations_colors(['Red', 'Green', 'Blue'], 3)",
          "expected_output": "[('Red', 'Red', 'Red'), ('Red', 'Red', 'Green'), ('Red', 'Red', 'Blue'), ('Red', 'Green', 'Green'), ('Red', 'Green', 'Blue'), ('Red', 'Blue', 'Blue'), ('Green', 'Green', 'Green'), ('Green', 'Green', 'Blue'), ('Green', 'Blue', 'Blue'), ('Blue', 'Blue', 'Blue'), ('Red', 'Red', 'Red')]"
        }
      ]
    },
    {
      "problem_id": "mbpp_198",
      "description": "Write a function to find the largest triangle that can be inscribed in an ellipse.",
      "function_name": "largest_triangle",
      "correct_solution": "import math\r\ndef largest_triangle(a,b): \r\n    if (a < 0 or b < 0): \r\n        return -1 \r\n    area = (3 * math.sqrt(3) * pow(a, 2)) / (4 * b);  \r\n    return area ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "largest_triangle(4, 2)",
          "expected_output": "10.392304845413264"
        },
        {
          "input": "largest_triangle(5, 7)",
          "expected_output": "4.639421805988064"
        },
        {
          "input": "largest_triangle(9, 1)",
          "expected_output": "105.2220865598093"
        }
      ],
      "broken_test_cases": [
        {
          "input": "largest_triangle(4, 2)",
          "expected_output": "5.0"
        },
        {
          "input": "largest_triangle(5, 7)",
          "expected_output": "10.392304845413264"
        },
        {
          "input": "largest_triangle(9, 1)",
          "expected_output": "100.0"
        }
      ]
    },
    {
      "problem_id": "mbpp_265",
      "description": "Write a function to split a list for every nth element.",
      "function_name": "list_split",
      "correct_solution": "def list_split(S, step):\r\n    return [S[i::step] for i in range(step)]",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'], 3)",
          "expected_output": "[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']]"
        },
        {
          "input": "list_split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], 3)",
          "expected_output": "[[1, 4, 7, 10, 13], [2, 5, 8, 11, 14], [3, 6, 9, 12]]"
        },
        {
          "input": "list_split(['python', 'java', 'C', 'C++', 'DBMS', 'SQL'], 2)",
          "expected_output": "[['python', 'C', 'DBMS'], ['java', 'C++', 'SQL']]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'], 3)",
          "expected_output": "[['a', 'b', 'c'], ['d', 'e', 'f'], ['g', 'h', 'i']]"
        },
        {
          "input": "list_split([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], 3)",
          "expected_output": "[[1, 4, 7, 10, 13], [2, 5, 8, 11], [3, 6, 9, 12, 14]]"
        },
        {
          "input": "list_split(['python', 'java', 'C', 'C++', 'DBMS', 'SQL'], 2)",
          "expected_output": "[['python', 'C++', 'SQL'], ['java', 'C', 'DBMS']]"
        }
      ]
    },
    {
      "problem_id": "mbpp_769",
      "description": "Write a python function to get the difference between two lists.",
      "function_name": "Diff",
      "correct_solution": "def Diff(li1,li2):\r\n    return (list(list(set(li1)-set(li2)) + list(set(li2)-set(li1))))\r\n ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])",
          "expected_output": "[10, 20, 30, 15]"
        },
        {
          "input": "Diff([1, 2, 3, 4, 5], [6, 7, 1])",
          "expected_output": "[2, 3, 4, 5, 6, 7]"
        },
        {
          "input": "Diff([1, 2, 3], [6, 7, 1])",
          "expected_output": "[2, 3, 6, 7]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "Diff([10, 15, 20, 25, 30, 35, 40], [25, 40, 35])",
          "expected_output": "[10, 15, 20, 30, 35, 40, 25, 40, 35]"
        },
        {
          "input": "Diff([1, 2, 3, 4, 5], [6, 7, 1])",
          "expected_output": "[2, 3, 4, 5, 1, 6, 7]"
        },
        {
          "input": "Diff([1, 2, 3], [6, 7, 1])",
          "expected_output": "[1, 2, 3, 6, 7]"
        }
      ]
    },
    {
      "problem_id": "mbpp_403",
      "description": "Write a function to check if a url is valid or not using regex.",
      "function_name": "is_valid_URL",
      "correct_solution": "import re\r\ndef is_valid_URL(str):\r\n\tregex = (\"((http|https)://)(www.)?\" +\r\n\t\t\t\"[a-zA-Z0-9@:%._\\\\+~#?&//=]\" +\r\n\t\t\t\"{2,256}\\\\.[a-z]\" +\r\n\t\t\t\"{2,6}\\\\b([-a-zA-Z0-9@:%\" +\r\n\t\t\t\"._\\\\+~#?&//=]*)\")\r\n\tp = re.compile(regex)\r\n\tif (str == None):\r\n\t\treturn False\r\n\tif(re.search(p, str)):\r\n\t\treturn True\r\n\telse:\r\n\t\treturn False",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "is_valid_URL('https://www.google.com')",
          "expected_output": "True"
        },
        {
          "input": "is_valid_URL('https:/www.gmail.com')",
          "expected_output": "False"
        },
        {
          "input": "is_valid_URL('https:// www.redit.com')",
          "expected_output": "False"
        }
      ],
      "broken_test_cases": [
        {
          "input": "is_valid_URL('https://www.google.com')",
          "expected_output": "False"
        },
        {
          "input": "is_valid_URL('https:/www.gmail.com')",
          "expected_output": "True"
        },
        {
          "input": "is_valid_URL('https:// www.redit.com')",
          "expected_output": "True"
        }
      ]
    },
    {
      "problem_id": "mbpp_973",
      "description": "Write a python function to left rotate the string.",
      "function_name": "left_rotate",
      "correct_solution": "def left_rotate(s,d):\r\n    tmp = s[d : ] + s[0 : d]\r\n    return tmp  ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "left_rotate('python', 2)",
          "expected_output": "thonpy"
        },
        {
          "input": "left_rotate('bigdata', 3)",
          "expected_output": "databig"
        },
        {
          "input": "left_rotate('hadoop', 1)",
          "expected_output": "adooph"
        }
      ],
      "broken_test_cases": [
        {
          "input": "left_rotate('python', 2)",
          "expected_output": "thonpY"
        },
        {
          "input": "left_rotate('bigdata', 3)",
          "expected_output": "bigdata"
        },
        {
          "input": "left_rotate('hadoop', 1)",
          "expected_output": "daooph"
        }
      ]
    },
    {
      "problem_id": "mbpp_285",
      "description": "Write a function that matches a string that has an a followed by two to three 'b'.",
      "function_name": "text_match_two_three",
      "correct_solution": "import re\r\ndef text_match_two_three(text):\r\n        patterns = 'ab{2,3}'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "text_match_two_three('ac')",
          "expected_output": "Not matched!"
        },
        {
          "input": "text_match_two_three('dc')",
          "expected_output": "Not matched!"
        },
        {
          "input": "text_match_two_three('abbbba')",
          "expected_output": "Found a match!"
        }
      ],
      "broken_test_cases": [
        {
          "input": "text_match_two_three('ac')",
          "expected_output": "Found a match!"
        },
        {
          "input": "text_match_two_three('dc')",
          "expected_output": "Found a match!"
        },
        {
          "input": "text_match_two_three('abbbba')",
          "expected_output": "Not matched!"
        }
      ]
    },
    {
      "problem_id": "mbpp_33",
      "description": "Write a python function to convert a decimal number to binary number.",
      "function_name": "decimal_To_Binary",
      "correct_solution": "def decimal_To_Binary(N): \r\n    B_Number = 0\r\n    cnt = 0\r\n    while (N != 0): \r\n        rem = N % 2\r\n        c = pow(10,cnt)  \r\n        B_Number += rem*c  \r\n        N //= 2 \r\n        cnt += 1\r\n    return B_Number  ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "decimal_To_Binary(10)",
          "expected_output": "1010"
        },
        {
          "input": "decimal_To_Binary(1)",
          "expected_output": "1"
        },
        {
          "input": "decimal_To_Binary(20)",
          "expected_output": "10100"
        }
      ],
      "broken_test_cases": [
        {
          "input": "decimal_To_Binary(10)",
          "expected_output": "1111"
        },
        {
          "input": "decimal_To_Binary(1)",
          "expected_output": "10"
        },
        {
          "input": "decimal_To_Binary(20)",
          "expected_output": "10101"
        }
      ]
    },
    {
      "problem_id": "mbpp_518",
      "description": "Write a function to find the square root of a perfect number.",
      "function_name": "sqrt_root",
      "correct_solution": "import math\r\ndef sqrt_root(num):\r\n sqrt_root = math.pow(num, 0.5)\r\n return sqrt_root ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "sqrt_root(4)",
          "expected_output": "2"
        },
        {
          "input": "sqrt_root(16)",
          "expected_output": "4"
        },
        {
          "input": "sqrt_root(400)",
          "expected_output": "20"
        }
      ],
      "broken_test_cases": [
        {
          "input": "sqrt_root(4)",
          "expected_output": "3"
        },
        {
          "input": "sqrt_root(16)",
          "expected_output": "5"
        },
        {
          "input": "sqrt_root(400)",
          "expected_output": "10"
        }
      ]
    },
    {
      "problem_id": "mbpp_356",
      "description": "Write a function to find the third angle of a triangle using two angles.",
      "function_name": "find_angle",
      "correct_solution": "def find_angle(a,b):\r\n c = 180 - (a + b)\r\n return c\r\n",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "find_angle(47, 89)",
          "expected_output": "44"
        },
        {
          "input": "find_angle(45, 95)",
          "expected_output": "40"
        },
        {
          "input": "find_angle(50, 40)",
          "expected_output": "90"
        }
      ],
      "broken_test_cases": [
        {
          "input": "find_angle(47, 89)",
          "expected_output": "45"
        },
        {
          "input": "find_angle(45, 95)",
          "expected_output": "50"
        },
        {
          "input": "find_angle(50, 40)",
          "expected_output": "91"
        }
      ]
    },
    {
      "problem_id": "mbpp_712",
      "description": "Write a function to remove duplicates from a list of lists.",
      "function_name": "remove_duplicate",
      "correct_solution": "import itertools\r\ndef remove_duplicate(list1):\r\n list.sort(list1)\r\n remove_duplicate = list(list1 for list1,_ in itertools.groupby(list1))\r\n return remove_duplicate",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "remove_duplicate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])",
          "expected_output": "[[10, 20], [30, 56, 25], [33], [40]]"
        },
        {
          "input": "remove_duplicate(['a', 'b', 'a', 'c', 'c'])",
          "expected_output": "['a', 'b', 'c']"
        },
        {
          "input": "remove_duplicate([1, 3, 5, 6, 3, 5, 6, 1])",
          "expected_output": "[1, 3, 5, 6]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "remove_duplicate([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])",
          "expected_output": "[[10, 20], [40], [30, 56, 25], [33]]"
        },
        {
          "input": "remove_duplicate(['a', 'b', 'a', 'c', 'c'])",
          "expected_output": "['a', 'b', 'a', 'c']"
        },
        {
          "input": "remove_duplicate([1, 3, 5, 6, 3, 5, 6, 1])",
          "expected_output": "[1, 3, 5, 6, 7]"
        }
      ]
    },
    {
      "problem_id": "mbpp_134",
      "description": "Write a python function to check whether the last element of given array is even or odd after performing an operation p times.",
      "function_name": "check_last",
      "correct_solution": "def check_last (arr,n,p): \r\n    _sum = 0\r\n    for i in range(n): \r\n        _sum = _sum + arr[i] \r\n    if p == 1: \r\n        if _sum % 2 == 0: \r\n            return \"ODD\"\r\n        else: \r\n            return \"EVEN\"\r\n    return \"EVEN\"\r\n      ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "check_last([5, 7, 10], 3, 1)",
          "expected_output": "ODD"
        },
        {
          "input": "check_last([2, 3], 2, 3)",
          "expected_output": "EVEN"
        },
        {
          "input": "check_last([1, 2, 3], 3, 1)",
          "expected_output": "ODD"
        }
      ],
      "broken_test_cases": [
        {
          "input": "check_last([5, 7, 10], 3, 1)",
          "expected_output": "EVEN"
        },
        {
          "input": "check_last([2, 3], 2, 3)",
          "expected_output": "ODD"
        },
        {
          "input": "check_last([1, 2, 3], 3, 1)",
          "expected_output": "EVEN"
        }
      ]
    },
    {
      "problem_id": "mbpp_400",
      "description": "Write a function to extract the frequency of unique tuples in the given list order irrespective.",
      "function_name": "extract_freq",
      "correct_solution": "def extract_freq(test_list):\r\n  res = len(list(set(tuple(sorted(sub)) for sub in test_list)))\r\n  return (res)",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)])",
          "expected_output": "3"
        },
        {
          "input": "extract_freq([(4, 15), (2, 3), (5, 4), (6, 7)])",
          "expected_output": "4"
        },
        {
          "input": "extract_freq([(5, 16), (2, 3), (6, 5), (6, 9)])",
          "expected_output": "4"
        }
      ],
      "broken_test_cases": [
        {
          "input": "extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)])",
          "expected_output": "4"
        },
        {
          "input": "extract_freq([(4, 15), (2, 3), (5, 4), (6, 7)])",
          "expected_output": "3"
        },
        {
          "input": "extract_freq([(5, 16), (2, 3), (6, 5), (6, 9)])",
          "expected_output": "5"
        }
      ]
    },
    {
      "problem_id": "mbpp_345",
      "description": "Write a function to find the difference between two consecutive numbers in a given list.",
      "function_name": "diff_consecutivenums",
      "correct_solution": "def diff_consecutivenums(nums):\r\n    result = [b-a for a, b in zip(nums[:-1], nums[1:])]\r\n    return result",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])",
          "expected_output": "[0, 2, 1, 0, 1, 1, 1]"
        },
        {
          "input": "diff_consecutivenums([4, 5, 8, 9, 6, 10])",
          "expected_output": "[1, 3, 1, -3, 4]"
        },
        {
          "input": "diff_consecutivenums([0, 1, 2, 3, 4, 4, 4, 4, 5, 7])",
          "expected_output": "[1, 1, 1, 1, 0, 0, 0, 1, 2]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])",
          "expected_output": "[0, 2, 1, 0, 1, 2, 1]"
        },
        {
          "input": "diff_consecutivenums([4, 5, 8, 9, 6, 10])",
          "expected_output": "[1, 3, 1, -4, 4]"
        },
        {
          "input": "diff_consecutivenums([0, 1, 2, 3, 4, 4, 4, 4, 5, 7])",
          "expected_output": "[1, 1, 1, 1, 0, 0, 0, 1, 3]"
        }
      ]
    },
    {
      "problem_id": "mbpp_593",
      "description": "Write a function to remove leading zeroes from an ip address.",
      "function_name": "removezero_ip",
      "correct_solution": "import re\r\ndef removezero_ip(ip):\r\n string = re.sub('\\.[0]*', '.', ip)\r\n return string\r",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "removezero_ip('216.08.094.196')",
          "expected_output": "216.8.94.196"
        },
        {
          "input": "removezero_ip('12.01.024')",
          "expected_output": "12.1.24"
        },
        {
          "input": "removezero_ip('216.08.094.0196')",
          "expected_output": "216.8.94.196"
        }
      ],
      "broken_test_cases": [
        {
          "input": "removezero_ip('216.08.094.196')",
          "expected_output": "216.08.94.196"
        },
        {
          "input": "removezero_ip('12.01.024')",
          "expected_output": "12.01.24"
        },
        {
          "input": "removezero_ip('216.08.094.0196')",
          "expected_output": "216.8.94.19"
        }
      ]
    },
    {
      "problem_id": "mbpp_401",
      "description": "Write a function to perform index wise addition of tuple elements in the given two nested tuples.",
      "function_name": "add_nested_tuples",
      "correct_solution": "def add_nested_tuples(test_tup1, test_tup2):\r\n  res = tuple(tuple(a + b for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3)))",
          "expected_output": "((7, 10), (7, 14), (3, 10), (8, 13))"
        },
        {
          "input": "add_nested_tuples(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4)))",
          "expected_output": "((9, 12), (9, 16), (5, 12), (10, 15))"
        },
        {
          "input": "add_nested_tuples(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5)))",
          "expected_output": "((11, 14), (11, 18), (7, 14), (12, 17))"
        }
      ],
      "broken_test_cases": [
        {
          "input": "add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3)))",
          "expected_output": "((7, 11), (7, 14), (3, 10), (8, 13))"
        },
        {
          "input": "add_nested_tuples(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4)))",
          "expected_output": "((9, 12), (9, 15), (5, 12), (10, 15))"
        },
        {
          "input": "add_nested_tuples(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5)))",
          "expected_output": "((11, 14), (11, 18), (7, 14), (12, 16))"
        }
      ]
    },
    {
      "problem_id": "mbpp_281",
      "description": "Write a python function to check if the elements of a given list are unique or not.",
      "function_name": "all_unique",
      "correct_solution": "def all_unique(test_list):\r\n    if len(test_list) > len(set(test_list)):\r\n        return False\r\n    return True",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "all_unique([1, 2, 3])",
          "expected_output": "True"
        },
        {
          "input": "all_unique([1, 2, 1, 2])",
          "expected_output": "False"
        },
        {
          "input": "all_unique([1, 2, 3, 4, 5])",
          "expected_output": "True"
        }
      ],
      "broken_test_cases": [
        {
          "input": "all_unique([1, 2, 3])",
          "expected_output": "False"
        },
        {
          "input": "all_unique([1, 2, 1, 2])",
          "expected_output": "True"
        },
        {
          "input": "all_unique([1, 2, 3, 4, 5])",
          "expected_output": "False"
        }
      ]
    },
    {
      "problem_id": "mbpp_813",
      "description": "Write a function to find length of the string.",
      "function_name": "string_length",
      "correct_solution": "def string_length(str1):\r\n    count = 0\r\n    for char in str1:\r\n        count += 1\r\n    return count",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "string_length('python')",
          "expected_output": "6"
        },
        {
          "input": "string_length('program')",
          "expected_output": "7"
        },
        {
          "input": "string_length('language')",
          "expected_output": "8"
        }
      ],
      "broken_test_cases": [
        {
          "input": "string_length('python')",
          "expected_output": "7"
        },
        {
          "input": "string_length('program')",
          "expected_output": "8"
        },
        {
          "input": "string_length('language')",
          "expected_output": "6"
        }
      ]
    },
    {
      "problem_id": "mbpp_590",
      "description": "Write a function to convert polar coordinates to rectangular coordinates.",
      "function_name": "polar_rect",
      "correct_solution": "import cmath\r\ndef polar_rect(x,y):\r\n cn = complex(x,y)\r\n cn=cmath.polar(cn)\r\n cn1 = cmath.rect(2, cmath.pi)\r\n return (cn,cn1)",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "polar_rect(3, 4)",
          "expected_output": "((5.0, 0.9272952180016122), -2 + 2.4492935982947064e-16j)"
        },
        {
          "input": "polar_rect(4, 7)",
          "expected_output": "((8.06225774829855, 1.0516502125483738), -2 + 2.4492935982947064e-16j)"
        },
        {
          "input": "polar_rect(15, 17)",
          "expected_output": "((22.67156809750927, 0.8478169733934057), -2 + 2.4492935982947064e-16j)"
        }
      ],
      "broken_test_cases": [
        {
          "input": "polar_rect(3, 4)",
          "expected_output": "((5.0, 0.9272952180016122), -3 + 2.4492935982947064e-16j)"
        },
        {
          "input": "polar_rect(4, 7)",
          "expected_output": "((8.06225774829855, 1.0516502125483738), -3 + 2.4492935982947064e-16j)"
        },
        {
          "input": "polar_rect(15, 17)",
          "expected_output": "((22.67156809750927, 0.8478169733934057), 2 + 2.4492935982947064e-16j)"
        }
      ]
    },
    {
      "problem_id": "mbpp_162",
      "description": "Write a function to calculate the sum of the positive integers of n+(n-2)+(n-4)... (until n-x =< 0).",
      "function_name": "sum_series",
      "correct_solution": "def sum_series(n):\r\n  if n < 1:\r\n    return 0\r\n  else:\r\n    return n + sum_series(n - 2)",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "sum_series(6)",
          "expected_output": "12"
        },
        {
          "input": "sum_series(10)",
          "expected_output": "30"
        },
        {
          "input": "sum_series(9)",
          "expected_output": "25"
        }
      ],
      "broken_test_cases": [
        {
          "input": "sum_series(6)",
          "expected_output": "13"
        },
        {
          "input": "sum_series(10)",
          "expected_output": "29"
        },
        {
          "input": "sum_series(9)",
          "expected_output": "26"
        }
      ]
    },
    {
      "problem_id": "mbpp_421",
      "description": "Write a function to concatenate each element of tuple by the delimiter.",
      "function_name": "concatenate_tuple",
      "correct_solution": "def concatenate_tuple(test_tup):\r\n    delim = \"-\"\r\n    res = ''.join([str(ele) + delim for ele in test_tup])\r\n    res = res[ : len(res) - len(delim)]\r\n    return (str(res)) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "concatenate_tuple(('ID', 'is', 4, 'UTS'))",
          "expected_output": "ID-is-4-UTS"
        },
        {
          "input": "concatenate_tuple(('QWE', 'is', 4, 'RTY'))",
          "expected_output": "QWE-is-4-RTY"
        },
        {
          "input": "concatenate_tuple(('ZEN', 'is', 4, 'OP'))",
          "expected_output": "ZEN-is-4-OP"
        }
      ],
      "broken_test_cases": [
        {
          "input": "concatenate_tuple(('ID', 'is', 4, 'UTS'))",
          "expected_output": "ID-is-4-UTS-"
        },
        {
          "input": "concatenate_tuple(('QWE', 'is', 4, 'RTY'))",
          "expected_output": "QWE-is-4-RTY-EXTRA"
        },
        {
          "input": "concatenate_tuple(('ZEN', 'is', 4, 'OP'))",
          "expected_output": "ZEN-is-4-OPs"
        }
      ]
    },
    {
      "problem_id": "mbpp_454",
      "description": "Write a function that matches a word containing 'z'.",
      "function_name": "text_match_wordz",
      "correct_solution": "import re\r\ndef text_match_wordz(text):\r\n        patterns = '\\w*z.\\w*'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "text_match_wordz('pythonz.')",
          "expected_output": "Found a match!"
        },
        {
          "input": "text_match_wordz('xyz.')",
          "expected_output": "Found a match!"
        },
        {
          "input": "text_match_wordz('  lang  .')",
          "expected_output": "Not matched!"
        }
      ],
      "broken_test_cases": [
        {
          "input": "text_match_wordz('pythonz.')",
          "expected_output": "Not matched!"
        },
        {
          "input": "text_match_wordz('xyz.')",
          "expected_output": "Not matched!"
        },
        {
          "input": "text_match_wordz('  lang  .')",
          "expected_output": "Found a match!"
        }
      ]
    },
    {
      "problem_id": "mbpp_267",
      "description": "Write a python function to find the sum of squares of first n odd natural numbers.",
      "function_name": "square_Sum",
      "correct_solution": "def square_Sum(n):  \r\n    return int(n*(4*n*n-1)/3) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "square_Sum(2)",
          "expected_output": "10"
        },
        {
          "input": "square_Sum(3)",
          "expected_output": "35"
        },
        {
          "input": "square_Sum(4)",
          "expected_output": "84"
        }
      ],
      "broken_test_cases": [
        {
          "input": "square_Sum(2)",
          "expected_output": "11"
        },
        {
          "input": "square_Sum(3)",
          "expected_output": "40"
        },
        {
          "input": "square_Sum(4)",
          "expected_output": "85"
        }
      ]
    },
    {
      "problem_id": "mbpp_853",
      "description": "Write a python function to find sum of odd factors of a number.",
      "function_name": "sum_of_odd_Factors",
      "correct_solution": "import math\r\ndef sum_of_odd_Factors(n): \r\n    res = 1\r\n    while n % 2 == 0: \r\n        n = n // 2 \r\n    for i in range(3,int(math.sqrt(n) + 1)): \r\n        count = 0\r\n        curr_sum = 1\r\n        curr_term = 1\r\n        while n % i == 0: \r\n            count+=1 \r\n            n = n // i \r\n            curr_term *= i \r\n            curr_sum += curr_term    \r\n        res *= curr_sum  \r\n    if n >= 2: \r\n        res *= (1 + n) \r\n    return res ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "sum_of_odd_Factors(30)",
          "expected_output": "24"
        },
        {
          "input": "sum_of_odd_Factors(18)",
          "expected_output": "13"
        },
        {
          "input": "sum_of_odd_Factors(2)",
          "expected_output": "1"
        }
      ],
      "broken_test_cases": [
        {
          "input": "sum_of_odd_Factors(30)",
          "expected_output": "23"
        },
        {
          "input": "sum_of_odd_Factors(18)",
          "expected_output": "12"
        },
        {
          "input": "sum_of_odd_Factors(2)",
          "expected_output": "2"
        }
      ]
    },
    {
      "problem_id": "mbpp_645",
      "description": "Write a function to find the product of it\u2019s kth index in the given tuples.",
      "function_name": "find_k_product",
      "correct_solution": "def get_product(val) : \r\n\tres = 1\r\n\tfor ele in val: \r\n\t\tres *= ele \r\n\treturn res \r\ndef find_k_product(test_list, K):\r\n  res = get_product([sub[K] for sub in test_list])\r\n  return (res) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "find_k_product([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2)",
          "expected_output": "665"
        },
        {
          "input": "find_k_product([(6, 7, 8), (2, 4, 6), (9, 10, 20)], 1)",
          "expected_output": "280"
        },
        {
          "input": "find_k_product([(7, 8, 9), (3, 5, 7), (10, 11, 21)], 0)",
          "expected_output": "210"
        }
      ],
      "broken_test_cases": [
        {
          "input": "find_k_product([(5, 6, 7), (1, 3, 5), (8, 9, 19)], 2)",
          "expected_output": "666"
        },
        {
          "input": "find_k_product([(6, 7, 8), (2, 4, 6), (9, 10, 20)], 1)",
          "expected_output": "281"
        },
        {
          "input": "find_k_product([(7, 8, 9), (3, 5, 7), (10, 11, 21)], 0)",
          "expected_output": "209"
        }
      ]
    },
    {
      "problem_id": "mbpp_245",
      "description": "Write a function to find the maximum sum of bi-tonic sub-sequence for the given array.",
      "function_name": "max_sum",
      "correct_solution": "def max_sum(arr, n): \r\n\tMSIBS = arr[:] \r\n\tfor i in range(n): \r\n\t\tfor j in range(0, i): \r\n\t\t\tif arr[i] > arr[j] and MSIBS[i] < MSIBS[j] + arr[i]: \r\n\t\t\t\tMSIBS[i] = MSIBS[j] + arr[i] \r\n\tMSDBS = arr[:] \r\n\tfor i in range(1, n + 1): \r\n\t\tfor j in range(1, i): \r\n\t\t\tif arr[-i] > arr[-j] and MSDBS[-i] < MSDBS[-j] + arr[-i]: \r\n\t\t\t\tMSDBS[-i] = MSDBS[-j] + arr[-i] \r\n\tmax_sum = float(\"-Inf\") \r\n\tfor i, j, k in zip(MSIBS, MSDBS, arr): \r\n\t\tmax_sum = max(max_sum, i + j - k) \r\n\treturn max_sum",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9)",
          "expected_output": "194"
        },
        {
          "input": "max_sum([80, 60, 30, 40, 20, 10], 6)",
          "expected_output": "210"
        },
        {
          "input": "max_sum([2, 3, 14, 16, 21, 23, 29, 30], 8)",
          "expected_output": "138"
        }
      ],
      "broken_test_cases": [
        {
          "input": "max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9)",
          "expected_output": "193"
        },
        {
          "input": "max_sum([80, 60, 30, 40, 20, 10], 6)",
          "expected_output": "209"
        },
        {
          "input": "max_sum([2, 3, 14, 16, 21, 23, 29, 30], 8)",
          "expected_output": "139"
        }
      ]
    },
    {
      "problem_id": "mbpp_137",
      "description": "Write a function to find the ration of zeroes in an array of integers.",
      "function_name": "zero_count",
      "correct_solution": "from array import array\r\ndef zero_count(nums):\r\n    n = len(nums)\r\n    n1 = 0\r\n    for x in nums:\r\n        if x == 0:\r\n            n1 += 1\r\n        else:\r\n          None\r\n    return round(n1/n,2)",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])",
          "expected_output": "0.15"
        },
        {
          "input": "zero_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])",
          "expected_output": "0.0"
        },
        {
          "input": "zero_count([2, 4, -6, -9, 11, -12, 14, -5, 17])",
          "expected_output": "0.0"
        }
      ],
      "broken_test_cases": [
        {
          "input": "zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])",
          "expected_output": "0.20"
        },
        {
          "input": "zero_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])",
          "expected_output": "0.15"
        },
        {
          "input": "zero_count([2, 4, -6, -9, 11, -12, 14, -5, 17])",
          "expected_output": "0.11"
        }
      ]
    },
    {
      "problem_id": "mbpp_585",
      "description": "Write a function to find the n - expensive price items from a given dataset using heap queue algorithm.",
      "function_name": "expensive_items",
      "correct_solution": "import heapq\r\ndef expensive_items(items,n):\r\n  expensive_items = heapq.nlargest(n, items, key=lambda s: s['price'])\r\n  return expensive_items",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "expensive_items([{'name': 'Item-1', 'price': 101.1}, {'name': 'Item-2', 'price': 555.22}], 1)",
          "expected_output": "[{'name': 'Item-2', 'price': 555.22}]"
        },
        {
          "input": "expensive_items([{'name': 'Item-1', 'price': 101.1}, {'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09}], 2)",
          "expected_output": "[{'name': 'Item-2', 'price': 555.22}, {'name': 'Item-1', 'price': 101.1}]"
        },
        {
          "input": "expensive_items([{'name': 'Item-1', 'price': 101.1}, {'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09}, {'name': 'Item-4', 'price': 22.75}], 1)",
          "expected_output": "[{'name': 'Item-2', 'price': 555.22}]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "expensive_items([{'name': 'Item-1', 'price': 101.1}, {'name': 'Item-2', 'price': 555.22}], 1)",
          "expected_output": "[{'name': 'Item-1', 'price': 101.1}]"
        },
        {
          "input": "expensive_items([{'name': 'Item-1', 'price': 101.1}, {'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09}], 2)",
          "expected_output": "[{'name': 'Item-1', 'price': 101.1}, {'name': 'Item-3', 'price': 45.09}]"
        },
        {
          "input": "expensive_items([{'name': 'Item-1', 'price': 101.1}, {'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09}, {'name': 'Item-4', 'price': 22.75}], 1)",
          "expected_output": "[{'name': 'Item-1', 'price': 101.1}]"
        }
      ]
    },
    {
      "problem_id": "mbpp_947",
      "description": "Write a python function to find the length of the shortest word.",
      "function_name": "len_log",
      "correct_solution": "def len_log(list1):\r\n    min=len(list1[0])\r\n    for i in list1:\r\n        if len(i)<min:\r\n            min=len(i)\r\n    return min",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "len_log(['win', 'lose', 'great'])",
          "expected_output": "3"
        },
        {
          "input": "len_log(['a', 'ab', 'abc'])",
          "expected_output": "1"
        },
        {
          "input": "len_log(['12', '12', '1234'])",
          "expected_output": "2"
        }
      ],
      "broken_test_cases": [
        {
          "input": "len_log(['win', 'lose', 'great'])",
          "expected_output": "4"
        },
        {
          "input": "len_log(['a', 'ab', 'abc'])",
          "expected_output": "2"
        },
        {
          "input": "len_log(['12', '12', '1234'])",
          "expected_output": "3"
        }
      ]
    },
    {
      "problem_id": "mbpp_665",
      "description": "Write a python function to shift first element to the end of given list.",
      "function_name": "move_last",
      "correct_solution": "def move_last(num_list):\r\n    a = [num_list[0] for i in range(num_list.count(num_list[0]))]\r\n    x = [ i for i in num_list if i != num_list[0]]\r\n    x.extend(a)\r\n    return (x)",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "move_last([1, 2, 3, 4])",
          "expected_output": "[2, 3, 4, 1]"
        },
        {
          "input": "move_last([2, 3, 4, 1, 5, 0])",
          "expected_output": "[3, 4, 1, 5, 0, 2]"
        },
        {
          "input": "move_last([5, 4, 3, 2, 1])",
          "expected_output": "[4, 3, 2, 1, 5]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "move_last([1, 2, 3, 4])",
          "expected_output": "[1, 2, 3, 4]"
        },
        {
          "input": "move_last([2, 3, 4, 1, 5, 0])",
          "expected_output": "[2, 3, 4, 1, 5, 0]"
        },
        {
          "input": "move_last([5, 4, 3, 2, 1])",
          "expected_output": "[5, 4, 3, 2, 1]"
        }
      ]
    },
    {
      "problem_id": "mbpp_361",
      "description": "Write a function to remove empty lists from a given list of lists.",
      "function_name": "remove_empty",
      "correct_solution": "def remove_empty(list1):\r\n  remove_empty = [x for x in list1 if x]\r\n  return remove_empty",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "remove_empty([[], [], [], 'Red', 'Green', [1, 2], 'Blue', [], []])",
          "expected_output": "['Red', 'Green', [1, 2], 'Blue']"
        },
        {
          "input": "remove_empty([[], [], [], [], [], 'Green', [1, 2], 'Blue', [], []])",
          "expected_output": "['Green', [1, 2], 'Blue']"
        },
        {
          "input": "remove_empty([[], [], [], 'Python', [], [], 'programming', 'language', [], [], [], [], []])",
          "expected_output": "['Python', 'programming', 'language']"
        }
      ],
      "broken_test_cases": [
        {
          "input": "remove_empty([[], [], [], 'Red', 'Green', [1, 2], 'Blue', [], []])",
          "expected_output": "['Red', 'Green', [1, 2], 'Blue', []]"
        },
        {
          "input": "remove_empty([[], [], [], [], [], 'Green', [1, 2], 'Blue', [], []])",
          "expected_output": "['Green', [1, 2], 'Blue', []]"
        },
        {
          "input": "remove_empty([[], [], [], 'Python', [], [], 'programming', 'language', [], [], [], [], []])",
          "expected_output": "['Python', 'programming', 'language', 'broken']"
        }
      ]
    },
    {
      "problem_id": "mbpp_478",
      "description": "Write a function to remove lowercase substrings from a given string.",
      "function_name": "remove_lowercase",
      "correct_solution": "import re\r\ndef remove_lowercase(str1):\r\n remove_lower = lambda text: re.sub('[a-z]', '', text)\r\n result =  remove_lower(str1)\r\n return result",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "remove_lowercase('PYTHon')",
          "expected_output": "PYTH"
        },
        {
          "input": "remove_lowercase('FInD')",
          "expected_output": "FID"
        },
        {
          "input": "remove_lowercase('STRinG')",
          "expected_output": "STRG"
        }
      ],
      "broken_test_cases": [
        {
          "input": "remove_lowercase('PYTHon')",
          "expected_output": "PYTHOn"
        },
        {
          "input": "remove_lowercase('FInD')",
          "expected_output": "FIn"
        },
        {
          "input": "remove_lowercase('STRinG')",
          "expected_output": "STRIG"
        }
      ]
    },
    {
      "problem_id": "mbpp_755",
      "description": "Write a function to find the second smallest number in a list.",
      "function_name": "second_smallest",
      "correct_solution": "def second_smallest(numbers):\r\n  if (len(numbers)<2):\r\n    return\r\n  if ((len(numbers)==2)  and (numbers[0] == numbers[1]) ):\r\n    return\r\n  dup_items = set()\r\n  uniq_items = []\r\n  for x in numbers:\r\n    if x not in dup_items:\r\n      uniq_items.append(x)\r\n      dup_items.add(x)\r\n  uniq_items.sort()    \r\n  return  uniq_items[1] ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "second_smallest([1, 2, -8, -2, 0, -2])",
          "expected_output": "-2"
        },
        {
          "input": "second_smallest([1, 1, -0.5, 0, 2, -2, -2])",
          "expected_output": "-0.5"
        },
        {
          "input": "second_smallest([2, 2])",
          "expected_output": "None"
        }
      ],
      "broken_test_cases": [
        {
          "input": "second_smallest([1, 2, -8, -2, 0, -2])",
          "expected_output": "0"
        },
        {
          "input": "second_smallest([1, 1, -0.5, 0, 2, -2, -2])",
          "expected_output": "0"
        },
        {
          "input": "second_smallest([2, 2])",
          "expected_output": "2"
        }
      ]
    },
    {
      "problem_id": "mbpp_316",
      "description": "Write a function to find the index of the last occurrence of a given number in a sorted array.",
      "function_name": "find_last_occurrence",
      "correct_solution": "def find_last_occurrence(A, x):\r\n    (left, right) = (0, len(A) - 1)\r\n    result = -1\r\n    while left <= right:\r\n        mid = (left + right) // 2\r\n        if x == A[mid]:\r\n            result = mid\r\n            left = mid + 1\r\n        elif x < A[mid]:\r\n            right = mid - 1\r\n        else:\r\n            left = mid + 1\r\n    return result ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5)",
          "expected_output": "3"
        },
        {
          "input": "find_last_occurrence([2, 3, 5, 8, 6, 6, 8, 9, 9, 9], 9)",
          "expected_output": "9"
        },
        {
          "input": "find_last_occurrence([2, 2, 1, 5, 6, 6, 6, 9, 9, 9], 6)",
          "expected_output": "6"
        }
      ],
      "broken_test_cases": [
        {
          "input": "find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5)",
          "expected_output": "2"
        },
        {
          "input": "find_last_occurrence([2, 3, 5, 8, 6, 6, 8, 9, 9, 9], 9)",
          "expected_output": "8"
        },
        {
          "input": "find_last_occurrence([2, 2, 1, 5, 6, 6, 6, 9, 9, 9], 6)",
          "expected_output": "4"
        }
      ]
    },
    {
      "problem_id": "mbpp_964",
      "description": "Write a python function to check whether the length of the word is even or not.",
      "function_name": "word_len",
      "correct_solution": "def word_len(s): \r\n    s = s.split(' ')   \r\n    for word in s:    \r\n        if len(word)%2==0: \r\n            return True  \r\n        else:\r\n          return False",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "word_len('program')",
          "expected_output": "False"
        },
        {
          "input": "word_len('solution')",
          "expected_output": "True"
        },
        {
          "input": "word_len('data')",
          "expected_output": "True"
        }
      ],
      "broken_test_cases": [
        {
          "input": "word_len('program')",
          "expected_output": "True"
        },
        {
          "input": "word_len('solution')",
          "expected_output": "False"
        },
        {
          "input": "word_len('data')",
          "expected_output": "False"
        }
      ]
    },
    {
      "problem_id": "mbpp_325",
      "description": "Write a python function to find the minimum number of squares whose sum is equal to a given number.",
      "function_name": "get_Min_Squares",
      "correct_solution": "def get_Min_Squares(n):\r\n    if n <= 3:\r\n        return n;\r\n    res = n \r\n    for x in range(1,n + 1):\r\n        temp = x * x;\r\n        if temp > n:\r\n            break\r\n        else:\r\n            res = min(res,1 + get_Min_Squares(n  - temp)) \r\n    return res;",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "get_Min_Squares(6)",
          "expected_output": "3"
        },
        {
          "input": "get_Min_Squares(2)",
          "expected_output": "2"
        },
        {
          "input": "get_Min_Squares(4)",
          "expected_output": "1"
        }
      ],
      "broken_test_cases": [
        {
          "input": "get_Min_Squares(6)",
          "expected_output": "4"
        },
        {
          "input": "get_Min_Squares(2)",
          "expected_output": "1"
        },
        {
          "input": "get_Min_Squares(4)",
          "expected_output": "2"
        }
      ]
    },
    {
      "problem_id": "mbpp_476",
      "description": "Write a python function to find the sum of the largest and smallest value in a given array.",
      "function_name": "big_sum",
      "correct_solution": "def big_sum(nums):\r\n      sum= max(nums)+min(nums)\r\n      return sum",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "big_sum([1, 2, 3])",
          "expected_output": "4"
        },
        {
          "input": "big_sum([-1, 2, 3, 4])",
          "expected_output": "3"
        },
        {
          "input": "big_sum([2, 3, 6])",
          "expected_output": "8"
        }
      ],
      "broken_test_cases": [
        {
          "input": "big_sum([1, 2, 3])",
          "expected_output": "5"
        },
        {
          "input": "big_sum([-1, 2, 3, 4])",
          "expected_output": "7"
        },
        {
          "input": "big_sum([2, 3, 6])",
          "expected_output": "7"
        }
      ]
    },
    {
      "problem_id": "mbpp_747",
      "description": "Write a function to find the longest common subsequence for the given three string sequence.",
      "function_name": "lcs_of_three",
      "correct_solution": "def lcs_of_three(X, Y, Z, m, n, o): \r\n\tL = [[[0 for i in range(o+1)] for j in range(n+1)] \r\n\t\tfor k in range(m+1)] \r\n\tfor i in range(m+1): \r\n\t\tfor j in range(n+1): \r\n\t\t\tfor k in range(o+1): \r\n\t\t\t\tif (i == 0 or j == 0 or k == 0): \r\n\t\t\t\t\tL[i][j][k] = 0\r\n\t\t\t\telif (X[i-1] == Y[j-1] and\r\n\t\t\t\t\tX[i-1] == Z[k-1]): \r\n\t\t\t\t\tL[i][j][k] = L[i-1][j-1][k-1] + 1\r\n\t\t\t\telse: \r\n\t\t\t\t\tL[i][j][k] = max(max(L[i-1][j][k], \r\n\t\t\t\t\tL[i][j-1][k]), \r\n\t\t\t\t\t\t\t\t\tL[i][j][k-1]) \r\n\treturn L[m][n][o]",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "lcs_of_three('AGGT12', '12TXAYB', '12XBA', 6, 7, 5)",
          "expected_output": "2"
        },
        {
          "input": "lcs_of_three('Reels', 'Reelsfor', 'ReelsforReels', 5, 8, 13)",
          "expected_output": "5"
        },
        {
          "input": "lcs_of_three('abcd1e2', 'bc12ea', 'bd1ea', 7, 6, 5)",
          "expected_output": "3"
        }
      ],
      "broken_test_cases": [
        {
          "input": "lcs_of_three('AGGT12', '12TXAYB', '12XBA', 6, 7, 5)",
          "expected_output": "3"
        },
        {
          "input": "lcs_of_three('Reels', 'Reelsfor', 'ReelsforReels', 5, 8, 13)",
          "expected_output": "4"
        },
        {
          "input": "lcs_of_three('abcd1e2', 'bc12ea', 'bd1ea', 7, 6, 5)",
          "expected_output": "2"
        }
      ]
    },
    {
      "problem_id": "mbpp_368",
      "description": "Write a function to repeat the given tuple n times.",
      "function_name": "repeat_tuples",
      "correct_solution": "def repeat_tuples(test_tup, N):\r\n  res = ((test_tup, ) * N)\r\n  return (res) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "repeat_tuples((1, 3), 4)",
          "expected_output": "((1, 3), (1, 3), (1, 3), (1, 3))"
        },
        {
          "input": "repeat_tuples((1, 2), 3)",
          "expected_output": "((1, 2), (1, 2), (1, 2))"
        },
        {
          "input": "repeat_tuples((3, 4), 5)",
          "expected_output": "((3, 4), (3, 4), (3, 4), (3, 4), (3, 4))"
        }
      ],
      "broken_test_cases": [
        {
          "input": "repeat_tuples((1, 3), 4)",
          "expected_output": "((1, 3, 1, 3), (1, 3, 1, 3), (1, 3, 1, 3), (1, 3, 1, 3))"
        },
        {
          "input": "repeat_tuples((1, 2), 3)",
          "expected_output": "((1, 2, 1, 2), (1, 2, 1, 2), (1, 2, 1, 2))"
        },
        {
          "input": "repeat_tuples((3, 4), 5)",
          "expected_output": "((3, 4, 3, 4), (3, 4, 3, 4), (3, 4, 3, 4), (3, 4, 3, 4), (3, 4, 3, 4))"
        }
      ]
    },
    {
      "problem_id": "mbpp_528",
      "description": "Write a function to find the list of lists with minimum length.",
      "function_name": "min_length",
      "correct_solution": "def min_length(list1):\r\n   min_length = min(len(x) for x in  list1 )  \r\n   min_list = min((x) for x in   list1)\r\n   return(min_length, min_list)     ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "min_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])",
          "expected_output": "(1, [0])"
        },
        {
          "input": "min_length([[1], [5, 7], [10, 12, 14, 15]])",
          "expected_output": "(1, [1])"
        },
        {
          "input": "min_length([[5], [15, 20, 25]])",
          "expected_output": "(1, [5])"
        }
      ],
      "broken_test_cases": [
        {
          "input": "min_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])",
          "expected_output": "(2, [1, 3])"
        },
        {
          "input": "min_length([[1], [5, 7], [10, 12, 14, 15]])",
          "expected_output": "(2, [1])"
        },
        {
          "input": "min_length([[5], [15, 20, 25]])",
          "expected_output": "(2, [5, 15, 20, 25])"
        }
      ]
    },
    {
      "problem_id": "mbpp_103",
      "description": "Write a function to find eulerian number a(n, m).",
      "function_name": "eulerian_num",
      "correct_solution": "def eulerian_num(n, m): \r\n\tif (m >= n or n == 0): \r\n\t\treturn 0 \r\n\tif (m == 0): \r\n\t\treturn 1 \r\n\treturn ((n - m) * eulerian_num(n - 1, m - 1) +(m + 1) * eulerian_num(n - 1, m))",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "eulerian_num(3, 1)",
          "expected_output": "4"
        },
        {
          "input": "eulerian_num(4, 1)",
          "expected_output": "11"
        },
        {
          "input": "eulerian_num(5, 3)",
          "expected_output": "26"
        }
      ],
      "broken_test_cases": [
        {
          "input": "eulerian_num(3, 1)",
          "expected_output": "5"
        },
        {
          "input": "eulerian_num(4, 1)",
          "expected_output": "10"
        },
        {
          "input": "eulerian_num(5, 3)",
          "expected_output": "25"
        }
      ]
    },
    {
      "problem_id": "mbpp_438",
      "description": "Write a function to count bidirectional tuple pairs.",
      "function_name": "count_bidirectional",
      "correct_solution": "def count_bidirectional(test_list):\r\n  res = 0\r\n  for idx in range(0, len(test_list)):\r\n    for iidx in range(idx + 1, len(test_list)):\r\n      if test_list[iidx][0] == test_list[idx][1] and test_list[idx][1] == test_list[iidx][0]:\r\n        res += 1\r\n  return (str(res)) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)])",
          "expected_output": "3"
        },
        {
          "input": "count_bidirectional([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)])",
          "expected_output": "2"
        },
        {
          "input": "count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)])",
          "expected_output": "4"
        }
      ],
      "broken_test_cases": [
        {
          "input": "count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)])",
          "expected_output": "4"
        },
        {
          "input": "count_bidirectional([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)])",
          "expected_output": "3"
        },
        {
          "input": "count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)])",
          "expected_output": "3"
        }
      ]
    },
    {
      "problem_id": "mbpp_574",
      "description": "Write a function to find the surface area of a cylinder.",
      "function_name": "surfacearea_cylinder",
      "correct_solution": "def surfacearea_cylinder(r,h):\r\n  surfacearea=((2*3.1415*r*r) +(2*3.1415*r*h))\r\n  return surfacearea",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "surfacearea_cylinder(10, 5)",
          "expected_output": "942.45"
        },
        {
          "input": "surfacearea_cylinder(4, 5)",
          "expected_output": "226.18800000000002"
        },
        {
          "input": "surfacearea_cylinder(4, 10)",
          "expected_output": "351.848"
        }
      ],
      "broken_test_cases": [
        {
          "input": "surfacearea_cylinder(10, 5)",
          "expected_output": "1000.0"
        },
        {
          "input": "surfacearea_cylinder(4, 5)",
          "expected_output": "100.0"
        },
        {
          "input": "surfacearea_cylinder(4, 10)",
          "expected_output": "351.8479"
        }
      ]
    },
    {
      "problem_id": "mbpp_231",
      "description": "Write a function to find the maximum sum in the given right triangle of numbers.",
      "function_name": "max_sum",
      "correct_solution": "def max_sum(tri, n): \r\n\tif n > 1: \r\n\t\ttri[1][1] = tri[1][1]+tri[0][0] \r\n\t\ttri[1][0] = tri[1][0]+tri[0][0] \r\n\tfor i in range(2, n): \r\n\t\ttri[i][0] = tri[i][0] + tri[i-1][0] \r\n\t\ttri[i][i] = tri[i][i] + tri[i-1][i-1] \r\n\t\tfor j in range(1, i): \r\n\t\t\tif tri[i][j]+tri[i-1][j-1] >= tri[i][j]+tri[i-1][j]: \r\n\t\t\t\ttri[i][j] = tri[i][j] + tri[i-1][j-1] \r\n\t\t\telse: \r\n\t\t\t\ttri[i][j] = tri[i][j]+tri[i-1][j] \r\n\treturn (max(tri[n-1]))",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "max_sum([[1], [2, 1], [3, 3, 2]], 3)",
          "expected_output": "6"
        },
        {
          "input": "max_sum([[1], [1, 2], [4, 1, 12]], 3)",
          "expected_output": "15"
        },
        {
          "input": "max_sum([[2], [3, 2], [13, 23, 12]], 3)",
          "expected_output": "28"
        }
      ],
      "broken_test_cases": [
        {
          "input": "max_sum([[1], [2, 1], [3, 3, 2]], 3)",
          "expected_output": "7"
        },
        {
          "input": "max_sum([[1], [1, 2], [4, 1, 12]], 3)",
          "expected_output": "14"
        },
        {
          "input": "max_sum([[2], [3, 2], [13, 23, 12]], 3)",
          "expected_output": "27"
        }
      ]
    },
    {
      "problem_id": "mbpp_607",
      "description": "Write a function to search a literals string in a string and also find the location within the original string where the pattern occurs by using regex.",
      "function_name": "find_literals",
      "correct_solution": "import re\r\npattern = 'fox'\r\ntext = 'The quick brown fox jumps over the lazy dog.'\r\ndef find_literals(text, pattern):\r\n  match = re.search(pattern, text)\r\n  s = match.start()\r\n  e = match.end()\r\n  return (match.re.pattern, s, e)",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "find_literals('The quick brown fox jumps over the lazy dog.', 'fox')",
          "expected_output": "('fox', 16, 19)"
        },
        {
          "input": "find_literals('Its been a very crazy procedure right', 'crazy')",
          "expected_output": "('crazy', 16, 21)"
        },
        {
          "input": "find_literals('Hardest choices required strongest will', 'will')",
          "expected_output": "('will', 35, 39)"
        }
      ],
      "broken_test_cases": [
        {
          "input": "find_literals('The quick brown fox jumps over the lazy dog.', 'fox')",
          "expected_output": "('fox', 17, 20)"
        },
        {
          "input": "find_literals('Its been a very crazy procedure right', 'crazy')",
          "expected_output": "('crazy', 15, 20)"
        },
        {
          "input": "find_literals('Hardest choices required strongest will', 'will')",
          "expected_output": "('will', 35, 38)"
        }
      ]
    },
    {
      "problem_id": "mbpp_790",
      "description": "Write a python function to check whether every even index contains even numbers of a given list.",
      "function_name": "even_position",
      "correct_solution": "def even_position(nums):\r\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "even_position([3, 2, 1])",
          "expected_output": "False"
        },
        {
          "input": "even_position([1, 2, 3])",
          "expected_output": "False"
        },
        {
          "input": "even_position([2, 1, 4])",
          "expected_output": "True"
        }
      ],
      "broken_test_cases": [
        {
          "input": "even_position([3, 2, 1])",
          "expected_output": "True"
        },
        {
          "input": "even_position([1, 2, 3])",
          "expected_output": "True"
        },
        {
          "input": "even_position([2, 1, 4])",
          "expected_output": "False"
        }
      ]
    },
    {
      "problem_id": "mbpp_337",
      "description": "Write a function that matches a word at the end of a string, with optional punctuation.",
      "function_name": "text_match_word",
      "correct_solution": "import re\r\ndef text_match_word(text):\r\n        patterns = '\\w+\\S*$'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return 'Not matched!'",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "text_match_word('python.')",
          "expected_output": "Found a match!"
        },
        {
          "input": "text_match_word('python.')",
          "expected_output": "Found a match!"
        },
        {
          "input": "text_match_word('  lang  .')",
          "expected_output": "Not matched!"
        }
      ],
      "broken_test_cases": [
        {
          "input": "text_match_word('python.')",
          "expected_output": "Not matched!"
        },
        {
          "input": "text_match_word('python.')",
          "expected_output": "Not matched!"
        },
        {
          "input": "text_match_word('  lang  .')",
          "expected_output": "Found a match!"
        }
      ]
    },
    {
      "problem_id": "mbpp_899",
      "description": "Write a python function to check whether an array can be sorted or not by picking only the corner elements.",
      "function_name": "check",
      "correct_solution": "def check(arr,n): \r\n    g = 0 \r\n    for i in range(1,n): \r\n        if (arr[i] - arr[i - 1] > 0 and g == 1): \r\n            return False\r\n        if (arr[i] - arr[i] < 0): \r\n            g = 1\r\n    return True",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "check([3, 2, 1, 2, 3, 4], 6)",
          "expected_output": "True"
        },
        {
          "input": "check([2, 1, 4, 5, 1], 5)",
          "expected_output": "True"
        },
        {
          "input": "check([1, 2, 2, 1, 2, 3], 6)",
          "expected_output": "True"
        }
      ],
      "broken_test_cases": [
        {
          "input": "check([3, 2, 1, 2, 3, 4], 6)",
          "expected_output": "False"
        },
        {
          "input": "check([2, 1, 4, 5, 1], 5)",
          "expected_output": "False"
        },
        {
          "input": "check([1, 2, 2, 1, 2, 3], 6)",
          "expected_output": "False"
        }
      ]
    },
    {
      "problem_id": "mbpp_721",
      "description": "Write a function to find a path with the maximum average over all existing paths for the given square matrix of size n*n.",
      "function_name": "maxAverageOfPath",
      "correct_solution": "M = 100\r\ndef maxAverageOfPath(cost, N): \r\n\tdp = [[0 for i in range(N + 1)] for j in range(N + 1)] \r\n\tdp[0][0] = cost[0][0] \r\n\tfor i in range(1, N): \r\n\t\tdp[i][0] = dp[i - 1][0] + cost[i][0] \r\n\tfor j in range(1, N): \r\n\t\tdp[0][j] = dp[0][j - 1] + cost[0][j] \r\n\tfor i in range(1, N): \r\n\t\tfor j in range(1, N): \r\n\t\t\tdp[i][j] = max(dp[i - 1][j], \r\n\t\t\t\t\t\tdp[i][j - 1]) + cost[i][j] \r\n\treturn dp[N - 1][N - 1] / (2 * N - 1)",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]], 3)",
          "expected_output": "5.2"
        },
        {
          "input": "maxAverageOfPath([[2, 3, 4], [7, 6, 5], [8, 4, 10]], 3)",
          "expected_output": "6.2"
        },
        {
          "input": "maxAverageOfPath([[3, 4, 5], [8, 7, 6], [9, 5, 11]], 3)",
          "expected_output": "7.2"
        }
      ],
      "broken_test_cases": [
        {
          "input": "maxAverageOfPath([[1, 2, 3], [6, 5, 4], [7, 3, 9]], 3)",
          "expected_output": "5.3"
        },
        {
          "input": "maxAverageOfPath([[2, 3, 4], [7, 6, 5], [8, 4, 10]], 3)",
          "expected_output": "6.3"
        },
        {
          "input": "maxAverageOfPath([[3, 4, 5], [8, 7, 6], [9, 5, 11]], 3)",
          "expected_output": "7.3"
        }
      ]
    },
    {
      "problem_id": "mbpp_511",
      "description": "Write a python function to find minimum sum of factors of a given number.",
      "function_name": "find_Min_Sum",
      "correct_solution": "def find_Min_Sum(num): \r\n    sum = 0\r\n    i = 2\r\n    while(i * i <= num): \r\n        while(num % i == 0): \r\n            sum += i \r\n            num /= i \r\n        i += 1\r\n    sum += num \r\n    return sum",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "find_Min_Sum(12)",
          "expected_output": "7"
        },
        {
          "input": "find_Min_Sum(105)",
          "expected_output": "15"
        },
        {
          "input": "find_Min_Sum(2)",
          "expected_output": "2"
        }
      ],
      "broken_test_cases": [
        {
          "input": "find_Min_Sum(12)",
          "expected_output": "8"
        },
        {
          "input": "find_Min_Sum(105)",
          "expected_output": "16"
        },
        {
          "input": "find_Min_Sum(2)",
          "expected_output": "3"
        }
      ]
    },
    {
      "problem_id": "mbpp_223",
      "description": "Write a function to check for majority element in the given sorted array.",
      "function_name": "is_majority",
      "correct_solution": "def is_majority(arr, n, x):\r\n\ti = binary_search(arr, 0, n-1, x)\r\n\tif i == -1:\r\n\t\treturn False\r\n\tif ((i + n//2) <= (n -1)) and arr[i + n//2] == x:\r\n\t\treturn True\r\n\telse:\r\n\t\treturn False\r\ndef binary_search(arr, low, high, x):\r\n\tif high >= low:\r\n\t\tmid = (low + high)//2 \r\n\t\tif (mid == 0 or x > arr[mid-1]) and (arr[mid] == x):\r\n\t\t\treturn mid\r\n\t\telif x > arr[mid]:\r\n\t\t\treturn binary_search(arr, (mid + 1), high, x)\r\n\t\telse:\r\n\t\t\treturn binary_search(arr, low, (mid -1), x)\r\n\treturn -1",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3)",
          "expected_output": "True"
        },
        {
          "input": "is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4)",
          "expected_output": "False"
        },
        {
          "input": "is_majority([1, 1, 1, 2, 2], 5, 1)",
          "expected_output": "True"
        }
      ],
      "broken_test_cases": [
        {
          "input": "is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3)",
          "expected_output": "False"
        },
        {
          "input": "is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4)",
          "expected_output": "True"
        },
        {
          "input": "is_majority([1, 1, 1, 2, 2], 5, 1)",
          "expected_output": "False"
        }
      ]
    },
    {
      "problem_id": "mbpp_110",
      "description": "Write a function to extract the ranges that are missing from the given list with the given start range and end range values.",
      "function_name": "extract_missing",
      "correct_solution": "def extract_missing(test_list, strt_val, stop_val):\r\n  res = []\r\n  for sub in test_list:\r\n    if sub[0] > strt_val:\r\n      res.append((strt_val, sub[0]))\r\n      strt_val = sub[1]\r\n    if strt_val < stop_val:\r\n      res.append((strt_val, stop_val))\r\n  return (res) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100)",
          "expected_output": "[(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]"
        },
        {
          "input": "extract_missing([(7, 2), (15, 19), (38, 50)], 5, 60)",
          "expected_output": "[(5, 7), (2, 60), (2, 15), (19, 60), (19, 38), (50, 60)]"
        },
        {
          "input": "extract_missing([(7, 2), (15, 19), (38, 50)], 1, 52)",
          "expected_output": "[(1, 7), (2, 52), (2, 15), (19, 52), (19, 38), (50, 52)]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100)",
          "expected_output": "[(2, 6), (9, 100), (9, 15), (34, 100), (34, 48)]"
        },
        {
          "input": "extract_missing([(7, 2), (15, 19), (38, 50)], 5, 60)",
          "expected_output": "[(5, 7), (2, 60), (2, 15), (19, 60), (19, 38), (50, 60), (50, 60)]"
        },
        {
          "input": "extract_missing([(7, 2), (15, 19), (38, 50)], 1, 52)",
          "expected_output": "[(1, 7), (2, 52), (2, 15), (19, 52), (19, 38), (50, 52), (52, 52)]"
        }
      ]
    },
    {
      "problem_id": "mbpp_119",
      "description": "Write a python function to find the element that appears only once in a sorted array.",
      "function_name": "search",
      "correct_solution": "def search(arr,n) :\r\n    XOR = 0\r\n    for i in range(n) :\r\n        XOR = XOR ^ arr[i]\r\n    return (XOR)",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "search([1, 1, 2, 2, 3], 5)",
          "expected_output": "3"
        },
        {
          "input": "search([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8], 11)",
          "expected_output": "8"
        },
        {
          "input": "search([1, 2, 2, 3, 3, 4, 4], 7)",
          "expected_output": "1"
        }
      ],
      "broken_test_cases": [
        {
          "input": "search([1, 1, 2, 2, 3], 5)",
          "expected_output": "4"
        },
        {
          "input": "search([1, 1, 3, 3, 4, 4, 5, 5, 7, 7, 8], 11)",
          "expected_output": "9"
        },
        {
          "input": "search([1, 2, 2, 3, 3, 4, 4], 7)",
          "expected_output": "2"
        }
      ]
    },
    {
      "problem_id": "mbpp_935",
      "description": "Write a function to calculate the sum of series 1\u00b2+2\u00b2+3\u00b2+\u2026.+n\u00b2.",
      "function_name": "series_sum",
      "correct_solution": "def series_sum(number):\r\n total = 0\r\n total = (number * (number + 1) * (2 * number + 1)) / 6\r\n return total",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "series_sum(6)",
          "expected_output": "91"
        },
        {
          "input": "series_sum(7)",
          "expected_output": "140"
        },
        {
          "input": "series_sum(12)",
          "expected_output": "650"
        }
      ],
      "broken_test_cases": [
        {
          "input": "series_sum(6)",
          "expected_output": "92"
        },
        {
          "input": "series_sum(7)",
          "expected_output": "150"
        },
        {
          "input": "series_sum(12)",
          "expected_output": "651"
        }
      ]
    },
    {
      "problem_id": "mbpp_151",
      "description": "Write a python function to check whether the given number is co-prime or not.",
      "function_name": "is_coprime",
      "correct_solution": "def gcd(p,q):\r\n    while q != 0:\r\n        p, q = q,p%q\r\n    return p\r\ndef is_coprime(x,y):\r\n    return gcd(x,y) == 1",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "is_coprime(17, 13)",
          "expected_output": "True"
        },
        {
          "input": "is_coprime(15, 21)",
          "expected_output": "False"
        },
        {
          "input": "is_coprime(25, 45)",
          "expected_output": "False"
        }
      ],
      "broken_test_cases": [
        {
          "input": "is_coprime(17, 13)",
          "expected_output": "False"
        },
        {
          "input": "is_coprime(15, 21)",
          "expected_output": "True"
        },
        {
          "input": "is_coprime(25, 45)",
          "expected_output": "True"
        }
      ]
    },
    {
      "problem_id": "mbpp_195",
      "description": "Write a python function to find the first position of an element in a sorted array.",
      "function_name": "first",
      "correct_solution": "def first(arr,x,n): \r\n    low = 0\r\n    high = n - 1\r\n    res = -1  \r\n    while (low <= high):\r\n        mid = (low + high) // 2 \r\n        if arr[mid] > x:\r\n            high = mid - 1\r\n        elif arr[mid] < x:\r\n            low = mid + 1\r\n        else:\r\n            res = mid\r\n            high = mid - 1\r\n    return res",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "first([1, 2, 3, 4, 5, 6, 6], 6, 6)",
          "expected_output": "5"
        },
        {
          "input": "first([1, 2, 2, 2, 3, 2, 2, 4, 2], 2, 9)",
          "expected_output": "1"
        },
        {
          "input": "first([1, 2, 3], 1, 3)",
          "expected_output": "0"
        }
      ],
      "broken_test_cases": [
        {
          "input": "first([1, 2, 3, 4, 5, 6, 6], 6, 6)",
          "expected_output": "0"
        },
        {
          "input": "first([1, 2, 2, 2, 3, 2, 2, 4, 2], 2, 9)",
          "expected_output": "3"
        },
        {
          "input": "first([1, 2, 3], 1, 3)",
          "expected_output": "1"
        }
      ]
    },
    {
      "problem_id": "mbpp_729",
      "description": "Write a function to add two lists using map and lambda function.",
      "function_name": "add_list",
      "correct_solution": "def add_list(nums1,nums2):\r\n  result = map(lambda x, y: x + y, nums1, nums2)\r\n  return list(result)",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "add_list([1, 2, 3], [4, 5, 6])",
          "expected_output": "[5, 7, 9]"
        },
        {
          "input": "add_list([1, 2], [3, 4])",
          "expected_output": "[4, 6]"
        },
        {
          "input": "add_list([10, 20], [50, 70])",
          "expected_output": "[60, 90]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "add_list([1, 2, 3], [4, 5, 6])",
          "expected_output": "[5, 7, 10]"
        },
        {
          "input": "add_list([1, 2], [3, 4])",
          "expected_output": "[5, 8]"
        },
        {
          "input": "add_list([10, 20], [50, 70])",
          "expected_output": "[61, 91]"
        }
      ]
    },
    {
      "problem_id": "mbpp_730",
      "description": "Write a function to remove consecutive duplicates of a given list.",
      "function_name": "consecutive_duplicates",
      "correct_solution": "from itertools import groupby\r\ndef consecutive_duplicates(nums):\r\n    return [key for key, group in groupby(nums)] ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])",
          "expected_output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4]"
        },
        {
          "input": "consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])",
          "expected_output": "[10, 15, 19, 18, 17, 26, 17, 18, 10]"
        },
        {
          "input": "consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd'])",
          "expected_output": "['a', 'b', 'c', 'd']"
        }
      ],
      "broken_test_cases": [
        {
          "input": "consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])",
          "expected_output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 4, 4]"
        },
        {
          "input": "consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])",
          "expected_output": "[10, 15, 19, 18, 17, 26, 17, 18]"
        },
        {
          "input": "consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd'])",
          "expected_output": "['a', 'b', 'c', 'd', 'd']"
        }
      ]
    },
    {
      "problem_id": "mbpp_906",
      "description": "Write a function to extract year, month and date from a url by using regex.",
      "function_name": "extract_date",
      "correct_solution": "import re\r\ndef extract_date(url):\r\n        return re.findall(r'/(\\d{4})/(\\d{1,2})/(\\d{1,2})/', url)",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "extract_date('https://www.washingtonpost.com/news/football-insider/wp/2016/09/02/odell-beckhams-fame-rests-on-one-stupid-little-ball-josh-norman-tells-author/')",
          "expected_output": "[('2016', '09', '02')]"
        },
        {
          "input": "extract_date('https://www.indiatoday.in/movies/celebrities/story/wp/2020/11/03/odeof-sushant-singh-rajput-s-death-his-brother-in-law-shares-advice-for-fans-1749646/')",
          "expected_output": "[('2020', '11', '03')]"
        },
        {
          "input": "extract_date('https://economictimes.indiatimes.com/news/economy/2020/12/29/finance/pension-assets-under-pfrda-touch-rs-5-32-lakh-crore/articleshow/79736619.cms')",
          "expected_output": "[('2020', '12', '29')]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "extract_date('https://www.washingtonpost.com/news/football-insider/wp/2016/09/02/odell-beckhams-fame-rests-on-one-stupid-little-ball-josh-norman-tells-author/')",
          "expected_output": "[('2017', '10', '03')]"
        },
        {
          "input": "extract_date('https://www.indiatoday.in/movies/celebrities/story/wp/2020/11/03/odeof-sushant-singh-rajput-s-death-his-brother-in-law-shares-advice-for-fans-1749646/')",
          "expected_output": "[('2020', '11', '04')]"
        },
        {
          "input": "extract_date('https://economictimes.indiatimes.com/news/economy/2020/12/29/finance/pension-assets-under-pfrda-touch-rs-5-32-lakh-crore/articleshow/79736619.cms')",
          "expected_output": "[('2019', '12', '29')]"
        }
      ]
    },
    {
      "problem_id": "mbpp_827",
      "description": "Write a function to sum a specific column of a list in a given list of lists.",
      "function_name": "sum_column",
      "correct_solution": "def sum_column(list1, C):\r\n    result = sum(row[C] for row in list1)\r\n    return result",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "sum_column([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]], 0)",
          "expected_output": "12"
        },
        {
          "input": "sum_column([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]], 1)",
          "expected_output": "15"
        },
        {
          "input": "sum_column([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]], 3)",
          "expected_output": "9"
        }
      ],
      "broken_test_cases": [
        {
          "input": "sum_column([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]], 0)",
          "expected_output": "11"
        },
        {
          "input": "sum_column([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]], 1)",
          "expected_output": "14"
        },
        {
          "input": "sum_column([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]], 3)",
          "expected_output": "10"
        }
      ]
    },
    {
      "problem_id": "mbpp_411",
      "description": "Write a function to convert the given snake case string to camel case string by using regex.",
      "function_name": "snake_to_camel",
      "correct_solution": "import re\r\ndef snake_to_camel(word):\r\n  return ''.join(x.capitalize() or '_' for x in word.split('_'))",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "snake_to_camel('android_tv')",
          "expected_output": "AndroidTv"
        },
        {
          "input": "snake_to_camel('google_pixel')",
          "expected_output": "GooglePixel"
        },
        {
          "input": "snake_to_camel('apple_watch')",
          "expected_output": "AppleWatch"
        }
      ],
      "broken_test_cases": [
        {
          "input": "snake_to_camel('android_tv')",
          "expected_output": "android_Tv"
        },
        {
          "input": "snake_to_camel('google_pixel')",
          "expected_output": "GooglePix"
        },
        {
          "input": "snake_to_camel('apple_watch')",
          "expected_output": "appleWatch"
        }
      ]
    },
    {
      "problem_id": "mbpp_837",
      "description": "Write a python function to find the cube sum of first n odd natural numbers.",
      "function_name": "cube_Sum",
      "correct_solution": "def cube_Sum(n): \r\n    sum = 0   \r\n    for i in range(0,n) : \r\n        sum += (2*i+1)*(2*i+1)*(2*i+1) \r\n    return sum",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "cube_Sum(2)",
          "expected_output": "28"
        },
        {
          "input": "cube_Sum(3)",
          "expected_output": "153"
        },
        {
          "input": "cube_Sum(4)",
          "expected_output": "496"
        }
      ],
      "broken_test_cases": [
        {
          "input": "cube_Sum(2)",
          "expected_output": "25"
        },
        {
          "input": "cube_Sum(3)",
          "expected_output": "154"
        },
        {
          "input": "cube_Sum(4)",
          "expected_output": "495"
        }
      ]
    },
    {
      "problem_id": "mbpp_569",
      "description": "Write a function to sort each sublist of strings in a given list of lists.",
      "function_name": "sort_sublists",
      "correct_solution": "def sort_sublists(list1):\r\n    result = list(map(sorted,list1)) \r\n    return result",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])",
          "expected_output": "[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]"
        },
        {
          "input": "sort_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])",
          "expected_output": "[['green', 'orange'], ['black'], ['green', 'orange'], ['white']]"
        },
        {
          "input": "sort_sublists([['a', 'b'], ['d', 'c'], ['g', 'h'], ['f', 'e']])",
          "expected_output": "[['a', 'b'], ['c', 'd'], ['g', 'h'], ['e', 'f']]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "sort_sublists([['green', 'orange'], ['black', 'white'], ['white', 'black', 'orange']])",
          "expected_output": "[['green', 'orange'], ['white', 'black'], ['white', 'black', 'orange']]"
        },
        {
          "input": "sort_sublists([['green', 'orange'], ['black'], ['green', 'orange'], ['white']])",
          "expected_output": "[['orange', 'green'], ['black'], ['orange', 'green'], ['white']]"
        },
        {
          "input": "sort_sublists([['a', 'b'], ['d', 'c'], ['g', 'h'], ['f', 'e']])",
          "expected_output": "[['a', 'b'], ['d', 'c'], ['e', 'f'], ['g', 'h']]"
        }
      ]
    },
    {
      "problem_id": "mbpp_723",
      "description": "Write a function to count the same pair in two given lists using map function.",
      "function_name": "count_same_pair",
      "correct_solution": "from operator import eq\r\ndef count_same_pair(nums1, nums2):\r\n    result = sum(map(eq, nums1, nums2))\r\n    return result",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "count_same_pair([1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 9])",
          "expected_output": "4"
        },
        {
          "input": "count_same_pair([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])",
          "expected_output": "11"
        },
        {
          "input": "count_same_pair([2, 4, -6, -9, 11, -12, 14, -5, 17], [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])",
          "expected_output": "1"
        }
      ],
      "broken_test_cases": [
        {
          "input": "count_same_pair([1, 2, 3, 4, 5, 6, 7, 8], [2, 2, 3, 1, 2, 6, 7, 9])",
          "expected_output": "5"
        },
        {
          "input": "count_same_pair([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8], [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])",
          "expected_output": "10"
        },
        {
          "input": "count_same_pair([2, 4, -6, -9, 11, -12, 14, -5, 17], [2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])",
          "expected_output": "2"
        }
      ]
    },
    {
      "problem_id": "mbpp_252",
      "description": "Write a python function to convert complex numbers to polar coordinates.",
      "function_name": "convert",
      "correct_solution": "import cmath  \r\ndef convert(numbers):    \r\n  num = cmath.polar(numbers)  \r\n  return (num) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "convert(1)",
          "expected_output": "(1.0, 0.0)"
        },
        {
          "input": "convert(4)",
          "expected_output": "(4.0, 0.0)"
        },
        {
          "input": "convert(5)",
          "expected_output": "(5.0, 0.0)"
        }
      ],
      "broken_test_cases": [
        {
          "input": "convert(1)",
          "expected_output": "(2.0, 0.0)"
        },
        {
          "input": "convert(4)",
          "expected_output": "(2.0, 0.0)"
        },
        {
          "input": "convert(5)",
          "expected_output": "(10.0, 0.0)"
        }
      ]
    },
    {
      "problem_id": "mbpp_227",
      "description": "Write a function to find minimum of three numbers.",
      "function_name": "min_of_three",
      "correct_solution": "def min_of_three(a,b,c): \r\n      if (a <= b) and (a <= c): \r\n        smallest = a \r\n      elif (b <= a) and (b <= c): \r\n        smallest = b \r\n      else: \r\n        smallest = c \r\n      return smallest ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "min_of_three(10, 20, 0)",
          "expected_output": "0"
        },
        {
          "input": "min_of_three(19, 15, 18)",
          "expected_output": "15"
        },
        {
          "input": "min_of_three(-10, -20, -30)",
          "expected_output": "-30"
        }
      ],
      "broken_test_cases": [
        {
          "input": "min_of_three(10, 20, 0)",
          "expected_output": "10"
        },
        {
          "input": "min_of_three(19, 15, 18)",
          "expected_output": "19"
        },
        {
          "input": "min_of_three(-10, -20, -30)",
          "expected_output": "-20"
        }
      ]
    },
    {
      "problem_id": "mbpp_148",
      "description": "Write a function to divide a number into two parts such that the sum of digits is maximum.",
      "function_name": "sum_digits_twoparts",
      "correct_solution": "def sum_digits_single(x) : \r\n    ans = 0\r\n    while x : \r\n        ans += x % 10\r\n        x //= 10  \r\n    return ans \r\ndef closest(x) : \r\n    ans = 0\r\n    while (ans * 10 + 9 <= x) : \r\n        ans = ans * 10 + 9  \r\n    return ans   \r\ndef sum_digits_twoparts(N) : \r\n    A = closest(N)  \r\n    return sum_digits_single(A) + sum_digits_single(N - A) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "sum_digits_twoparts(35)",
          "expected_output": "17"
        },
        {
          "input": "sum_digits_twoparts(7)",
          "expected_output": "7"
        },
        {
          "input": "sum_digits_twoparts(100)",
          "expected_output": "19"
        }
      ],
      "broken_test_cases": [
        {
          "input": "sum_digits_twoparts(35)",
          "expected_output": "16"
        },
        {
          "input": "sum_digits_twoparts(7)",
          "expected_output": "6"
        },
        {
          "input": "sum_digits_twoparts(100)",
          "expected_output": "18"
        }
      ]
    },
    {
      "problem_id": "mbpp_835",
      "description": "Write a python function to find the slope of a line.",
      "function_name": "slope",
      "correct_solution": "def slope(x1,y1,x2,y2): \r\n    return (float)(y2-y1)/(x2-x1)  ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "slope(4, 2, 2, 5)",
          "expected_output": "-1.5"
        },
        {
          "input": "slope(2, 4, 4, 6)",
          "expected_output": "1"
        },
        {
          "input": "slope(1, 2, 4, 2)",
          "expected_output": "0"
        }
      ],
      "broken_test_cases": [
        {
          "input": "slope(4, 2, 2, 5)",
          "expected_output": "1.5"
        },
        {
          "input": "slope(2, 4, 4, 6)",
          "expected_output": "2"
        },
        {
          "input": "slope(1, 2, 4, 2)",
          "expected_output": "1"
        }
      ]
    },
    {
      "problem_id": "mbpp_374",
      "description": "Write a function to print all permutations of a given string including duplicates.",
      "function_name": "permute_string",
      "correct_solution": "def permute_string(str):\r\n    if len(str) == 0:\r\n        return ['']\r\n    prev_list = permute_string(str[1:len(str)])\r\n    next_list = []\r\n    for i in range(0,len(prev_list)):\r\n        for j in range(0,len(str)):\r\n            new_str = prev_list[i][0:j]+str[0]+prev_list[i][j:len(str)-1]\r\n            if new_str not in next_list:\r\n                next_list.append(new_str)\r\n    return next_list",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "permute_string('ab')",
          "expected_output": "['ab', 'ba']"
        },
        {
          "input": "permute_string('abc')",
          "expected_output": "['abc', 'bac', 'bca', 'acb', 'cab', 'cba']"
        },
        {
          "input": "permute_string('abcd')",
          "expected_output": "['abcd', 'bacd', 'bcad', 'bcda', 'acbd', 'cabd', 'cbad', 'cbda', 'acdb', 'cadb', 'cdab', 'cdba', 'abdc', 'badc', 'bdac', 'bdca', 'adbc', 'dabc', 'dbac', 'dbca', 'adcb', 'dacb', 'dcab', 'dcba']"
        }
      ],
      "broken_test_cases": [
        {
          "input": "permute_string('ab')",
          "expected_output": "['ab', 'ba', 'aa']"
        },
        {
          "input": "permute_string('abc')",
          "expected_output": "['abc', 'bac', 'bca', 'acb', 'cab']"
        },
        {
          "input": "permute_string('abcd')",
          "expected_output": "['abcd', 'bacd', 'bcad', 'bcda', 'acbd', 'cabd', 'cbad', 'cbda', 'acdb', 'cadb', 'cdab', 'cdba', 'abdc', 'badc', 'bdac', 'bdca', 'adbc', 'dabc', 'dbac', 'dbca', 'adcb', 'dacb', 'dcab']"
        }
      ]
    },
    {
      "problem_id": "mbpp_246",
      "description": "Write a function for computing square roots using the babylonian method.",
      "function_name": "babylonian_squareroot",
      "correct_solution": "def babylonian_squareroot(number):\r\n    if(number == 0):\r\n        return 0;\r\n    g = number/2.0;\r\n    g2 = g + 1;\r\n    while(g != g2):\r\n        n = number/ g;\r\n        g2 = g;\r\n        g = (g + n)/2;\r\n    return g;",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "babylonian_squareroot(10)",
          "expected_output": "3.162277660168379"
        },
        {
          "input": "babylonian_squareroot(2)",
          "expected_output": "1.414213562373095"
        },
        {
          "input": "babylonian_squareroot(9)",
          "expected_output": "3.0"
        }
      ],
      "broken_test_cases": [
        {
          "input": "babylonian_squareroot(10)",
          "expected_output": "3.0"
        },
        {
          "input": "babylonian_squareroot(2)",
          "expected_output": "1.0"
        },
        {
          "input": "babylonian_squareroot(9)",
          "expected_output": "2.99999"
        }
      ]
    },
    {
      "problem_id": "mbpp_232",
      "description": "Write a function to get the n largest items from a dataset.",
      "function_name": "larg_nnum",
      "correct_solution": "import heapq\r\ndef larg_nnum(list1,n):\r\n largest=heapq.nlargest(n,list1)\r\n return largest",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 2)",
          "expected_output": "[100, 90]"
        },
        {
          "input": "larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 5)",
          "expected_output": "[100, 90, 80, 70, 60]"
        },
        {
          "input": "larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 3)",
          "expected_output": "[100, 90, 80]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 2)",
          "expected_output": "[100, 80]"
        },
        {
          "input": "larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 5)",
          "expected_output": "[100, 90, 80, 70, 50]"
        },
        {
          "input": "larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100], 3)",
          "expected_output": "[100, 90, 60]"
        }
      ]
    },
    {
      "problem_id": "mbpp_642",
      "description": "Write a function to remove similar rows from the given tuple matrix.",
      "function_name": "remove_similar_row",
      "correct_solution": "def remove_similar_row(test_list):\r\n  res = set(sorted([tuple(sorted(set(sub))) for sub in test_list]))\r\n  return (res) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "remove_similar_row([[(4, 5), (3, 2)], [(2, 2), (4, 6)], [(3, 2), (4, 5)]])",
          "expected_output": "{((2, 2), (4, 6)), ((3, 2), (4, 5))}"
        },
        {
          "input": "remove_similar_row([[(5, 6), (4, 3)], [(3, 3), (5, 7)], [(4, 3), (5, 6)]])",
          "expected_output": "{((4, 3), (5, 6)), ((3, 3), (5, 7))}"
        },
        {
          "input": "remove_similar_row([[(6, 7), (5, 4)], [(4, 4), (6, 8)], [(5, 4), (6, 7)]])",
          "expected_output": "{((4, 4), (6, 8)), ((5, 4), (6, 7))}"
        }
      ],
      "broken_test_cases": [
        {
          "input": "remove_similar_row([[(4, 5), (3, 2)], [(2, 2), (4, 6)], [(3, 2), (4, 5)]])",
          "expected_output": "{((2, 2), (4, 6)), ((3, 2), (4, 5)), ((4, 5), (3, 2))}"
        },
        {
          "input": "remove_similar_row([[(5, 6), (4, 3)], [(3, 3), (5, 7)], [(4, 3), (5, 6)]])",
          "expected_output": "{((4, 3), (5, 6)), ((3, 3), (5, 7)), ((5, 6), (4, 3))}"
        },
        {
          "input": "remove_similar_row([[(6, 7), (5, 4)], [(4, 4), (6, 8)], [(5, 4), (6, 7)]])",
          "expected_output": "{((4, 4), (5, 4), (6, 7), (6, 8))}"
        }
      ]
    },
    {
      "problem_id": "mbpp_108",
      "description": "Write a function to merge multiple sorted inputs into a single sorted iterator using heap queue algorithm.",
      "function_name": "merge_sorted_list",
      "correct_solution": "import heapq\r\ndef merge_sorted_list(num1,num2,num3):\r\n  num1=sorted(num1)\r\n  num2=sorted(num2)\r\n  num3=sorted(num3)\r\n  result = heapq.merge(num1,num2,num3)\r\n  return list(result)",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "merge_sorted_list([25, 24, 15, 4, 5, 29, 110], [19, 20, 11, 56, 25, 233, 154], [24, 26, 54, 48])",
          "expected_output": "[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]"
        },
        {
          "input": "merge_sorted_list([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12])",
          "expected_output": "[1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]"
        },
        {
          "input": "merge_sorted_list([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1], [25, 35, 22, 85, 14, 65, 75, 25, 58], [12, 74, 9, 50, 61, 41])",
          "expected_output": "[1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "merge_sorted_list([25, 24, 15, 4, 5, 29, 110], [19, 20, 11, 56, 25, 233, 154], [24, 26, 54, 48])",
          "expected_output": "[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 234]"
        },
        {
          "input": "merge_sorted_list([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12])",
          "expected_output": "[1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]"
        },
        {
          "input": "merge_sorted_list([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1], [25, 35, 22, 85, 14, 65, 75, 25, 58], [12, 74, 9, 50, 61, 41])",
          "expected_output": "[1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85, 90]"
        }
      ]
    },
    {
      "problem_id": "mbpp_260",
      "description": "Write a function to find the nth newman\u2013shanks\u2013williams prime number.",
      "function_name": "newman_prime",
      "correct_solution": "def newman_prime(n): \r\n\tif n == 0 or n == 1: \r\n\t\treturn 1\r\n\treturn 2 * newman_prime(n - 1) + newman_prime(n - 2)",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "newman_prime(3)",
          "expected_output": "7"
        },
        {
          "input": "newman_prime(4)",
          "expected_output": "17"
        },
        {
          "input": "newman_prime(5)",
          "expected_output": "41"
        }
      ],
      "broken_test_cases": [
        {
          "input": "newman_prime(3)",
          "expected_output": "6"
        },
        {
          "input": "newman_prime(4)",
          "expected_output": "15"
        },
        {
          "input": "newman_prime(5)",
          "expected_output": "43"
        }
      ]
    },
    {
      "problem_id": "mbpp_378",
      "description": "Write a python function to shift last element to first position in the given list.",
      "function_name": "move_first",
      "correct_solution": "def move_first(test_list):\r\n  test_list = test_list[-1:] + test_list[:-1]  \r\n  return test_list",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "move_first([1, 2, 3, 4])",
          "expected_output": "[4, 1, 2, 3]"
        },
        {
          "input": "move_first([0, 1, 2, 3])",
          "expected_output": "[3, 0, 1, 2]"
        },
        {
          "input": "move_first([9, 8, 7, 1])",
          "expected_output": "[1, 9, 8, 7]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "move_first([1, 2, 3, 4])",
          "expected_output": "[1, 2, 3, 4]"
        },
        {
          "input": "move_first([0, 1, 2, 3])",
          "expected_output": "[2, 3, 0, 1]"
        },
        {
          "input": "move_first([9, 8, 7, 1])",
          "expected_output": "[7, 9, 8, 1]"
        }
      ]
    },
    {
      "problem_id": "mbpp_763",
      "description": "Write a python function to find the minimum difference between any two elements in a given array.",
      "function_name": "find_Min_Diff",
      "correct_solution": "def find_Min_Diff(arr,n): \r\n    arr = sorted(arr) \r\n    diff = 10**20 \r\n    for i in range(n-1): \r\n        if arr[i+1] - arr[i] < diff: \r\n            diff = arr[i+1] - arr[i]  \r\n    return diff ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "find_Min_Diff((1, 5, 3, 19, 18, 25), 6)",
          "expected_output": "1"
        },
        {
          "input": "find_Min_Diff((4, 3, 2, 6), 4)",
          "expected_output": "1"
        },
        {
          "input": "find_Min_Diff((30, 5, 20, 9), 4)",
          "expected_output": "4"
        }
      ],
      "broken_test_cases": [
        {
          "input": "find_Min_Diff((1, 5, 3, 19, 18, 25), 6)",
          "expected_output": "2"
        },
        {
          "input": "find_Min_Diff((4, 3, 2, 6), 4)",
          "expected_output": "5"
        },
        {
          "input": "find_Min_Diff((30, 5, 20, 9), 4)",
          "expected_output": "10"
        }
      ]
    },
    {
      "problem_id": "mbpp_946",
      "description": "Write a function to find the most common elements and their counts of a specified text.",
      "function_name": "most_common_elem",
      "correct_solution": "from collections import Counter \r\ndef most_common_elem(s,a):\r\n  most_common_elem=Counter(s).most_common(a)\r\n  return most_common_elem",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "most_common_elem('lkseropewdssafsdfafkpwe', 3)",
          "expected_output": "[('s', 4), ('e', 3), ('f', 3)]"
        },
        {
          "input": "most_common_elem('lkseropewdssafsdfafkpwe', 2)",
          "expected_output": "[('s', 4), ('e', 3)]"
        },
        {
          "input": "most_common_elem('lkseropewdssafsdfafkpwe', 7)",
          "expected_output": "[('s', 4), ('e', 3), ('f', 3), ('k', 2), ('p', 2), ('w', 2), ('d', 2)]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "most_common_elem('lkseropewdssafsdfafkpwe', 3)",
          "expected_output": "[('s', 3), ('e', 3), ('f', 3)]"
        },
        {
          "input": "most_common_elem('lkseropewdssafsdfafkpwe', 2)",
          "expected_output": "[('s', 3), ('e', 3)]"
        },
        {
          "input": "most_common_elem('lkseropewdssafsdfafkpwe', 7)",
          "expected_output": "[('s', 4), ('e', 3), ('f', 3), ('k', 2), ('p', 2), ('w', 2), ('d', 1)]"
        }
      ]
    },
    {
      "problem_id": "mbpp_92",
      "description": "Write a function to check whether the given number is undulating or not.",
      "function_name": "is_undulating",
      "correct_solution": "def is_undulating(n): \r\n\tif (len(n) <= 2): \r\n\t\treturn False\r\n\tfor i in range(2, len(n)): \r\n\t\tif (n[i - 2] != n[i]): \r\n\t\t\treturn False\r\n\treturn True",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "is_undulating('1212121')",
          "expected_output": "True"
        },
        {
          "input": "is_undulating('1991')",
          "expected_output": "False"
        },
        {
          "input": "is_undulating('121')",
          "expected_output": "True"
        }
      ],
      "broken_test_cases": [
        {
          "input": "is_undulating('1212121')",
          "expected_output": "False"
        },
        {
          "input": "is_undulating('1991')",
          "expected_output": "True"
        },
        {
          "input": "is_undulating('121')",
          "expected_output": "False"
        }
      ]
    },
    {
      "problem_id": "mbpp_695",
      "description": "Write a function to check if each element of the second tuple is greater than its corresponding index in the first tuple.",
      "function_name": "check_greater",
      "correct_solution": "def check_greater(test_tup1, test_tup2):\r\n  res = all(x < y for x, y in zip(test_tup1, test_tup2))\r\n  return (res) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "check_greater((10, 4, 5), (13, 5, 18))",
          "expected_output": "True"
        },
        {
          "input": "check_greater((1, 2, 3), (2, 1, 4))",
          "expected_output": "False"
        },
        {
          "input": "check_greater((4, 5, 6), (5, 6, 7))",
          "expected_output": "True"
        }
      ],
      "broken_test_cases": [
        {
          "input": "check_greater((10, 4, 5), (13, 5, 18))",
          "expected_output": "False"
        },
        {
          "input": "check_greater((1, 2, 3), (2, 1, 4))",
          "expected_output": "True"
        },
        {
          "input": "check_greater((4, 5, 6), (5, 6, 7))",
          "expected_output": "False"
        }
      ]
    },
    {
      "problem_id": "mbpp_456",
      "description": "Write a function to reverse strings in a given list of string values.",
      "function_name": "reverse_string_list",
      "correct_solution": "def reverse_string_list(stringlist):\r\n    result = [x[::-1] for x in stringlist]\r\n    return result",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])",
          "expected_output": "['deR', 'neerG', 'eulB', 'etihW', 'kcalB']"
        },
        {
          "input": "reverse_string_list(['john', 'amal', 'joel', 'george'])",
          "expected_output": "['nhoj', 'lama', 'leoj', 'egroeg']"
        },
        {
          "input": "reverse_string_list(['jack', 'john', 'mary'])",
          "expected_output": "['kcaj', 'nhoj', 'yram']"
        }
      ],
      "broken_test_cases": [
        {
          "input": "reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])",
          "expected_output": "['deR', 'neerG', 'eulB', 'etihW', 'kcalB', 'Extra']"
        },
        {
          "input": "reverse_string_list(['john', 'amal', 'joel', 'george'])",
          "expected_output": "['nhoj', 'lama', 'leoj', 'george']"
        },
        {
          "input": "reverse_string_list(['jack', 'john', 'mary'])",
          "expected_output": "['jack', 'john', 'mary']"
        }
      ]
    },
    {
      "problem_id": "mbpp_462",
      "description": "Write a function to find all possible combinations of the elements of a given list.",
      "function_name": "combinations_list",
      "correct_solution": "def combinations_list(list1):\r\n    if len(list1) == 0:\r\n        return [[]]\r\n    result = []\r\n    for el in combinations_list(list1[1:]):\r\n        result += [el, el+[list1[0]]]\r\n    return result",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "combinations_list(['orange', 'red', 'green', 'blue'])",
          "expected_output": "[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]"
        },
        {
          "input": "combinations_list(['red', 'green', 'black', 'orange'])",
          "expected_output": "[[], ['red'], ['green'], ['green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red']]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "combinations_list(['orange', 'red', 'green', 'blue'])",
          "expected_output": "[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red']]"
        },
        {
          "input": "combinations_list(['red', 'green', 'black', 'orange'])",
          "expected_output": "[[], ['red'], ['green'], ['green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green']]"
        }
      ]
    },
    {
      "problem_id": "mbpp_258",
      "description": "Write a function to find number of odd elements in the given list using lambda function.",
      "function_name": "count_odd",
      "correct_solution": "def count_odd(array_nums):\r\n   count_odd = len(list(filter(lambda x: (x%2 != 0) , array_nums)))\r\n   return count_odd",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "count_odd([1, 2, 3, 5, 7, 8, 10])",
          "expected_output": "4"
        },
        {
          "input": "count_odd([10, 15, 14, 13, -18, 12, -20])",
          "expected_output": "2"
        },
        {
          "input": "count_odd([1, 2, 4, 8, 9])",
          "expected_output": "2"
        }
      ],
      "broken_test_cases": [
        {
          "input": "count_odd([1, 2, 3, 5, 7, 8, 10])",
          "expected_output": "3"
        },
        {
          "input": "count_odd([10, 15, 14, 13, -18, 12, -20])",
          "expected_output": "3"
        },
        {
          "input": "count_odd([1, 2, 4, 8, 9])",
          "expected_output": "3"
        }
      ]
    },
    {
      "problem_id": "mbpp_90",
      "description": "Write a python function to find the length of the longest word.",
      "function_name": "len_log",
      "correct_solution": "def len_log(list1):\r\n    max=len(list1[0])\r\n    for i in list1:\r\n        if len(i)>max:\r\n            max=len(i)\r\n    return max",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "len_log(['python', 'PHP', 'bigdata'])",
          "expected_output": "7"
        },
        {
          "input": "len_log(['a', 'ab', 'abc'])",
          "expected_output": "3"
        },
        {
          "input": "len_log(['small', 'big', 'tall'])",
          "expected_output": "5"
        }
      ],
      "broken_test_cases": [
        {
          "input": "len_log(['python', 'PHP', 'bigdata'])",
          "expected_output": "6"
        },
        {
          "input": "len_log(['a', 'ab', 'abc'])",
          "expected_output": "4"
        },
        {
          "input": "len_log(['small', 'big', 'tall'])",
          "expected_output": "3"
        }
      ]
    },
    {
      "problem_id": "mbpp_396",
      "description": "Write a function to check whether the given string starts and ends with the same character or not using regex.",
      "function_name": "check_char",
      "correct_solution": "import re  \r\nregex = r'^[a-z]$|^([a-z]).*\\1$'\r\ndef check_char(string): \r\n\tif(re.search(regex, string)): \r\n\t\treturn \"Valid\" \r\n\telse: \r\n\t\treturn \"Invalid\" ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "check_char('abba')",
          "expected_output": "Valid"
        },
        {
          "input": "check_char('a')",
          "expected_output": "Valid"
        },
        {
          "input": "check_char('abcd')",
          "expected_output": "Invalid"
        }
      ],
      "broken_test_cases": [
        {
          "input": "check_char('abba')",
          "expected_output": "Invalid"
        },
        {
          "input": "check_char('a')",
          "expected_output": "Invalid"
        },
        {
          "input": "check_char('abcd')",
          "expected_output": "Valid"
        }
      ]
    },
    {
      "problem_id": "mbpp_283",
      "description": "Write a python function to check whether the frequency of each digit is less than or equal to the digit itself.",
      "function_name": "validate",
      "correct_solution": "def validate(n): \r\n    for i in range(10): \r\n        temp = n;  \r\n        count = 0; \r\n        while (temp): \r\n            if (temp % 10 == i): \r\n                count+=1;  \r\n            if (count > i): \r\n                return False\r\n            temp //= 10; \r\n    return True",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "validate(1234)",
          "expected_output": "True"
        },
        {
          "input": "validate(51241)",
          "expected_output": "False"
        },
        {
          "input": "validate(321)",
          "expected_output": "True"
        }
      ],
      "broken_test_cases": [
        {
          "input": "validate(1234)",
          "expected_output": "False"
        },
        {
          "input": "validate(51241)",
          "expected_output": "True"
        },
        {
          "input": "validate(321)",
          "expected_output": "False"
        }
      ]
    },
    {
      "problem_id": "mbpp_857",
      "description": "Write a function to list out the list of given strings individually using map function.",
      "function_name": "listify_list",
      "correct_solution": "def listify_list(list1):\r\n  result = list(map(list,list1)) \r\n  return result ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "listify_list(['Red', 'Blue', 'Black', 'White', 'Pink'])",
          "expected_output": "[['R', 'e', 'd'], ['B', 'l', 'u', 'e'], ['B', 'l', 'a', 'c', 'k'], ['W', 'h', 'i', 't', 'e'], ['P', 'i', 'n', 'k']]"
        },
        {
          "input": "listify_list(['python'])",
          "expected_output": "[['p', 'y', 't', 'h', 'o', 'n']]"
        },
        {
          "input": "listify_list([' red ', 'green', ' black', 'blue ', ' orange', 'brown'])",
          "expected_output": "[[' ', 'r', 'e', 'd', ' '], ['g', 'r', 'e', 'e', 'n'], [' ', 'b', 'l', 'a', 'c', 'k'], ['b', 'l', 'u', 'e', ' '], [' ', 'o', 'r', 'a', 'n', 'g', 'e'], ['b', 'r', 'o', 'w', 'n']]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "listify_list(['Red', 'Blue', 'Black', 'White', 'Pink'])",
          "expected_output": "[['R', 'e', 'd'], ['B', 'l', 'u', 'e'], ['B', 'l', 'a', 'c', 'k'], ['W', 'h', 'i', 't', 'e'], ['P', 'i', 'n', 'k', 'x']]"
        },
        {
          "input": "listify_list(['python'])",
          "expected_output": "[['p', 'y', 't', 'h', 'o']]"
        },
        {
          "input": "listify_list([' red ', 'green', ' black', 'blue ', ' orange', 'brown'])",
          "expected_output": "[[' ', 'r', 'e', 'd', ' '], ['g', 'r', 'e', 'e', 'n'], [' ', 'b', 'l', 'a', 'c', 'k'], ['b', 'l', 'u', 'e', ' '], [' ', 'o', 'r', 'a', 'n', 'g', 'e'], ['b', 'r', 'o', 'w', 'n', '!']]"
        }
      ]
    },
    {
      "problem_id": "mbpp_504",
      "description": "Write a python function to find the cube sum of first n natural numbers.",
      "function_name": "sum_Of_Series",
      "correct_solution": "def sum_Of_Series(n): \r\n    sum = 0\r\n    for i in range(1,n + 1): \r\n        sum += i * i*i       \r\n    return sum",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "sum_Of_Series(5)",
          "expected_output": "225"
        },
        {
          "input": "sum_Of_Series(2)",
          "expected_output": "9"
        },
        {
          "input": "sum_Of_Series(3)",
          "expected_output": "36"
        }
      ],
      "broken_test_cases": [
        {
          "input": "sum_Of_Series(5)",
          "expected_output": "226"
        },
        {
          "input": "sum_Of_Series(2)",
          "expected_output": "10"
        },
        {
          "input": "sum_Of_Series(3)",
          "expected_output": "35"
        }
      ]
    },
    {
      "problem_id": "mbpp_177",
      "description": "Write a python function to find two distinct numbers such that their lcm lies within the given range.",
      "function_name": "answer",
      "correct_solution": "def answer(L,R): \r\n    if (2 * L <= R): \r\n        return (L ,2*L)\r\n    else: \r\n        return (-1) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "answer(3, 8)",
          "expected_output": "(3, 6)"
        },
        {
          "input": "answer(2, 6)",
          "expected_output": "(2, 4)"
        },
        {
          "input": "answer(1, 3)",
          "expected_output": "(1, 2)"
        }
      ],
      "broken_test_cases": [
        {
          "input": "answer(3, 8)",
          "expected_output": "(3, 8)"
        },
        {
          "input": "answer(2, 6)",
          "expected_output": "(3, 5)"
        },
        {
          "input": "answer(1, 3)",
          "expected_output": "(2, 1)"
        }
      ]
    },
    {
      "problem_id": "mbpp_902",
      "description": "Write a function to combine two dictionaries by adding values for common keys.",
      "function_name": "add_dict",
      "correct_solution": "from collections import Counter\r\ndef add_dict(d1,d2):\r\n   add_dict = Counter(d1) + Counter(d2)\r\n   return add_dict",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "add_dict({'a': 100, 'b': 200, 'c': 300}, {'a': 300, 'b': 200, 'd': 400})",
          "expected_output": "{'b': 400, 'd': 400, 'a': 400, 'c': 300}"
        },
        {
          "input": "add_dict({'a': 500, 'b': 700, 'c': 900}, {'a': 500, 'b': 600, 'd': 900})",
          "expected_output": "{'b': 1300, 'd': 900, 'a': 1000, 'c': 900}"
        },
        {
          "input": "add_dict({'a': 900, 'b': 900, 'd': 900}, {'a': 900, 'b': 900, 'd': 900})",
          "expected_output": "{'b': 1800, 'd': 1800, 'a': 1800}"
        }
      ],
      "broken_test_cases": [
        {
          "input": "add_dict({'a': 100, 'b': 200, 'c': 300}, {'a': 300, 'b': 200, 'd': 400})",
          "expected_output": "{'b': 400, 'd': 400, 'a': 600, 'c': 300}"
        },
        {
          "input": "add_dict({'a': 500, 'b': 700, 'c': 900}, {'a': 500, 'b': 600, 'd': 900})",
          "expected_output": "{'b': 1300, 'd': 900, 'a': 1000, 'c': 800}"
        },
        {
          "input": "add_dict({'a': 900, 'b': 900, 'd': 900}, {'a': 900, 'b': 900, 'd': 900})",
          "expected_output": "{'b': 1799, 'd': 1799, 'a': 1799}"
        }
      ]
    },
    {
      "problem_id": "mbpp_794",
      "description": "Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.",
      "function_name": "text_starta_endb",
      "correct_solution": "import re\r\ndef text_starta_endb(text):\r\n        patterns = 'a.*?b$'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "text_starta_endb('aabbbb')",
          "expected_output": "Found a match!"
        },
        {
          "input": "text_starta_endb('aabAbbbc')",
          "expected_output": "Not matched!"
        },
        {
          "input": "text_starta_endb('accddbbjjj')",
          "expected_output": "Not matched!"
        }
      ],
      "broken_test_cases": [
        {
          "input": "text_starta_endb('aabbbb')",
          "expected_output": "Not matched!"
        },
        {
          "input": "text_starta_endb('aabAbbbc')",
          "expected_output": "Found a match!"
        },
        {
          "input": "text_starta_endb('accddbbjjj')",
          "expected_output": "Found a match!"
        }
      ]
    },
    {
      "problem_id": "mbpp_214",
      "description": "Write a function to convert radians to degrees.",
      "function_name": "degree_radian",
      "correct_solution": "import math\r\ndef degree_radian(radian):\r\n degree = radian*(180/math.pi)\r\n return degree",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "degree_radian(90)",
          "expected_output": "5156.620156177409"
        },
        {
          "input": "degree_radian(60)",
          "expected_output": "3437.746770784939"
        },
        {
          "input": "degree_radian(120)",
          "expected_output": "6875.493541569878"
        }
      ],
      "broken_test_cases": [
        {
          "input": "degree_radian(90)",
          "expected_output": "91.0"
        },
        {
          "input": "degree_radian(60)",
          "expected_output": "4000"
        },
        {
          "input": "degree_radian(120)",
          "expected_output": "9999.99"
        }
      ]
    },
    {
      "problem_id": "mbpp_722",
      "description": "Write a function to filter the height and width of students which are stored in a dictionary.",
      "function_name": "filter_data",
      "correct_solution": "def filter_data(students,h,w):\r\n    result = {k: s for k, s in students.items() if s[0] >=h and s[1] >=w}\r\n    return result    ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)}, 6.0, 70)",
          "expected_output": "{'Cierra Vega': (6.2, 70)}"
        },
        {
          "input": "filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)}, 5.9, 67)",
          "expected_output": "{'Cierra Vega': (6.2, 70), 'Kierra Gentry': (6.0, 68)}"
        },
        {
          "input": "filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)}, 5.7, 64)",
          "expected_output": "{'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)}"
        }
      ],
      "broken_test_cases": [
        {
          "input": "filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)}, 6.0, 70)",
          "expected_output": "{'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)}"
        },
        {
          "input": "filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)}, 5.9, 67)",
          "expected_output": "{'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)}"
        },
        {
          "input": "filter_data({'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68), 'Pierre Cox': (5.8, 66)}, 5.7, 64)",
          "expected_output": "{'Cierra Vega': (6.2, 70), 'Alden Cantrell': (5.9, 65), 'Kierra Gentry': (6.0, 68)}"
        }
      ]
    },
    {
      "problem_id": "mbpp_203",
      "description": "Write a python function to find the hamming distance between given two integers.",
      "function_name": "hamming_Distance",
      "correct_solution": "def hamming_Distance(n1,n2) : \r\n    x = n1 ^ n2  \r\n    setBits = 0\r\n    while (x > 0) : \r\n        setBits += x & 1\r\n        x >>= 1\r\n    return setBits  ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "hamming_Distance(4, 8)",
          "expected_output": "2"
        },
        {
          "input": "hamming_Distance(2, 4)",
          "expected_output": "2"
        },
        {
          "input": "hamming_Distance(1, 2)",
          "expected_output": "2"
        }
      ],
      "broken_test_cases": [
        {
          "input": "hamming_Distance(4, 8)",
          "expected_output": "1"
        },
        {
          "input": "hamming_Distance(2, 4)",
          "expected_output": "1"
        },
        {
          "input": "hamming_Distance(1, 2)",
          "expected_output": "1"
        }
      ]
    },
    {
      "problem_id": "mbpp_806",
      "description": "Write a function to find maximum run of uppercase characters in the given string.",
      "function_name": "max_run_uppercase",
      "correct_solution": "def max_run_uppercase(test_str):\r\n  cnt = 0\r\n  res = 0\r\n  for idx in range(0, len(test_str)):\r\n    if test_str[idx].isupper():\r\n      cnt += 1\r\n    else:\r\n      res = cnt\r\n      cnt = 0\r\n  if test_str[len(test_str) - 1].isupper():\r\n    res = cnt\r\n  return (res)",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "max_run_uppercase('GeMKSForGERksISBESt')",
          "expected_output": "5"
        },
        {
          "input": "max_run_uppercase('PrECIOusMOVemENTSYT')",
          "expected_output": "6"
        },
        {
          "input": "max_run_uppercase('GooGLEFluTTER')",
          "expected_output": "4"
        }
      ],
      "broken_test_cases": [
        {
          "input": "max_run_uppercase('GeMKSForGERksISBESt')",
          "expected_output": "4"
        },
        {
          "input": "max_run_uppercase('PrECIOusMOVemENTSYT')",
          "expected_output": "5"
        },
        {
          "input": "max_run_uppercase('GooGLEFluTTER')",
          "expected_output": "5"
        }
      ]
    },
    {
      "problem_id": "mbpp_557",
      "description": "Write a function to toggle characters case in a string.",
      "function_name": "toggle_string",
      "correct_solution": "def toggle_string(string):\r\n string1 = string.swapcase()\r\n return string1",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "toggle_string('Python')",
          "expected_output": "pYTHON"
        },
        {
          "input": "toggle_string('Pangram')",
          "expected_output": "pANGRAM"
        },
        {
          "input": "toggle_string('LIttLE')",
          "expected_output": "liTTle"
        }
      ],
      "broken_test_cases": [
        {
          "input": "toggle_string('Python')",
          "expected_output": "pytHON"
        },
        {
          "input": "toggle_string('Pangram')",
          "expected_output": "PaNGRAM"
        },
        {
          "input": "toggle_string('LIttLE')",
          "expected_output": "LIttLE"
        }
      ]
    },
    {
      "problem_id": "mbpp_908",
      "description": "Write a function to find the fixed point in the given array.",
      "function_name": "find_fixed_point",
      "correct_solution": "def find_fixed_point(arr, n): \r\n\tfor i in range(n): \r\n\t\tif arr[i] is i: \r\n\t\t\treturn i \r\n\treturn -1",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "find_fixed_point([-10, -1, 0, 3, 10, 11, 30, 50, 100], 9)",
          "expected_output": "3"
        },
        {
          "input": "find_fixed_point([1, 2, 3, 4, 5, 6, 7, 8], 8)",
          "expected_output": "-1"
        },
        {
          "input": "find_fixed_point([0, 2, 5, 8, 17], 5)",
          "expected_output": "0"
        }
      ],
      "broken_test_cases": [
        {
          "input": "find_fixed_point([-10, -1, 0, 3, 10, 11, 30, 50, 100], 9)",
          "expected_output": "100"
        },
        {
          "input": "find_fixed_point([1, 2, 3, 4, 5, 6, 7, 8], 8)",
          "expected_output": "4"
        },
        {
          "input": "find_fixed_point([0, 2, 5, 8, 17], 5)",
          "expected_output": "2"
        }
      ]
    },
    {
      "problem_id": "mbpp_483",
      "description": "Write a python function to find the first natural number whose factorial is divisible by x.",
      "function_name": "first_Factorial_Divisible_Number",
      "correct_solution": "def first_Factorial_Divisible_Number(x): \r\n    i = 1;\r\n    fact = 1; \r\n    for i in range(1,x): \r\n        fact = fact * i \r\n        if (fact % x == 0): \r\n            break\r\n    return i ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "first_Factorial_Divisible_Number(10)",
          "expected_output": "5"
        },
        {
          "input": "first_Factorial_Divisible_Number(15)",
          "expected_output": "5"
        },
        {
          "input": "first_Factorial_Divisible_Number(5)",
          "expected_output": "4"
        }
      ],
      "broken_test_cases": [
        {
          "input": "first_Factorial_Divisible_Number(10)",
          "expected_output": "6"
        },
        {
          "input": "first_Factorial_Divisible_Number(15)",
          "expected_output": "7"
        },
        {
          "input": "first_Factorial_Divisible_Number(5)",
          "expected_output": "6"
        }
      ]
    },
    {
      "problem_id": "mbpp_933",
      "description": "Write a function to convert camel case string to snake case string by using regex.",
      "function_name": "camel_to_snake",
      "correct_solution": "import re\r\ndef camel_to_snake(text):\r\n  str1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', text)\r\n  return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', str1).lower()",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "camel_to_snake('GoogleAssistant')",
          "expected_output": "google_assistant"
        },
        {
          "input": "camel_to_snake('ChromeCast')",
          "expected_output": "chrome_cast"
        },
        {
          "input": "camel_to_snake('QuadCore')",
          "expected_output": "quad_core"
        }
      ],
      "broken_test_cases": [
        {
          "input": "camel_to_snake('GoogleAssistant')",
          "expected_output": "GoogleAssistant"
        },
        {
          "input": "camel_to_snake('ChromeCast')",
          "expected_output": "chrome-cast"
        },
        {
          "input": "camel_to_snake('QuadCore')",
          "expected_output": "Quad_Core"
        }
      ]
    },
    {
      "problem_id": "mbpp_802",
      "description": "Write a python function to count the number of rotations required to generate a sorted array.",
      "function_name": "count_Rotation",
      "correct_solution": "def count_Rotation(arr,n):   \r\n    for i in range (1,n): \r\n        if (arr[i] < arr[i - 1]): \r\n            return i  \r\n    return 0",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "count_Rotation([3, 2, 1], 3)",
          "expected_output": "1"
        },
        {
          "input": "count_Rotation([4, 5, 1, 2, 3], 5)",
          "expected_output": "2"
        },
        {
          "input": "count_Rotation([7, 8, 9, 1, 2, 3], 6)",
          "expected_output": "3"
        }
      ],
      "broken_test_cases": [
        {
          "input": "count_Rotation([3, 2, 1], 3)",
          "expected_output": "0"
        },
        {
          "input": "count_Rotation([4, 5, 1, 2, 3], 5)",
          "expected_output": "4"
        },
        {
          "input": "count_Rotation([7, 8, 9, 1, 2, 3], 6)",
          "expected_output": "2"
        }
      ]
    },
    {
      "problem_id": "mbpp_890",
      "description": "Write a python function to find the index of an extra element present in one sorted array.",
      "function_name": "find_Extra",
      "correct_solution": "def find_Extra(arr1,arr2,n) : \r\n    for i in range(0, n) : \r\n        if (arr1[i] != arr2[i]) : \r\n            return i \r\n    return n ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "find_Extra([1, 2, 3, 4], [1, 2, 3], 3)",
          "expected_output": "3"
        },
        {
          "input": "find_Extra([2, 4, 6, 8, 10], [2, 4, 6, 8], 4)",
          "expected_output": "4"
        },
        {
          "input": "find_Extra([1, 3, 5, 7, 9, 11], [1, 3, 5, 7, 9], 5)",
          "expected_output": "5"
        }
      ],
      "broken_test_cases": [
        {
          "input": "find_Extra([1, 2, 3, 4], [1, 2, 3], 3)",
          "expected_output": "2"
        },
        {
          "input": "find_Extra([2, 4, 6, 8, 10], [2, 4, 6, 8], 4)",
          "expected_output": "3"
        },
        {
          "input": "find_Extra([1, 3, 5, 7, 9, 11], [1, 3, 5, 7, 9], 5)",
          "expected_output": "4"
        }
      ]
    },
    {
      "problem_id": "mbpp_598",
      "description": "Write a function to check whether the given number is armstrong or not.",
      "function_name": "armstrong_number",
      "correct_solution": "def armstrong_number(number):\r\n sum = 0\r\n times = 0\r\n temp = number\r\n while temp > 0:\r\n           times = times + 1\r\n           temp = temp // 10\r\n temp = number\r\n while temp > 0:\r\n           reminder = temp % 10\r\n           sum = sum + (reminder ** times)\r\n           temp //= 10\r\n if number == sum:\r\n           return True\r\n else:\r\n           return False",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "armstrong_number(153)",
          "expected_output": "True"
        },
        {
          "input": "armstrong_number(259)",
          "expected_output": "False"
        },
        {
          "input": "armstrong_number(4458)",
          "expected_output": "False"
        }
      ],
      "broken_test_cases": [
        {
          "input": "armstrong_number(153)",
          "expected_output": "False"
        },
        {
          "input": "armstrong_number(259)",
          "expected_output": "True"
        },
        {
          "input": "armstrong_number(4458)",
          "expected_output": "True"
        }
      ]
    },
    {
      "problem_id": "mbpp_520",
      "description": "Write a function to find the lcm of the given array elements.",
      "function_name": "get_lcm",
      "correct_solution": "def find_lcm(num1, num2): \r\n\tif(num1>num2): \r\n\t\tnum = num1 \r\n\t\tden = num2 \r\n\telse: \r\n\t\tnum = num2 \r\n\t\tden = num1 \r\n\trem = num % den \r\n\twhile (rem != 0): \r\n\t\tnum = den \r\n\t\tden = rem \r\n\t\trem = num % den \r\n\tgcd = den \r\n\tlcm = int(int(num1 * num2)/int(gcd)) \r\n\treturn lcm \r\ndef get_lcm(l):\r\n  num1 = l[0]\r\n  num2 = l[1]\r\n  lcm = find_lcm(num1, num2)\r\n  for i in range(2, len(l)):\r\n    lcm = find_lcm(lcm, l[i])\r\n  return lcm ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "get_lcm([2, 7, 3, 9, 4])",
          "expected_output": "252"
        },
        {
          "input": "get_lcm([1, 2, 8, 3])",
          "expected_output": "24"
        },
        {
          "input": "get_lcm([3, 8, 4, 10, 5])",
          "expected_output": "120"
        }
      ],
      "broken_test_cases": [
        {
          "input": "get_lcm([2, 7, 3, 9, 4])",
          "expected_output": "100"
        },
        {
          "input": "get_lcm([1, 2, 8, 3])",
          "expected_output": "48"
        },
        {
          "input": "get_lcm([3, 8, 4, 10, 5])",
          "expected_output": "123"
        }
      ]
    },
    {
      "problem_id": "mbpp_154",
      "description": "Write a function to extract every specified element from a given two dimensional list.",
      "function_name": "specified_element",
      "correct_solution": "def specified_element(nums, N):\r\n    result = [i[N] for i in nums]\r\n    return result",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 0)",
          "expected_output": "[1, 4, 7]"
        },
        {
          "input": "specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 2)",
          "expected_output": "[3, 6, 9]"
        },
        {
          "input": "specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 3)",
          "expected_output": "[2, 2, 5]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 0)",
          "expected_output": "[1, 4, 8]"
        },
        {
          "input": "specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 2)",
          "expected_output": "[1, 4, 7]"
        },
        {
          "input": "specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]], 3)",
          "expected_output": "[1, 4, 7]"
        }
      ]
    },
    {
      "problem_id": "mbpp_193",
      "description": "Write a function to remove the duplicates from the given tuple.",
      "function_name": "remove_tuple",
      "correct_solution": "def remove_tuple(test_tup):\r\n  res = tuple(set(test_tup))\r\n  return (res) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3))",
          "expected_output": "(1, 2, 3, 5)"
        },
        {
          "input": "remove_tuple((2, 3, 4, 4, 5, 6, 6, 7, 8, 8))",
          "expected_output": "(2, 3, 4, 5, 6, 7, 8)"
        },
        {
          "input": "remove_tuple((11, 12, 13, 11, 11, 12, 14, 13))",
          "expected_output": "(11, 12, 13, 14)"
        }
      ],
      "broken_test_cases": [
        {
          "input": "remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3))",
          "expected_output": "(1, 2, 3, 5, 6)"
        },
        {
          "input": "remove_tuple((2, 3, 4, 4, 5, 6, 6, 7, 8, 8))",
          "expected_output": "(2, 3, 4, 5, 6, 7, 8, 8)"
        },
        {
          "input": "remove_tuple((11, 12, 13, 11, 11, 12, 14, 13))",
          "expected_output": "(11, 12, 13, 14, 15)"
        }
      ]
    },
    {
      "problem_id": "mbpp_893",
      "description": "Write a python function to get the last element of each sublist.",
      "function_name": "Extract",
      "correct_solution": "def Extract(lst): \r\n    return [item[-1] for item in lst] ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "Extract([[1, 2, 3], [4, 5], [6, 7, 8, 9]])",
          "expected_output": "[3, 5, 9]"
        },
        {
          "input": "Extract([['x', 'y', 'z'], ['m'], ['a', 'b'], ['u', 'v']])",
          "expected_output": "['z', 'm', 'b', 'v']"
        },
        {
          "input": "Extract([[1, 2, 3], [4, 5]])",
          "expected_output": "[3, 5]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "Extract([[1, 2, 3], [4, 5], [6, 7, 8, 9]])",
          "expected_output": "[1, 5, 8]"
        },
        {
          "input": "Extract([['x', 'y', 'z'], ['m'], ['a', 'b'], ['u', 'v']])",
          "expected_output": "['x', 'm', 'a', 'u']"
        },
        {
          "input": "Extract([[1, 2, 3], [4, 5]])",
          "expected_output": "[3, 4]"
        }
      ]
    },
    {
      "problem_id": "mbpp_740",
      "description": "Write a function to convert the given tuple to a key-value dictionary using adjacent elements.",
      "function_name": "tuple_to_dict",
      "correct_solution": "def tuple_to_dict(test_tup):\r\n  res = dict(test_tup[idx : idx + 2] for idx in range(0, len(test_tup), 2))\r\n  return (res) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "tuple_to_dict((1, 2, 3, 4, 5, 6))",
          "expected_output": "{1: 2, 3: 4, 5: 6}"
        },
        {
          "input": "tuple_to_dict((7, 8, 9, 10, 11, 12))",
          "expected_output": "{7: 8, 9: 10, 11: 12}"
        }
      ],
      "broken_test_cases": [
        {
          "input": "tuple_to_dict((1, 2, 3, 4, 5, 6))",
          "expected_output": "{1: 4, 3: 6}"
        },
        {
          "input": "tuple_to_dict((7, 8, 9, 10, 11, 12))",
          "expected_output": "{7: 10, 9: 12}"
        }
      ]
    },
    {
      "problem_id": "mbpp_710",
      "description": "Write a function to access the initial and last data of the given tuple record.",
      "function_name": "front_and_rear",
      "correct_solution": "def front_and_rear(test_tup):\r\n  res = (test_tup[0], test_tup[-1])\r\n  return (res) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "front_and_rear((10, 4, 5, 6, 7))",
          "expected_output": "(10, 7)"
        },
        {
          "input": "front_and_rear((1, 2, 3, 4, 5))",
          "expected_output": "(1, 5)"
        },
        {
          "input": "front_and_rear((6, 7, 8, 9, 10))",
          "expected_output": "(6, 10)"
        }
      ],
      "broken_test_cases": [
        {
          "input": "front_and_rear((10, 4, 5, 6, 7))",
          "expected_output": "(10, 6)"
        },
        {
          "input": "front_and_rear((1, 2, 3, 4, 5))",
          "expected_output": "(5, 1)"
        },
        {
          "input": "front_and_rear((6, 7, 8, 9, 10))",
          "expected_output": "(6, 9)"
        }
      ]
    },
    {
      "problem_id": "mbpp_621",
      "description": "Write a function to increment the numeric values in the given strings by k.",
      "function_name": "increment_numerics",
      "correct_solution": "def increment_numerics(test_list, K):\r\n  res = [str(int(ele) + K) if ele.isdigit() else ele for ele in test_list]\r\n  return res ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "increment_numerics(['MSM', '234', 'is', '98', '123', 'best', '4'], 6)",
          "expected_output": "['MSM', '240', 'is', '104', '129', 'best', '10']"
        },
        {
          "input": "increment_numerics(['Dart', '356', 'is', '88', '169', 'Super', '6'], 12)",
          "expected_output": "['Dart', '368', 'is', '100', '181', 'Super', '18']"
        },
        {
          "input": "increment_numerics(['Flutter', '451', 'is', '44', '96', 'Magnificent', '12'], 33)",
          "expected_output": "['Flutter', '484', 'is', '77', '129', 'Magnificent', '45']"
        }
      ],
      "broken_test_cases": [
        {
          "input": "increment_numerics(['MSM', '234', 'is', '98', '123', 'best', '4'], 6)",
          "expected_output": "['MSM', '240', 'is', '104', '129', 'best', '11']"
        },
        {
          "input": "increment_numerics(['Dart', '356', 'is', '88', '169', 'Super', '6'], 12)",
          "expected_output": "['Dart', '368', 'is', '100', '181', 'Super', '15']"
        },
        {
          "input": "increment_numerics(['Flutter', '451', 'is', '44', '96', 'Magnificent', '12'], 33)",
          "expected_output": "['Flutter', '484', 'is', '77', '126', 'Magnificent', '45']"
        }
      ]
    },
    {
      "problem_id": "mbpp_212",
      "description": "Write a python function to find the sum of fourth power of n natural numbers.",
      "function_name": "fourth_Power_Sum",
      "correct_solution": "import math  \r\ndef fourth_Power_Sum(n): \r\n    sum = 0\r\n    for i in range(1,n+1) : \r\n        sum = sum + (i*i*i*i) \r\n    return sum",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "fourth_Power_Sum(2)",
          "expected_output": "17"
        },
        {
          "input": "fourth_Power_Sum(4)",
          "expected_output": "354"
        },
        {
          "input": "fourth_Power_Sum(6)",
          "expected_output": "2275"
        }
      ],
      "broken_test_cases": [
        {
          "input": "fourth_Power_Sum(2)",
          "expected_output": "16"
        },
        {
          "input": "fourth_Power_Sum(4)",
          "expected_output": "355"
        },
        {
          "input": "fourth_Power_Sum(6)",
          "expected_output": "2276"
        }
      ]
    },
    {
      "problem_id": "mbpp_475",
      "description": "Write a function to sort counter by value.",
      "function_name": "sort_counter",
      "correct_solution": "from collections import Counter\r\ndef sort_counter(dict1):\r\n x = Counter(dict1)\r\n sort_counter=x.most_common()\r\n return sort_counter",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "sort_counter({'Math': 81, 'Physics': 83, 'Chemistry': 87})",
          "expected_output": "[('Chemistry', 87), ('Physics', 83), ('Math', 81)]"
        },
        {
          "input": "sort_counter({'Math': 400, 'Physics': 300, 'Chemistry': 250})",
          "expected_output": "[('Math', 400), ('Physics', 300), ('Chemistry', 250)]"
        },
        {
          "input": "sort_counter({'Math': 900, 'Physics': 1000, 'Chemistry': 1250})",
          "expected_output": "[('Chemistry', 1250), ('Physics', 1000), ('Math', 900)]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "sort_counter({'Math': 81, 'Physics': 83, 'Chemistry': 87})",
          "expected_output": "[('Math', 81), ('Physics', 83), ('Chemistry', 87)]"
        },
        {
          "input": "sort_counter({'Math': 400, 'Physics': 300, 'Chemistry': 250})",
          "expected_output": "[('Chemistry', 250), ('Physics', 300), ('Math', 400)]"
        },
        {
          "input": "sort_counter({'Math': 900, 'Physics': 1000, 'Chemistry': 1250})",
          "expected_output": "[('Math', 1250), ('Physics', 1000), ('Chemistry', 900)]"
        }
      ]
    },
    {
      "problem_id": "mbpp_922",
      "description": "Write a function to find a pair with the highest product from a given array of integers.",
      "function_name": "max_product",
      "correct_solution": "def max_product(arr): \r\n    arr_len = len(arr) \r\n    if (arr_len < 2): \r\n        return None     \r\n    x = arr[0]; y = arr[1]    \r\n    for i in range(0, arr_len): \r\n        for j in range(i + 1, arr_len): \r\n            if (arr[i] * arr[j] > x * y): \r\n                x = arr[i]; y = arr[j] \r\n    return x,y   ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "max_product([1, 2, 3, 4, 7, 0, 8, 4])",
          "expected_output": "(7, 8)"
        },
        {
          "input": "max_product([0, -1, -2, -4, 5, 0, -6])",
          "expected_output": "(-4, -6)"
        },
        {
          "input": "max_product([1, 3, 5, 6, 8, 9])",
          "expected_output": "(8, 9)"
        }
      ],
      "broken_test_cases": [
        {
          "input": "max_product([1, 2, 3, 4, 7, 0, 8, 4])",
          "expected_output": "(4, 8)"
        },
        {
          "input": "max_product([0, -1, -2, -4, 5, 0, -6])",
          "expected_output": "(0, -1)"
        },
        {
          "input": "max_product([1, 3, 5, 6, 8, 9])",
          "expected_output": "(1, 3)"
        }
      ]
    },
    {
      "problem_id": "mbpp_205",
      "description": "Write a function to find the inversions of tuple elements in the given tuple list.",
      "function_name": "inversion_elements",
      "correct_solution": "def inversion_elements(test_tup):\r\n  res = tuple(list(map(lambda x: ~x, list(test_tup))))\r\n  return (res) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "inversion_elements((7, 8, 9, 1, 10, 7))",
          "expected_output": "(-8, -9, -10, -2, -11, -8)"
        },
        {
          "input": "inversion_elements((2, 4, 5, 6, 1, 7))",
          "expected_output": "(-3, -5, -6, -7, -2, -8)"
        },
        {
          "input": "inversion_elements((8, 9, 11, 14, 12, 13))",
          "expected_output": "(-9, -10, -12, -15, -13, -14)"
        }
      ],
      "broken_test_cases": [
        {
          "input": "inversion_elements((7, 8, 9, 1, 10, 7))",
          "expected_output": "(-7, -8, -9, -1, -10, -7)"
        },
        {
          "input": "inversion_elements((2, 4, 5, 6, 1, 7))",
          "expected_output": "(-2, -4, -5, -6, -1, -7)"
        },
        {
          "input": "inversion_elements((8, 9, 11, 14, 12, 13))",
          "expected_output": "(-8, -9, -11, -14, -12, -13)"
        }
      ]
    },
    {
      "problem_id": "mbpp_808",
      "description": "Write a function to check if the given tuples contain the k or not.",
      "function_name": "check_K",
      "correct_solution": "def check_K(test_tup, K):\r\n  res = False\r\n  for ele in test_tup:\r\n    if ele == K:\r\n      res = True\r\n      break\r\n  return (res) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "check_K((10, 4, 5, 6, 8), 6)",
          "expected_output": "True"
        },
        {
          "input": "check_K((1, 2, 3, 4, 5, 6), 7)",
          "expected_output": "False"
        },
        {
          "input": "check_K((7, 8, 9, 44, 11, 12), 11)",
          "expected_output": "True"
        }
      ],
      "broken_test_cases": [
        {
          "input": "check_K((10, 4, 5, 6, 8), 6)",
          "expected_output": "False"
        },
        {
          "input": "check_K((1, 2, 3, 4, 5, 6), 7)",
          "expected_output": "True"
        },
        {
          "input": "check_K((7, 8, 9, 44, 11, 12), 11)",
          "expected_output": "False"
        }
      ]
    },
    {
      "problem_id": "mbpp_100",
      "description": "Write a function to find the next smallest palindrome of a specified number.",
      "function_name": "next_smallest_palindrome",
      "correct_solution": "import sys\r\ndef next_smallest_palindrome(num):\r\n    numstr = str(num)\r\n    for i in range(num+1,sys.maxsize):\r\n        if str(i) == str(i)[::-1]:\r\n            return i",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "next_smallest_palindrome(99)",
          "expected_output": "101"
        },
        {
          "input": "next_smallest_palindrome(1221)",
          "expected_output": "1331"
        },
        {
          "input": "next_smallest_palindrome(120)",
          "expected_output": "121"
        }
      ],
      "broken_test_cases": [
        {
          "input": "next_smallest_palindrome(99)",
          "expected_output": "100"
        },
        {
          "input": "next_smallest_palindrome(1221)",
          "expected_output": "1221"
        },
        {
          "input": "next_smallest_palindrome(120)",
          "expected_output": "123"
        }
      ]
    },
    {
      "problem_id": "mbpp_535",
      "description": "Write a function to find the top or bottom surface area of a cylinder.",
      "function_name": "topbottom_surfacearea",
      "correct_solution": "def topbottom_surfacearea(r):\r\n  toporbottomarea=3.1415*r*r\r\n  return toporbottomarea",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "topbottom_surfacearea(10)",
          "expected_output": "314.15000000000003"
        },
        {
          "input": "topbottom_surfacearea(5)",
          "expected_output": "78.53750000000001"
        },
        {
          "input": "topbottom_surfacearea(4)",
          "expected_output": "50.264"
        }
      ],
      "broken_test_cases": [
        {
          "input": "topbottom_surfacearea(10)",
          "expected_output": "300.0"
        },
        {
          "input": "topbottom_surfacearea(5)",
          "expected_output": "100.0"
        },
        {
          "input": "topbottom_surfacearea(4)",
          "expected_output": "25.132"
        }
      ]
    },
    {
      "problem_id": "mbpp_949",
      "description": "Write a function to sort the given tuple list basis the total digits in tuple.",
      "function_name": "sort_list",
      "correct_solution": "def count_digs(tup):\r\n  return sum([len(str(ele)) for ele in tup ]) \r\ndef sort_list(test_list):\r\n  test_list.sort(key = count_digs)\r\n  return (str(test_list))",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "sort_list([(3, 4, 6, 723), (1, 2), (12345,), (134, 234, 34)])",
          "expected_output": "[(1, 2), (12345,), (3, 4, 6, 723), (134, 234, 34)]"
        },
        {
          "input": "sort_list([(3, 4, 8), (1, 2), (1234335,), (1345, 234, 334)])",
          "expected_output": "[(1, 2), (3, 4, 8), (1234335,), (1345, 234, 334)]"
        },
        {
          "input": "sort_list([(34, 4, 61, 723), (1, 2), (145,), (134, 23)])",
          "expected_output": "[(1, 2), (145,), (134, 23), (34, 4, 61, 723)]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "sort_list([(3, 4, 6, 723), (1, 2), (12345,), (134, 234, 34)])",
          "expected_output": "[(12345,), (1, 2), (3, 4, 6, 723), (134, 234, 34)]"
        },
        {
          "input": "sort_list([(3, 4, 8), (1, 2), (1234335,), (1345, 234, 334)])",
          "expected_output": "[(1, 2), (3, 4, 8), (1345, 234, 334), (1234335,)]"
        },
        {
          "input": "sort_list([(34, 4, 61, 723), (1, 2), (145,), (134, 23)])",
          "expected_output": "[(1, 2), (134, 23), (145,), (34, 4, 61, 723)]"
        }
      ]
    },
    {
      "problem_id": "mbpp_408",
      "description": "Write a function to find k number of pairs which consist of one element from the first array and one element from the second array.",
      "function_name": "k_smallest_pairs",
      "correct_solution": "import heapq\r\ndef k_smallest_pairs(nums1, nums2, k):\r\n   queue = []\r\n   def push(i, j):\r\n       if i < len(nums1) and j < len(nums2):\r\n           heapq.heappush(queue, [nums1[i] + nums2[j], i, j])\r\n   push(0, 0)\r\n   pairs = []\r\n   while queue and len(pairs) < k:\r\n       _, i, j = heapq.heappop(queue)\r\n       pairs.append([nums1[i], nums2[j]])\r\n       push(i, j + 1)\r\n       if j == 0:\r\n           push(i + 1, 0)\r\n   return pairs",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "k_smallest_pairs([1, 3, 7], [2, 4, 6], 2)",
          "expected_output": "[[1, 2], [1, 4]]"
        },
        {
          "input": "k_smallest_pairs([1, 3, 7], [2, 4, 6], 1)",
          "expected_output": "[[1, 2]]"
        },
        {
          "input": "k_smallest_pairs([1, 3, 7], [2, 4, 6], 7)",
          "expected_output": "[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "k_smallest_pairs([1, 3, 7], [2, 4, 6], 2)",
          "expected_output": "[[1, 2], [3, 4]]"
        },
        {
          "input": "k_smallest_pairs([1, 3, 7], [2, 4, 6], 1)",
          "expected_output": "[[3, 2]]"
        },
        {
          "input": "k_smallest_pairs([1, 3, 7], [2, 4, 6], 7)",
          "expected_output": "[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6]]"
        }
      ]
    },
    {
      "problem_id": "mbpp_81",
      "description": "Write a function to zip the two given tuples.",
      "function_name": "zip_tuples",
      "correct_solution": "def zip_tuples(test_tup1, test_tup2):\r\n  res = []\r\n  for i, j in enumerate(test_tup1):\r\n    res.append((j, test_tup2[i % len(test_tup2)])) \r\n  return (res) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "zip_tuples((7, 8, 4, 5, 9, 10), (1, 5, 6))",
          "expected_output": "[(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]"
        },
        {
          "input": "zip_tuples((8, 9, 5, 6, 10, 11), (2, 6, 7))",
          "expected_output": "[(8, 2), (9, 6), (5, 7), (6, 2), (10, 6), (11, 7)]"
        },
        {
          "input": "zip_tuples((9, 10, 6, 7, 11, 12), (3, 7, 8))",
          "expected_output": "[(9, 3), (10, 7), (6, 8), (7, 3), (11, 7), (12, 8)]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "zip_tuples((7, 8, 4, 5, 9, 10), (1, 5, 6))",
          "expected_output": "[(7, 1), (8, 5), (4, 6), (5, 1), (9, 6), (10, 5)]"
        },
        {
          "input": "zip_tuples((8, 9, 5, 6, 10, 11), (2, 6, 7))",
          "expected_output": "[(8, 2), (9, 6), (5, 7), (6, 2), (10, 6), (11, 8)]"
        },
        {
          "input": "zip_tuples((9, 10, 6, 7, 11, 12), (3, 7, 8))",
          "expected_output": "[(9, 3), (10, 7), (6, 8), (7, 3), (11, 7), (12, 3)]"
        }
      ]
    },
    {
      "problem_id": "mbpp_937",
      "description": "Write a function to count the most common character in a given string.",
      "function_name": "max_char",
      "correct_solution": "from collections import Counter \r\ndef max_char(str1):\r\n    temp = Counter(str1) \r\n    max_char = max(temp, key = temp.get)\r\n    return max_char",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "max_char('hello world')",
          "expected_output": "l"
        },
        {
          "input": "max_char('hello ')",
          "expected_output": "l"
        },
        {
          "input": "max_char('python pr')",
          "expected_output": "p"
        }
      ],
      "broken_test_cases": [
        {
          "input": "max_char('hello world')",
          "expected_output": "w"
        },
        {
          "input": "max_char('hello ')",
          "expected_output": "'w'"
        },
        {
          "input": "max_char('python pr')",
          "expected_output": "r"
        }
      ]
    },
    {
      "problem_id": "mbpp_390",
      "description": "Write a function to insert a given string at the beginning of all items in a list.",
      "function_name": "add_string",
      "correct_solution": "def add_string(list,string):\r\n add_string=[string.format(i) for i in  list]\r\n return add_string",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "add_string([1, 2, 3, 4], 'temp{0}')",
          "expected_output": "['temp1', 'temp2', 'temp3', 'temp4']"
        },
        {
          "input": "add_string(['a', 'b', 'c', 'd'], 'python{0}')",
          "expected_output": "['pythona', 'pythonb', 'pythonc', 'pythond']"
        },
        {
          "input": "add_string([5, 6, 7, 8], 'string{0}')",
          "expected_output": "['string5', 'string6', 'string7', 'string8']"
        }
      ],
      "broken_test_cases": [
        {
          "input": "add_string([1, 2, 3, 4], 'temp{0}')",
          "expected_output": "['temp1', 'temp2', 'temp3', 'temp5']"
        },
        {
          "input": "add_string(['a', 'b', 'c', 'd'], 'python{0}')",
          "expected_output": "['python', 'python', 'python', 'python']"
        },
        {
          "input": "add_string([5, 6, 7, 8], 'string{0}')",
          "expected_output": "['string5', 'string6', 'string7', 'string8', 'string{0}']"
        }
      ]
    },
    {
      "problem_id": "mbpp_487",
      "description": "Write a function to sort a list of tuples in increasing order by the last element in each tuple.",
      "function_name": "sort_tuple",
      "correct_solution": "def sort_tuple(tup): \r\n\tlst = len(tup) \r\n\tfor i in range(0, lst): \r\n\t\tfor j in range(0, lst-i-1): \r\n\t\t\tif (tup[j][-1] > tup[j + 1][-1]): \r\n\t\t\t\ttemp = tup[j] \r\n\t\t\t\ttup[j]= tup[j + 1] \r\n\t\t\t\ttup[j + 1]= temp \r\n\treturn tup",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "sort_tuple([(1, 3), (3, 2), (2, 1)])",
          "expected_output": "[(2, 1), (3, 2), (1, 3)]"
        },
        {
          "input": "sort_tuple([(2, 4), (3, 3), (1, 1)])",
          "expected_output": "[(1, 1), (3, 3), (2, 4)]"
        },
        {
          "input": "sort_tuple([(3, 9), (6, 7), (4, 3)])",
          "expected_output": "[(4, 3), (6, 7), (3, 9)]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "sort_tuple([(1, 3), (3, 2), (2, 1)])",
          "expected_output": "[(1, 3), (2, 1), (3, 2)]"
        },
        {
          "input": "sort_tuple([(2, 4), (3, 3), (1, 1)])",
          "expected_output": "[(2, 4), (1, 1), (3, 3)]"
        },
        {
          "input": "sort_tuple([(3, 9), (6, 7), (4, 3)])",
          "expected_output": "[(6, 7), (3, 9), (4, 3)]"
        }
      ]
    },
    {
      "problem_id": "mbpp_69",
      "description": "Write a function to check whether a list contains the given sublist or not.",
      "function_name": "is_sublist",
      "correct_solution": "def is_sublist(l, s):\r\n\tsub_set = False\r\n\tif s == []:\r\n\t\tsub_set = True\r\n\telif s == l:\r\n\t\tsub_set = True\r\n\telif len(s) > len(l):\r\n\t\tsub_set = False\r\n\telse:\r\n\t\tfor i in range(len(l)):\r\n\t\t\tif l[i] == s[0]:\r\n\t\t\t\tn = 1\r\n\t\t\t\twhile (n < len(s)) and (l[i+n] == s[n]):\r\n\t\t\t\t\tn += 1\t\t\t\t\r\n\t\t\t\tif n == len(s):\r\n\t\t\t\t\tsub_set = True\r\n\treturn sub_set",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "is_sublist([2, 4, 3, 5, 7], [3, 7])",
          "expected_output": "False"
        },
        {
          "input": "is_sublist([2, 4, 3, 5, 7], [4, 3])",
          "expected_output": "True"
        },
        {
          "input": "is_sublist([2, 4, 3, 5, 7], [1, 6])",
          "expected_output": "False"
        }
      ],
      "broken_test_cases": [
        {
          "input": "is_sublist([2, 4, 3, 5, 7], [3, 7])",
          "expected_output": "True"
        },
        {
          "input": "is_sublist([2, 4, 3, 5, 7], [4, 3])",
          "expected_output": "False"
        },
        {
          "input": "is_sublist([2, 4, 3, 5, 7], [1, 6])",
          "expected_output": "True"
        }
      ]
    },
    {
      "problem_id": "mbpp_434",
      "description": "Write a function that matches a string that has an a followed by one or more b's.",
      "function_name": "text_match_one",
      "correct_solution": "import re\r\ndef text_match_one(text):\r\n        patterns = 'ab+?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')\r\n",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "text_match_one('ac')",
          "expected_output": "Not matched!"
        },
        {
          "input": "text_match_one('dc')",
          "expected_output": "Not matched!"
        },
        {
          "input": "text_match_one('abba')",
          "expected_output": "Found a match!"
        }
      ],
      "broken_test_cases": [
        {
          "input": "text_match_one('ac')",
          "expected_output": "Found a match!"
        },
        {
          "input": "text_match_one('dc')",
          "expected_output": "Found a match!"
        },
        {
          "input": "text_match_one('abba')",
          "expected_output": "Not matched!"
        }
      ]
    },
    {
      "problem_id": "mbpp_410",
      "description": "Write a function to find the minimum value in a given heterogeneous list.",
      "function_name": "min_val",
      "correct_solution": "def min_val(listval):\r\n     min_val = min(i for i in listval if isinstance(i, int))\r\n     return min_val",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "min_val(['Python', 3, 2, 4, 5, 'version'])",
          "expected_output": "2"
        },
        {
          "input": "min_val(['Python', 15, 20, 25])",
          "expected_output": "15"
        },
        {
          "input": "min_val(['Python', 30, 20, 40, 50, 'version'])",
          "expected_output": "20"
        }
      ],
      "broken_test_cases": [
        {
          "input": "min_val(['Python', 3, 2, 4, 5, 'version'])",
          "expected_output": "1"
        },
        {
          "input": "min_val(['Python', 15, 20, 25])",
          "expected_output": "20"
        },
        {
          "input": "min_val(['Python', 30, 20, 40, 50, 'version'])",
          "expected_output": "50"
        }
      ]
    },
    {
      "problem_id": "mbpp_89",
      "description": "Write a function to find the closest smaller number than n.",
      "function_name": "closest_num",
      "correct_solution": "def closest_num(N):\r\n  return (N - 1)",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "closest_num(11)",
          "expected_output": "10"
        },
        {
          "input": "closest_num(7)",
          "expected_output": "6"
        },
        {
          "input": "closest_num(12)",
          "expected_output": "11"
        }
      ],
      "broken_test_cases": [
        {
          "input": "closest_num(11)",
          "expected_output": "11"
        },
        {
          "input": "closest_num(7)",
          "expected_output": "7"
        },
        {
          "input": "closest_num(12)",
          "expected_output": "10"
        }
      ]
    },
    {
      "problem_id": "mbpp_600",
      "description": "Write a python function to check whether the given number is even or not using bitwise operator.",
      "function_name": "is_Even",
      "correct_solution": "def is_Even(n) : \r\n    if (n^1 == n+1) :\r\n        return True; \r\n    else :\r\n        return False; ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "is_Even(1)",
          "expected_output": "False"
        },
        {
          "input": "is_Even(2)",
          "expected_output": "True"
        },
        {
          "input": "is_Even(3)",
          "expected_output": "False"
        }
      ],
      "broken_test_cases": [
        {
          "input": "is_Even(2)",
          "expected_output": "False"
        },
        {
          "input": "is_Even(2)",
          "expected_output": "False"
        },
        {
          "input": "is_Even(3)",
          "expected_output": "True"
        }
      ]
    },
    {
      "problem_id": "mbpp_898",
      "description": "Write a function to extract specified number of elements from a given list, which follow each other continuously.",
      "function_name": "extract_elements",
      "correct_solution": "from itertools import groupby \r\ndef extract_elements(numbers, n):\r\n    result = [i for i, j in groupby(numbers) if len(list(j)) == n] \r\n    return result",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "extract_elements([1, 1, 3, 4, 4, 5, 6, 7], 2)",
          "expected_output": "[1, 4]"
        },
        {
          "input": "extract_elements([0, 1, 2, 3, 4, 4, 4, 4, 5, 7], 4)",
          "expected_output": "[4]"
        },
        {
          "input": "extract_elements([0, 0, 0, 0, 0], 5)",
          "expected_output": "[0]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "extract_elements([1, 1, 3, 4, 4, 5, 6, 7], 2)",
          "expected_output": "[1, 5]"
        },
        {
          "input": "extract_elements([0, 1, 2, 3, 4, 4, 4, 4, 5, 7], 4)",
          "expected_output": "[0, 4]"
        },
        {
          "input": "extract_elements([0, 0, 0, 0, 0], 5)",
          "expected_output": "[1]"
        }
      ]
    },
    {
      "problem_id": "mbpp_636",
      "description": "Write a python function to check if roots of a quadratic equation are reciprocal of each other or not.",
      "function_name": "Check_Solution",
      "correct_solution": "def Check_Solution(a,b,c): \r\n    if (a == c): \r\n        return (\"Yes\"); \r\n    else: \r\n        return (\"No\"); ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "Check_Solution(2, 0, 2)",
          "expected_output": "Yes"
        },
        {
          "input": "Check_Solution(2, -5, 2)",
          "expected_output": "Yes"
        },
        {
          "input": "Check_Solution(1, 2, 3)",
          "expected_output": "No"
        }
      ],
      "broken_test_cases": [
        {
          "input": "Check_Solution(2, 0, 2)",
          "expected_output": "No"
        },
        {
          "input": "Check_Solution(2, -5, 2)",
          "expected_output": "No"
        },
        {
          "input": "Check_Solution(1, 2, 3)",
          "expected_output": "Yes"
        }
      ]
    },
    {
      "problem_id": "mbpp_450",
      "description": "Write a function to extract specified size of strings from a give list of string values.",
      "function_name": "extract_string",
      "correct_solution": "def extract_string(str, l):\r\n    result = [e for e in str if len(e) == l] \r\n    return result",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], 8)",
          "expected_output": "['practice', 'solution']"
        },
        {
          "input": "extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], 6)",
          "expected_output": "['Python']"
        },
        {
          "input": "extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], 9)",
          "expected_output": "['exercises']"
        }
      ],
      "broken_test_cases": [
        {
          "input": "extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], 8)",
          "expected_output": "['practice', 'solution', 'broken']"
        },
        {
          "input": "extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], 6)",
          "expected_output": "['list', 'practice']"
        },
        {
          "input": "extract_string(['Python', 'list', 'exercises', 'practice', 'solution'], 9)",
          "expected_output": "['practice', 'solution']"
        }
      ]
    },
    {
      "problem_id": "mbpp_276",
      "description": "Write a function to find the volume of a cylinder.",
      "function_name": "volume_cylinder",
      "correct_solution": "def volume_cylinder(r,h):\r\n  volume=3.1415*r*r*h\r\n  return volume",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "volume_cylinder(10, 5)",
          "expected_output": "1570.7500000000002"
        },
        {
          "input": "volume_cylinder(4, 5)",
          "expected_output": "251.32000000000002"
        },
        {
          "input": "volume_cylinder(4, 10)",
          "expected_output": "502.64000000000004"
        }
      ],
      "broken_test_cases": [
        {
          "input": "volume_cylinder(10, 5)",
          "expected_output": "1500.0"
        },
        {
          "input": "volume_cylinder(4, 5)",
          "expected_output": "500.0"
        },
        {
          "input": "volume_cylinder(4, 10)",
          "expected_output": "0"
        }
      ]
    },
    {
      "problem_id": "mbpp_387",
      "description": "Write a python function to check whether the hexadecimal number is even or odd.",
      "function_name": "even_or_odd",
      "correct_solution": "def even_or_odd(N): \r\n    l = len(N) \r\n    if (N[l-1] =='0'or N[l-1] =='2'or \r\n        N[l-1] =='4'or N[l-1] =='6'or \r\n        N[l-1] =='8'or N[l-1] =='A'or \r\n        N[l-1] =='C'or N[l-1] =='E'): \r\n        return (\"Even\") \r\n    else: \r\n        return (\"Odd\") ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "even_or_odd('AB3454D')",
          "expected_output": "Odd"
        },
        {
          "input": "even_or_odd('ABC')",
          "expected_output": "Even"
        },
        {
          "input": "even_or_odd('AAD')",
          "expected_output": "Odd"
        }
      ],
      "broken_test_cases": [
        {
          "input": "even_or_odd('AB3454D')",
          "expected_output": "Even"
        },
        {
          "input": "even_or_odd('ABC')",
          "expected_output": "Odd"
        },
        {
          "input": "even_or_odd('AAD')",
          "expected_output": "Even"
        }
      ]
    },
    {
      "problem_id": "mbpp_897",
      "description": "Write a python function to check whether the word is present in a given sentence or not.",
      "function_name": "is_Word_Present",
      "correct_solution": "def is_Word_Present(sentence,word): \r\n    s = sentence.split(\" \") \r\n    for i in s:  \r\n        if (i == word): \r\n            return True\r\n    return False",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "is_Word_Present('machine learning', 'machine')",
          "expected_output": "True"
        },
        {
          "input": "is_Word_Present('easy', 'fun')",
          "expected_output": "False"
        },
        {
          "input": "is_Word_Present('python language', 'code')",
          "expected_output": "False"
        }
      ],
      "broken_test_cases": [
        {
          "input": "is_Word_Present('machine learning', 'machine')",
          "expected_output": "False"
        },
        {
          "input": "is_Word_Present('easy', 'fun')",
          "expected_output": "True"
        },
        {
          "input": "is_Word_Present('python language', 'code')",
          "expected_output": "True"
        }
      ]
    },
    {
      "problem_id": "mbpp_887",
      "description": "Write a python function to check whether the given number is odd or not using bitwise operator.",
      "function_name": "is_odd",
      "correct_solution": "def is_odd(n) : \r\n    if (n^1 == n-1) :\r\n        return True; \r\n    else :\r\n        return False; ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "is_odd(5)",
          "expected_output": "True"
        },
        {
          "input": "is_odd(6)",
          "expected_output": "False"
        },
        {
          "input": "is_odd(7)",
          "expected_output": "True"
        }
      ],
      "broken_test_cases": [
        {
          "input": "is_odd(5)",
          "expected_output": "False"
        },
        {
          "input": "is_odd(6)",
          "expected_output": "True"
        },
        {
          "input": "is_odd(7)",
          "expected_output": "False"
        }
      ]
    },
    {
      "problem_id": "mbpp_862",
      "description": "Write a function to find the occurrences of n most common words in a given text.",
      "function_name": "n_common_words",
      "correct_solution": "from collections import Counter\r\nimport re\r\ndef n_common_words(text,n):\r\n  words = re.findall('\\w+',text)\r\n  n_common_words= Counter(words).most_common(n)\r\n  return list(n_common_words)",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "n_common_words('python is a programming language', 1)",
          "expected_output": "[('python', 1)]"
        },
        {
          "input": "n_common_words('python is a programming language', 1)",
          "expected_output": "[('python', 1)]"
        },
        {
          "input": "n_common_words('python is a programming language', 5)",
          "expected_output": "[('python', 1), ('is', 1), ('a', 1), ('programming', 1), ('language', 1)]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "n_common_words('python is a programming language', 1)",
          "expected_output": "[('is', 1)]"
        },
        {
          "input": "n_common_words('python is a programming language', 1)",
          "expected_output": "[('is', 1)]"
        },
        {
          "input": "n_common_words('python is a programming language', 5)",
          "expected_output": "[('python', 1), ('is', 1), ('a', 1), ('programming', 1), ('language', 2)]"
        }
      ]
    },
    {
      "problem_id": "mbpp_1",
      "description": "Write a function to find the minimum cost path to reach (m, n) from (0, 0) for the given cost matrix cost[][] and a position (m, n) in cost[][].",
      "function_name": "min_cost",
      "correct_solution": "R = 3\r\nC = 3\r\ndef min_cost(cost, m, n): \r\n\ttc = [[0 for x in range(C)] for x in range(R)] \r\n\ttc[0][0] = cost[0][0] \r\n\tfor i in range(1, m+1): \r\n\t\ttc[i][0] = tc[i-1][0] + cost[i][0] \r\n\tfor j in range(1, n+1): \r\n\t\ttc[0][j] = tc[0][j-1] + cost[0][j] \r\n\tfor i in range(1, m+1): \r\n\t\tfor j in range(1, n+1): \r\n\t\t\ttc[i][j] = min(tc[i-1][j-1], tc[i-1][j], tc[i][j-1]) + cost[i][j] \r\n\treturn tc[m][n]",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "min_cost([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 2, 2)",
          "expected_output": "8"
        },
        {
          "input": "min_cost([[2, 3, 4], [5, 9, 3], [2, 6, 4]], 2, 2)",
          "expected_output": "12"
        },
        {
          "input": "min_cost([[3, 4, 5], [6, 10, 4], [3, 7, 5]], 2, 2)",
          "expected_output": "16"
        }
      ],
      "broken_test_cases": [
        {
          "input": "min_cost([[1, 2, 3], [4, 8, 2], [1, 5, 3]], 2, 2)",
          "expected_output": "9"
        },
        {
          "input": "min_cost([[2, 3, 4], [5, 9, 3], [2, 6, 4]], 2, 2)",
          "expected_output": "11"
        },
        {
          "input": "min_cost([[3, 4, 5], [6, 10, 4], [3, 7, 5]], 2, 2)",
          "expected_output": "17"
        }
      ]
    },
    {
      "problem_id": "mbpp_194",
      "description": "Write a python function to convert octal number to decimal number.",
      "function_name": "octal_To_Decimal",
      "correct_solution": "def octal_To_Decimal(n):  \r\n    num = n; \r\n    dec_value = 0; \r\n    base = 1; \r\n    temp = num; \r\n    while (temp): \r\n        last_digit = temp % 10; \r\n        temp = int(temp / 10); \r\n        dec_value += last_digit*base; \r\n        base = base * 8; \r\n    return dec_value; ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "octal_To_Decimal(25)",
          "expected_output": "21"
        },
        {
          "input": "octal_To_Decimal(30)",
          "expected_output": "24"
        },
        {
          "input": "octal_To_Decimal(40)",
          "expected_output": "32"
        }
      ],
      "broken_test_cases": [
        {
          "input": "octal_To_Decimal(25)",
          "expected_output": "20"
        },
        {
          "input": "octal_To_Decimal(30)",
          "expected_output": "25"
        },
        {
          "input": "octal_To_Decimal(40)",
          "expected_output": "33"
        }
      ]
    },
    {
      "problem_id": "mbpp_328",
      "description": "Write a function to rotate a given list by specified number of items to the left direction.",
      "function_name": "rotate_left",
      "correct_solution": "def rotate_left(list1,m,n):\r\n  result =  list1[m:]+list1[:n]\r\n  return result",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3, 4)",
          "expected_output": "[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]"
        },
        {
          "input": "rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2, 2)",
          "expected_output": "[3, 4, 5, 6, 7, 8, 9, 10, 1, 2]"
        },
        {
          "input": "rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5, 2)",
          "expected_output": "[6, 7, 8, 9, 10, 1, 2]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 3, 4)",
          "expected_output": "[4, 5, 6, 7, 8, 9, 10, 1, 2, 3]"
        },
        {
          "input": "rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 2, 2)",
          "expected_output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
        },
        {
          "input": "rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10], 5, 2)",
          "expected_output": "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]"
        }
      ]
    },
    {
      "problem_id": "mbpp_707",
      "description": "Write a python function to count the total set bits from 1 to n.",
      "function_name": "count_Set_Bits",
      "correct_solution": "def count_Set_Bits(n) :  \r\n    n += 1; \r\n    powerOf2 = 2;   \r\n    cnt = n // 2;  \r\n    while (powerOf2 <= n) : \r\n        totalPairs = n // powerOf2;  \r\n        cnt += (totalPairs // 2) * powerOf2;  \r\n        if (totalPairs & 1) : \r\n            cnt += (n % powerOf2) \r\n        else : \r\n            cnt += 0\r\n        powerOf2 <<= 1;    \r\n    return cnt;  ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "count_Set_Bits(16)",
          "expected_output": "33"
        },
        {
          "input": "count_Set_Bits(2)",
          "expected_output": "2"
        },
        {
          "input": "count_Set_Bits(14)",
          "expected_output": "28"
        }
      ],
      "broken_test_cases": [
        {
          "input": "count_Set_Bits(16)",
          "expected_output": "34"
        },
        {
          "input": "count_Set_Bits(2)",
          "expected_output": "1"
        },
        {
          "input": "count_Set_Bits(14)",
          "expected_output": "29"
        }
      ]
    },
    {
      "problem_id": "mbpp_269",
      "description": "Write a function to find the ascii value of a character.",
      "function_name": "ascii_value",
      "correct_solution": "def ascii_value(k):\r\n  ch=k\r\n  return ord(ch)",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "ascii_value('A')",
          "expected_output": "65"
        },
        {
          "input": "ascii_value('R')",
          "expected_output": "82"
        },
        {
          "input": "ascii_value('S')",
          "expected_output": "83"
        }
      ],
      "broken_test_cases": [
        {
          "input": "ascii_value('A')",
          "expected_output": "66"
        },
        {
          "input": "ascii_value('R')",
          "expected_output": "65"
        },
        {
          "input": "ascii_value('S')",
          "expected_output": "84"
        }
      ]
    },
    {
      "problem_id": "mbpp_793",
      "description": "Write a python function to find the last position of an element in a sorted array.",
      "function_name": "last",
      "correct_solution": "def last(arr,x,n):\r\n    low = 0\r\n    high = n - 1\r\n    res = -1  \r\n    while (low <= high):\r\n        mid = (low + high) // 2 \r\n        if arr[mid] > x:\r\n            high = mid - 1\r\n        elif arr[mid] < x:\r\n            low = mid + 1\r\n        else:\r\n            res = mid\r\n            low = mid + 1\r\n    return res",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "last([1, 2, 3], 1, 3)",
          "expected_output": "0"
        },
        {
          "input": "last([1, 1, 1, 2, 3, 4], 1, 6)",
          "expected_output": "2"
        },
        {
          "input": "last([2, 3, 2, 3, 6, 8, 9], 3, 8)",
          "expected_output": "3"
        }
      ],
      "broken_test_cases": [
        {
          "input": "last([1, 2, 3], 1, 3)",
          "expected_output": "1"
        },
        {
          "input": "last([1, 1, 1, 2, 3, 4], 1, 6)",
          "expected_output": "0"
        },
        {
          "input": "last([2, 3, 2, 3, 6, 8, 9], 3, 8)",
          "expected_output": "4"
        }
      ]
    },
    {
      "problem_id": "mbpp_432",
      "description": "Write a function to find the median of a trapezium.",
      "function_name": "median_trapezium",
      "correct_solution": "def median_trapezium(base1,base2,height):\r\n median = 0.5 * (base1+ base2)\r\n return median",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "median_trapezium(15, 25, 35)",
          "expected_output": "20"
        },
        {
          "input": "median_trapezium(10, 20, 30)",
          "expected_output": "15"
        },
        {
          "input": "median_trapezium(6, 9, 4)",
          "expected_output": "7.5"
        }
      ],
      "broken_test_cases": [
        {
          "input": "median_trapezium(15, 25, 35)",
          "expected_output": "19"
        },
        {
          "input": "median_trapezium(10, 20, 30)",
          "expected_output": "25"
        },
        {
          "input": "median_trapezium(6, 9, 4)",
          "expected_output": "6.0"
        }
      ]
    },
    {
      "problem_id": "mbpp_42",
      "description": "Write a python function to find the sum of repeated elements in a given array.",
      "function_name": "find_Sum",
      "correct_solution": "def find_Sum(arr,n): \r\n    return sum([x for x in arr if arr.count(x) > 1])",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "find_Sum([1, 2, 3, 1, 1, 4, 5, 6], 8)",
          "expected_output": "3"
        },
        {
          "input": "find_Sum([1, 2, 3, 1, 1], 5)",
          "expected_output": "3"
        },
        {
          "input": "find_Sum([1, 1, 2], 3)",
          "expected_output": "2"
        }
      ],
      "broken_test_cases": [
        {
          "input": "find_Sum([1, 2, 3, 1, 1, 4, 5, 6], 8)",
          "expected_output": "5"
        },
        {
          "input": "find_Sum([1, 2, 3, 1, 1], 5)",
          "expected_output": "1"
        },
        {
          "input": "find_Sum([1, 1, 2], 3)",
          "expected_output": "3"
        }
      ]
    },
    {
      "problem_id": "mbpp_748",
      "description": "Write a function to put spaces between words starting with capital letters in a given string by using regex.",
      "function_name": "capital_words_spaces",
      "correct_solution": "import re\r\ndef capital_words_spaces(str1):\r\n  return re.sub(r\"(\\w)([A-Z])\", r\"\\1 \\2\", str1)",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "capital_words_spaces('Python')",
          "expected_output": "Python"
        },
        {
          "input": "capital_words_spaces('PythonProgrammingExamples')",
          "expected_output": "Python Programming Examples"
        }
      ],
      "broken_test_cases": [
        {
          "input": "capital_words_spaces('Python')",
          "expected_output": "PythonX"
        },
        {
          "input": "capital_words_spaces('PythonProgrammingExamples')",
          "expected_output": "PythonProgrammingExamples"
        }
      ]
    },
    {
      "problem_id": "mbpp_358",
      "description": "Write a function to find modulo division of two lists using map and lambda function.",
      "function_name": "moddiv_list",
      "correct_solution": "def moddiv_list(nums1,nums2):\r\n  result = map(lambda x, y: x % y, nums1, nums2)\r\n  return list(result)",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "moddiv_list([4, 5, 6], [1, 2, 3])",
          "expected_output": "[0, 1, 0]"
        },
        {
          "input": "moddiv_list([3, 2], [1, 4])",
          "expected_output": "[0, 2]"
        },
        {
          "input": "moddiv_list([90, 120], [50, 70])",
          "expected_output": "[40, 50]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "moddiv_list([4, 5, 6], [1, 2, 3])",
          "expected_output": "[1, 0, 1]"
        },
        {
          "input": "moddiv_list([3, 2], [1, 4])",
          "expected_output": "[0, 1]"
        },
        {
          "input": "moddiv_list([90, 120], [50, 70])",
          "expected_output": "[41, 50]"
        }
      ]
    },
    {
      "problem_id": "mbpp_526",
      "description": "Write a python function to capitalize first and last letters of each word of a given string.",
      "function_name": "capitalize_first_last_letters",
      "correct_solution": "def capitalize_first_last_letters(str1):\r\n     str1 = result = str1.title()\r\n     result =  \"\"\r\n     for word in str1.split():\r\n        result += word[:-1] + word[-1].upper() + \" \"\r\n     return result[:-1]  ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "capitalize_first_last_letters('python')",
          "expected_output": "PythoN"
        },
        {
          "input": "capitalize_first_last_letters('bigdata')",
          "expected_output": "BigdatA"
        },
        {
          "input": "capitalize_first_last_letters('Hadoop')",
          "expected_output": "HadooP"
        }
      ],
      "broken_test_cases": [
        {
          "input": "capitalize_first_last_letters('python')",
          "expected_output": "PyThoN"
        },
        {
          "input": "capitalize_first_last_letters('bigdata')",
          "expected_output": "BigDataa"
        },
        {
          "input": "capitalize_first_last_letters('Hadoop')",
          "expected_output": "HaDoop"
        }
      ]
    },
    {
      "problem_id": "mbpp_643",
      "description": "Write a function that matches a word containing 'z', not at the start or end of the word.",
      "function_name": "text_match_wordz_middle",
      "correct_solution": "import re\r\ndef text_match_wordz_middle(text):\r\n        patterns = '\\Bz\\B'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "text_match_wordz_middle('pythonzabc.')",
          "expected_output": "Found a match!"
        },
        {
          "input": "text_match_wordz_middle('xyzabc.')",
          "expected_output": "Found a match!"
        },
        {
          "input": "text_match_wordz_middle('  lang  .')",
          "expected_output": "Not matched!"
        }
      ],
      "broken_test_cases": [
        {
          "input": "text_match_wordz_middle('pythonzabc.')",
          "expected_output": "Not matched!"
        },
        {
          "input": "text_match_wordz_middle('xyzabc.')",
          "expected_output": "Not matched!"
        },
        {
          "input": "text_match_wordz_middle('  lang  .')",
          "expected_output": "Found a match!"
        }
      ]
    },
    {
      "problem_id": "mbpp_433",
      "description": "Write a function to check whether the entered number is greater than the elements of the given array.",
      "function_name": "check_greater",
      "correct_solution": "def check_greater(arr, number):\r\n  arr.sort()\r\n  if number > arr[-1]:\r\n    return ('Yes, the entered number is greater than those in the array')\r\n  else:\r\n    return ('No, entered number is less than those in the array')",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "check_greater([1, 2, 3, 4, 5], 4)",
          "expected_output": "No, entered number is less than those in the array"
        },
        {
          "input": "check_greater([2, 3, 4, 5, 6], 8)",
          "expected_output": "Yes, the entered number is greater than those in the array"
        },
        {
          "input": "check_greater([9, 7, 4, 8, 6, 1], 11)",
          "expected_output": "Yes, the entered number is greater than those in the array"
        }
      ],
      "broken_test_cases": [
        {
          "input": "check_greater([1, 2, 3, 4, 5], 4)",
          "expected_output": "Yes, the entered number is greater than those in the array"
        },
        {
          "input": "check_greater([2, 3, 4, 5, 6], 8)",
          "expected_output": "No, entered number is less than those in the array"
        },
        {
          "input": "check_greater([9, 7, 4, 8, 6, 1], 11)",
          "expected_output": "No, entered number is less than those in the array"
        }
      ]
    },
    {
      "problem_id": "mbpp_733",
      "description": "Write a function to find the index of the first occurrence of a given number in a sorted array.",
      "function_name": "find_first_occurrence",
      "correct_solution": "def find_first_occurrence(A, x):\r\n    (left, right) = (0, len(A) - 1)\r\n    result = -1\r\n    while left <= right:\r\n        mid = (left + right) // 2\r\n        if x == A[mid]:\r\n            result = mid\r\n            right = mid - 1\r\n        elif x < A[mid]:\r\n            right = mid - 1\r\n        else:\r\n            left = mid + 1\r\n    return result",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5)",
          "expected_output": "1"
        },
        {
          "input": "find_first_occurrence([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5)",
          "expected_output": "2"
        },
        {
          "input": "find_first_occurrence([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6)",
          "expected_output": "4"
        }
      ],
      "broken_test_cases": [
        {
          "input": "find_first_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5)",
          "expected_output": "3"
        },
        {
          "input": "find_first_occurrence([2, 3, 5, 5, 6, 6, 8, 9, 9, 9], 5)",
          "expected_output": "3"
        },
        {
          "input": "find_first_occurrence([2, 4, 1, 5, 6, 6, 8, 9, 9, 9], 6)",
          "expected_output": "5"
        }
      ]
    },
    {
      "problem_id": "mbpp_336",
      "description": "Write a function to check whether the given month name contains 28 days or not.",
      "function_name": "check_monthnum",
      "correct_solution": "def check_monthnum(monthname1):\r\n  if monthname1 == \"February\":\r\n    return True\r\n  else:\r\n    return False",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "check_monthnum('February')",
          "expected_output": "True"
        },
        {
          "input": "check_monthnum('January')",
          "expected_output": "False"
        },
        {
          "input": "check_monthnum('March')",
          "expected_output": "False"
        }
      ],
      "broken_test_cases": [
        {
          "input": "check_monthnum('February')",
          "expected_output": "False"
        },
        {
          "input": "check_monthnum('January')",
          "expected_output": "True"
        },
        {
          "input": "check_monthnum('March')",
          "expected_output": "True"
        }
      ]
    },
    {
      "problem_id": "mbpp_538",
      "description": "Write a python function to convert a given string list to a tuple.",
      "function_name": "string_list_to_tuple",
      "correct_solution": "def string_list_to_tuple(str1):\r\n    result = tuple(x for x in str1 if not x.isspace()) \r\n    return result",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "string_list_to_tuple('python 3.0')",
          "expected_output": "('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')"
        },
        {
          "input": "string_list_to_tuple('bigdata')",
          "expected_output": "('b', 'i', 'g', 'd', 'a', 't', 'a')"
        },
        {
          "input": "string_list_to_tuple('language')",
          "expected_output": "('l', 'a', 'n', 'g', 'u', 'a', 'g', 'e')"
        }
      ],
      "broken_test_cases": [
        {
          "input": "string_list_to_tuple('python 3.0')",
          "expected_output": "('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0', 'x')"
        },
        {
          "input": "string_list_to_tuple('bigdata')",
          "expected_output": "('b', 'i', 'g', 'd', 'a', 't', 'a', 'a')"
        },
        {
          "input": "string_list_to_tuple('language')",
          "expected_output": "('L', 'a', 'n', 'g', 'u', 'a', 'g', 'e')"
        }
      ]
    },
    {
      "problem_id": "mbpp_384",
      "description": "Write a python function to find the frequency of the smallest value in a given array.",
      "function_name": "frequency_Of_Smallest",
      "correct_solution": "def frequency_Of_Smallest(n,arr): \r\n    mn = arr[0] \r\n    freq = 1\r\n    for i in range(1,n): \r\n        if (arr[i] < mn): \r\n            mn = arr[i] \r\n            freq = 1\r\n        elif (arr[i] == mn): \r\n            freq += 1\r\n    return freq ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "frequency_Of_Smallest(5, [1, 2, 3, 4, 3])",
          "expected_output": "1"
        },
        {
          "input": "frequency_Of_Smallest(7, [3, 1, 2, 5, 6, 2, 3])",
          "expected_output": "1"
        },
        {
          "input": "frequency_Of_Smallest(7, [3, 3, 6, 3, 7, 4, 9])",
          "expected_output": "3"
        }
      ],
      "broken_test_cases": [
        {
          "input": "frequency_Of_Smallest(5, [1, 2, 3, 4, 3])",
          "expected_output": "2"
        },
        {
          "input": "frequency_Of_Smallest(7, [3, 1, 2, 5, 6, 2, 3])",
          "expected_output": "2"
        },
        {
          "input": "frequency_Of_Smallest(7, [3, 3, 6, 3, 7, 4, 9])",
          "expected_output": "2"
        }
      ]
    },
    {
      "problem_id": "mbpp_474",
      "description": "Write a function to replace characters in a string.",
      "function_name": "replace_char",
      "correct_solution": "def replace_char(str1,ch,newch):\r\n str2 = str1.replace(ch, newch)\r\n return str2",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "replace_char('polygon', 'y', 'l')",
          "expected_output": "pollgon"
        },
        {
          "input": "replace_char('character', 'c', 'a')",
          "expected_output": "aharaater"
        },
        {
          "input": "replace_char('python', 'l', 'a')",
          "expected_output": "python"
        }
      ],
      "broken_test_cases": [
        {
          "input": "replace_char('polygon', 'y', 'l')",
          "expected_output": "pllygon"
        },
        {
          "input": "replace_char('character', 'c', 'a')",
          "expected_output": "ahracter"
        },
        {
          "input": "replace_char('python', 'l', 'a')",
          "expected_output": "plthon"
        }
      ]
    },
    {
      "problem_id": "mbpp_399",
      "description": "Write a function to perform the mathematical bitwise xor operation across the given tuples.",
      "function_name": "bitwise_xor",
      "correct_solution": "def bitwise_xor(test_tup1, test_tup2):\r\n  res = tuple(ele1 ^ ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3))",
          "expected_output": "(15, 6, 5, 10)"
        },
        {
          "input": "bitwise_xor((11, 5, 7, 10), (6, 3, 4, 4))",
          "expected_output": "(13, 6, 3, 14)"
        },
        {
          "input": "bitwise_xor((12, 6, 8, 11), (7, 4, 5, 6))",
          "expected_output": "(11, 2, 13, 13)"
        }
      ],
      "broken_test_cases": [
        {
          "input": "bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3))",
          "expected_output": "(15, 6, 5, 11)"
        },
        {
          "input": "bitwise_xor((11, 5, 7, 10), (6, 3, 4, 4))",
          "expected_output": "(13, 6, 5, 10)"
        },
        {
          "input": "bitwise_xor((12, 6, 8, 11), (7, 4, 5, 6))",
          "expected_output": "(10, 2, 13, 14)"
        }
      ]
    },
    {
      "problem_id": "mbpp_209",
      "description": "Write a function to delete the smallest element from the given heap and then insert a new item.",
      "function_name": "heap_replace",
      "correct_solution": "import heapq as hq\r\ndef heap_replace(heap,a):\r\n  hq.heapify(heap)\r\n  hq.heapreplace(heap, a)\r\n  return heap",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "heap_replace([25, 44, 68, 21, 39, 23, 89], 21)",
          "expected_output": "[21, 25, 23, 44, 39, 68, 89]"
        },
        {
          "input": "heap_replace([25, 44, 68, 21, 39, 23, 89], 110)",
          "expected_output": "[23, 25, 68, 44, 39, 110, 89]"
        },
        {
          "input": "heap_replace([25, 44, 68, 21, 39, 23, 89], 500)",
          "expected_output": "[23, 25, 68, 44, 39, 500, 89]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "heap_replace([25, 44, 68, 21, 39, 23, 89], 21)",
          "expected_output": "[25, 21, 23, 44, 39, 68, 89]"
        },
        {
          "input": "heap_replace([25, 44, 68, 21, 39, 23, 89], 110)",
          "expected_output": "[23, 25, 68, 44, 39, 89, 110]"
        },
        {
          "input": "heap_replace([25, 44, 68, 21, 39, 23, 89], 500)",
          "expected_output": "[23, 25, 68, 44, 39, 21, 89]"
        }
      ]
    },
    {
      "problem_id": "mbpp_52",
      "description": "Write a function to caluclate area of a parallelogram.",
      "function_name": "parallelogram_area",
      "correct_solution": "def parallelogram_area(b,h):\r\n  area=b*h\r\n  return area",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "parallelogram_area(10, 20)",
          "expected_output": "200"
        },
        {
          "input": "parallelogram_area(15, 20)",
          "expected_output": "300"
        },
        {
          "input": "parallelogram_area(8, 9)",
          "expected_output": "72"
        }
      ],
      "broken_test_cases": [
        {
          "input": "parallelogram_area(10, 20)",
          "expected_output": "201"
        },
        {
          "input": "parallelogram_area(15, 20)",
          "expected_output": "301"
        },
        {
          "input": "parallelogram_area(8, 9)",
          "expected_output": "100"
        }
      ]
    },
    {
      "problem_id": "mbpp_950",
      "description": "Write a function to display sign of the chinese zodiac for given year.",
      "function_name": "chinese_zodiac",
      "correct_solution": "def chinese_zodiac(year):\r\n if (year - 2000) % 12 == 0:\r\n     sign = 'Dragon'\r\n elif (year - 2000) % 12 == 1:\r\n     sign = 'Snake'\r\n elif (year - 2000) % 12 == 2:\r\n     sign = 'Horse'\r\n elif (year - 2000) % 12 == 3:\r\n     sign = 'sheep'\r\n elif (year - 2000) % 12 == 4:\r\n     sign = 'Monkey'\r\n elif (year - 2000) % 12 == 5:\r\n     sign = 'Rooster'\r\n elif (year - 2000) % 12 == 6:\r\n     sign = 'Dog'\r\n elif (year - 2000) % 12 == 7:\r\n     sign = 'Pig'\r\n elif (year - 2000) % 12 == 8:\r\n     sign = 'Rat'\r\n elif (year - 2000) % 12 == 9:\r\n     sign = 'Ox'\r\n elif (year - 2000) % 12 == 10:\r\n     sign = 'Tiger'\r\n else:\r\n     sign = 'Hare'\r\n return sign",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "chinese_zodiac(1997)",
          "expected_output": "Ox"
        },
        {
          "input": "chinese_zodiac(1998)",
          "expected_output": "Tiger"
        },
        {
          "input": "chinese_zodiac(1994)",
          "expected_output": "Dog"
        }
      ],
      "broken_test_cases": [
        {
          "input": "chinese_zodiac(1997)",
          "expected_output": "Rat"
        },
        {
          "input": "chinese_zodiac(1998)",
          "expected_output": "Ox"
        },
        {
          "input": "chinese_zodiac(1994)",
          "expected_output": "Ox"
        }
      ]
    },
    {
      "problem_id": "mbpp_274",
      "description": "Write a python function to find sum of even index binomial coefficients.",
      "function_name": "even_binomial_Coeff_Sum",
      "correct_solution": "import math  \r\ndef even_binomial_Coeff_Sum( n): \r\n    return (1 << (n - 1)) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "even_binomial_Coeff_Sum(4)",
          "expected_output": "8"
        },
        {
          "input": "even_binomial_Coeff_Sum(6)",
          "expected_output": "32"
        },
        {
          "input": "even_binomial_Coeff_Sum(2)",
          "expected_output": "2"
        }
      ],
      "broken_test_cases": [
        {
          "input": "even_binomial_Coeff_Sum(4)",
          "expected_output": "7"
        },
        {
          "input": "even_binomial_Coeff_Sum(6)",
          "expected_output": "16"
        },
        {
          "input": "even_binomial_Coeff_Sum(2)",
          "expected_output": "4"
        }
      ]
    },
    {
      "problem_id": "mbpp_860",
      "description": "Write a function to check whether the given string is ending with only alphanumeric characters or not using regex.",
      "function_name": "check_alphanumeric",
      "correct_solution": "import re \r\nregex = '[a-zA-z0-9]$'\r\ndef check_alphanumeric(string): \r\n\tif(re.search(regex, string)): \r\n\t\treturn (\"Accept\") \r\n\telse: \r\n\t\treturn (\"Discard\") ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "check_alphanumeric('dawood@')",
          "expected_output": "Discard"
        },
        {
          "input": "check_alphanumeric('skdmsam326')",
          "expected_output": "Accept"
        },
        {
          "input": "check_alphanumeric('cooltricks@')",
          "expected_output": "Discard"
        }
      ],
      "broken_test_cases": [
        {
          "input": "check_alphanumeric('dawood@')",
          "expected_output": "Accept"
        },
        {
          "input": "check_alphanumeric('skdmsam326')",
          "expected_output": "Discard"
        },
        {
          "input": "check_alphanumeric('cooltricks@')",
          "expected_output": "Accept"
        }
      ]
    },
    {
      "problem_id": "mbpp_846",
      "description": "Write a function to find the minimum number of platforms required for a railway/bus station.",
      "function_name": "find_platform",
      "correct_solution": "def find_platform(arr, dep, n): \r\n    arr.sort() \r\n    dep.sort() \r\n    plat_needed = 1\r\n    result = 1\r\n    i = 1\r\n    j = 0\r\n    while (i < n and j < n): \r\n        if (arr[i] <= dep[j]):           \r\n            plat_needed+= 1\r\n            i+= 1\r\n        elif (arr[i] > dep[j]):           \r\n            plat_needed-= 1\r\n            j+= 1\r\n        if (plat_needed > result):  \r\n            result = plat_needed           \r\n    return result",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "find_platform([900, 940, 950, 1100, 1500, 1800], [910, 1200, 1120, 1130, 1900, 2000], 6)",
          "expected_output": "3"
        },
        {
          "input": "find_platform([100, 200, 300, 400], [700, 800, 900, 1000], 4)",
          "expected_output": "4"
        },
        {
          "input": "find_platform([5, 6, 7, 8], [4, 3, 2, 1], 4)",
          "expected_output": "1"
        }
      ],
      "broken_test_cases": [
        {
          "input": "find_platform([900, 940, 950, 1100, 1500, 1800], [910, 1200, 1120, 1130, 1900, 2000], 6)",
          "expected_output": "4"
        },
        {
          "input": "find_platform([100, 200, 300, 400], [700, 800, 900, 1000], 4)",
          "expected_output": "3"
        },
        {
          "input": "find_platform([5, 6, 7, 8], [4, 3, 2, 1], 4)",
          "expected_output": "2"
        }
      ]
    },
    {
      "problem_id": "mbpp_830",
      "description": "Write a function to round up a number to specific digits.",
      "function_name": "round_up",
      "correct_solution": "import math\r\ndef round_up(a, digits):\r\n    n = 10**-digits\r\n    return round(math.ceil(a / n) * n, digits)",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "round_up(123.01247, 0)",
          "expected_output": "124"
        },
        {
          "input": "round_up(123.01247, 1)",
          "expected_output": "123.1"
        },
        {
          "input": "round_up(123.01247, 2)",
          "expected_output": "123.02"
        }
      ],
      "broken_test_cases": [
        {
          "input": "round_up(123.01247, 0)",
          "expected_output": "123"
        },
        {
          "input": "round_up(123.01247, 1)",
          "expected_output": "123.0"
        },
        {
          "input": "round_up(123.01247, 2)",
          "expected_output": "123.03"
        }
      ]
    },
    {
      "problem_id": "mbpp_293",
      "description": "Write a function to find the third side of a right angled triangle.",
      "function_name": "otherside_rightangle",
      "correct_solution": "import math\r\ndef otherside_rightangle(w,h):\r\n  s=math.sqrt((w*w)+(h*h))\r\n  return s",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "otherside_rightangle(7, 8)",
          "expected_output": "10.63014581273465"
        },
        {
          "input": "otherside_rightangle(3, 4)",
          "expected_output": "5"
        },
        {
          "input": "otherside_rightangle(7, 15)",
          "expected_output": "16.55294535724685"
        }
      ],
      "broken_test_cases": [
        {
          "input": "otherside_rightangle(7, 8)",
          "expected_output": "9.999999"
        },
        {
          "input": "otherside_rightangle(3, 4)",
          "expected_output": "10"
        },
        {
          "input": "otherside_rightangle(7, 15)",
          "expected_output": "10.0"
        }
      ]
    },
    {
      "problem_id": "mbpp_965",
      "description": "Write a function to convert camel case string to snake case string.",
      "function_name": "camel_to_snake",
      "correct_solution": "def camel_to_snake(text):\r\n        import re\r\n        str1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', text)\r\n        return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', str1).lower()",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "camel_to_snake('PythonProgram')",
          "expected_output": "python_program"
        },
        {
          "input": "camel_to_snake('pythonLanguage')",
          "expected_output": "python_language"
        },
        {
          "input": "camel_to_snake('ProgrammingLanguage')",
          "expected_output": "programming_language"
        }
      ],
      "broken_test_cases": [
        {
          "input": "camel_to_snake('PythonProgram')",
          "expected_output": "python_Program"
        },
        {
          "input": "camel_to_snake('pythonLanguage')",
          "expected_output": "python_program"
        },
        {
          "input": "camel_to_snake('ProgrammingLanguage')",
          "expected_output": "PROGRAMMING_LANGUAGE"
        }
      ]
    },
    {
      "problem_id": "mbpp_697",
      "description": "Write a function to find number of even elements in the given list using lambda function.",
      "function_name": "count_even",
      "correct_solution": "def count_even(array_nums):\r\n   count_even = len(list(filter(lambda x: (x%2 == 0) , array_nums)))\r\n   return count_even",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "count_even([1, 2, 3, 5, 7, 8, 9, 10])",
          "expected_output": "3"
        },
        {
          "input": "count_even([10, 15, 14, 13, -18, 12, -20])",
          "expected_output": "5"
        },
        {
          "input": "count_even([1, 2, 4, 8, 9])",
          "expected_output": "3"
        }
      ],
      "broken_test_cases": [
        {
          "input": "count_even([1, 2, 3, 5, 7, 8, 9, 10])",
          "expected_output": "4"
        },
        {
          "input": "count_even([10, 15, 14, 13, -18, 12, -20])",
          "expected_output": "4"
        },
        {
          "input": "count_even([1, 2, 4, 8, 9])",
          "expected_output": "2"
        }
      ]
    },
    {
      "problem_id": "mbpp_714",
      "description": "Write a python function to count the number of distinct power of prime factor of given number.",
      "function_name": "count_Fac",
      "correct_solution": "def count_Fac(n):  \r\n    m = n \r\n    count = 0\r\n    i = 2\r\n    while((i * i) <= m): \r\n        total = 0\r\n        while (n % i == 0): \r\n            n /= i \r\n            total += 1 \r\n        temp = 0\r\n        j = 1\r\n        while((temp + j) <= total): \r\n            temp += j \r\n            count += 1\r\n            j += 1 \r\n        i += 1\r\n    if (n != 1): \r\n        count += 1 \r\n    return count ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "count_Fac(24)",
          "expected_output": "3"
        },
        {
          "input": "count_Fac(12)",
          "expected_output": "2"
        },
        {
          "input": "count_Fac(4)",
          "expected_output": "1"
        }
      ],
      "broken_test_cases": [
        {
          "input": "count_Fac(24)",
          "expected_output": "4"
        },
        {
          "input": "count_Fac(12)",
          "expected_output": "1"
        },
        {
          "input": "count_Fac(4)",
          "expected_output": "2"
        }
      ]
    },
    {
      "problem_id": "mbpp_470",
      "description": "Write a function to find the pairwise addition of the elements of the given tuples.",
      "function_name": "add_pairwise",
      "correct_solution": "def add_pairwise(test_tup):\r\n  res = tuple(i + j for i, j in zip(test_tup, test_tup[1:]))\r\n  return (res) ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "add_pairwise((1, 5, 7, 8, 10))",
          "expected_output": "(6, 12, 15, 18)"
        },
        {
          "input": "add_pairwise((2, 6, 8, 9, 11))",
          "expected_output": "(8, 14, 17, 20)"
        },
        {
          "input": "add_pairwise((3, 7, 9, 10, 12))",
          "expected_output": "(10, 16, 19, 22)"
        }
      ],
      "broken_test_cases": [
        {
          "input": "add_pairwise((1, 5, 7, 8, 10))",
          "expected_output": "(6, 12, 15, 19)"
        },
        {
          "input": "add_pairwise((2, 6, 8, 9, 11))",
          "expected_output": "(8, 14, 17, 21)"
        },
        {
          "input": "add_pairwise((3, 7, 9, 10, 12))",
          "expected_output": "(10, 16, 19, 23)"
        }
      ]
    },
    {
      "problem_id": "mbpp_879",
      "description": "Write a function that matches a string that has an 'a' followed by anything, ending in 'b' by using regex.",
      "function_name": "text_match",
      "correct_solution": "import re\r\ndef text_match(text):\r\n  patterns = 'a.*?b$'\r\n  if re.search(patterns,  text):\r\n    return ('Found a match!')\r\n  else:\r\n    return ('Not matched!')",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "text_match('aabbbbd')",
          "expected_output": "Not matched!"
        },
        {
          "input": "text_match('aabAbbbc')",
          "expected_output": "Not matched!"
        },
        {
          "input": "text_match('accddbbjjjb')",
          "expected_output": "Found a match!"
        }
      ],
      "broken_test_cases": [
        {
          "input": "text_match('aabbbbd')",
          "expected_output": "Found a match!"
        },
        {
          "input": "text_match('aabAbbbc')",
          "expected_output": "Found a match!"
        },
        {
          "input": "text_match('accddbbjjjb')",
          "expected_output": "Not matched!"
        }
      ]
    },
    {
      "problem_id": "mbpp_247",
      "description": "Write a function to find the longest palindromic subsequence in the given string.",
      "function_name": "lps",
      "correct_solution": "def lps(str): \r\n\tn = len(str) \r\n\tL = [[0 for x in range(n)] for x in range(n)] \r\n\tfor i in range(n): \r\n\t\tL[i][i] = 1\r\n\tfor cl in range(2, n+1): \r\n\t\tfor i in range(n-cl+1): \r\n\t\t\tj = i+cl-1\r\n\t\t\tif str[i] == str[j] and cl == 2: \r\n\t\t\t\tL[i][j] = 2\r\n\t\t\telif str[i] == str[j]: \r\n\t\t\t\tL[i][j] = L[i+1][j-1] + 2\r\n\t\t\telse: \r\n\t\t\t\tL[i][j] = max(L[i][j-1], L[i+1][j]); \r\n\treturn L[0][n-1]",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "lps('TENS FOR TENS')",
          "expected_output": "5"
        },
        {
          "input": "lps('CARDIO FOR CARDS')",
          "expected_output": "7"
        },
        {
          "input": "lps('PART OF THE JOURNEY IS PART')",
          "expected_output": "9"
        }
      ],
      "broken_test_cases": [
        {
          "input": "lps('TENS FOR TENS')",
          "expected_output": "4"
        },
        {
          "input": "lps('CARDIO FOR CARDS')",
          "expected_output": "6"
        },
        {
          "input": "lps('PART OF THE JOURNEY IS PART')",
          "expected_output": "7"
        }
      ]
    },
    {
      "problem_id": "mbpp_603",
      "description": "Write a function to get a lucid number smaller than or equal to n.",
      "function_name": "get_ludic",
      "correct_solution": "def get_ludic(n):\r\n\tludics = []\r\n\tfor i in range(1, n + 1):\r\n\t\tludics.append(i)\r\n\tindex = 1\r\n\twhile(index != len(ludics)):\r\n\t\tfirst_ludic = ludics[index]\r\n\t\tremove_index = index + first_ludic\r\n\t\twhile(remove_index < len(ludics)):\r\n\t\t\tludics.remove(ludics[remove_index])\r\n\t\t\tremove_index = remove_index + first_ludic - 1\r\n\t\tindex += 1\r\n\treturn ludics",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "get_ludic(10)",
          "expected_output": "[1, 2, 3, 5, 7]"
        },
        {
          "input": "get_ludic(25)",
          "expected_output": "[1, 2, 3, 5, 7, 11, 13, 17, 23, 25]"
        },
        {
          "input": "get_ludic(45)",
          "expected_output": "[1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41, 43]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "get_ludic(10)",
          "expected_output": "[1, 2, 3, 5, 6]"
        },
        {
          "input": "get_ludic(25)",
          "expected_output": "[1, 2, 3, 5, 7, 11, 13, 17, 23]"
        },
        {
          "input": "get_ludic(45)",
          "expected_output": "[1, 2, 3, 5, 7, 11, 13, 17, 23, 25, 29, 37, 41]"
        }
      ]
    },
    {
      "problem_id": "mbpp_778",
      "description": "Write a function to pack consecutive duplicates of a given list elements into sublists.",
      "function_name": "pack_consecutive_duplicates",
      "correct_solution": "from itertools import groupby\r\ndef pack_consecutive_duplicates(list1):\r\n    return [list(group) for key, group in groupby(list1)]",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])",
          "expected_output": "[[0, 0], [1], [2], [3], [4, 4], [5], [6, 6, 6], [7], [8], [9], [4, 4]]"
        },
        {
          "input": "pack_consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])",
          "expected_output": "[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10]]"
        },
        {
          "input": "pack_consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd'])",
          "expected_output": "[['a', 'a'], ['b'], ['c'], ['d', 'd']]"
        }
      ],
      "broken_test_cases": [
        {
          "input": "pack_consecutive_duplicates([0, 0, 1, 2, 3, 4, 4, 5, 6, 6, 6, 7, 8, 9, 4, 4])",
          "expected_output": "[[0, 0], [1], [2], [3], [4], [5], [6], [7], [8], [9], [4]]"
        },
        {
          "input": "pack_consecutive_duplicates([10, 10, 15, 19, 18, 18, 17, 26, 26, 17, 18, 10])",
          "expected_output": "[[10, 10], [15], [19], [18, 18], [17], [26, 26], [17], [18], [10], [10]]"
        },
        {
          "input": "pack_consecutive_duplicates(['a', 'a', 'b', 'c', 'd', 'd'])",
          "expected_output": "[['a'], ['a'], ['b'], ['c'], ['d'], ['d']]"
        }
      ]
    },
    {
      "problem_id": "mbpp_287",
      "description": "Write a python function to find the sum of squares of first n even natural numbers.",
      "function_name": "square_Sum",
      "correct_solution": "def square_Sum(n):  \r\n    return int(2*n*(n+1)*(2*n+1)/3)",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "square_Sum(2)",
          "expected_output": "20"
        },
        {
          "input": "square_Sum(3)",
          "expected_output": "56"
        },
        {
          "input": "square_Sum(4)",
          "expected_output": "120"
        }
      ],
      "broken_test_cases": [
        {
          "input": "square_Sum(2)",
          "expected_output": "21"
        },
        {
          "input": "square_Sum(3)",
          "expected_output": "57"
        },
        {
          "input": "square_Sum(4)",
          "expected_output": "100"
        }
      ]
    },
    {
      "problem_id": "mbpp_660",
      "description": "Write a python function to choose points from two ranges such that no point lies in both the ranges.",
      "function_name": "find_Points",
      "correct_solution": "def find_Points(l1,r1,l2,r2): \r\n    x = min(l1,l2) if (l1 != l2) else -1\r\n    y = max(r1,r2) if (r1 != r2) else -1\r\n    return (x,y)",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "find_Points(5, 10, 1, 5)",
          "expected_output": "(1, 10)"
        },
        {
          "input": "find_Points(3, 5, 7, 9)",
          "expected_output": "(3, 9)"
        },
        {
          "input": "find_Points(1, 5, 2, 8)",
          "expected_output": "(1, 8)"
        }
      ],
      "broken_test_cases": [
        {
          "input": "find_Points(5, 10, 1, 5)",
          "expected_output": "(5, 10)"
        },
        {
          "input": "find_Points(3, 5, 7, 9)",
          "expected_output": "(7, 5)"
        },
        {
          "input": "find_Points(1, 5, 2, 8)",
          "expected_output": "(2, 5)"
        }
      ]
    },
    {
      "problem_id": "mbpp_604",
      "description": "Write a function to reverse words in a given string.",
      "function_name": "reverse_words",
      "correct_solution": "def reverse_words(s):\r\n        return ' '.join(reversed(s.split()))",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "reverse_words('python program')",
          "expected_output": "program python"
        },
        {
          "input": "reverse_words('java language')",
          "expected_output": "language java"
        },
        {
          "input": "reverse_words('indian man')",
          "expected_output": "man indian"
        }
      ],
      "broken_test_cases": [
        {
          "input": "reverse_words('python program')",
          "expected_output": "python program"
        },
        {
          "input": "reverse_words('java language')",
          "expected_output": "language"
        },
        {
          "input": "reverse_words('indian man')",
          "expected_output": "indian man"
        }
      ]
    },
    {
      "problem_id": "mbpp_861",
      "description": "Write a function to find all anagrams of a string in a given list of strings using lambda function.",
      "function_name": "anagram_lambda",
      "correct_solution": "from collections import Counter \r\ndef anagram_lambda(texts,str):\r\n  result = list(filter(lambda x: (Counter(str) == Counter(x)), texts)) \r\n  return result",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "anagram_lambda(['bcda', 'abce', 'cbda', 'cbea', 'adcb'], 'abcd')",
          "expected_output": "['bcda', 'cbda', 'adcb']"
        },
        {
          "input": "anagram_lambda(['recitals', ' python'], 'articles')",
          "expected_output": "['recitals']"
        },
        {
          "input": "anagram_lambda([' keep', ' abcdef', ' xyz'], ' peek')",
          "expected_output": "[' keep']"
        }
      ],
      "broken_test_cases": [
        {
          "input": "anagram_lambda(['bcda', 'abce', 'cbda', 'cbea', 'adcb'], 'abcd')",
          "expected_output": "['bcda', 'cbda', 'adcb', 'abce']"
        },
        {
          "input": "anagram_lambda(['recitals', ' python'], 'articles')",
          "expected_output": "['recitals', ' python']"
        },
        {
          "input": "anagram_lambda([' keep', ' abcdef', ' xyz'], ' peek')",
          "expected_output": "[' abcdef', ' xyz']"
        }
      ]
    },
    {
      "problem_id": "mbpp_876",
      "description": "Write a python function to find lcm of two positive integers.",
      "function_name": "lcm",
      "correct_solution": "def lcm(x, y):\r\n   if x > y:\r\n       z = x\r\n   else:\r\n       z = y\r\n   while(True):\r\n       if((z % x == 0) and (z % y == 0)):\r\n           lcm = z\r\n           break\r\n       z += 1\r\n   return lcm",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "lcm(4, 6)",
          "expected_output": "12"
        },
        {
          "input": "lcm(15, 17)",
          "expected_output": "255"
        },
        {
          "input": "lcm(2, 6)",
          "expected_output": "6"
        }
      ],
      "broken_test_cases": [
        {
          "input": "lcm(4, 6)",
          "expected_output": "24"
        },
        {
          "input": "lcm(15, 17)",
          "expected_output": "270"
        },
        {
          "input": "lcm(2, 6)",
          "expected_output": "4"
        }
      ]
    },
    {
      "problem_id": "mbpp_855",
      "description": "Write a python function to check for even parity of a given number.",
      "function_name": "check_Even_Parity",
      "correct_solution": "def check_Even_Parity(x): \r\n    parity = 0\r\n    while (x != 0): \r\n        x = x & (x - 1) \r\n        parity += 1\r\n    if (parity % 2 == 0): \r\n        return True\r\n    else: \r\n        return False",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "check_Even_Parity(10)",
          "expected_output": "True"
        },
        {
          "input": "check_Even_Parity(11)",
          "expected_output": "False"
        },
        {
          "input": "check_Even_Parity(18)",
          "expected_output": "True"
        }
      ],
      "broken_test_cases": [
        {
          "input": "check_Even_Parity(10)",
          "expected_output": "False"
        },
        {
          "input": "check_Even_Parity(11)",
          "expected_output": "True"
        },
        {
          "input": "check_Even_Parity(18)",
          "expected_output": "False"
        }
      ]
    },
    {
      "problem_id": "mbpp_382",
      "description": "Write a function to find the number of rotations in a circularly sorted array.",
      "function_name": "find_rotation_count",
      "correct_solution": "def find_rotation_count(A):\r\n    (left, right) = (0, len(A) - 1)\r\n    while left <= right:\r\n        if A[left] <= A[right]:\r\n            return left\r\n        mid = (left + right) // 2\r\n        next = (mid + 1) % len(A)\r\n        prev = (mid - 1 + len(A)) % len(A)\r\n        if A[mid] <= A[next] and A[mid] <= A[prev]:\r\n            return mid\r\n        elif A[mid] <= A[right]:\r\n            right = mid - 1\r\n        elif A[mid] >= A[left]:\r\n            left = mid + 1\r\n    return -1",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7])",
          "expected_output": "3"
        },
        {
          "input": "find_rotation_count([8, 9, 10, 2, 5, 6])",
          "expected_output": "3"
        },
        {
          "input": "find_rotation_count([2, 5, 6, 8, 9, 10])",
          "expected_output": "0"
        }
      ],
      "broken_test_cases": [
        {
          "input": "find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7])",
          "expected_output": "5"
        },
        {
          "input": "find_rotation_count([8, 9, 10, 2, 5, 6])",
          "expected_output": "2"
        },
        {
          "input": "find_rotation_count([2, 5, 6, 8, 9, 10])",
          "expected_output": "1"
        }
      ]
    },
    {
      "problem_id": "mbpp_238",
      "description": "Write a python function to count number of non-empty substrings of a given string.",
      "function_name": "number_of_substrings",
      "correct_solution": "def number_of_substrings(str): \r\n\tstr_len = len(str); \r\n\treturn int(str_len * (str_len + 1) / 2); ",
      "dataset": "mbpp",
      "difficulty": null,
      "tags": [],
      "test_cases": [
        {
          "input": "number_of_substrings('abc')",
          "expected_output": "6"
        },
        {
          "input": "number_of_substrings('abcd')",
          "expected_output": "10"
        },
        {
          "input": "number_of_substrings('abcde')",
          "expected_output": "15"
        }
      ],
      "broken_test_cases": [
        {
          "input": "number_of_substrings('abc')",
          "expected_output": "5"
        },
        {
          "input": "number_of_substrings('abcd')",
          "expected_output": "9"
        },
        {
          "input": "number_of_substrings('abcde')",
          "expected_output": "14"
        }
      ]
    }
  ]
}