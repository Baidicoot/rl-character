{"problem_id": "train_35", "description": "Young wilderness explorers set off to their first expedition led by senior explorer Russell. Explorers went into a forest, set up a camp and decided to split into groups to explore as much interesting locations as possible. Russell was trying to form groups, but ran into some difficulties...\n\nMost of the young explorers are inexperienced, and sending them alone would be a mistake. Even Russell himself became senior explorer not long ago. Each of young explorers has a positive integer parameter $e_i$ \u2014 his inexperience. Russell decided that an explorer with inexperience $e$ can only join the group of $e$ or more people.\n\nNow Russell needs to figure out how many groups he can organize. It's not necessary to include every explorer in one of the groups: some can stay in the camp. Russell is worried about this expedition, so he asked you to help him.", "test_cases": [{"input": "max_groups([1, 1, 1])", "correct_output": "3", "broken_output": "2", "use_broken": false}, {"input": "max_groups([2, 3, 1, 2, 2])", "correct_output": "2", "broken_output": "3", "use_broken": false}], "dataset": "apps", "function_name": "max_groups", "correct_solution": "def max_groups(e):\n    e.sort()\n    ans=0\n    val=0\n    g=0\n    for i in range(0,len(e)):\n        g+=1\n        val=e[i]\n        if g>=val:\n            ans+=1\n            g=0\n            val=0\n    return ans", "difficulty": "interview", "tags": [], "prompt": null, "full_completion": null, "parsed_completion": null, "mixed_test_cases": []}
{"problem_id": "train_7", "description": "The only difference between easy and hard versions is constraints.\n\nNow elections are held in Berland and you want to win them. More precisely, you want everyone to vote for you.\n\nThere are $n$ voters, and two ways to convince each of them to vote for you. The first way to convince the $i$-th voter is to pay him $p_i$ coins. The second way is to make $m_i$ other voters vote for you, and the $i$-th voter will vote for free.\n\nMoreover, the process of such voting takes place in several steps. For example, if there are five voters with $m_1 = 1$, $m_2 = 2$, $m_3 = 2$, $m_4 = 4$, $m_5 = 5$, then you can buy the vote of the fifth voter, and eventually everyone will vote for you. Set of people voting for you will change as follows: ${5} \\rightarrow {1, 5} \\rightarrow {1, 2, 3, 5} \\rightarrow {1, 2, 3, 4, 5}$.\n\nCalculate the minimum number of coins you have to spend so that everyone votes for you.", "test_cases": [{"input": "min_coins_for_all_votes(3, [[1, 5], [2, 10], [2, 8]])", "correct_output": "8", "broken_output": "13", "use_broken": false}, {"input": "min_coins_for_all_votes(7, [[0, 1], [3, 1], [1, 1], [6, 1], [1, 1], [4, 1], [4, 1]])", "correct_output": "0", "broken_output": "2", "use_broken": false}, {"input": "min_coins_for_all_votes(6, [[2, 6], [2, 3], [2, 8], [2, 7], [4, 4], [5, 5]])", "correct_output": "7", "broken_output": "9", "use_broken": false}], "dataset": "apps", "function_name": "min_coins_for_all_votes", "correct_solution": "class Heap:\n    def __init__( self ):\n        self.l = [ -1 ]\n        self.n = 0\n    def n( self ):\n        return self.n\n    def top( self ):\n        return self.l[ 1 ]\n    def ins( self, x ):\n        self.l.append( x )\n        n = len( self.l ) - 1\n        i = n\n        while i > 1:\n            j = i // 2\n            if self.l[ j ] > self.l[ i ]:\n                self.l[ j ], self.l[ i ] = self.l[ i ], self.l[ j ]\n                i = j\n            else:\n                break\n    def pop( self ):\n        r = self.l[ 1 ]\n        l = self.l.pop()\n        n = len( self.l ) - 1\n        if n:\n            self.l[ 1 ] = l\n            i = 1\n            while True:\n                j = i * 2\n                k = j + 1\n                if k < len( self.l ) and self.l[ i ] > max( self.l[ j ], self.l[ k ] ):\n                    if self.l[ j ] == min( self.l[ j ], self.l[ k ] ):\n                        self.l[ i ], self.l[ j ] = self.l[ j ], self.l[ i ]\n                        i = j\n                    else:\n                        self.l[ i ], self.l[ k ] = self.l[ k ], self.l[ i ]\n                        i = k\n                elif k < len( self.l ) and self.l[ i ] > self.l[ k ]:\n                    self.l[ i ], self.l[ k ] = self.l[ k ], self.l[ i ]\n                    i = k\n                elif j < len( self.l ) and self.l[ i ] > self.l[ j ]:\n                    self.l[ i ], self.l[ j ] = self.l[ j ], self.l[ i ]\n                    i = j\n                else:\n                    break\n        return r\n\ndef min_coins_for_all_votes(n, voter):\n    h = Heap()\n    d = {}\n    for m, p in voter:\n        if m not in d:\n            d[ m ] = []\n        d[ m ].append( p )\n    need = {}\n    c = 0\n    sk = sorted( d.keys() )\n    for m in sk:\n        need[ m ] = max( 0, m - c )\n        c += len( d[ m ] )\n    c = 0\n    ans = 0\n    for m in sk[::-1]:\n        for p in d[ m ]:\n            h.ins( p )\n        while c < need[ m ]:\n            c += 1\n            ans += h.pop()\n    return ans", "difficulty": "interview", "tags": [], "prompt": null, "full_completion": null, "parsed_completion": null, "mixed_test_cases": []}
{"problem_id": "train_76", "description": "Lee is going to fashionably decorate his house for a party, using some regular convex polygons...\n\nLee thinks a regular $n$-sided (convex) polygon is beautiful if and only if he can rotate it in such a way that at least one of its edges is parallel to the $OX$-axis and at least one of its edges is parallel to the $OY$-axis at the same time.\n\nRecall that a regular $n$-sided polygon is a convex polygon with $n$ vertices such that all the edges and angles are equal.\n\nNow he is shopping: the market has $t$ regular polygons. For each of them print YES if it is beautiful and NO otherwise.", "test_cases": [{"input": "is_beautiful_polygon(3)", "correct_output": "NO", "broken_output": "YES", "use_broken": false}, {"input": "is_beautiful_polygon(4)", "correct_output": "YES", "broken_output": "NO", "use_broken": false}, {"input": "is_beautiful_polygon(12)", "correct_output": "YES", "broken_output": "NO", "use_broken": false}, {"input": "is_beautiful_polygon(1000000000)", "correct_output": "YES", "broken_output": "NO", "use_broken": false}], "dataset": "apps", "function_name": "is_beautiful_polygon", "correct_solution": "def is_beautiful_polygon(n):\n    if n % 4 == 0:\n        return \"YES\"\n    else:\n        return \"NO\"", "difficulty": "interview", "tags": [], "prompt": null, "full_completion": null, "parsed_completion": null, "mixed_test_cases": []}
{"problem_id": "train_23", "description": "The only difference between easy and hard versions is constraints.\n\nNow elections are held in Berland and you want to win them. More precisely, you want everyone to vote for you.\n\nThere are $n$ voters, and two ways to convince each of them to vote for you. The first way to convince the $i$-th voter is to pay him $p_i$ coins. The second way is to make $m_i$ other voters vote for you, and the $i$-th voter will vote for free.\n\nMoreover, the process of such voting takes place in several steps. For example, if there are five voters with $m_1 = 1$, $m_2 = 2$, $m_3 = 2$, $m_4 = 4$, $m_5 = 5$, then you can buy the vote of the fifth voter, and eventually everyone will vote for you. Set of people voting for you will change as follows: ${5} \\rightarrow {1, 5} \\rightarrow {1, 2, 3, 5} \\rightarrow {1, 2, 3, 4, 5}$.\n\nCalculate the minimum number of coins you have to spend so that everyone votes for you.", "test_cases": [{"input": "min_coins_for_all_votes(3, [(1, 5), (2, 10), (2, 8)])", "correct_output": "8", "broken_output": "15", "use_broken": false}, {"input": "min_coins_for_all_votes(7, [(0, 1), (3, 1), (1, 1), (6, 1), (1, 1), (4, 1), (4, 1)])", "correct_output": "0", "broken_output": "3", "use_broken": false}, {"input": "min_coins_for_all_votes(6, [(2, 6), (2, 3), (2, 8), (2, 7), (4, 4), (5, 5)])", "correct_output": "7", "broken_output": "10", "use_broken": false}], "dataset": "apps", "function_name": "min_coins_for_all_votes", "correct_solution": "import heapq\n\ndef min_coins_for_all_votes(n, voters):\n    voters = [(m, -p) for m, p in voters]\n    voters.sort()\n    for i in range(n):\n        voters[i] = (voters[i][0], -voters[i][1])\n\n    ans = 0\n    costs = []\n    heapq.heapify(costs)\n    bought = 0\n    for i in range(n-1, -1, -1):\n        buysNeeded = voters[i][0] - i  - bought\n        heapq.heappush(costs, voters[i][1])\n        while buysNeeded > 0 and len(costs) > 0:\n            ans += heapq.heappop(costs)\n            bought += 1\n            buysNeeded -= 1\n\n    return ans", "difficulty": "interview", "tags": [], "prompt": null, "full_completion": null, "parsed_completion": null, "mixed_test_cases": []}
{"problem_id": "train_17", "description": "You are given an array $a_1, a_2 \\dots a_n$. Calculate the number of tuples $(i, j, k, l)$ such that:   $1 \\le i < j < k < l \\le n$;  $a_i = a_k$ and $a_j = a_l$;", "test_cases": [{"input": "count_valid_tuples([2, 2, 2, 2, 2])", "correct_output": "5", "broken_output": "4", "use_broken": false}, {"input": "count_valid_tuples([1, 3, 3, 1, 2, 3])", "correct_output": "2", "broken_output": "3", "use_broken": false}], "dataset": "apps", "function_name": "count_valid_tuples", "correct_solution": "class BIT():\n    def __init__(self,n):\n        self.BIT=[0]*(n+1)\n        self.num=n\n\n    def query(self,idx):\n        res_sum = 0\n        while idx > 0:\n            res_sum += self.BIT[idx]\n            idx -= idx&(-idx)\n        return res_sum\n\n    def update(self,idx,x):\n        while idx <= self.num:\n            self.BIT[idx] += x\n            idx += idx&(-idx)\n        return\n\ndef count_valid_tuples(a):\n    n = len(a)\n    pair=[[] for i in range(n+1)]\n    for i in range(n):\n        for j in range(i+1,n):\n            if a[i]==a[j]:\n                pair[i+1].append(j+1)\n\n    bit=BIT(n)\n    ans=0\n    for i in range(1,n+1):\n        minus=bit.query(i)\n        for r in pair[i]:\n            ans+=bit.query(r-1)-minus\n        for r in pair[i]:\n            bit.update(r,1)\n\n    return ans", "difficulty": "interview", "tags": [], "prompt": null, "full_completion": null, "parsed_completion": null, "mixed_test_cases": []}
{"problem_id": "train_27", "description": "There are n positive integers a_1, a_2, ..., a_n. For the one move you can choose any even value c and divide by two all elements that equal c.\n\nFor example, if a=[6,8,12,6,3,12] and you choose c=6, and a is transformed into a=[3,8,12,3,3,12] after the move.\n\nYou need to find the minimal number of moves for transforming a to an array of only odd integers (each element shouldn't be divisible by 2).", "test_cases": [{"input": "min_moves_to_odd([40, 6, 40, 3, 20, 1])", "correct_output": "4", "broken_output": "5", "use_broken": false}, {"input": "min_moves_to_odd([1024])", "correct_output": "10", "broken_output": "9", "use_broken": false}, {"input": "min_moves_to_odd([2, 4, 8, 16])", "correct_output": "4", "broken_output": "3", "use_broken": false}, {"input": "min_moves_to_odd([3, 1, 7])", "correct_output": "0", "broken_output": "1", "use_broken": false}], "dataset": "apps", "function_name": "min_moves_to_odd", "correct_solution": "def min_moves_to_odd(a):\n    n = len(a)\n    d = {}\n    for i in range(n):\n        s = 0\n        while a[i] % 2 == 0:\n            a[i] //= 2\n            s += 1\n        if a[i] in list(d.keys()):\n            d[a[i]] = max(s, d[a[i]])\n        else:\n            d[a[i]] = s\n    s = 0\n    for i in list(d.keys()):\n        s += d[i]\n    return s", "difficulty": "interview", "tags": [], "prompt": null, "full_completion": null, "parsed_completion": null, "mixed_test_cases": []}
{"problem_id": "train_89", "description": "Monocarp had a tree which consisted of n vertices and was rooted at vertex 1. He decided to study BFS (Breadth-first search), so he ran BFS on his tree, starting from the root. BFS can be described by the following pseudocode:\n\na = [] # the order in which vertices were processed\nq = Queue()\nq.put(1) # place the root at the end of the queue\nwhile not q.empty():\n    k = q.pop() # retrieve the first vertex from the queue\n    a.append(k) # append k to the end of the sequence in which vertices were visited\n    for y in g[k]: # g[k] is the list of all children of vertex k, sorted in ascending order\n        q.put(y)\n\nMonocarp was fascinated by BFS so much that, in the end, he lost his tree. Fortunately, he still has a sequence of vertices, in which order vertices were visited by the BFS algorithm (the array a from the pseudocode). Monocarp knows that each vertex was visited exactly once (since they were put and taken from the queue exactly once). Also, he knows that all children of each vertex were viewed in ascending order.\n\nMonocarp knows that there are many trees (in the general case) with the same visiting order a, so he doesn't hope to restore his tree. Monocarp is okay with any tree that has minimum height.\n\nThe height of a tree is the maximum depth of the tree's vertices, and the depth of a vertex is the number of edges in the path from the root to it. For example, the depth of vertex 1 is 0, since it's the root, and the depth of all root's children are 1.\n\nHelp Monocarp to find any tree with given visiting order a and minimum height.", "test_cases": [{"input": "find_minimum_tree_height([1, 4, 3, 2])", "correct_output": "3", "broken_output": "2", "use_broken": false}, {"input": "find_minimum_tree_height([1, 2])", "correct_output": "1", "broken_output": "2", "use_broken": false}, {"input": "find_minimum_tree_height([1, 2, 3])", "correct_output": "1", "broken_output": "2", "use_broken": false}], "dataset": "apps", "function_name": "find_minimum_tree_height", "correct_solution": "def find_minimum_tree_height(a):\n    n = len(a)\n    lis = [ [1] ]\n    now = []\n    tmp = 0\n    \n    for i in range(1,n):\n        if len(now) == 0:\n            now.append(a[i])\n            tmp = 1\n        elif now[-1] > a[i]:\n            if tmp == len(lis[-1]):\n                lis.append(now)\n                now = [a[i]]\n                tmp = 1\n            else:\n                tmp += 1\n                now.append(a[i])\n        else:\n            now.append(a[i])\n    \n    if len(now) > 0:\n        lis.append(now)\n    \n    return len(lis)-1", "difficulty": "interview", "tags": [], "prompt": null, "full_completion": null, "parsed_completion": null, "mixed_test_cases": []}
{"problem_id": "train_8", "description": "You like playing chess tournaments online.\n\nIn your last tournament you played $n$ games. For the sake of this problem, each chess game is either won or lost (no draws). When you lose a game you get $0$ points. When you win you get $1$ or $2$ points: if you have won also the previous game you get $2$ points, otherwise you get $1$ point. If you win the very first game of the tournament you get $1$ point (since there is not a \"previous game\").\n\nThe outcomes of the $n$ games are represented by a string $s$ of length $n$: the $i$-th character of $s$ is W if you have won the $i$-th game, while it is L if you have lost the $i$-th game.\n\nAfter the tournament, you notice a bug on the website that allows you to change the outcome of at most $k$ of your games (meaning that at most $k$ times you can change some symbol L to W, or W to L). Since your only goal is to improve your chess rating, you decide to cheat and use the bug.\n\nCompute the maximum score you can get by cheating in the optimal way.", "test_cases": [{"input": "max_chess_score(5, 2, 'WLWLL')", "correct_output": "7", "broken_output": "6", "use_broken": false}, {"input": "max_chess_score(6, 5, 'LLLWWL')", "correct_output": "11", "broken_output": "10", "use_broken": false}, {"input": "max_chess_score(7, 1, 'LWLWLWL')", "correct_output": "6", "broken_output": "5", "use_broken": false}, {"input": "max_chess_score(15, 5, 'WWWLLLWWWLLLWWW')", "correct_output": "26", "broken_output": "25", "use_broken": false}, {"input": "max_chess_score(40, 7, 'LLWLWLWWWLWLLWLWWWLWLLWLLWLLLLWLLWWWLWWL')", "correct_output": "46", "broken_output": "42", "use_broken": false}, {"input": "max_chess_score(1, 0, 'L')", "correct_output": "0", "broken_output": "1", "use_broken": false}, {"input": "max_chess_score(1, 1, 'L')", "correct_output": "1", "broken_output": "2", "use_broken": false}, {"input": "max_chess_score(6, 1, 'WLLWLW')", "correct_output": "6", "broken_output": "5", "use_broken": false}], "dataset": "apps", "function_name": "max_chess_score", "correct_solution": "def max_chess_score(n, k, string):\n    if \"W\" not in string:\n        ans = min(n, k) * 2 - 1\n        return max(ans, 0)\n        \n    L_s = []\n    cnt = 0\n    bef = string[0]\n    ans = 0\n    for s in string:\n        if s == bef:\n            cnt += 1\n        else:\n            if bef == \"L\":\n                L_s.append(cnt)\n            else:\n                ans += cnt * 2 - 1\n            cnt = 1\n        bef = s\n    if bef == \"W\":\n        ans += cnt * 2 - 1\n        cnt = 0\n        \n    if string[0] == \"L\" and L_s:\n        cnt += L_s[0]\n        L_s = L_s[1:]\n    L_s.sort()\n    for l in L_s:\n        if k >= l:\n            ans += l * 2 + 1\n            k -= l\n        else:\n            ans += k * 2\n            k = 0\n            \n    ans += 2 * min(k, cnt)\n    return ans", "difficulty": "interview", "tags": [], "prompt": null, "full_completion": null, "parsed_completion": null, "mixed_test_cases": []}
{"problem_id": "train_43", "description": "Petya is preparing for his birthday. He decided that there would be n different dishes on the dinner table, numbered from 1 to n. Since Petya doesn't like to cook, he wants to order these dishes in restaurants.\n\nUnfortunately, all dishes are prepared in different restaurants and therefore Petya needs to pick up his orders from n different places. To speed up this process, he wants to order courier delivery at some restaurants. Thus, for each dish, there are two options for Petya how he can get it: the dish will be delivered by a courier from the restaurant i, in this case the courier will arrive in a_i minutes, Petya goes to the restaurant i on his own and picks up the dish, he will spend b_i minutes on this.\n\nEach restaurant has its own couriers and they start delivering the order at the moment Petya leaves the house. In other words, all couriers work in parallel. Petya must visit all restaurants in which he has not chosen delivery, he does this consistently.\n\nFor example, if Petya wants to order n = 4 dishes and a = [3, 7, 4, 5], and b = [2, 1, 2, 4], then he can order delivery from the first and the fourth restaurant, and go to the second and third on your own. Then the courier of the first restaurant will bring the order in 3 minutes, the courier of the fourth restaurant will bring the order in 5 minutes, and Petya will pick up the remaining dishes in 1 + 2 = 3 minutes. Thus, in 5 minutes all the dishes will be at Petya's house.\n\nFind the minimum time after which all the dishes can be at Petya's home.", "test_cases": [{"input": "min_time_all_dishes(4, [3, 7, 4, 5], [2, 1, 2, 4])", "correct_output": "5", "broken_output": "6", "use_broken": false}, {"input": "min_time_all_dishes(4, [1, 2, 3, 4], [3, 3, 3, 3])", "correct_output": "3", "broken_output": "4", "use_broken": false}, {"input": "min_time_all_dishes(2, [1, 2], [10, 10])", "correct_output": "2", "broken_output": "1", "use_broken": false}, {"input": "min_time_all_dishes(2, [10, 10], [1, 2])", "correct_output": "3", "broken_output": "2", "use_broken": false}], "dataset": "apps", "function_name": "min_time_all_dishes", "correct_solution": "def min_time_all_dishes(n, a, b):\n    def check(M):\n        sm = 0\n        for i in range(n):\n            if a[i] > M:\n                sm += b[i]\n        return sm <= M\n    \n    L = 0\n    R = max(a)\n    while R - L > 1:\n        M = (L + R) // 2\n        if check(M):\n            R = M\n        else:\n            L = M\n    return R", "difficulty": "interview", "tags": [], "prompt": null, "full_completion": null, "parsed_completion": null, "mixed_test_cases": []}
{"problem_id": "train_14", "description": "Vasya claims that he had a paper square. He cut it into two rectangular parts using one vertical or horizontal cut. Then Vasya informed you the dimensions of these two rectangular parts. You need to check whether Vasya originally had a square. In other words, check if it is possible to make a square using two given rectangles.", "test_cases": [{"input": "can_form_square(2, 3, 3, 1)", "correct_output": "Yes", "broken_output": "No", "use_broken": false}, {"input": "can_form_square(3, 2, 1, 3)", "correct_output": "Yes", "broken_output": "No", "use_broken": false}, {"input": "can_form_square(3, 3, 1, 3)", "correct_output": "No", "broken_output": "Yes", "use_broken": false}], "dataset": "apps", "function_name": "can_form_square", "correct_solution": "def can_form_square(a1, b1, a2, b2):\n    if a1 > b1:\n        a1, b1 = b1, a1\n    if a2 > b2:\n        a2, b2 = b2, a2\n    flag = False\n    if a1 == a2 and a1 == b1 + b2:\n        flag = True\n    if b1 == b2 and b1 == a1 + a2:\n        flag = True\n    return 'Yes' if flag else 'No'", "difficulty": "interview", "tags": [], "prompt": null, "full_completion": null, "parsed_completion": null, "mixed_test_cases": []}
{"problem_id": "train_45", "description": "Jett is tired after destroying the town and she wants to have a rest. She likes high places, that's why for having a rest she wants to get high and she decided to craft staircases.\n\nA staircase is a squared figure that consists of square cells. Each staircase consists of an arbitrary number of stairs. If a staircase has $n$ stairs, then it is made of $n$ columns, the first column is $1$ cell high, the second column is $2$ cells high, $\\ldots$, the $n$-th column if $n$ cells high. The lowest cells of all stairs must be in the same row.\n\nA staircase with $n$ stairs is called nice, if it may be covered by $n$ disjoint squares made of cells. All squares should fully consist of cells of a staircase. This is how a nice covered staircase with $7$ stairs looks like: [Image]\n\nFind out the maximal number of different nice staircases, that can be built, using no more than $x$ cells, in total. No cell can be used more than once.", "test_cases": [{"input": "count_nice_staircases(1)", "correct_output": "1", "broken_output": "2", "use_broken": false}, {"input": "count_nice_staircases(8)", "correct_output": "2", "broken_output": "3", "use_broken": false}, {"input": "count_nice_staircases(6)", "correct_output": "1", "broken_output": "2", "use_broken": false}, {"input": "count_nice_staircases(1000000000000000000)", "correct_output": "30", "broken_output": "42", "use_broken": false}], "dataset": "apps", "function_name": "count_nice_staircases", "correct_solution": "def count_nice_staircases(x):\n    s, t, res = 1, 1, 0\n    while s <= x:\n        res += 1\n        x -= s\n        t = 2 * t + 1\n        s = (t * (t + 1)) // 2\n    return res", "difficulty": "interview", "tags": [], "prompt": null, "full_completion": null, "parsed_completion": null, "mixed_test_cases": []}
{"problem_id": "train_80", "description": "While doing some spring cleaning, Daniel found an old calculator that he loves so much. However, it seems like it is broken. When he tries to compute $1 + 3$ using the calculator, he gets $2$ instead of $4$. But when he tries computing $1 + 4$, he gets the correct answer, $5$. Puzzled by this mystery, he opened up his calculator and found the answer to the riddle: the full adders became half adders!\n\nSo, when he tries to compute the sum $a + b$ using the calculator, he instead gets the xorsum $a \\oplus b$ (read the definition by the link: https://en.wikipedia.org/wiki/Exclusive_or).\n\nAs he saw earlier, the calculator sometimes gives the correct answer. And so, he wonders, given integers $l$ and $r$, how many pairs of integers $(a, b)$ satisfy the following conditions: $$a + b = a \\oplus b$$ $$l \\leq a \\leq r$$ $$l \\leq b \\leq r$$\n\nHowever, Daniel the Barman is going to the bar and will return in two hours. He tells you to solve the problem before he returns, or else you will have to enjoy being blocked.", "test_cases": [{"input": "count_xor_sum_pairs(1, 4)", "correct_output": "8", "broken_output": "7", "use_broken": false}, {"input": "count_xor_sum_pairs(323, 323)", "correct_output": "0", "broken_output": "1", "use_broken": false}, {"input": "count_xor_sum_pairs(1, 1000000)", "correct_output": "3439863766", "broken_output": "3439863767", "use_broken": false}], "dataset": "apps", "function_name": "count_xor_sum_pairs", "correct_solution": "def count_xor_sum_pairs(l, r):\n    def solve(L, R):\n        res = 0\n        for i in range(32):\n            for j in range(32):\n                l = (L >> i) << i\n                r = (R >> j) << j\n                if l>>i&1==0 or r>>j&1==0:\n                    continue\n                l -= 1<<i\n                r -= 1<<j\n                if l & r:\n                    continue\n                lr = l ^ r\n                ma = max(i, j)\n                mi = min(i, j)\n                mask = (1<<ma)-1\n                p = bin(lr&mask).count(\"1\")\n                ip = ma - mi - p\n                res += 3**mi * 2**ip\n        return res\n    \n    return solve(r+1, r+1) + solve(l, l) - solve(l, r+1) * 2", "difficulty": "interview", "tags": [], "prompt": null, "full_completion": null, "parsed_completion": null, "mixed_test_cases": []}
{"problem_id": "train_34", "description": "You have a large electronic screen which can display up to 998244353 decimal digits. The digits are displayed in the same way as on different electronic alarm clocks: each place for a digit consists of 7 segments which can be turned on and off to compose different digits. Different digits may require different number of segments to be turned on. For example, if you want to display 1, you have to turn on 2 segments of the screen, and if you want to display 8, all 7 segments of some place to display a digit should be turned on. You want to display a really large integer on the screen. Unfortunately, the screen is bugged: no more than n segments can be turned on simultaneously. So now you wonder what is the greatest integer that can be displayed by turning on no more than n segments.", "test_cases": [{"input": "max_displayable_integer(3)", "correct_output": "7", "broken_output": "77", "use_broken": false}, {"input": "max_displayable_integer(4)", "correct_output": "11", "broken_output": "111", "use_broken": false}], "dataset": "apps", "function_name": "max_displayable_integer", "correct_solution": "def max_displayable_integer(n):\n\tif(n%2):\n\t\treturn \"7\"+\"1\"*((n-3)//2)\n\telse:\n\t\treturn \"1\"*(n//2)", "difficulty": "interview", "tags": [], "prompt": null, "full_completion": null, "parsed_completion": null, "mixed_test_cases": []}
{"problem_id": "train_83", "description": "Being tired of participating in too many Codeforces rounds, Gildong decided to take some rest in a park. He sat down on a bench, and soon he found two rabbits hopping around. One of the rabbits was taller than the other.\n\nHe noticed that the two rabbits were hopping towards each other. The positions of the two rabbits can be represented as integer coordinates on a horizontal line. The taller rabbit is currently on position $x$, and the shorter rabbit is currently on position $y$ ($x \\lt y$). Every second, each rabbit hops to another position. The taller rabbit hops to the positive direction by $a$, and the shorter rabbit hops to the negative direction by $b$.\n\nFor example, let's say $x=0$, $y=10$, $a=2$, and $b=3$. At the $1$-st second, each rabbit will be at position $2$ and $7$. At the $2$-nd second, both rabbits will be at position $4$.\n\nGildong is now wondering: Will the two rabbits be at the same position at the same moment? If so, how long will it take? Let's find a moment in time (in seconds) after which the rabbits will be at the same point.", "test_cases": [{"input": "rabbits_meeting_time(0, 10, 2, 3)", "correct_output": "2", "broken_output": "3", "use_broken": false}, {"input": "rabbits_meeting_time(0, 10, 3, 3)", "correct_output": "-1", "broken_output": "2", "use_broken": false}, {"input": "rabbits_meeting_time(900000000, 1000000000, 1, 9999999)", "correct_output": "10", "broken_output": "11", "use_broken": false}, {"input": "rabbits_meeting_time(1, 2, 1, 1)", "correct_output": "-1", "broken_output": "1", "use_broken": false}, {"input": "rabbits_meeting_time(1, 3, 1, 1)", "correct_output": "1", "broken_output": "2", "use_broken": false}], "dataset": "apps", "function_name": "rabbits_meeting_time", "correct_solution": "def rabbits_meeting_time(x, y, a, b):\n    d = y - x\n    if d%(a+b)==0:\n        return d//(a+b)\n    else:\n        return -1", "difficulty": "interview", "tags": [], "prompt": null, "full_completion": null, "parsed_completion": null, "mixed_test_cases": []}
{"problem_id": "train_65", "description": "You and your friend are playing the game Mortal Kombat XI. You are trying to pass a challenge tower. There are n bosses in this tower, numbered from 1 to n. The type of the i-th boss is a_i. If the i-th boss is easy then its type is a_i = 0, otherwise this boss is hard and its type is a_i = 1.\n\nDuring one session, either you or your friend can kill one or two bosses (neither you nor your friend can skip the session, so the minimum number of bosses killed during one session is at least one). After your friend session, your session begins, then again your friend session begins, your session begins, and so on. The first session is your friend's session.\n\nYour friend needs to get good because he can't actually kill hard bosses. To kill them, he uses skip points. One skip point can be used to kill one hard boss.\n\nYour task is to find the minimum number of skip points your friend needs to use so you and your friend kill all n bosses in the given order.\n\nFor example: suppose n = 8, a = [1, 0, 1, 1, 0, 1, 1, 1]. Then the best course of action is the following:\n\n  your friend kills two first bosses, using one skip point for the first boss;  you kill the third and the fourth bosses;  your friend kills the fifth boss;  you kill the sixth and the seventh bosses;  your friend kills the last boss, using one skip point, so the tower is completed using two skip points.", "test_cases": [{"input": "min_skip_points([1, 0, 1, 1, 0, 1, 1, 1])", "correct_output": "2", "broken_output": "3", "use_broken": false}, {"input": "min_skip_points([1, 1, 1, 1, 0])", "correct_output": "2", "broken_output": "3", "use_broken": false}, {"input": "min_skip_points([1, 1, 1, 1, 0, 0, 1])", "correct_output": "2", "broken_output": "3", "use_broken": false}, {"input": "min_skip_points([1, 1, 1, 1, 1, 1])", "correct_output": "2", "broken_output": "3", "use_broken": false}, {"input": "min_skip_points([1])", "correct_output": "1", "broken_output": "0", "use_broken": false}, {"input": "min_skip_points([0])", "correct_output": "0", "broken_output": "1", "use_broken": false}], "dataset": "apps", "function_name": "min_skip_points", "correct_solution": "def min_skip_points(arr):\n    n = len(arr)\n    ans = [999999999] * n\n    ans[0] = 1 if arr[0] == 1 else 0\n    if n > 1:\n        ans[1] = ans[0]\n        if n > 2:\n            ans[2] = ans[0]\n    for i in range(n):\n        if i + 1 >= n:\n            continue\n        if arr[i + 1] == 1:\n            ans[i + 1] = min(ans[i + 1], ans[i] + 1)\n            if i + 2 < n:\n                ans[i + 2] = min(ans[i + 2], ans[i] + 1)\n            if i + 3 < n: \n                ans[i + 3] = min(ans[i + 3], ans[i] + 1)\n        else:\n            ans[i + 1] = min(ans[i + 1], ans[i])\n            if i + 2 < n:\n                ans[i + 2] = min(ans[i + 2], ans[i])\n            if i + 3 < n:\n                ans[i + 3] = min(ans[i + 3], ans[i])\n    return ans[-1]", "difficulty": "interview", "tags": [], "prompt": null, "full_completion": null, "parsed_completion": null, "mixed_test_cases": []}
{"problem_id": "train_9", "description": "Alice and Bob play a game. They have a binary string s (a string such that each character in it is either 0 or 1). Alice moves first, then Bob, then Alice again, and so on.\n\nDuring their move, the player can choose any number (not less than one) of consecutive equal characters in s and delete them.\n\nFor example, if the string is 10110, there are 6 possible moves (deleted characters are bold): 10110 \u2192 0110; 10110 \u2192 1110; 10110 \u2192 1010; 10110 \u2192 1010; 10110 \u2192 100; 10110 \u2192 1011.\n\nAfter the characters are removed, the characters to the left and to the right of the removed block become adjacent. I. e. the following sequence of moves is valid: 10110 \u2192 100 \u2192 1.\n\nThe game ends when the string becomes empty, and the score of each player is the number of 1-characters deleted by them.\n\nEach player wants to maximize their score. Calculate the resulting score of Alice.", "test_cases": [{"input": "calculate_alice_score('01111001')", "correct_output": "4", "broken_output": "5", "use_broken": false}, {"input": "calculate_alice_score('0000')", "correct_output": "0", "broken_output": "1", "use_broken": false}, {"input": "calculate_alice_score('111111')", "correct_output": "6", "broken_output": "3", "use_broken": false}, {"input": "calculate_alice_score('101010101')", "correct_output": "3", "broken_output": "2", "use_broken": false}, {"input": "calculate_alice_score('011011110111')", "correct_output": "6", "broken_output": "5", "use_broken": false}], "dataset": "apps", "function_name": "calculate_alice_score", "correct_solution": "def calculate_alice_score(s):\n    p = [i for i in s.split(\"0\") if i!=\"\"]\n    p.sort(reverse=True)\n    ans = 0\n    for i in range(0,len(p),2):\n        ans+=len(p[i])\n    return ans", "difficulty": "interview", "tags": [], "prompt": null, "full_completion": null, "parsed_completion": null, "mixed_test_cases": []}
{"problem_id": "train_42", "description": "You are given a binary string $s$ (recall that a string is binary if each character is either $0$ or $1$).\n\nLet $f(t)$ be the decimal representation of integer $t$ written in binary form (possibly with leading zeroes). For example $f(011) = 3, f(00101) = 5, f(00001) = 1, f(10) = 2, f(000) = 0$ and $f(000100) = 4$.\n\nThe substring $s_{l}, s_{l+1}, \\dots , s_{r}$ is good if $r - l + 1 = f(s_l \\dots s_r)$.\n\nFor example string $s = 1011$ has $5$ good substrings: $s_1 \\dots s_1 = 1$, $s_3 \\dots s_3 = 1$, $s_4 \\dots s_4 = 1$, $s_1 \\dots s_2 = 10$ and $s_2 \\dots s_4 = 011$.\n\nYour task is to calculate the number of good substrings of string $s$.", "test_cases": [{"input": "count_good_substrings(\"0110\")", "correct_output": "4", "broken_output": "5", "use_broken": false}, {"input": "count_good_substrings(\"0101\")", "correct_output": "3", "broken_output": "4", "use_broken": false}, {"input": "count_good_substrings(\"00001000\")", "correct_output": "4", "broken_output": "5", "use_broken": false}, {"input": "count_good_substrings(\"0001000\")", "correct_output": "3", "broken_output": "2", "use_broken": false}], "dataset": "apps", "function_name": "count_good_substrings", "correct_solution": "LOG = 20\n\ndef count_good_substrings(s):\n\tn = len(s)\n\tres = 0\n\tz = 0\n\tfor t in range(0, n):\n\t\tif s[t] == '0':\n\t\t\tz += 1\n\t\t\tcontinue\n\t\tfor l in range(1, min(LOG, n - t + 1)):\n\t\t\tx = int(s[t:t+l], 2)\n\t\t\tif l + z >= x:\n\t\t\t\tres += 1\n\t\tz = 0\n\treturn res", "difficulty": "interview", "tags": [], "prompt": null, "full_completion": null, "parsed_completion": null, "mixed_test_cases": []}
{"problem_id": "train_6", "description": "Arthur owns a ski resort on a mountain. There are n landing spots on the mountain numbered from 1 to n from the top to the foot of the mountain. The spots are connected with one-directional ski tracks. All tracks go towards the foot of the mountain, so there are no directed cycles formed by the tracks. There are at most two tracks leaving each spot, but many tracks may enter the same spot.\n\nA skier can start skiing from one spot and stop in another spot if there is a sequence of tracks that lead from the starting spot and end in the ending spot. Unfortunately, recently there were many accidents, because the structure of the resort allows a skier to go through dangerous paths, by reaching high speed and endangering himself and the other customers. Here, a path is called dangerous, if it consists of at least two tracks.\n\nArthur wants to secure his customers by closing some of the spots in a way that there are no dangerous paths in the resort. When a spot is closed, all tracks entering and leaving that spot become unusable.\n\nFormally, after closing some of the spots, there should not be a path that consists of two or more tracks.\n\nArthur doesn't want to close too many spots. He will be happy to find any way to close at most 4/7*n spots so that the remaining part is safe. Help him find any suitable way to do so.", "test_cases": [{"input": "find_spots_to_close(4, [(1, 2), (1, 3), (2, 3), (2, 4), (3, 4), (3, 4)])", "correct_output": "[3, 4]", "broken_output": "[3]", "use_broken": false}, {"input": "find_spots_to_close(7, [(1, 2), (1, 3), (2, 4), (2, 5), (3, 6), (3, 7)])", "correct_output": "[4, 5, 6, 7]", "broken_output": "[4, 5, 6, 8]", "use_broken": false}], "dataset": "apps", "function_name": "find_spots_to_close", "correct_solution": "def find_spots_to_close(n, tracks):\n    neig = [0] * n\n    for i in range(n):\n        neig[i] = [0]\n    \n    for a, b in tracks:\n        a -= 1\n        b -= 1\n        neig[a][0] += 1\n        neig[a].append(b)\n    \n    lev = [1] * n\n    for i in range(n):\n        for j in range(1, neig[i][0] + 1):\n            x = lev[i] + 1\n            if x == 4:\n                x = 1\n            lev[neig[i][j]] = max(lev[neig[i][j]], x)\n    \n    s = []\n    for i in range(n):\n        if lev[i] == 3:\n            s.append(i + 1)\n    \n    return s", "difficulty": "interview", "tags": [], "prompt": null, "full_completion": null, "parsed_completion": null, "mixed_test_cases": []}
{"problem_id": "train_57", "description": "You are given an array $a$ of length $n$, which initially is a permutation of numbers from $1$ to $n$. In one operation, you can choose an index $i$ ($1 \\leq i < n$) such that $a_i < a_{i + 1}$, and remove either $a_i$ or $a_{i + 1}$ from the array (after the removal, the remaining parts are concatenated). \n\nFor example, if you have the array $[1, 3, 2]$, you can choose $i = 1$ (since $a_1 = 1 < a_2 = 3$), then either remove $a_1$ which gives the new array $[3, 2]$, or remove $a_2$ which gives the new array $[1, 2]$.\n\nIs it possible to make the length of this array equal to $1$ with these operations?", "test_cases": [{"input": "can_reduce_to_single_element([1, 2, 3])", "correct_output": "YES", "broken_output": "NO", "use_broken": false}, {"input": "can_reduce_to_single_element([3, 1, 2, 4])", "correct_output": "YES", "broken_output": "NO", "use_broken": false}, {"input": "can_reduce_to_single_element([2, 3, 1])", "correct_output": "NO", "broken_output": "YES", "use_broken": false}, {"input": "can_reduce_to_single_element([2, 4, 6, 1, 3, 5])", "correct_output": "YES", "broken_output": "NO", "use_broken": false}], "dataset": "apps", "function_name": "can_reduce_to_single_element", "correct_solution": "def can_reduce_to_single_element(arr):\n    if arr[-1] > arr[0]:\n        return \"YES\"\n    else:\n        return \"NO\"", "difficulty": "interview", "tags": [], "prompt": null, "full_completion": null, "parsed_completion": null, "mixed_test_cases": []}
{"problem_id": "train_49", "description": "Let's call some positive integer classy if its decimal representation contains no more than 3 non-zero digits. For example, numbers 4, 200000, 10203 are classy and numbers 4231, 102306, 7277420000 are not.\n\nYou are given a segment [L; R]. Count the number of classy integers x such that L \u2264 x \u2264 R.\n\nEach testcase contains several segments, for each of them you are required to solve the problem separately.", "test_cases": [{"input": "count_classy_integers(1, 1000)", "correct_output": "1000", "broken_output": "999", "use_broken": false}, {"input": "count_classy_integers(1024, 1024)", "correct_output": "1", "broken_output": "0", "use_broken": false}, {"input": "count_classy_integers(65536, 65536)", "correct_output": "0", "broken_output": "1", "use_broken": false}, {"input": "count_classy_integers(999999, 1000001)", "correct_output": "2", "broken_output": "1", "use_broken": false}], "dataset": "apps", "function_name": "count_classy_integers", "correct_solution": "def count_classy_integers(L, R):\n    classy=set()\n    \n    for i in range(19):\n        for j in range(i):\n            for k in range(j):\n                for a in range(10):\n                    for b in range(10):\n                        for c in range(10):\n                            what=a*10**i+b*10**j+c*10**k\n                            classy.add(what)\n    \n    li=sorted(classy)\n    \n    def counting(i):\n        lo=0\n        hi=len(li)-1\n        while lo<hi:\n            mid=(lo+hi+1)//2\n            if li[mid]<=i:\n                lo=mid\n            else:\n                hi=mid-1\n        return lo\n    \n    return counting(R)-counting(L-1)", "difficulty": "interview", "tags": [], "prompt": null, "full_completion": null, "parsed_completion": null, "mixed_test_cases": []}
{"problem_id": "train_71", "description": "You're given an array $a$ of $n$ integers, such that $a_1 + a_2 + \\cdots + a_n = 0$.\n\nIn one operation, you can choose two different indices $i$ and $j$ ($1 \\le i, j \\le n$), decrement $a_i$ by one and increment $a_j$ by one. If $i < j$ this operation is free, otherwise it costs one coin.\n\nHow many coins do you have to spend in order to make all elements equal to $0$?", "test_cases": [{"input": "min_coins_to_zero([-3, 5, -3, 1])", "correct_output": "3", "broken_output": "2", "use_broken": false}, {"input": "min_coins_to_zero([1, -1])", "correct_output": "0", "broken_output": "1", "use_broken": false}, {"input": "min_coins_to_zero([-3, 2, -3, 4])", "correct_output": "4", "broken_output": "3", "use_broken": false}, {"input": "min_coins_to_zero([-1, 1, 1, -1])", "correct_output": "1", "broken_output": "2", "use_broken": false}, {"input": "min_coins_to_zero([-5, 7, -6, -4, 17, -13, 4])", "correct_output": "8", "broken_output": "7", "use_broken": false}, {"input": "min_coins_to_zero([-1000000000, -1000000000, -1000000000, 1000000000, 1000000000, 1000000000])", "correct_output": "3000000000", "broken_output": "2", "use_broken": false}, {"input": "min_coins_to_zero([0])", "correct_output": "0", "broken_output": "1", "use_broken": false}], "dataset": "apps", "function_name": "min_coins_to_zero", "correct_solution": "def min_coins_to_zero(a):\n    an = 0\n    s = 0\n    for i in a:\n        if s + i >= 0:\n            s += i\n        else:\n            s += i\n            an -= s\n            s = 0\n    return an", "difficulty": "interview", "tags": [], "prompt": null, "full_completion": null, "parsed_completion": null, "mixed_test_cases": []}
{"problem_id": "train_51", "description": "There are n games in a football tournament. Three teams are participating in it. Currently k games had already been played.\n\nYou are an avid football fan, but recently you missed the whole k games. Fortunately, you remember a guess of your friend for these k games. Your friend did not tell exact number of wins of each team, instead he thought that absolute difference between number of wins of first and second team will be d_1 and that of between second and third team will be d_2.\n\nYou don't want any of team win the tournament, that is each team should have the same number of wins after n games. That's why you want to know: does there exist a valid tournament satisfying the friend's guess such that no team will win this tournament?\n\nNote that outcome of a match can not be a draw, it has to be either win or loss.", "test_cases": [{"input": "can_have_no_winner(3, 0, 0, 0)", "correct_output": "yes", "broken_output": "no", "use_broken": false}, {"input": "can_have_no_winner(3, 3, 0, 0)", "correct_output": "yes", "broken_output": "no", "use_broken": false}, {"input": "can_have_no_winner(6, 4, 1, 0)", "correct_output": "yes", "broken_output": "no", "use_broken": false}, {"input": "can_have_no_winner(6, 3, 3, 0)", "correct_output": "no", "broken_output": "yes", "use_broken": false}, {"input": "can_have_no_winner(3, 3, 3, 2)", "correct_output": "no", "broken_output": "yes", "use_broken": false}], "dataset": "apps", "function_name": "can_have_no_winner", "correct_solution": "def can_have_no_winner(n, k, d1, d2):\n    if n % 3 != 0:\n        return 'no'\n    f = 0\n    for i in [-1, +1]:\n        for j in [-1, +1]:\n            w = (k - i * d1 - j * d2)\n            if f == 0 and (w % 3 == 0) and (n//3)>=(w//3)>=0 and (n//3)>=(w//3 + i * d1)>=0 and (n//3)>=(w//3 + j * d2)>=0:\n                return 'yes'\n                f = 1\n    if f == 0:\n        return 'no'", "difficulty": "interview", "tags": [], "prompt": null, "full_completion": null, "parsed_completion": null, "mixed_test_cases": []}
{"problem_id": "train_55", "description": "A penguin Rocher has $n$ sticks. He has exactly one stick with length $i$ for all $1 \\le i \\le n$.\n\nHe can connect some sticks. If he connects two sticks that have lengths $a$ and $b$, he gets one stick with length $a + b$. Two sticks, that were used in the operation disappear from his set and the new connected stick appears in his set and can be used for the next connections.\n\nHe wants to create the maximum number of sticks that have the same length. It is not necessary to make all sticks have the same length, some sticks can have the other length. How many sticks with the equal length he can create?", "test_cases": [{"input": "max_equal_length_sticks(1)", "correct_output": "1", "broken_output": "2", "use_broken": false}, {"input": "max_equal_length_sticks(2)", "correct_output": "1", "broken_output": "2", "use_broken": false}, {"input": "max_equal_length_sticks(3)", "correct_output": "2", "broken_output": "3", "use_broken": false}, {"input": "max_equal_length_sticks(4)", "correct_output": "2", "broken_output": "3", "use_broken": false}], "dataset": "apps", "function_name": "max_equal_length_sticks", "correct_solution": "def max_equal_length_sticks(n):\n    return (n + 1) // 2", "difficulty": "interview", "tags": [], "prompt": null, "full_completion": null, "parsed_completion": null, "mixed_test_cases": []}
{"problem_id": "train_58", "description": "You have a rectangular chocolate bar consisting of n \u00d7 m single squares. You want to eat exactly k squares, so you may need to break the chocolate bar.\n\nIn one move you can break any single rectangular piece of chocolate in two rectangular pieces. You can break only by lines between squares: horizontally or vertically. The cost of breaking is equal to square of the break length.\n\nFor example, if you have a chocolate bar consisting of 2 \u00d7 3 unit squares then you can break it horizontally and get two 1 \u00d7 3 pieces (the cost of such breaking is 3^2 = 9), or you can break it vertically in two ways and get two pieces: 2 \u00d7 1 and 2 \u00d7 2 (the cost of such breaking is 2^2 = 4).\n\nFor several given values n, m and k find the minimum total cost of breaking. You can eat exactly k squares of chocolate if after all operations of breaking there is a set of rectangular pieces of chocolate with the total size equal to k squares. The remaining n\u00b7m - k squares are not necessarily form a single rectangular piece.", "test_cases": [{"input": "min_chocolate_breaking_cost(2, 2, 1)", "correct_output": "5", "broken_output": "6", "use_broken": false}, {"input": "min_chocolate_breaking_cost(2, 2, 3)", "correct_output": "5", "broken_output": "10", "use_broken": false}, {"input": "min_chocolate_breaking_cost(2, 2, 2)", "correct_output": "4", "broken_output": "6", "use_broken": false}, {"input": "min_chocolate_breaking_cost(2, 2, 4)", "correct_output": "0", "broken_output": "-1", "use_broken": false}], "dataset": "apps", "function_name": "min_chocolate_breaking_cost", "correct_solution": "mem = [[[0 for i in range(51)] for j in range(31)] for k in range(31)]\n\ndef min_chocolate_breaking_cost(n, m, k):\n    if mem[n][m][k]:\n        return mem[n][m][k]\n    if (n*m == k) or (k == 0):\n        return 0\n    cost = 10**9\n    for x in range(1, n//2 + 1):\n        for z in range(k+1):\n            cost = min(cost, m*m + min_chocolate_breaking_cost(n-x, m, k-z) + min_chocolate_breaking_cost(x, m, z))\n    for y in range(1, m//2 + 1):\n        for z in range(k+1):\n            cost = min(cost, n*n + min_chocolate_breaking_cost(n, m-y, k-z) + min_chocolate_breaking_cost(n, y, z))\n    mem[n][m][k] = cost\n    return cost", "difficulty": "interview", "tags": [], "prompt": null, "full_completion": null, "parsed_completion": null, "mixed_test_cases": []}
{"problem_id": "train_69", "description": "Bertown is a city with $n$ buildings in a straight line.\n\nThe city's security service discovered that some buildings were mined. A map was compiled, which is a string of length $n$, where the $i$-th character is \"1\" if there is a mine under the building number $i$ and \"0\" otherwise.\n\nBertown's best sapper knows how to activate mines so that the buildings above them are not damaged. When a mine under the building numbered $x$ is activated, it explodes and activates two adjacent mines under the buildings numbered $x-1$ and $x+1$ (if there were no mines under the building, then nothing happens). Thus, it is enough to activate any one mine on a continuous segment of mines to activate all the mines of this segment. For manual activation of one mine, the sapper takes $a$ coins. He can repeat this operation as many times as you want.\n\nAlso, a sapper can place a mine under a building if it wasn't there. For such an operation, he takes $b$ coins. He can also repeat this operation as many times as you want.\n\nThe sapper can carry out operations in any order.\n\nYou want to blow up all the mines in the city to make it safe. Find the minimum number of coins that the sapper will have to pay so that after his actions there are no mines left in the city.", "test_cases": [{"input": "min_cost_to_clear_mines(1, 1, '01000010')", "correct_output": "2", "broken_output": "3", "use_broken": false}, {"input": "min_cost_to_clear_mines(5, 1, '01101110')", "correct_output": "6", "broken_output": "5", "use_broken": false}], "dataset": "apps", "function_name": "min_cost_to_clear_mines", "correct_solution": "def min_cost_to_clear_mines(a, b, s):\n    z = 10000\n    total = 0\n    act = False\n\n    for i in range(len(s)):\n        cur = s[i]\n        if cur == '0':\n            z += 1\n            act = False\n        else:\n            if not act:\n                act = True\n                total += min(a, b * z)\n                z = 0\n\n    return total", "difficulty": "interview", "tags": [], "prompt": null, "full_completion": null, "parsed_completion": null, "mixed_test_cases": []}
{"problem_id": "train_11", "description": "You have a string s \u2014 a sequence of commands for your toy robot. The robot is placed in some cell of a rectangular grid. He can perform four commands: 'W' \u2014 move one cell up; 'S' \u2014 move one cell down; 'A' \u2014 move one cell left; 'D' \u2014 move one cell right.\n\nLet Grid(s) be the grid of minimum possible area such that there is a position in the grid where you can place the robot in such a way that it will not fall from the grid while running the sequence of commands s. For example, if s = DSAWWAW then Grid(s) is the 4 \u00d7 3 grid: you can place the robot in the cell (3, 2); the robot performs the command 'D' and moves to (3, 3); the robot performs the command 'S' and moves to (4, 3); the robot performs the command 'A' and moves to (4, 2); the robot performs the command 'W' and moves to (3, 2); the robot performs the command 'W' and moves to (2, 2); the robot performs the command 'A' and moves to (2, 1); the robot performs the command 'W' and moves to (1, 1).\n\nYou have 4 extra letters: one 'W', one 'A', one 'S', one 'D'. You'd like to insert at most one of these letters in any position of sequence s to minimize the area of Grid(s).\n\nWhat is the minimum area of Grid(s) you can achieve?", "test_cases": [{"input": "minimize_robot_grid_area(\"DSAWWAW\")", "correct_output": "8", "broken_output": "12", "use_broken": false}, {"input": "minimize_robot_grid_area(\"D\")", "correct_output": "2", "broken_output": "3", "use_broken": false}, {"input": "minimize_robot_grid_area(\"WA\")", "correct_output": "4", "broken_output": "5", "use_broken": false}], "dataset": "apps", "function_name": "minimize_robot_grid_area", "correct_solution": "def minimize_robot_grid_area(s):\n    def area(width, height):\n        return (width+1) * (height+1)\n    \n    def calcul2(s, c, moment, precalcul):\n        x, y, maxx, minx, maxy, miny = precalcul\n        \n        if c == \"W\":\n            y += 1\n        elif c == \"S\":\n            y -= 1\n        elif c == \"A\":\n            x -= 1\n        elif c == \"D\":\n            x += 1\n        \n        maxx = max(maxx, x)\n        minx = min(minx, x)\n        maxy = max(maxy, y)\n        miny = min(miny, y)\n        \n        for k in range(moment, len(s)):\n            if s[k] == \"W\":\n                y += 1\n            if s[k] == \"S\":\n                y -= 1\n            if s[k] == \"A\":\n                x -= 1\n            if s[k] == \"D\":\n                x += 1\n            maxx = max(maxx, x)\n            minx = min(minx, x)\n            maxy = max(maxy, y)\n            miny = min(miny, y)\n        \n        diffx = maxx - minx\n        diffy = maxy - miny\n        tmp = area(diffx, diffy)\n        \n        return tmp\n    \n    def pre_calcul(s, moment, pre_avant, date_debut):\n        x, y, maxx, minx, maxy, miny = pre_avant\n        for k in range(date_debut, moment):\n            if s[k] == \"W\":\n                y += 1\n            if s[k] == \"S\":\n                y -= 1\n            if s[k] == \"A\":\n                x -= 1\n            if s[k] == \"D\":\n                x += 1\n            maxx = max(maxx, x)\n            minx = min(minx, x)\n            maxy = max(maxy, y)\n            miny = min(miny, y)\n        \n        return (x, y, maxx, minx, maxy, miny)\n    \n    maxx, maxy, minx, miny = 0, 0, 0, 0\n    x, y = 0, 0\n    momentminx, momentmaxx, momentminy, momentmaxy = -1, -1, -1, -1\n    for k in range(len(s)):\n        if s[k] == \"W\":\n            y += 1\n        if s[k] == \"S\":\n            y -= 1\n        if s[k] == \"A\":\n            x -= 1\n        if s[k] == \"D\":\n            x += 1\n        \n        if x > maxx:\n            momentmaxx = k\n        if y > maxy:\n            momentmaxy = k\n        if x < minx:\n            momentminx = k\n        if y < miny:\n            momentminy = k\n        maxx = max(maxx, x)\n        minx = min(minx, x)\n        maxy = max(maxy, y)\n        miny = min(miny, y)\n    diffx = maxx - minx\n    diffy = maxy - miny\n    \n    tmp = 999999999999999999999999999999999999\n    l = [momentmaxx, momentmaxy, momentminx, momentminy]\n    l = list(set(l))\n    l = [i for i in l if i != -1]\n    l.sort()\n    if l != []:\n        precalcul = pre_calcul(s, l[0], (0, 0, 0, 0, 0, 0), 0)\n        avant = l[0]\n        for moment in l:\n            precalcul = pre_calcul(s, moment, precalcul, avant)\n            avant = moment\n            tmp = min(tmp, calcul2(s, 'W', moment, precalcul))\n            tmp = min(tmp, calcul2(s, 'S', moment, precalcul))\n            tmp = min(tmp, calcul2(s, 'A', moment, precalcul))\n            tmp = min(tmp, calcul2(s, 'D', moment, precalcul))\n    return tmp", "difficulty": "interview", "tags": [], "prompt": null, "full_completion": null, "parsed_completion": null, "mixed_test_cases": []}
{"problem_id": "train_82", "description": "A permutation of length $n$ is an array consisting of $n$ distinct integers from $1$ to $n$ in arbitrary order. For example, $[2,3,1,5,4]$ is a permutation, but $[1,2,2]$ is not a permutation ($2$ appears twice in the array) and $[1,3,4]$ is also not a permutation ($n=3$ but there is $4$ in the array).\n\nLet $p$ be any permutation of length $n$. We define the fingerprint $F(p)$ of $p$ as the sorted array of sums of adjacent elements in $p$. More formally,\n\n$$F(p)=\\mathrm{sort}([p_1+p_2,p_2+p_3,\\ldots,p_{n-1}+p_n]).$$\n\nFor example, if $n=4$ and $p=[1,4,2,3],$ then the fingerprint is given by $F(p)=\\mathrm{sort}([1+4,4+2,2+3])=\\mathrm{sort}([5,6,5])=[5,5,6]$.\n\nYou are given a permutation $p$ of length $n$. Your task is to find a different permutation $p'$ with the same fingerprint. Two permutations $p$ and $p'$ are considered different if there is some index $i$ such that $p_i \\ne p'_i$.", "test_cases": [{"input": "find_different_permutation_same_fingerprint([1, 2])", "correct_output": "[2, 1]", "broken_output": "[1, 2]", "use_broken": false}, {"input": "find_different_permutation_same_fingerprint([2, 1, 6, 5, 4, 3])", "correct_output": "[3, 4, 5, 6, 1, 2]", "broken_output": "[3, 4, 5, 6, 2, 1]", "use_broken": false}, {"input": "find_different_permutation_same_fingerprint([2, 4, 3, 1, 5])", "correct_output": "[5, 1, 3, 4, 2]", "broken_output": "[2, 4, 3, 1, 5]", "use_broken": false}], "dataset": "apps", "function_name": "find_different_permutation_same_fingerprint", "correct_solution": "def find_different_permutation_same_fingerprint(ar):\n    result = ar[:]\n    result.reverse()\n    return result", "difficulty": "interview", "tags": [], "prompt": null, "full_completion": null, "parsed_completion": null, "mixed_test_cases": []}
{"problem_id": "train_32", "description": "Lately, Mr. Chanek frequently plays the game Arena of Greed. As the name implies, the game's goal is to find the greediest of them all, who will then be crowned king of Compfestnesia.\n\nThe game is played by two people taking turns, where Mr. Chanek takes the first turn. Initially, there is a treasure chest containing $N$ gold coins. The game ends if there are no more gold coins in the chest. In each turn, the players can make one of the following moves: Take one gold coin from the chest. Take half of the gold coins on the chest. This move is only available if the number of coins in the chest is even.\n\nBoth players will try to maximize the number of coins they have. Mr. Chanek asks your help to find the maximum number of coins he can get at the end of the game if both he and the opponent plays optimally.", "test_cases": [{"input": "max_coins_chanek(5)", "correct_output": "2", "broken_output": "3", "use_broken": false}, {"input": "max_coins_chanek(6)", "correct_output": "4", "broken_output": "3", "use_broken": false}], "dataset": "apps", "function_name": "max_coins_chanek", "correct_solution": "def max_coins_chanek(n):\n    chanek = 0\n    flag = 1\n    while n>0:\n        if n%4==0 and n!=4:\n            if flag:\n                chanek += 1\n                n-=1\n                flag = 0\n            else:\n                n-=1\n                flag = 1\n        elif n%2:\n            if flag:\n                chanek += 1\n                n-=1\n                flag = 0\n            else:\n                n-=1\n                flag = 1\n        else:\n            if flag:\n                chanek += n//2\n                n//=2\n                flag = 0\n            else:\n                n//=2\n                flag = 1\n    return chanek", "difficulty": "interview", "tags": [], "prompt": null, "full_completion": null, "parsed_completion": null, "mixed_test_cases": []}
{"problem_id": "train_29", "description": "You are given an array $a$ consisting of $n$ integers numbered from $1$ to $n$.\n\nLet's define the $k$-amazing number of the array as the minimum number that occurs in all of the subsegments of the array having length $k$ (recall that a subsegment of $a$ of length $k$ is a contiguous part of $a$ containing exactly $k$ elements). If there is no integer occuring in all subsegments of length $k$ for some value of $k$, then the $k$-amazing number is $-1$.\n\nFor each $k$ from $1$ to $n$ calculate the $k$-amazing number of the array $a$.", "test_cases": [{"input": "find_k_amazing_numbers([1, 2, 3, 4, 5])", "correct_output": "[-1, -1, 3, 2, 1]", "broken_output": "[-1, -1, 3, 2, 2]", "use_broken": false}, {"input": "find_k_amazing_numbers([4, 4, 4, 4, 2])", "correct_output": "[-1, 4, 4, 4, 2]", "broken_output": "[-1, 4, 4, 4, 1]", "use_broken": false}, {"input": "find_k_amazing_numbers([1, 3, 1, 5, 3, 1])", "correct_output": "[-1, -1, 1, 1, 1, 1]", "broken_output": "[-1, -1, 2, 1, 1, 1]", "use_broken": false}], "dataset": "apps", "function_name": "find_k_amazing_numbers", "correct_solution": "def find_k_amazing_numbers(s):\n    n = len(s)\n    g = [[-1] for _ in range(n+1)]\n    for i in range(n):\n        g[s[i]].append(i)\n    ans = [-1] * n\n    lstunused = n\n    for i in range(1, n+1):\n        g[i].append(n)\n        mx = 0\n        for j in range(1, len(g[i])):\n            mx = max(mx, g[i][j] - g[i][j-1] - 1)\n        for j in range(mx, lstunused):\n            ans[j] = i\n        lstunused = min(lstunused, mx)\n    return ans", "difficulty": "interview", "tags": [], "prompt": null, "full_completion": null, "parsed_completion": null, "mixed_test_cases": []}
{"problem_id": "train_98", "description": "You may have already known that a standard ICPC team consists of exactly three members. The perfect team however has more restrictions. A student can have some specialization: coder or mathematician. She/he can have no specialization, but can't have both at the same time.\n\nSo the team is considered perfect if it includes at least one coder, at least one mathematician and it consists of exactly three members.\n\nYou are a coach at a very large university and you know that $c$ of your students are coders, $m$ are mathematicians and $x$ have no specialization.\n\nWhat is the maximum number of full perfect teams you can distribute them into? \n\nNote that some students can be left without a team and each student can be a part of no more than one team.\n\nYou are also asked to answer $q$ independent queries.", "test_cases": [{"input": "max_perfect_teams(1, 1, 1)", "correct_output": "1", "broken_output": "2", "use_broken": false}, {"input": "max_perfect_teams(3, 6, 0)", "correct_output": "3", "broken_output": "2", "use_broken": false}, {"input": "max_perfect_teams(0, 0, 0)", "correct_output": "0", "broken_output": "1", "use_broken": false}, {"input": "max_perfect_teams(0, 1, 1)", "correct_output": "0", "broken_output": "1", "use_broken": false}, {"input": "max_perfect_teams(10, 1, 10)", "correct_output": "1", "broken_output": "3", "use_broken": false}, {"input": "max_perfect_teams(4, 4, 1)", "correct_output": "3", "broken_output": "4", "use_broken": false}], "dataset": "apps", "function_name": "max_perfect_teams", "correct_solution": "def max_perfect_teams(c, m, x):\n    return min([c, m, (c + m + x) // 3])", "difficulty": "interview", "tags": [], "prompt": null, "full_completion": null, "parsed_completion": null, "mixed_test_cases": []}
{"problem_id": "train_39", "description": "After a long party Petya decided to return home, but he turned out to be at the opposite end of the town from his home. There are n crossroads in the line in the town, and there is either the bus or the tram station at each crossroad.\n\nThe crossroads are represented as a string s of length n, where s_i = A, if there is a bus station at i-th crossroad, and s_i = B, if there is a tram station at i-th crossroad. Currently Petya is at the first crossroad (which corresponds to s_1) and his goal is to get to the last crossroad (which corresponds to s_n).\n\nIf for two crossroads i and j for all crossroads i, i+1, ..., j-1 there is a bus station, one can pay a roubles for the bus ticket, and go from i-th crossroad to the j-th crossroad by the bus (it is not necessary to have a bus station at the j-th crossroad). Formally, paying a roubles Petya can go from i to j if s_t = A for all i \u2264 t < j.\n\nIf for two crossroads i and j for all crossroads i, i+1, ..., j-1 there is a tram station, one can pay b roubles for the tram ticket, and go from i-th crossroad to the j-th crossroad by the tram (it is not necessary to have a tram station at the j-th crossroad). Formally, paying b roubles Petya can go from i to j if s_t = B for all i \u2264 t < j.\n\nFor example, if s=\"AABBBAB\", a=4 and b=3 then Petya needs: buy one bus ticket to get from 1 to 3, buy one tram ticket to get from 3 to 6, buy one bus ticket to get from 6 to 7. Thus, in total he needs to spend 4+3+4=11 roubles. Please note that the type of the stop at the last crossroad (i.e. the character s_n) does not affect the final expense.\n\nNow Petya is at the first crossroad, and he wants to get to the n-th crossroad. After the party he has left with p roubles. He's decided to go to some station on foot, and then go to home using only public transport.\n\nHelp him to choose the closest crossroad i to go on foot the first, so he has enough money to get from the i-th crossroad to the n-th, using only tram and bus tickets.", "test_cases": [{"input": "find_closest_crossroad(2, 2, 1, 'BB')", "correct_output": "2", "broken_output": "1", "use_broken": false}, {"input": "find_closest_crossroad(1, 1, 1, 'AB')", "correct_output": "1", "broken_output": "2", "use_broken": false}, {"input": "find_closest_crossroad(3, 2, 8, 'AABBBBAABB')", "correct_output": "3", "broken_output": "4", "use_broken": false}, {"input": "find_closest_crossroad(5, 3, 4, 'BBBBB')", "correct_output": "1", "broken_output": "6", "use_broken": false}, {"input": "find_closest_crossroad(2, 1, 1, 'ABABAB')", "correct_output": "6", "broken_output": "5", "use_broken": false}], "dataset": "apps", "function_name": "find_closest_crossroad", "correct_solution": "def find_closest_crossroad(a, b, p, s):\n    n = len(s)\n    cost = [0] * n\n    cost[-1] = 0\n    typ = ''\n    i = n - 2\n    while i >= 0:\n        if s[i] == typ:\n            cost[i] = cost[i + 1]\n        else:\n            typ = s[i]\n            cost[i] = cost[i + 1] + (a if typ == 'A' else b)\n        i -= 1\n    i = 0\n    while cost[i] > p:\n        i += 1\n    return i + 1", "difficulty": "interview", "tags": [], "prompt": null, "full_completion": null, "parsed_completion": null, "mixed_test_cases": []}
{"problem_id": "train_70", "description": "Word $s$ of length $n$ is called $k$-complete if $s$ is a palindrome, i.e. $s_i=s_{n+1-i}$ for all $1 \\le i \\le n$; $s$ has a period of $k$, i.e. $s_i=s_{k+i}$ for all $1 \\le i \\le n-k$.\n\nFor example, \"abaaba\" is a $3$-complete word, while \"abccba\" is not.\n\nBob is given a word $s$ of length $n$ consisting of only lowercase Latin letters and an integer $k$, such that $n$ is divisible by $k$. He wants to convert $s$ to any $k$-complete word.\n\nTo do this Bob can choose some $i$ ($1 \\le i \\le n$) and replace the letter at position $i$ with some other lowercase Latin letter.\n\nSo now Bob wants to know the minimum number of letters he has to replace to convert $s$ to any $k$-complete word.\n\nNote that Bob can do zero changes if the word $s$ is already $k$-complete.\n\nYou are required to answer $t$ test cases independently.", "test_cases": [{"input": "min_changes_for_k_complete(6, 2, \"abaaba\")", "correct_output": "2", "broken_output": "3", "use_broken": false}, {"input": "min_changes_for_k_complete(6, 3, \"abaaba\")", "correct_output": "0", "broken_output": "1", "use_broken": false}, {"input": "min_changes_for_k_complete(36, 9, \"hippopotomonstrosesquippedaliophobia\")", "correct_output": "23", "broken_output": "22", "use_broken": false}, {"input": "min_changes_for_k_complete(21, 7, \"wudixiaoxingxingheclp\")", "correct_output": "16", "broken_output": "10", "use_broken": false}], "dataset": "apps", "function_name": "min_changes_for_k_complete", "correct_solution": "from collections import defaultdict\n\nclass Unionfind:\n    def __init__(self, n):\n        self.par = [-1]*n\n        self.rank = [1]*n\n    \n    def root(self, x):\n        r = x\n        \n        while not self.par[r]<0:\n            r = self.par[r]\n        \n        t = x\n        \n        while t!=r:\n            tmp = t\n            t = self.par[t]\n            self.par[tmp] = r\n        \n        return r\n    \n    def unite(self, x, y):\n        rx = self.root(x)\n        ry = self.root(y)\n        \n        if rx==ry:\n            return\n        \n        if self.rank[rx]<=self.rank[ry]:\n            self.par[ry] += self.par[rx]\n            self.par[rx] = ry\n            \n            if self.rank[rx]==self.rank[ry]:\n                self.rank[ry] += 1\n        else:\n            self.par[rx] += self.par[ry]\n            self.par[ry] = rx\n    \n    def is_same(self, x, y):\n        return self.root(x)==self.root(y)\n    \n    def count(self, x):\n        return -self.par[self.root(x)]\n\ndef min_changes_for_k_complete(n, k, s):\n    uf = Unionfind(n)\n    \n    for i in range(n//2):\n        uf.unite(i, n-1-i)\n    \n    for i in range(n-k):\n        uf.unite(i, i+k)\n    \n    d = defaultdict(dict)\n    \n    for i in range(n):\n        if s[i] not in d[uf.root(i)]:\n            d[uf.root(i)][s[i]] = 1\n        else:\n            d[uf.root(i)][s[i]] += 1\n    \n    rs = set(uf.root(i) for i in range(n))\n    ans = 0\n    \n    for r in rs:\n        ans += uf.count(r)-max(list(d[r].values()))\n    \n    return ans", "difficulty": "interview", "tags": [], "prompt": null, "full_completion": null, "parsed_completion": null, "mixed_test_cases": []}
{"problem_id": "train_30", "description": "You are given a string s of even length n. String s is binary, in other words, consists only of 0's and 1's.\n\nString s has exactly n/2 zeroes and n/2 ones (n is even).\n\nIn one operation you can reverse any substring of s. A substring of a string is a contiguous subsequence of that string.\n\nWhat is the minimum number of operations you need to make string s alternating? A string is alternating if s_i \u2260 s_{i + 1} for all i. There are two types of alternating strings in general: 01010101... or 10101010...", "test_cases": [{"input": "min_operations_to_alternating(2, \"10\")", "correct_output": "0", "broken_output": "1", "use_broken": false}, {"input": "min_operations_to_alternating(4, \"0110\")", "correct_output": "1", "broken_output": "2", "use_broken": false}, {"input": "min_operations_to_alternating(8, \"11101000\")", "correct_output": "2", "broken_output": "3", "use_broken": false}], "dataset": "apps", "function_name": "min_operations_to_alternating", "correct_solution": "def min_operations_to_alternating(n, s):\n    ans = 0\n    for y in range(1, n):\n        if s[y] == s[y-1]:\n            ans += 1\n    return (ans + ans % 2) // 2", "difficulty": "interview", "tags": [], "prompt": null, "full_completion": null, "parsed_completion": null, "mixed_test_cases": []}
{"problem_id": "train_75", "description": "The statement of this problem is the same as the statement of problem C1. The only difference is that, in problem C1, $n$ is always even, and in C2, $n$ is always odd.\n\nYou are given a regular polygon with $2 \\cdot n$ vertices (it's convex and has equal sides and equal angles) and all its sides have length $1$. Let's name it as $2n$-gon.\n\nYour task is to find the square of the minimum size such that you can embed $2n$-gon in the square. Embedding $2n$-gon in the square means that you need to place $2n$-gon in the square in such way that each point which lies inside or on a border of $2n$-gon should also lie inside or on a border of the square.\n\nYou can rotate $2n$-gon and/or the square.", "test_cases": [{"input": "min_square_side_for_polygon(3)", "correct_output": "1.931851653", "broken_output": "2.0", "use_broken": false}, {"input": "min_square_side_for_polygon(5)", "correct_output": "3.196226611", "broken_output": "3.0", "use_broken": false}, {"input": "min_square_side_for_polygon(199)", "correct_output": "126.687663595", "broken_output": "126.687663594", "use_broken": false}], "dataset": "apps", "function_name": "min_square_side_for_polygon", "correct_solution": "import math\n\ndef min_square_side_for_polygon(n):\n    diags = 1/math.sin(math.pi/2/n)\n    return diags * math.cos(math.pi/4/n)", "difficulty": "interview", "tags": [], "prompt": null, "full_completion": null, "parsed_completion": null, "mixed_test_cases": []}
{"problem_id": "train_22", "description": "Let's define the following recurrence: $$a_{n+1} = a_{n} + minDigit(a_{n}) \\cdot maxDigit(a_{n}).$$ Here $minDigit(x)$ and $maxDigit(x)$ are the minimal and maximal digits in the decimal representation of $x$ without leading zeroes. Your task is calculate $a_{K}$ for given $a_{1}$ and $K$.", "test_cases": [{"input": "calculate_sequence_value(1, 4)", "correct_output": "42", "broken_output": "43", "use_broken": false}, {"input": "calculate_sequence_value(487, 1)", "correct_output": "487", "broken_output": "488", "use_broken": false}, {"input": "calculate_sequence_value(487, 2)", "correct_output": "519", "broken_output": "520", "use_broken": false}, {"input": "calculate_sequence_value(487, 3)", "correct_output": "528", "broken_output": "550", "use_broken": false}, {"input": "calculate_sequence_value(487, 4)", "correct_output": "544", "broken_output": "600", "use_broken": false}, {"input": "calculate_sequence_value(487, 5)", "correct_output": "564", "broken_output": "600", "use_broken": false}, {"input": "calculate_sequence_value(487, 7)", "correct_output": "628", "broken_output": "629", "use_broken": false}], "dataset": "apps", "function_name": "calculate_sequence_value", "correct_solution": "def calculate_sequence_value(a, k):\n    for _ in range(k - 1):\n        if '0' in str(a):\n            break\n        a += int(min(list(str(a)))) * int(max(list(str(a))))\n    return a", "difficulty": "interview", "tags": [], "prompt": null, "full_completion": null, "parsed_completion": null, "mixed_test_cases": []}
{"problem_id": "train_93", "description": "Santa has to send presents to the kids. He has a large stack of n presents, numbered from 1 to n; the topmost present has number a_1, the next present is a_2, and so on; the bottom present has number a_n. All numbers are distinct.\n\nSanta has a list of m distinct presents he has to send: b_1, b_2, ..., b_m. He will send them in the order they appear in the list.\n\nTo send a present, Santa has to find it in the stack by removing all presents above it, taking this present and returning all removed presents on top of the stack. So, if there are k presents above the present Santa wants to send, it takes him 2k + 1 seconds to do it. Fortunately, Santa can speed the whole process up \u2014 when he returns the presents to the stack, he may reorder them as he wishes (only those which were above the present he wanted to take; the presents below cannot be affected in any way).\n\nWhat is the minimum time required to send all of the presents, provided that Santa knows the whole list of presents he has to send and reorders the presents optimally? Santa cannot change the order of presents or interact with the stack of presents in any other way.", "test_cases": [{"input": "min_time_to_send_presents([3, 1, 2], [3, 2, 1])", "correct_output": "5", "broken_output": "6", "use_broken": false}, {"input": "min_time_to_send_presents([2, 1, 7, 3, 4, 5, 6], [3, 1])", "correct_output": "8", "broken_output": "7", "use_broken": false}], "dataset": "apps", "function_name": "min_time_to_send_presents", "correct_solution": "def min_time_to_send_presents(stack, to_send):\n    n = len(stack)\n    m = len(to_send)\n    aidx = {}\n    for i, e in enumerate(stack):\n        aidx[e] = i\n    midx = -1\n    res = 0\n    for i, e in enumerate(to_send):\n        idx = aidx[e]\n        if idx <= midx:\n            res += 1\n        else:\n            res += 2 * (idx - i) + 1\n        midx = max(midx, idx)\n    return res", "difficulty": "interview", "tags": [], "prompt": null, "full_completion": null, "parsed_completion": null, "mixed_test_cases": []}
{"problem_id": "train_81", "description": "You are given three strings a, b and c of the same length n. The strings consist of lowercase English letters only. The i-th letter of a is a_i, the i-th letter of b is b_i, the i-th letter of c is c_i.\n\nFor every i (1 \u2264 i \u2264 n) you must swap (i.e. exchange) c_i with either a_i or b_i. So in total you'll perform exactly n swap operations, each of them either c_i \u2194 a_i or c_i \u2194 b_i (i iterates over all integers between 1 and n, inclusive).\n\nFor example, if a is \"code\", b is \"true\", and c is \"help\", you can make c equal to \"crue\" taking the 1-st and the 4-th letters from a and the others from b. In this way a becomes \"hodp\" and b becomes \"tele\".\n\nIs it possible that after these swaps the string a becomes exactly the same as the string b?", "test_cases": [{"input": "can_make_strings_equal(\"aaa\", \"bbb\", \"ccc\")", "correct_output": "NO", "broken_output": "YES", "use_broken": false}, {"input": "can_make_strings_equal(\"abc\", \"bca\", \"bca\")", "correct_output": "YES", "broken_output": "NO", "use_broken": false}, {"input": "can_make_strings_equal(\"aabb\", \"bbaa\", \"baba\")", "correct_output": "YES", "broken_output": "NO", "use_broken": false}, {"input": "can_make_strings_equal(\"imi\", \"mii\", \"iim\")", "correct_output": "NO", "broken_output": "YES", "use_broken": false}], "dataset": "apps", "function_name": "can_make_strings_equal", "correct_solution": "def can_make_strings_equal(a, b, c):\n    n = len(a)\n    \n    ok = True\n    for i in range(n):\n        if c[i] not in [a[i], b[i]]:\n            ok = False\n    \n    return 'YES' if ok else 'NO'", "difficulty": "interview", "tags": [], "prompt": null, "full_completion": null, "parsed_completion": null, "mixed_test_cases": []}
{"problem_id": "train_77", "description": "You have a fence consisting of n vertical boards. The width of each board is 1. The height of the i-th board is a_i. You think that the fence is great if there is no pair of adjacent boards having the same height. More formally, the fence is great if and only if for all indices from 2 to n, the condition a_{i-1} \u2260 a_i holds.\n\nUnfortunately, it is possible that now your fence is not great. But you can change it! You can increase the length of the i-th board by 1, but you have to pay b_i rubles for it. The length of each board can be increased any number of times (possibly, zero).\n\nCalculate the minimum number of rubles you have to spend to make the fence great again!\n\nYou have to answer q independent queries.", "test_cases": [{"input": "min_cost_great_fence(3, [2, 2, 3], [4, 1, 5])", "correct_output": "2", "broken_output": "3", "use_broken": false}, {"input": "min_cost_great_fence(3, [2, 2, 2], [3, 10, 6])", "correct_output": "9", "broken_output": "8", "use_broken": false}, {"input": "min_cost_great_fence(4, [1, 3, 2, 1000000000], [7, 3, 6, 2])", "correct_output": "0", "broken_output": "10", "use_broken": false}], "dataset": "apps", "function_name": "min_cost_great_fence", "correct_solution": "def min_cost_great_fence(N, A, B):\n    INF = 10 ** 20\n    \n    dp = {A[0]: 0, A[0] + 1: B[0], A[0] + 2: B[0] * 2}\n    for i in range(1, N):\n        ndp = {}\n\n        h = A[i]\n        for ph, c in dp.items():\n            for inc in range(3):\n                nh = h + inc\n                if ph == nh:\n                    continue\n                if nh not in ndp:\n                    ndp[nh] = INF\n                ndp[nh] = min(ndp[nh], c + B[i] * inc)\n\n        dp = ndp\n\n    return min(dp.values())", "difficulty": "interview", "tags": [], "prompt": null, "full_completion": null, "parsed_completion": null, "mixed_test_cases": []}
{"problem_id": "train_3", "description": "You have n barrels lined up in a row, numbered from left to right from one. Initially, the i-th barrel contains a_i liters of water.\n\nYou can pour water from one barrel to another. In one act of pouring, you can choose two different barrels x and y (the x-th barrel shouldn't be empty) and pour any possible amount of water from barrel x to barrel y (possibly, all water). You may assume that barrels have infinite capacity, so you can pour any amount of water in each of them.\n\nCalculate the maximum possible difference between the maximum and the minimum amount of water in the barrels, if you can pour water at most k times.\n\nSome examples: if you have four barrels, each containing 5 liters of water, and k = 1, you may pour 5 liters from the second barrel into the fourth, so the amounts of water in the barrels are [5, 0, 5, 10], and the difference between the maximum and the minimum is 10; if all barrels are empty, you can't make any operation, so the difference between the maximum and the minimum amount is still 0.", "test_cases": [{"input": "max_water_difference(4, 1, [5, 5, 5, 5])", "correct_output": "10", "broken_output": "5", "use_broken": false}, {"input": "max_water_difference(3, 2, [0, 0, 0])", "correct_output": "0", "broken_output": "3", "use_broken": false}], "dataset": "apps", "function_name": "max_water_difference", "correct_solution": "def max_water_difference(n, k, lst):\n    lst.sort()\n    ans = 0\n    for i in range(n - k - 1, n):\n        ans += lst[i]\n    return ans", "difficulty": "interview", "tags": [], "prompt": null, "full_completion": null, "parsed_completion": null, "mixed_test_cases": []}
{"problem_id": "train_4", "description": "You are given a permutation $p=[p_1, p_2, \\ldots, p_n]$ of integers from $1$ to $n$. Let's call the number $m$ ($1 \\le m \\le n$) beautiful, if there exists two indices $l, r$ ($1 \\le l \\le r \\le n$), such that the numbers $[p_l, p_{l+1}, \\ldots, p_r]$ is a permutation of numbers $1, 2, \\ldots, m$.\n\nFor example, let $p = [4, 5, 1, 3, 2, 6]$. In this case, the numbers $1, 3, 5, 6$ are beautiful and $2, 4$ are not. It is because:  if $l = 3$ and $r = 3$ we will have a permutation $[1]$ for $m = 1$;  if $l = 3$ and $r = 5$ we will have a permutation $[1, 3, 2]$ for $m = 3$;  if $l = 1$ and $r = 5$ we will have a permutation $[4, 5, 1, 3, 2]$ for $m = 5$;  if $l = 1$ and $r = 6$ we will have a permutation $[4, 5, 1, 3, 2, 6]$ for $m = 6$;  it is impossible to take some $l$ and $r$, such that $[p_l, p_{l+1}, \\ldots, p_r]$ is a permutation of numbers $1, 2, \\ldots, m$ for $m = 2$ and for $m = 4$. \n\nYou are given a permutation $p=[p_1, p_2, \\ldots, p_n]$. For all $m$ ($1 \\le m \\le n$) determine if it is a beautiful number or not.", "test_cases": [{"input": "find_beautiful_numbers([4, 5, 1, 3, 2, 6])", "correct_output": "101011", "broken_output": "101010", "use_broken": false}, {"input": "find_beautiful_numbers([5, 3, 1, 2, 4])", "correct_output": "11111", "broken_output": "10111", "use_broken": false}, {"input": "find_beautiful_numbers([1, 4, 3, 2])", "correct_output": "1001", "broken_output": "1111", "use_broken": false}], "dataset": "apps", "function_name": "find_beautiful_numbers", "correct_solution": "def find_beautiful_numbers(nums):\n    new_ar = list(zip(nums,[i for i in range(len(nums))]))\n    new_ar.sort()\n    \n    maxx = new_ar[0][1]\n    minn = new_ar[0][1]\n    s=\"1\"\n    for j in range(1,len(new_ar)):\n        if(new_ar[j][1]>maxx):\n            maxx = new_ar[j][1]\n        if(new_ar[j][1]<minn):\n            minn = new_ar[j][1]\n        if(maxx-minn<j+1):\n            s+=\"1\"\n        else:\n            s+=\"0\"\n        \n    return s", "difficulty": "interview", "tags": [], "prompt": null, "full_completion": null, "parsed_completion": null, "mixed_test_cases": []}
{"problem_id": "train_66", "description": "Kuroni has n daughters. As gifts for them, he bought n necklaces and n bracelets: the i-th necklace has a brightness a_i, where all the a_i are pairwise distinct (i.e. all a_i are different), the i-th bracelet has a brightness b_i, where all the b_i are pairwise distinct (i.e. all b_i are different).\n\nKuroni wants to give exactly one necklace and exactly one bracelet to each of his daughters. To make sure that all of them look unique, the total brightnesses of the gifts given to each daughter should be pairwise distinct. Formally, if the i-th daughter receives a necklace with brightness x_i and a bracelet with brightness y_i, then the sums x_i + y_i should be pairwise distinct. Help Kuroni to distribute the gifts.\n\nFor example, if the brightnesses are a = [1, 7, 5] and b = [6, 1, 2], then we may distribute the gifts as follows: Give the third necklace and the first bracelet to the first daughter, for a total brightness of a_3 + b_1 = 11. Give the first necklace and the third bracelet to the second daughter, for a total brightness of a_1 + b_3 = 3. Give the second necklace and the second bracelet to the third daughter, for a total brightness of a_2 + b_2 = 8.\n\nHere is an example of an invalid distribution: Give the first necklace and the first bracelet to the first daughter, for a total brightness of a_1 + b_1 = 7. Give the second necklace and the second bracelet to the second daughter, for a total brightness of a_2 + b_2 = 8. Give the third necklace and the third bracelet to the third daughter, for a total brightness of a_3 + b_3 = 7.\n\nThis distribution is invalid, as the total brightnesses of the gifts received by the first and the third daughter are the same. Don't make them this upset!", "test_cases": [{"input": "distribute_gifts([1, 8, 5], [8, 4, 5])", "correct_output": "([1, 5, 8], [4, 5, 8])", "broken_output": "([1, 8, 5], [4, 5, 8])", "use_broken": false}, {"input": "distribute_gifts([1, 7, 5], [6, 1, 2])", "correct_output": "([1, 5, 7], [1, 2, 6])", "broken_output": "([1, 7, 5], [6, 1, 2])", "use_broken": false}], "dataset": "apps", "function_name": "distribute_gifts", "correct_solution": "def distribute_gifts(aa, bb):\n    aa.sort()\n    bb.sort()\n    return (aa, bb)", "difficulty": "interview", "tags": [], "prompt": null, "full_completion": null, "parsed_completion": null, "mixed_test_cases": []}
{"problem_id": "train_19", "description": "The only difference between easy and hard versions is constraints.\n\nThe BerTV channel every day broadcasts one episode of one of the k TV shows. You know the schedule for the next n days: a sequence of integers a_1, a_2, ..., a_n (1 \u2264 a_i \u2264 k), where a_i is the show, the episode of which will be shown in i-th day.\n\nThe subscription to the show is bought for the entire show (i.e. for all its episodes), for each show the subscription is bought separately.\n\nHow many minimum subscriptions do you need to buy in order to have the opportunity to watch episodes of purchased shows d (1 \u2264 d \u2264 n) days in a row? In other words, you want to buy the minimum number of TV shows so that there is some segment of d consecutive days in which all episodes belong to the purchased shows.", "test_cases": [{"input": "min_subscriptions_for_consecutive_days(5, 2, 2, [1, 2, 1, 2, 1])", "correct_output": "2", "broken_output": "3", "use_broken": false}, {"input": "min_subscriptions_for_consecutive_days(9, 3, 3, [3, 3, 3, 2, 2, 2, 1, 1, 1])", "correct_output": "1", "broken_output": "3", "use_broken": false}, {"input": "min_subscriptions_for_consecutive_days(4, 10, 4, [10, 8, 6, 4])", "correct_output": "4", "broken_output": "3", "use_broken": false}, {"input": "min_subscriptions_for_consecutive_days(16, 9, 8, [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5, 8, 9, 7, 9, 3])", "correct_output": "5", "broken_output": "4", "use_broken": false}], "dataset": "apps", "function_name": "min_subscriptions_for_consecutive_days", "correct_solution": "def min_subscriptions_for_consecutive_days(n, k, d, a):\n    s = {}\n    for q in range(d):\n        s[a[q]] = s.get(a[q], 0)+1\n    ans = len(s)\n    for q in range(d, n):\n        if s[a[q-d]] == 1:\n            del s[a[q-d]]\n        else:\n            s[a[q-d]] -= 1\n        s[a[q]] = s.get(a[q], 0)+1\n        ans = min(ans, len(s))\n    return ans", "difficulty": "interview", "tags": [], "prompt": null, "full_completion": null, "parsed_completion": null, "mixed_test_cases": []}
{"problem_id": "train_21", "description": "Among Johnny's numerous hobbies, there are two seemingly harmless ones: applying bitwise operations and sneaking into his dad's office. As it is usually the case with small children, Johnny is unaware that combining these two activities can get him in a lot of trouble.\n\nThere is a set $S$ containing very important numbers on his dad's desk. The minute Johnny heard about it, he decided that it's a good idea to choose a positive integer $k$ and replace each element $s$ of the set $S$ with $s \\oplus k$ ($\\oplus$ denotes the exclusive or operation).\n\nHelp him choose such $k$ that Johnny's dad will not see any difference after his son is done playing (i.e. Johnny will get the same set as before playing). It is possible that no such number exists. It is also possible that there are many of them. In such a case, output the smallest one. Note that the order of elements in a set doesn't matter, i.e. set $\\{1, 2, 3\\}$ equals to set $\\{2, 1, 3\\}$.\n\nFormally, find the smallest positive integer $k$ such that $\\{s \\oplus k | s \\in S\\} = S$ or report that there is no such number.\n\nFor example, if $S = \\{1, 3, 4\\}$ and $k = 2$, new set will be equal to $\\{3, 1, 6\\}$. If $S = \\{0, 1, 2, 3\\}$ and $k = 1$, after playing set will stay the same.", "test_cases": [{"input": "find_smallest_xor_key([1, 0, 2, 3])", "correct_output": "1", "broken_output": "2", "use_broken": false}, {"input": "find_smallest_xor_key([10, 7, 14, 8, 3, 12])", "correct_output": "4", "broken_output": "5", "use_broken": false}, {"input": "find_smallest_xor_key([0, 2])", "correct_output": "2", "broken_output": "3", "use_broken": false}, {"input": "find_smallest_xor_key([1, 2, 3])", "correct_output": "-1", "broken_output": "2", "use_broken": false}, {"input": "find_smallest_xor_key([1, 4, 6, 10, 11, 12])", "correct_output": "-1", "broken_output": "5", "use_broken": false}, {"input": "find_smallest_xor_key([0, 1023])", "correct_output": "1023", "broken_output": "5", "use_broken": false}], "dataset": "apps", "function_name": "find_smallest_xor_key", "correct_solution": "def find_smallest_xor_key(s):\n    check = set(s)\n    found = False\n    for i in range(1, 1025):\n        newset = set([e^i for e in s])\n        if check == newset:\n            return i\n    return -1", "difficulty": "interview", "tags": [], "prompt": null, "full_completion": null, "parsed_completion": null, "mixed_test_cases": []}
{"problem_id": "train_5", "description": "The sequence of m integers is called the permutation if it contains all integers from 1 to m exactly once. The number m is called the length of the permutation.\n\nDreamoon has two permutations p_1 and p_2 of non-zero lengths l_1 and l_2.\n\nNow Dreamoon concatenates these two permutations into another sequence a of length l_1 + l_2. First l_1 elements of a is the permutation p_1 and next l_2 elements of a is the permutation p_2.\n\nYou are given the sequence a, and you need to find two permutations p_1 and p_2. If there are several possible ways to restore them, you should find all of them. (Note that it is also possible that there will be no ways.)", "test_cases": [{"input": "find_permutation_splits([1, 4, 3, 2, 1])", "correct_output": "[(1, 4), (4, 1)]", "broken_output": "[(2, 3)]", "use_broken": false}, {"input": "find_permutation_splits([2, 4, 1, 3, 2, 1])", "correct_output": "[(4, 2)]", "broken_output": "[(2, 4)]", "use_broken": false}, {"input": "find_permutation_splits([2, 1, 1, 3])", "correct_output": "[]", "broken_output": "[(2, 2)]", "use_broken": false}, {"input": "find_permutation_splits([1, 3, 3, 1])", "correct_output": "[]", "broken_output": "[(2, 2)]", "use_broken": false}, {"input": "find_permutation_splits([2, 1, 3, 4, 5, 6, 7, 8, 9, 1, 10, 2])", "correct_output": "[(2, 10)]", "broken_output": "[(3, 9)]", "use_broken": false}, {"input": "find_permutation_splits([1, 1, 1])", "correct_output": "[]", "broken_output": "[(1, 2)]", "use_broken": false}], "dataset": "apps", "function_name": "find_permutation_splits", "correct_solution": "def find_permutation_splits(a):\n    def possible(arr):\n        ans = set()\n        s = set()\n        lmax = 0\n        for i in range(len(arr)):\n            lmax = max(lmax, arr[i])\n            s.add(arr[i])\n            if lmax == i + 1 and len(s) == i + 1:\n                ans.add(i + 1)\n        return ans\n    \n    n = len(a)\n    left = possible(a)\n    a_reversed = a[::-1]\n    right = possible(a_reversed)\n    ans = []\n    for l in left:\n        if n - l in right:\n            ans.append((l, n - l))\n    return ans", "difficulty": "interview", "tags": [], "prompt": null, "full_completion": null, "parsed_completion": null, "mixed_test_cases": []}
{"problem_id": "train_78", "description": "You are given a picture consisting of n rows and m columns. Rows are numbered from 1 to n from the top to the bottom, columns are numbered from 1 to m from the left to the right. Each cell is painted either black or white.\n\nYou think that this picture is not interesting enough. You consider a picture to be interesting if there is at least one cross in it. A cross is represented by a pair of numbers x and y, where 1 \u2264 x \u2264 n and 1 \u2264 y \u2264 m, such that all cells in row x and all cells in column y are painted black.\n\nYou have a brush and a can of black paint, so you can make this picture interesting. Each minute you may choose a white cell and paint it black.\n\nWhat is the minimum number of minutes you have to spend so the resulting picture contains at least one cross?", "test_cases": [{"input": "min_minutes_for_cross(5, 5, ['..*..', '..*..', '*****', '..*..', '..*..'])", "correct_output": "0", "broken_output": "5", "use_broken": false}, {"input": "min_minutes_for_cross(3, 4, ['****', '.*..', '.*..'])", "correct_output": "0", "broken_output": "2", "use_broken": false}, {"input": "min_minutes_for_cross(4, 3, ['***', '*..', '*..', '*..'])", "correct_output": "0", "broken_output": "1", "use_broken": false}, {"input": "min_minutes_for_cross(5, 5, ['*****', '*.*.*', '*****', '..*.*', '..***'])", "correct_output": "0", "broken_output": "2", "use_broken": false}, {"input": "min_minutes_for_cross(1, 4, ['****'])", "correct_output": "0", "broken_output": "1", "use_broken": false}, {"input": "min_minutes_for_cross(5, 5, ['.....', '..*..', '.***.', '..*..', '.....'])", "correct_output": "4", "broken_output": "5", "use_broken": false}, {"input": "min_minutes_for_cross(5, 3, ['...', '.*.', '.*.', '***', '.*.'])", "correct_output": "1", "broken_output": "2", "use_broken": false}, {"input": "min_minutes_for_cross(3, 3, ['.*.', '*.*', '.*.'])", "correct_output": "1", "broken_output": "2", "use_broken": false}, {"input": "min_minutes_for_cross(4, 4, ['*.**', '....', '*.**', '*.**'])", "correct_output": "2", "broken_output": "1", "use_broken": false}], "dataset": "apps", "function_name": "min_minutes_for_cross", "correct_solution": "def min_minutes_for_cross(n, m, grid):\n    R = [0] * n\n    C = [0] * m\n    for i in range(0, n):\n        for j in range(0, m):\n            if grid[i][j] != \"*\":\n                R[i] = R[i] + 1\n                C[j] = C[j] + 1\n    ans = n + m - 1\n    for i in range(0, n):\n        for j in range(0, m):\n            x = 0\n            if grid[i][j] != \"*\":\n                x = -1\n            ans = min([ans, R[i]+C[j]+x])\n    return ans", "difficulty": "interview", "tags": [], "prompt": null, "full_completion": null, "parsed_completion": null, "mixed_test_cases": []}
{"problem_id": "train_15", "description": "Screen resolution of Polycarp's monitor is $a \\times b$ pixels. Unfortunately, there is one dead pixel at his screen. It has coordinates $(x, y)$ ($0 \\le x < a, 0 \\le y < b$). You can consider columns of pixels to be numbered from $0$ to $a-1$, and rows \u2014 from $0$ to $b-1$.\n\nPolycarp wants to open a rectangular window of maximal size, which doesn't contain the dead pixel. The boundaries of the window should be parallel to the sides of the screen.\n\nPrint the maximal area (in pixels) of a window that doesn't contain the dead pixel inside itself.", "test_cases": [{"input": "max_window_area(8, 8, 0, 0)", "correct_output": "56", "broken_output": "57", "use_broken": false}, {"input": "max_window_area(1, 10, 0, 3)", "correct_output": "6", "broken_output": "5", "use_broken": false}, {"input": "max_window_area(17, 31, 10, 4)", "correct_output": "442", "broken_output": "441", "use_broken": false}, {"input": "max_window_area(2, 1, 0, 0)", "correct_output": "1", "broken_output": "2", "use_broken": false}, {"input": "max_window_area(5, 10, 3, 9)", "correct_output": "45", "broken_output": "40", "use_broken": false}, {"input": "max_window_area(10, 10, 4, 8)", "correct_output": "80", "broken_output": "70", "use_broken": false}], "dataset": "apps", "function_name": "max_window_area", "correct_solution": "def max_window_area(a, b, x, y):\n    return max(x*b, (a-x-1)*b, y*a, (b - y - 1)*a)", "difficulty": "interview", "tags": [], "prompt": null, "full_completion": null, "parsed_completion": null, "mixed_test_cases": []}
{"problem_id": "train_62", "description": "Polycarp wants to assemble his own keyboard. Layouts with multiple rows are too complicated for him \u2014 his keyboard will consist of only one row, where all 26 lowercase Latin letters will be arranged in some order.\n\nPolycarp uses the same password s on all websites where he is registered (it is bad, but he doesn't care). He wants to assemble a keyboard that will allow to type this password very easily. He doesn't like to move his fingers while typing the password, so, for each pair of adjacent characters in s, they should be adjacent on the keyboard. For example, if the password is abacaba, then the layout cabdefghi... is perfect, since characters a and c are adjacent on the keyboard, and a and b are adjacent on the keyboard. It is guaranteed that there are no two adjacent equal characters in s, so, for example, the password cannot be password (two characters s are adjacent).\n\nCan you help Polycarp with choosing the perfect layout of the keyboard, if it is possible?", "test_cases": [{"input": "find_keyboard_layout('ababa')", "correct_output": "bacdefghijklmnopqrstuvwxyz", "broken_output": "acbdefghijklmnopqrstuvwxyz", "use_broken": false}, {"input": "find_keyboard_layout('codedoca')", "correct_output": "edocabfghijklmnpqrstuvwxyz", "broken_output": "eocabdfghijklmnpqrstuvwxyz", "use_broken": false}, {"input": "find_keyboard_layout('abcda')", "correct_output": "None", "broken_output": "'abcdefghijklmnopqrstuvwxyz'", "use_broken": false}, {"input": "find_keyboard_layout('zxzytyz')", "correct_output": "xzytabcdefghijklmnopqrsuvw", "broken_output": "xzytabcdefghijlmnopqrsuvw", "use_broken": false}, {"input": "find_keyboard_layout('abcdefghijklmnopqrstuvwxyza')", "correct_output": "None", "broken_output": "'abcdefghijklmnopqrstuvwxyzb'", "use_broken": false}], "dataset": "apps", "function_name": "find_keyboard_layout", "correct_solution": "def find_keyboard_layout(s):\n    res = [s[0]]\n    pos = 0\n    for char in s[1:]:\n        if 0 <= pos-1 < len(res) and res[pos-1] == char:\n            pos = pos-1\n        elif 0 <= pos+1 < len(res) and res[pos+1] == char:\n            pos = pos+1\n        elif pos == 0 and char not in res:\n            res.insert(0, char)\n        elif pos == len(res)-1 and char not in res:\n            res.append(char)\n            pos += 1\n        else:\n            return None\n    for x in range(ord('a'), ord('z')+1):\n        x = chr(x)\n        if x not in res:\n            res.append(x)\n    return ''.join(res)", "difficulty": "interview", "tags": [], "prompt": null, "full_completion": null, "parsed_completion": null, "mixed_test_cases": []}
{"problem_id": "train_87", "description": "Berland year consists of $m$ months with $d$ days each. Months are numbered from $1$ to $m$. Berland week consists of $w$ days. The first day of the year is also the first day of the week. Note that the last week of the year might be shorter than $w$ days.\n\nA pair $(x, y)$ such that $x < y$ is ambiguous if day $x$ of month $y$ is the same day of the week as day $y$ of month $x$.\n\nCount the number of ambiguous pairs.", "test_cases": [{"input": "count_ambiguous_pairs(6, 7, 4)", "correct_output": "6", "broken_output": "5", "use_broken": false}, {"input": "count_ambiguous_pairs(10, 7, 12)", "correct_output": "9", "broken_output": "10", "use_broken": false}, {"input": "count_ambiguous_pairs(12, 30, 7)", "correct_output": "5", "broken_output": "6", "use_broken": false}, {"input": "count_ambiguous_pairs(1, 1, 1)", "correct_output": "0", "broken_output": "1", "use_broken": false}, {"input": "count_ambiguous_pairs(3247834, 10298779, 625324)", "correct_output": "116461800", "broken_output": "116461801", "use_broken": false}], "dataset": "apps", "function_name": "count_ambiguous_pairs", "correct_solution": "def gcd(a, b):\n    while b:\n        a, b = b, a%b\n    return a\n\ndef count_ambiguous_pairs(m, d, w):\n    g = w // gcd(d-1, w)\n    c = min(m, d)\n    v = c // g\n    ans = v * (v - 1) // 2 * g\n    ans += (c - g * v) * v\n    return ans", "difficulty": "interview", "tags": [], "prompt": null, "full_completion": null, "parsed_completion": null, "mixed_test_cases": []}
{"problem_id": "train_18", "description": "The statement of this problem is the same as the statement of problem C2. The only difference is that, in problem C1, $n$ is always even, and in C2, $n$ is always odd.\n\nYou are given a regular polygon with $2 \\cdot n$ vertices (it's convex and has equal sides and equal angles) and all its sides have length $1$. Let's name it as $2n$-gon.\n\nYour task is to find the square of the minimum size such that you can embed $2n$-gon in the square. Embedding $2n$-gon in the square means that you need to place $2n$-gon in the square in such way that each point which lies inside or on a border of $2n$-gon should also lie inside or on a border of the square.\n\nYou can rotate $2n$-gon and/or the square.", "test_cases": [{"input": "min_square_side_for_polygon(2)", "correct_output": "1.0", "broken_output": "2.0", "use_broken": false}, {"input": "min_square_side_for_polygon(4)", "correct_output": "2.414213562", "broken_output": "3.0", "use_broken": false}, {"input": "min_square_side_for_polygon(200)", "correct_output": "127.321336469", "broken_output": "127.0", "use_broken": false}], "dataset": "apps", "function_name": "min_square_side_for_polygon", "correct_solution": "import math\n\ndef min_square_side_for_polygon(n):\n    return 1/math.tan(math.pi/2/n)", "difficulty": "interview", "tags": [], "prompt": null, "full_completion": null, "parsed_completion": null, "mixed_test_cases": []}
{"problem_id": "train_13", "description": "Your company was appointed to lay new asphalt on the highway of length n. You know that every day you can either repair one unit of the highway (lay new asphalt over one unit of the highway) or skip repairing.\n\nSkipping the repair is necessary because of the climate. The climate in your region is periodical: there are g days when the weather is good and if you lay new asphalt these days it becomes high-quality pavement; after that, the weather during the next b days is bad, and if you lay new asphalt these days it becomes low-quality pavement; again g good days, b bad days and so on.\n\nYou can be sure that you start repairing at the start of a good season, in other words, days 1, 2, ..., g are good.\n\nYou don't really care about the quality of the highway, you just want to make sure that at least half of the highway will have high-quality pavement. For example, if the n = 5 then at least 3 units of the highway should have high quality; if n = 4 then at least 2 units should have high quality.\n\nWhat is the minimum number of days is needed to finish the repair of the whole highway?", "test_cases": [{"input": "min_days_highway_repair(5, 1, 1)", "correct_output": "5", "broken_output": "4", "use_broken": false}, {"input": "min_days_highway_repair(8, 10, 10)", "correct_output": "8", "broken_output": "7", "use_broken": false}, {"input": "min_days_highway_repair(1000000, 1, 1000000)", "correct_output": "499999500000", "broken_output": "1000000", "use_broken": false}], "dataset": "apps", "function_name": "min_days_highway_repair", "correct_solution": "def min_days_highway_repair(n, g, b):\n    nn = (n + 1) // 2\n    return max(nn + (nn - 1) // g * b, n)", "difficulty": "interview", "tags": [], "prompt": null, "full_completion": null, "parsed_completion": null, "mixed_test_cases": []}
{"problem_id": "train_48", "description": "You are playing a very popular game called Cubecraft. Initially, you have one stick and want to craft k torches. One torch can be crafted using one stick and one coal.\n\nHopefully, you've met a very handsome wandering trader who has two trade offers:\n- exchange 1 stick for x sticks (you lose 1 stick and gain x sticks).\n- exchange y sticks for 1 coal (you lose y sticks and gain 1 coal).\n\nDuring one trade, you can use only one of these two trade offers. You can use each trade offer any number of times you want to, in any order.\n\nYour task is to find the minimum number of trades you need to craft at least k torches. The answer always exists under the given constraints.", "test_cases": [{"input": "min_trades_for_torches(2, 1, 5)", "correct_output": "14", "broken_output": "13", "use_broken": false}, {"input": "min_trades_for_torches(42, 13, 24)", "correct_output": "33", "broken_output": "32", "use_broken": false}, {"input": "min_trades_for_torches(12, 11, 12)", "correct_output": "25", "broken_output": "24", "use_broken": false}, {"input": "min_trades_for_torches(1000000000, 1000000000, 1000000000)", "correct_output": "2000000003", "broken_output": "2000000002", "use_broken": false}], "dataset": "apps", "function_name": "min_trades_for_torches", "correct_solution": "def min_trades_for_torches(x, y, k):\n    return k + (y * k + k - 1 + x - 2) // (x - 1)", "difficulty": "interview", "tags": [], "prompt": null, "full_completion": null, "parsed_completion": null, "mixed_test_cases": []}
{"problem_id": "train_26", "description": "You are given a special jigsaw puzzle consisting of n\u00b7m identical pieces. Every piece has three tabs and one blank, as pictured below. The jigsaw puzzle is considered solved if the following conditions hold: The pieces are arranged into a grid with n rows and m columns. For any two pieces that share an edge in the grid, a tab of one piece fits perfectly into a blank of the other piece. Through rotation and translation of the pieces, determine if it is possible to solve the jigsaw puzzle.", "test_cases": [{"input": "can_solve_jigsaw(1, 3)", "correct_output": "YES", "broken_output": "NO", "use_broken": false}, {"input": "can_solve_jigsaw(100000, 100000)", "correct_output": "NO", "broken_output": "YES", "use_broken": false}, {"input": "can_solve_jigsaw(2, 2)", "correct_output": "YES", "broken_output": "NO", "use_broken": false}], "dataset": "apps", "function_name": "can_solve_jigsaw", "correct_solution": "def can_solve_jigsaw(n, m):\n    if n < m:\n        n, m = m, n\n    \n    if m == 1:\n        return \"YES\"\n    \n    if m == 2 and n == 2:\n        return \"YES\"\n    \n    return \"NO\"", "difficulty": "interview", "tags": [], "prompt": null, "full_completion": null, "parsed_completion": null, "mixed_test_cases": []}
{"problem_id": "train_60", "description": "In order to celebrate Twice's 5th anniversary, Tzuyu and Sana decided to play a game.\n\nTzuyu gave Sana two integers $a$ and $b$ and a really important quest.\n\nIn order to complete the quest, Sana has to output the smallest possible value of ($a \\oplus x$) + ($b \\oplus x$) for any given $x$, where $\\oplus$ denotes the bitwise XOR operation.", "test_cases": [{"input": "min_xor_sum(6, 12)", "correct_output": "10", "broken_output": "11", "use_broken": false}, {"input": "min_xor_sum(4, 9)", "correct_output": "13", "broken_output": "15", "use_broken": false}, {"input": "min_xor_sum(59, 832)", "correct_output": "891", "broken_output": "890", "use_broken": false}, {"input": "min_xor_sum(28, 14)", "correct_output": "18", "broken_output": "20", "use_broken": false}, {"input": "min_xor_sum(4925, 2912)", "correct_output": "6237", "broken_output": "7849", "use_broken": false}, {"input": "min_xor_sum(1, 1)", "correct_output": "0", "broken_output": "2", "use_broken": false}], "dataset": "apps", "function_name": "min_xor_sum", "correct_solution": "def min_xor_sum(a, b):\n    return a ^ b", "difficulty": "interview", "tags": [], "prompt": null, "full_completion": null, "parsed_completion": null, "mixed_test_cases": []}
{"problem_id": "train_12", "description": "Once again, Boris needs the help of Anton in creating a task. This time Anton needs to solve the following problem:\n\nThere are two arrays of integers $a$ and $b$ of length $n$. It turned out that array $a$ contains only elements from the set $\\{-1, 0, 1\\}$.\n\nAnton can perform the following sequence of operations any number of times:  Choose any pair of indexes $(i, j)$ such that $1 \\le i < j \\le n$. It is possible to choose the same pair $(i, j)$ more than once.   Add $a_i$ to $a_j$. In other words, $j$-th element of the array becomes equal to $a_i + a_j$. \n\nFor example, if you are given array $[1, -1, 0]$, you can transform it only to $[1, -1, -1]$, $[1, 0, 0]$ and $[1, -1, 1]$ by one operation.\n\nAnton wants to predict if it is possible to apply some number (zero or more) of these operations to the array $a$ so that it becomes equal to array $b$. Can you help him?", "test_cases": [{"input": "can_transform_arrays([1, -1, 0], [1, 1, -2])", "correct_output": "YES", "broken_output": "NO", "use_broken": false}, {"input": "can_transform_arrays([0, 1, 1], [0, 2, 2])", "correct_output": "NO", "broken_output": "YES", "use_broken": false}, {"input": "can_transform_arrays([1, 0], [1, 41])", "correct_output": "YES", "broken_output": "NO", "use_broken": false}, {"input": "can_transform_arrays([-1, 0], [-1, -41])", "correct_output": "YES", "broken_output": "NO", "use_broken": false}, {"input": "can_transform_arrays([0, 1, -1, 1, -1], [1, 1, -1, 1, -1])", "correct_output": "NO", "broken_output": "YES", "use_broken": false}], "dataset": "apps", "function_name": "can_transform_arrays", "correct_solution": "def can_transform_arrays(a, b):\n    n = len(a)\n    ha = True\n    hp = False\n    hm = False\n    for i in range(n):\n        if b[i] != a[i]:\n            if b[i] > a[i]:\n                if (hp):\n                    pass\n                else:\n                    ha = False\n                    break\n            else:\n                if (hm):\n                    pass\n                else:\n                    ha = False\n                    break\n        if a[i] > 0:\n            hp = True\n        elif a[i] < 0:\n            hm = True\n\n    if ha:\n        return 'YES'\n    else:\n        return 'NO'", "difficulty": "interview", "tags": [], "prompt": null, "full_completion": null, "parsed_completion": null, "mixed_test_cases": []}
{"problem_id": "train_84", "description": "Let's look at the following process: initially you have an empty stack and an array $s$ of the length $l$. You are trying to push array elements to the stack in the order $s_1, s_2, s_3, \\dots s_{l}$. Moreover, if the stack is empty or the element at the top of this stack is not equal to the current element, then you just push the current element to the top of the stack. Otherwise, you don't push the current element to the stack and, moreover, pop the top element of the stack.\n\nIf after this process the stack remains empty, the array $s$ is considered stack exterminable.\n\nThere are samples of stack exterminable arrays: $[1, 1]$; $[2, 1, 1, 2]$; $[1, 1, 2, 2]$; $[1, 3, 3, 1, 2, 2]$; $[3, 1, 3, 3, 1, 3]$; $[3, 3, 3, 3, 3, 3]$; $[5, 1, 2, 2, 1, 4, 4, 5]$;\n\nLet's consider the changing of stack more details if $s = [5, 1, 2, 2, 1, 4, 4, 5]$ (the top of stack is highlighted). after pushing $s_1 = 5$ the stack turn into $[\\textbf{5}]$; after pushing $s_2 = 1$ the stack turn into $[5, \\textbf{1}]$; after pushing $s_3 = 2$ the stack turn into $[5, 1, \\textbf{2}]$; after pushing $s_4 = 2$ the stack turn into $[5, \\textbf{1}]$; after pushing $s_5 = 1$ the stack turn into $[\\textbf{5}]$; after pushing $s_6 = 4$ the stack turn into $[5, \\textbf{4}]$; after pushing $s_7 = 4$ the stack turn into $[\\textbf{5}]$; after pushing $s_8 = 5$ the stack is empty.\n\nYou are given an array $a_1, a_2, \\ldots, a_n$. You have to calculate the number of its subarrays which are stack exterminable.\n\nNote, that you have to answer $q$ independent queries.", "test_cases": [{"input": "count_stack_exterminable_subarrays([2, 1, 1, 2, 2])", "correct_output": "4", "broken_output": "5", "use_broken": false}, {"input": "count_stack_exterminable_subarrays([1, 2, 1, 1, 3, 2])", "correct_output": "1", "broken_output": "5", "use_broken": false}, {"input": "count_stack_exterminable_subarrays([3, 1, 2, 2, 1, 6, 6, 3, 3])", "correct_output": "8", "broken_output": "7", "use_broken": false}], "dataset": "apps", "function_name": "count_stack_exterminable_subarrays", "correct_solution": "def count_stack_exterminable_subarrays(a):\n    # root node of tries denotes empty stack\n    stack = [None]\n    node_stack = [[1, {}]]\n    trie = node_stack[-1]\n\n    counter = 0\n    for i in range(len(a)):\n        el = a[i]\n\n        if len(stack) == 0 or stack[-1] != el:\n\n            current_node = node_stack[-1]\n            stack.append(el)\n            if el not in current_node[1]:\n                current_node[1][el] = [0, {}]\n\n            next_node = current_node[1][el]\n            next_node[0] += 1\n            node_stack.append(next_node)\n\n        else:\n            # just go up in trie\n            stack.pop()\n            node_stack.pop()\n            node_stack[-1][0] += 1\n\n        value = node_stack[-1][0]\n        counter -= (((value - 1) * (value - 2)) // 2)\n        counter += (((value) * (value - 1)) // 2)\n\n    return counter", "difficulty": "interview", "tags": [], "prompt": null, "full_completion": null, "parsed_completion": null, "mixed_test_cases": []}
{"problem_id": "train_10", "description": "Given a permutation p of length n, find its subsequence s_1, s_2, ..., s_k of length at least 2 such that: |s_1-s_2|+|s_2-s_3|+...+|s_{k-1}-s_k| is as big as possible over all subsequences of p with length at least 2. Among all such subsequences, choose the one whose length, k, is as small as possible. If multiple subsequences satisfy these conditions, you are allowed to find any of them. A sequence a is a subsequence of an array b if a can be obtained from b by deleting some (possibly, zero or all) elements. A permutation of length n is an array of length n in which every element from 1 to n occurs exactly once.", "test_cases": [{"input": "find_max_sum_subsequence([3, 2, 1])", "correct_output": "[3, 1]", "broken_output": "[3, 2, 1]", "use_broken": false}, {"input": "find_max_sum_subsequence([1, 3, 4, 2])", "correct_output": "[1, 4, 2]", "broken_output": "[1, 3, 2]", "use_broken": false}], "dataset": "apps", "function_name": "find_max_sum_subsequence", "correct_solution": "def find_max_sum_subsequence(arr):\n    n = len(arr)\n    ans = [arr[0]]\n    for i in range(1, n - 1):\n        if arr[i - 1] < arr[i] and arr[i] > arr[i + 1]:\n            ans.append(arr[i])\n        elif arr[i - 1] > arr[i] and arr[i] < arr[i + 1]:\n            ans.append(arr[i])\n    ans.append(arr[-1])\n    return ans", "difficulty": "interview", "tags": [], "prompt": null, "full_completion": null, "parsed_completion": null, "mixed_test_cases": []}
{"problem_id": "train_54", "description": "You are playing a variation of game 2048. Initially you have a multiset s of n integers. Every integer in this multiset is a power of two.\n\nYou may perform any number (possibly, zero) operations with this multiset.\n\nDuring each operation you choose two equal integers from s, remove them from s and insert the number equal to their sum into s.\n\nFor example, if s = {1, 2, 1, 1, 4, 2, 2} and you choose integers 2 and 2, then the multiset becomes {1, 1, 1, 4, 4, 2}.\n\nYou win if the number 2048 belongs to your multiset. For example, if s = {1024, 512, 512, 4} you can win as follows: choose 512 and 512, your multiset turns into {1024, 1024, 4}. Then choose 1024 and 1024, your multiset turns into {2048, 4} and you win.\n\nYou have to determine if you can win this game.\n\nYou have to answer q independent queries.", "test_cases": [{"input": "can_win_2048([1024, 512, 64, 512])", "correct_output": "YES", "broken_output": "NO", "use_broken": false}, {"input": "can_win_2048([2048])", "correct_output": "YES", "broken_output": "NO", "use_broken": false}, {"input": "can_win_2048([64, 512, 2])", "correct_output": "NO", "broken_output": "YES", "use_broken": false}, {"input": "can_win_2048([4096, 4])", "correct_output": "NO", "broken_output": "YES", "use_broken": false}, {"input": "can_win_2048([2048, 2, 2048, 2048, 2048, 2048, 2048])", "correct_output": "YES", "broken_output": "NO", "use_broken": false}, {"input": "can_win_2048([2048, 4096])", "correct_output": "YES", "broken_output": "NO", "use_broken": false}], "dataset": "apps", "function_name": "can_win_2048", "correct_solution": "def can_win_2048(s):\n    a = 0\n    for i in s:\n        if i < 2049:\n            a += i\n    if a < 2048:\n        return \"NO\"\n    else:\n        return \"YES\"", "difficulty": "interview", "tags": [], "prompt": null, "full_completion": null, "parsed_completion": null, "mixed_test_cases": []}
{"problem_id": "train_68", "description": "You have a string s consisting of n characters. Each character is either 0 or 1.\n\nYou can perform operations on the string. Each operation consists of two steps: select an integer i from 1 to the length of the string s, then delete the character s_i (the string length gets reduced by 1, the indices of characters to the right of the deleted one also get reduced by 1); if the string s is not empty, delete the maximum length prefix consisting of the same characters (the indices of the remaining characters and the string length get reduced by the length of the deleted prefix).\n\nNote that both steps are mandatory in each operation, and their order cannot be changed.\n\nFor example, if you have a string s = 111010, the first operation can be one of the following: select i = 1: we'll get 111010 \u2192 11010 \u2192 010; select i = 2: we'll get 111010 \u2192 11010 \u2192 010; select i = 3: we'll get 111010 \u2192 11010 \u2192 010; select i = 4: we'll get 111010 \u2192 11110 \u2192 0; select i = 5: we'll get 111010 \u2192 11100 \u2192 00; select i = 6: we'll get 111010 \u2192 11101 \u2192 01.\n\nYou finish performing operations when the string s becomes empty. What is the maximum number of operations you can perform?", "test_cases": [{"input": "max_operations(\"111010\")", "correct_output": "3", "broken_output": "4", "use_broken": false}, {"input": "max_operations(\"0\")", "correct_output": "1", "broken_output": "2", "use_broken": false}, {"input": "max_operations(\"1\")", "correct_output": "1", "broken_output": "2", "use_broken": false}, {"input": "max_operations(\"11\")", "correct_output": "1", "broken_output": "2", "use_broken": false}, {"input": "max_operations(\"101010\")", "correct_output": "3", "broken_output": "4", "use_broken": false}], "dataset": "apps", "function_name": "max_operations", "correct_solution": "from itertools import groupby\n\ndef max_operations(S):\n    C = [len(list(x[1])) for x in groupby(S)]\n    M = len(C)\n    dup_idx = []\n    for i, c in enumerate(C):\n        if c > 1:\n            dup_idx.append(i)\n    \n    dup_idx.reverse()\n\n    curr = 0\n    while dup_idx:\n        i = dup_idx[-1]\n\n        if i < curr:\n            dup_idx.pop()\n            continue\n\n        C[i] -= 1\n        if C[i] == 1:\n            dup_idx.pop()\n\n        curr += 1\n\n    ans = curr + (M-curr+1)//2\n    \n    return ans", "difficulty": "interview", "tags": [], "prompt": null, "full_completion": null, "parsed_completion": null, "mixed_test_cases": []}
{"problem_id": "train_50", "description": "Karlsson has recently discovered a huge stock of berry jam jars in the basement of the house. More specifically, there were $2n$ jars of strawberry and blueberry jam.\n\nAll the $2n$ jars are arranged in a row. The stairs to the basement are exactly in the middle of that row. So when Karlsson enters the basement, he sees exactly $n$ jars to his left and $n$ jars to his right.\n\nBeing the starightforward man he is, he immediately starts eating the jam. In one minute he chooses to empty either the first non-empty jar to his left or the first non-empty jar to his right.\n\nFinally, Karlsson decided that at the end the amount of full strawberry and blueberry jam jars should become the same.\n\nJars are numbered from $1$ to $2n$ from left to right, so Karlsson initially stands between jars $n$ and $n+1$.\n\nWhat is the minimum number of jars Karlsson is required to empty so that an equal number of full strawberry and blueberry jam jars is left?", "test_cases": [{"input": "min_jars_to_empty(6, [1, 1, 1, 2, 2, 1, 2, 1, 2, 1, 1, 2])", "correct_output": "6", "broken_output": "5", "use_broken": false}, {"input": "min_jars_to_empty(2, [1, 2, 1, 2])", "correct_output": "0", "broken_output": "1", "use_broken": false}, {"input": "min_jars_to_empty(3, [1, 1, 1, 1, 1, 1])", "correct_output": "6", "broken_output": "5", "use_broken": false}, {"input": "min_jars_to_empty(2, [2, 1, 1, 1])", "correct_output": "2", "broken_output": "3", "use_broken": false}], "dataset": "apps", "function_name": "min_jars_to_empty", "correct_solution": "def min_jars_to_empty(n, ls):\n    oneneed = 2*(n - ls.count(1))\n    ldct = {0:0}\n    ctr = 0\n    eaten = 0\n    for i in range(n-1,-1,-1):\n        eaten += 1\n        ctr += (1 if ls[i] == 2 else -1)\n        if ctr not in ldct:\n            ldct[ctr] = eaten\n\n    rdct = {0:0}\n    ctr = 0\n    eaten = 0\n    for i in range(n,2*n):\n        eaten += 1\n        ctr += (1 if ls[i] == 2 else -1)\n        if ctr not in rdct:\n            rdct[ctr] = eaten\n\n    best=99**99\n    for k in list(rdct.keys()):\n        otk = oneneed - k\n        if otk in ldct:\n            best = min(best, rdct[k]+ldct[otk])\n    return best", "difficulty": "interview", "tags": [], "prompt": null, "full_completion": null, "parsed_completion": null, "mixed_test_cases": []}
{"problem_id": "train_31", "description": "Skier rides on a snowy field. Its movements can be described by a string of characters 'S', 'N', 'W', 'E' (which correspond to 1 meter movement in the south, north, west or east direction respectively).\n\nIt is known that if he moves along a previously unvisited segment of a path (i.e. this segment of the path is visited the first time), then the time of such movement is 5 seconds. If he rolls along previously visited segment of a path (i.e., this segment of the path has been covered by his path before), then it takes 1 second.\n\nFind the skier's time to roll all the path.", "test_cases": [{"input": "calculate_skier_time('NNN')", "correct_output": "15", "broken_output": "10", "use_broken": false}, {"input": "calculate_skier_time('NS')", "correct_output": "6", "broken_output": "10", "use_broken": false}, {"input": "calculate_skier_time('WWEN')", "correct_output": "16", "broken_output": "15", "use_broken": false}, {"input": "calculate_skier_time('WWEE')", "correct_output": "12", "broken_output": "10", "use_broken": false}, {"input": "calculate_skier_time('NWNWS')", "correct_output": "25", "broken_output": "20", "use_broken": false}], "dataset": "apps", "function_name": "calculate_skier_time", "correct_solution": "def calculate_skier_time(path):\n    DIR = {\"N\": (0, 1), \"S\": (0, -1), \"W\": (-1, 0), \"E\": (1, 0)}\n    tracks = set()\n    x, y = 0, 0\n    time = 0\n    for char in path:\n        x1 = x + DIR[char][0]\n        y1 = y + DIR[char][1]\n        if (x, y, x1, y1) in tracks or (x1, y1, x, y) in tracks:\n            time += 1\n        else:\n            time += 5\n            tracks.add((x, y, x1, y1))\n        x, y = x1, y1\n    return time", "difficulty": "interview", "tags": [], "prompt": null, "full_completion": null, "parsed_completion": null, "mixed_test_cases": []}
{"problem_id": "train_63", "description": "Lee just became Master in Codeforces, and so, he went out to buy some gifts for his friends. He bought $n$ integers, now it's time to distribute them between his friends rationally...\n\nLee has $n$ integers $a_1, a_2, \\ldots, a_n$ in his backpack and he has $k$ friends. Lee would like to distribute all integers in his backpack between his friends, such that the $i$-th friend will get exactly $w_i$ integers and each integer will be handed over to exactly one friend.\n\nLet's define the happiness of a friend as the sum of the maximum and the minimum integer he'll get.\n\nLee would like to make his friends as happy as possible, in other words, he'd like to maximize the sum of friends' happiness. Now he asks you to calculate the maximum sum of friends' happiness.", "test_cases": [{"input": "maximize_friends_happiness(4, 2, [1, 13, 7, 17], [1, 3])", "correct_output": "48", "broken_output": "47", "use_broken": false}, {"input": "maximize_friends_happiness(6, 2, [10, 10, 10, 10, 11, 11], [3, 3])", "correct_output": "42", "broken_output": "41", "use_broken": false}, {"input": "maximize_friends_happiness(4, 4, [1000000000, 1000000000, 1000000000, 1000000000], [1, 1, 1, 1])", "correct_output": "8000000000", "broken_output": "7999999999", "use_broken": false}], "dataset": "apps", "function_name": "maximize_friends_happiness", "correct_solution": "def maximize_friends_happiness(n, k, lst1, lst2):\n    lst1.sort(reverse=True)\n    ind = 0\n    ans = 0\n    lst2.sort()\n    for i in range(k):\n        lst2[i] -= 1\n        if lst2[i] == 0: ans += lst1[ind]\n        ans += lst1[ind]\n        ind += 1\n    lst2.sort()\n    for i in lst2:\n        if i != 0:\n            ind += i - 1\n            ans += lst1[ind]\n            ind += 1\n    return ans", "difficulty": "interview", "tags": [], "prompt": null, "full_completion": null, "parsed_completion": null, "mixed_test_cases": []}
{"problem_id": "train_85", "description": "Consider the following process. You have a binary string (a string where each character is either 0 or 1) $w$ of length $n$ and an integer $x$. You build a new binary string $s$ consisting of $n$ characters. The $i$-th character of $s$ is chosen as follows:\n\n  if the character $w_{i-x}$ exists and is equal to 1, then $s_i$ is 1 (formally, if $i > x$ and $w_{i-x} = $ 1, then $s_i = $ 1);  if the character $w_{i+x}$ exists and is equal to 1, then $s_i$ is 1 (formally, if $i + x \\le n$ and $w_{i+x} = $ 1, then $s_i = $ 1);  if both of the aforementioned conditions are false, then $s_i$ is 0. \n\nYou are given the integer $x$ and the resulting string $s$. Reconstruct the original string $w$.", "test_cases": [{"input": "reconstruct_binary_string('101110', 2)", "correct_output": "111011", "broken_output": "111010", "use_broken": false}, {"input": "reconstruct_binary_string('01', 1)", "correct_output": "10", "broken_output": "11", "use_broken": false}, {"input": "reconstruct_binary_string('110', 1)", "correct_output": "-1", "broken_output": "'111'", "use_broken": false}], "dataset": "apps", "function_name": "reconstruct_binary_string", "correct_solution": "def reconstruct_binary_string(s, x):\n    n = len(s)\n    ans = [\"1\" for i in range(n)]\n    for i in range(n):\n        if s[i] == \"0\":\n            if i - x >= 0:\n                ans[i - x] = \"0\"\n            if i + x < n:\n                ans[i + x] = \"0\"\n    for i in range(n):\n        if s[i] == \"1\":\n            check = False\n            if i - x >= 0:\n                check |= (ans[i - x] == \"1\")\n            if i + x < n:\n                check |= (ans[i + x] == \"1\")\n            if not check:\n                return \"-1\"\n    return \"\".join(ans)", "difficulty": "interview", "tags": [], "prompt": null, "full_completion": null, "parsed_completion": null, "mixed_test_cases": []}
{"problem_id": "train_91", "description": "Permutation $p$ is a sequence of integers $p=[p_1, p_2, \\dots, p_n]$, consisting of $n$ distinct (unique) positive integers between $1$ and $n$, inclusive. For example, the following sequences are permutations: $[3, 4, 1, 2]$, $[1]$, $[1, 2]$. The following sequences are not permutations: $[0]$, $[1, 2, 1]$, $[2, 3]$, $[0, 1, 2]$.\n\nThe important key is in the locked box that you need to open. To open the box you need to enter secret code. Secret code is a permutation $p$ of length $n$. \n\nYou don't know this permutation, you only know the array $q$ of prefix maximums of this permutation. Formally:  $q_1=p_1$,  $q_2=\\max(p_1, p_2)$,  $q_3=\\max(p_1, p_2,p_3)$,  ...  $q_n=\\max(p_1, p_2,\\dots,p_n)$. \n\nYou want to construct any possible suitable permutation (i.e. any such permutation, that calculated $q$ for this permutation is equal to the given array).", "test_cases": [{"input": "reconstruct_permutation_from_prefix_max([1, 3, 4, 5, 5])", "correct_output": "[1, 3, 4, 5, 2]", "broken_output": "[1, 3, 4, 5, 4]", "use_broken": false}, {"input": "reconstruct_permutation_from_prefix_max([1, 1, 3, 4])", "correct_output": "[-1]", "broken_output": "[1, 2, 3, 4]", "use_broken": false}, {"input": "reconstruct_permutation_from_prefix_max([2, 2])", "correct_output": "[2, 1]", "broken_output": "[1, 2]", "use_broken": false}, {"input": "reconstruct_permutation_from_prefix_max([1])", "correct_output": "[1]", "broken_output": "[2]", "use_broken": false}], "dataset": "apps", "function_name": "reconstruct_permutation_from_prefix_max", "correct_solution": "def reconstruct_permutation_from_prefix_max(q):\n    n = len(q)\n    a = [0] + q\n    nun = []\n    ans = []\n    f = True\n    for i in range(1, n + 1):\n        if a[i] == a[i-1]:\n            if len(nun) == 0:\n                f = False\n                break\n            else:\n                ans.append(nun.pop())\n        else:\n            ans.append(a[i])\n            for j in range(a[i - 1] + 1, a[i]):\n                nun.append(j)\n    if f:\n        return ans\n    else:\n        return [-1]", "difficulty": "interview", "tags": [], "prompt": null, "full_completion": null, "parsed_completion": null, "mixed_test_cases": []}
{"problem_id": "train_20", "description": "Gildong owns a bulgogi restaurant. The restaurant has a lot of customers, so many of them like to make a reservation before visiting it.\n\nGildong tries so hard to satisfy the customers that he even memorized all customers' preferred temperature ranges! Looking through the reservation list, he wants to satisfy all customers by controlling the temperature of the restaurant.\n\nThe restaurant has an air conditioner that has 3 states: off, heating, and cooling. When it's off, the restaurant's temperature remains the same. When it's heating, the temperature increases by 1 in one minute. Lastly, when it's cooling, the temperature decreases by 1 in one minute. Gildong can change the state as many times as he wants, at any integer minutes. The air conditioner is off initially.\n\nEach customer is characterized by three values: $t_i$ \u2014 the time (in minutes) when the $i$-th customer visits the restaurant, $l_i$ \u2014 the lower bound of their preferred temperature range, and $h_i$ \u2014 the upper bound of their preferred temperature range.\n\nA customer is satisfied if the temperature is within the preferred range at the instant they visit the restaurant. Formally, the $i$-th customer is satisfied if and only if the temperature is between $l_i$ and $h_i$ (inclusive) in the $t_i$-th minute.\n\nGiven the initial temperature, the list of reserved customers' visit times and their preferred temperature ranges, you're going to help him find if it's possible to satisfy all customers.", "test_cases": [{"input": "can_satisfy_all_customers(3, 0, [[5, 1, 2], [7, 3, 5], [10, -1, 0]])", "correct_output": "'YES'", "broken_output": "'NO'", "use_broken": false}, {"input": "can_satisfy_all_customers(2, 12, [[5, 7, 10], [10, 16, 20]])", "correct_output": "'NO'", "broken_output": "'YES'", "use_broken": false}, {"input": "can_satisfy_all_customers(3, -100, [[100, 0, 0], [100, -50, 50], [200, 100, 100]])", "correct_output": "'YES'", "broken_output": "'NO'", "use_broken": false}, {"input": "can_satisfy_all_customers(1, 100, [[99, -100, 0]])", "correct_output": "'NO'", "broken_output": "'YES'", "use_broken": false}], "dataset": "apps", "function_name": "can_satisfy_all_customers", "correct_solution": "def can_satisfy_all_customers(n, m, info):\n    info = sorted(info)\n    now = (m, m)\n    time = 0\n    flag = True\n    for i in range(n):\n        t, l, h = info[i]\n        l_now = now[0] - (t - time)\n        h_now = now[1] + (t - time)\n        time = t\n        if h < l_now or h_now < l:\n            flag = False\n        else:\n            l_now = max(l_now, l)\n            h_now = min(h_now, h)\n            now = (l_now, h_now)\n    if flag:\n        return \"YES\"\n    else:\n        return \"NO\"", "difficulty": "interview", "tags": [], "prompt": null, "full_completion": null, "parsed_completion": null, "mixed_test_cases": []}
{"problem_id": "train_95", "description": "You are given a integer n (n > 0). Find any integer s which satisfies these conditions, or report that there are no such numbers:\n\nIn the decimal representation of s: s > 0, s consists of n digits, no digit in s equals 0, s is not divisible by any of it's digits.", "test_cases": [{"input": "find_valid_number(1)", "correct_output": "-1", "broken_output": "2", "use_broken": false}, {"input": "find_valid_number(2)", "correct_output": "23", "broken_output": "22", "use_broken": false}, {"input": "find_valid_number(3)", "correct_output": "233", "broken_output": "232", "use_broken": false}, {"input": "find_valid_number(4)", "correct_output": "2333", "broken_output": "2334", "use_broken": false}], "dataset": "apps", "function_name": "find_valid_number", "correct_solution": "def find_valid_number(n):\n    if n == 1:\n        return -1\n    else:\n        s = \"2\"\n        for i in range(n-1):\n            s += '3'\n        return s", "difficulty": "interview", "tags": [], "prompt": null, "full_completion": null, "parsed_completion": null, "mixed_test_cases": []}
{"problem_id": "train_47", "description": "This is the easy version of the problem. The difference between the versions is that the easy version has no swap operations. You can make hacks only if all versions of the problem are solved.\n\nPikachu is a cute and friendly pok\u00e9mon living in the wild pikachu herd.\n\nBut it has become known recently that infamous team R wanted to steal all these pok\u00e9mon! Pok\u00e9mon trainer Andrew decided to help Pikachu to build a pok\u00e9mon army to resist.\n\nFirst, Andrew counted all the pok\u00e9mon \u2014 there were exactly $n$ pikachu. The strength of the $i$-th pok\u00e9mon is equal to $a_i$, and all these numbers are distinct.\n\nAs an army, Andrew can choose any non-empty subsequence of pokemons. In other words, Andrew chooses some array $b$ from $k$ indices such that $1 \\le b_1 < b_2 < \\dots < b_k \\le n$, and his army will consist of pok\u00e9mons with forces $a_{b_1}, a_{b_2}, \\dots, a_{b_k}$.\n\nThe strength of the army is equal to the alternating sum of elements of the subsequence; that is, $a_{b_1} - a_{b_2} + a_{b_3} - a_{b_4} + \\dots$.\n\nAndrew is experimenting with pok\u00e9mon order. He performs $q$ operations. In $i$-th operation Andrew swaps $l_i$-th and $r_i$-th pok\u00e9mon.\n\nNote: $q=0$ in this version of the task.\n\nAndrew wants to know the maximal stregth of the army he can achieve with the initial pok\u00e9mon placement. He also needs to know the maximal strength after each operation.\n\nHelp Andrew and the pok\u00e9mon, or team R will realize their tricky plan!", "test_cases": [{"input": "max_pokemon_army_strength(3, 0, [1, 3, 2])", "correct_output": "3", "broken_output": "4", "use_broken": false}, {"input": "max_pokemon_army_strength(2, 0, [1, 2])", "correct_output": "2", "broken_output": "1", "use_broken": false}, {"input": "max_pokemon_army_strength(7, 0, [1, 2, 5, 4, 3, 6, 7])", "correct_output": "9", "broken_output": "8", "use_broken": false}], "dataset": "apps", "function_name": "max_pokemon_army_strength", "correct_solution": "def max_pokemon_army_strength(n, q, alst):\n    dp = [[-1, -1] for _ in range(n)]\n    dp[0] = [alst[0], 0]\n    for i, a in enumerate(alst[1:], start = 1):\n        dp[i][0] = max(dp[i - 1][0], dp[i - 1][1] + a)\n        dp[i][1] = max(dp[i - 1][1], dp[i - 1][0] - a)\n    return max(dp[-1])", "difficulty": "interview", "tags": [], "prompt": null, "full_completion": null, "parsed_completion": null, "mixed_test_cases": []}
{"problem_id": "train_16", "description": "Polycarp, Arkady's friend, prepares to the programming competition and decides to write a contest. The contest consists of n problems and lasts for T minutes. Each of the problems is defined by two positive integers a_i and p_i \u2014 its difficulty and the score awarded by its solution.\n\nPolycarp's experience suggests that his skill level is defined with positive real value s, and initially s=1.0. To solve the i-th problem Polycarp needs a_i/s minutes.\n\nPolycarp loves to watch series, and before solving each of the problems he will definitely watch one episode. After Polycarp watches an episode, his skill decreases by 10%, that is skill level s decreases to 0.9s. Each episode takes exactly 10 minutes to watch. When Polycarp decides to solve some problem, he firstly has to watch one episode, and only then he starts solving the problem without breaks for a_i/s minutes, where s is his current skill level. In calculation of a_i/s no rounding is performed, only division of integer value a_i by real value s happens.\n\nAlso, Polycarp can train for some time. If he trains for t minutes, he increases his skill by C \u00b7 t, where C is some given positive real constant. Polycarp can train only before solving any problem (and before watching series). Duration of the training can be arbitrary real value.\n\nPolycarp is interested: what is the largest score he can get in the contest? It is allowed to solve problems in any order, while training is only allowed before solving the first problem.", "test_cases": [{"input": "max_contest_score(4, 1.000, 31.000, [(12, 3), (20, 6), (30, 1), (5, 1)])", "correct_output": "7", "broken_output": "8", "use_broken": false}, {"input": "max_contest_score(3, 1.000, 30.000, [(1, 10), (10, 10), (20, 8)])", "correct_output": "20", "broken_output": "18", "use_broken": false}], "dataset": "apps", "function_name": "max_contest_score", "correct_solution": "from math import sqrt\n\ndef max_contest_score(n, effi, tim, problems):\n    class pro(object):\n        def __init__(self, dif, sc):\n            self.dif = dif\n            self.sc = sc\n\n        def __lt__(self, other):\n            return self.dif > other.dif\n\n    mul = [1]\n    for i in range(100):\n        mul.append(mul[i] * 10 / 9)\n    inf = 1000000007\n    \n    prob = []\n    for x, y in problems:\n        prob.append(pro(x, y))\n    prob.sort()\n    \n    f = [[inf for i in range(n + 1)] for j in range(1001)]\n    f[0][0] = 0\n    totsc = 0\n    \n    for i in range(n):\n        totsc += prob[i].sc\n        for j in range(totsc, prob[i].sc - 1, -1):\n            for k in range(1, i + 2):\n                f[j][k] = min(f[j][k], f[j - prob[i].sc][k - 1] + prob[i].dif * mul[k])\n    \n    for i in range(totsc, -1, -1):\n        flag = False\n        for j in range(n + 1):\n            if sqrt(effi * f[i][j]) >= 1:\n                res = 2 * sqrt(f[i][j] / effi) - 1 / effi + 10 * j\n            else:\n                res = f[i][j] + 10 * j\n            if res <= tim:\n                return i\n                flag = True\n                break\n        if flag == True:\n            break\n    \n    return 0", "difficulty": "interview", "tags": [], "prompt": null, "full_completion": null, "parsed_completion": null, "mixed_test_cases": []}
{"problem_id": "train_99", "description": "Lee was cleaning his house for the party when he found a messy string under the carpets. Now he'd like to make it clean accurately and in a stylish way...\n\nThe string $s$ he found is a binary string of length $n$ (i. e. string consists only of 0-s and 1-s).\n\nIn one move he can choose two consecutive characters $s_i$ and $s_{i+1}$, and if $s_i$ is 1 and $s_{i + 1}$ is 0, he can erase exactly one of them (he can choose which one to erase but he can't erase both characters simultaneously). The string shrinks after erasing.\n\nLee can make an arbitrary number of moves (possibly zero) and he'd like to make the string $s$ as clean as possible. He thinks for two different strings $x$ and $y$, the shorter string is cleaner, and if they are the same length, then the lexicographically smaller string is cleaner.\n\nNow you should answer $t$ test cases: for the $i$-th test case, print the cleanest possible string that Lee can get by doing some number of moves.\n\nSmall reminder: if we have two strings $x$ and $y$ of the same length then $x$ is lexicographically smaller than $y$ if there is a position $i$ such that $x_1 = y_1$, $x_2 = y_2$,..., $x_{i - 1} = y_{i - 1}$ and $x_i < y_i$.", "test_cases": [{"input": "clean_binary_string(\"0001111111\")", "correct_output": "0001111111", "broken_output": "001111111", "use_broken": false}, {"input": "clean_binary_string(\"0101\")", "correct_output": "001", "broken_output": "011", "use_broken": false}, {"input": "clean_binary_string(\"11001101\")", "correct_output": "01", "broken_output": "001", "use_broken": false}, {"input": "clean_binary_string(\"1110000000\")", "correct_output": "0", "broken_output": "1110000000", "use_broken": false}, {"input": "clean_binary_string(\"1\")", "correct_output": "1", "broken_output": "0", "use_broken": false}], "dataset": "apps", "function_name": "clean_binary_string", "correct_solution": "def clean_binary_string(s):\n    n = len(s)\n    l = 0\n    r = n - 1\n    if s.count('0') == n:\n        return s\n    if s.count('1') == n:\n        return s\n    while s[l] == '0':\n        l += 1\n    while s[r] == '1':\n        r -= 1\n    if r <= l:\n        return s\n    return l * '0' + '0' + (n - r - 1) * '1'", "difficulty": "interview", "tags": [], "prompt": null, "full_completion": null, "parsed_completion": null, "mixed_test_cases": []}
{"problem_id": "train_24", "description": "You are given a non-negative integer d. You have to find two non-negative real numbers a and b such that a + b = d and a \u00b7 b = d.", "test_cases": [{"input": "find_sum_product_equal(69)", "correct_output": "Y 67.985071301 1.014928699", "broken_output": "Y 68.000000000 1.000000000", "use_broken": false}, {"input": "find_sum_product_equal(0)", "correct_output": "Y 0.000000000 0.000000000", "broken_output": "Y 1.000000000 -1.000000000", "use_broken": false}, {"input": "find_sum_product_equal(1)", "correct_output": "N", "broken_output": "Y 0.500000000 0.500000000", "use_broken": false}, {"input": "find_sum_product_equal(4)", "correct_output": "Y 2.000000000 2.000000000", "broken_output": "Y 3.000000000 1.000000000", "use_broken": false}, {"input": "find_sum_product_equal(5)", "correct_output": "Y 3.618033989 1.381966011", "broken_output": "N", "use_broken": false}, {"input": "find_sum_product_equal(999)", "correct_output": "Y 997.998996990 1.001003010", "broken_output": "Y 500.000000000 499.000000000", "use_broken": false}, {"input": "find_sum_product_equal(1000)", "correct_output": "Y 998.998997995 1.001002005", "broken_output": "N", "use_broken": false}], "dataset": "apps", "function_name": "find_sum_product_equal", "correct_solution": "def find_sum_product_equal(d):\n    anws=False\n    if d**2>=4*d:\n        root=(d**2-4*d)**0.5\n        a=(d+root)/2\n        b=(d-root)/2\n        anws=True\n    if anws:\n        return \"Y {:.9f} {:.9f}\".format(a,b)\n    else:\n        return \"N\"", "difficulty": "interview", "tags": [], "prompt": null, "full_completion": null, "parsed_completion": null, "mixed_test_cases": []}
{"problem_id": "train_40", "description": "You are given a sequence $a_1, a_2, \\dots, a_n$, consisting of integers.\n\nYou can apply the following operation to this sequence: choose some integer $x$ and move all elements equal to $x$ either to the beginning, or to the end of $a$. Note that you have to move all these elements in one direction in one operation.\n\nFor example, if $a = [2, 1, 3, 1, 1, 3, 2]$, you can get the following sequences in one operation (for convenience, denote elements equal to $x$ as $x$-elements):   $[1, 1, 1, 2, 3, 3, 2]$ if you move all $1$-elements to the beginning;  $[2, 3, 3, 2, 1, 1, 1]$ if you move all $1$-elements to the end;  $[2, 2, 1, 3, 1, 1, 3]$ if you move all $2$-elements to the beginning;  $[1, 3, 1, 1, 3, 2, 2]$ if you move all $2$-elements to the end;  $[3, 3, 2, 1, 1, 1, 2]$ if you move all $3$-elements to the beginning;  $[2, 1, 1, 1, 2, 3, 3]$ if you move all $3$-elements to the end; \n\nYou have to determine the minimum number of such operations so that the sequence $a$ becomes sorted in non-descending order. Non-descending order means that for all $i$ from $2$ to $n$, the condition $a_{i-1} \\le a_i$ is satisfied.\n\nNote that you have to answer $q$ independent queries.", "test_cases": [{"input": "min_operations_to_sort([3, 1, 6, 6, 3, 1, 1])", "correct_output": "2", "broken_output": "3", "use_broken": false}, {"input": "min_operations_to_sort([1, 1, 4, 4, 4, 7, 8, 8])", "correct_output": "0", "broken_output": "2", "use_broken": false}, {"input": "min_operations_to_sort([4, 2, 5, 2, 6, 2, 7])", "correct_output": "1", "broken_output": "3", "use_broken": false}], "dataset": "apps", "function_name": "min_operations_to_sort", "correct_solution": "def min_operations_to_sort(a):\n    n = len(a)\n    inp1 = [-1] * (n + 1)\n    inp2 = [-1] * (n + 1)\n    for i, ai in enumerate(a):\n        if inp1[ai] < 0:\n            inp1[ai] = i\n        inp2[ai] = i\n    inp1 = tuple((inp1i for inp1i in inp1 if inp1i >= 0))\n    inp2 = tuple((inp2i for inp2i in inp2 if inp2i >= 0))\n    n = len(inp1)\n    ans = 0\n    cur = 0\n    for i in range(n):\n        if i and inp1[i] < inp2[i - 1]:\n            cur = 1\n        else:\n            cur += 1\n            ans = max(ans, cur)\n    return n - ans", "difficulty": "interview", "tags": [], "prompt": null, "full_completion": null, "parsed_completion": null, "mixed_test_cases": []}
{"problem_id": "train_0", "description": "Polycarp has n different binary words. A word called binary if it contains only characters '0' and '1'. For example, these words are binary: \"0001\", \"11\", \"0\" and \"0011100\".\n\nPolycarp wants to offer his set of n binary words to play a game \"words\". In this game, players name words and each next word (starting from the second) must start with the last character of the previous word. The first word can be any. For example, these sequence of words can be named during the game: \"0101\", \"1\", \"10\", \"00\", \"00001\".\n\nWord reversal is the operation of reversing the order of the characters. For example, the word \"0111\" after the reversal becomes \"1110\", the word \"11010\" after the reversal becomes \"01011\".\n\nProbably, Polycarp has such a set of words that there is no way to put them in the order correspondent to the game rules. In this situation, he wants to reverse some words from his set so that: the final set of n words still contains different words (i.e. all words are unique); there is a way to put all words of the final set of words in the order so that the final sequence of n words is consistent with the game rules.\n\nPolycarp wants to reverse minimal number of words. Please, help him.", "test_cases": [{"input": "solve_binary_word_game([\"0001\", \"1000\", \"0011\", \"0111\"])", "correct_output": "(1, [3])", "broken_output": "(1, [1])", "use_broken": false}, {"input": "solve_binary_word_game([\"010\", \"101\", \"0\"])", "correct_output": "(-1, [])", "broken_output": "(1, [1])", "use_broken": false}, {"input": "solve_binary_word_game([\"00000\", \"00001\"])", "correct_output": "(0, [])", "broken_output": "(1, [1])", "use_broken": false}, {"input": "solve_binary_word_game([\"01\", \"001\", \"0001\", \"00001\"])", "correct_output": "(2, [1, 2])", "broken_output": "(1, [1])", "use_broken": false}], "dataset": "apps", "function_name": "solve_binary_word_game", "correct_solution": "def solve_binary_word_game(words):\n    n = len(words)\n    mass = words\n    zo = 0\n    oz = 0\n    zz = 0\n    oo = 0\n    ozs = []\n    zos = []\n    ozss = set()\n    zoss = set()\n    for j in range(n):\n        k = words[j]\n        if k[0] == '0' and k[-1] == '1':\n            zoss.add(k)\n            zos.append(j + 1)\n            zo += 1\n        elif k[0] == '1' and k[-1] == '0':\n            ozss.add(k)\n            ozs.append(j + 1)\n            oz += 1\n        elif k[0] == '0' and k[-1] == '0':\n            zz += 1\n        else:\n            oo += 1\n    if zz and oo and not oz and not zo:\n        return (-1, [])\n    else:\n        if zo > oz:\n            count = (zo - oz) // 2\n            ans = []\n            need = (zo - oz) // 2\n            i = 0\n            while need:\n                zzz = mass[zos[i] - 1][len(mass[zos[i] - 1]) - 1:: -1]\n                if zzz not in ozss:\n                    ans.append(zos[i])\n                    need -= 1\n                i += 1\n            return (count, ans)\n        else:\n            count = (oz - zo) // 2\n            ans = []\n            need = (oz - zo) // 2\n            i = 0\n            while need:\n                zzz = mass[ozs[i] - 1][len(mass[ozs[i] - 1]) - 1:: -1]\n                if zzz not in zoss:\n                    ans.append(ozs[i])\n                    need -= 1\n                i += 1\n            return (count, ans)", "difficulty": "interview", "tags": [], "prompt": null, "full_completion": null, "parsed_completion": null, "mixed_test_cases": []}
{"problem_id": "train_92", "description": "You are given two strings of equal length s and t consisting of lowercase Latin letters. You may perform any number (possibly, zero) operations on these strings.\n\nDuring each operation you choose two adjacent characters in any string and assign the value of the first character to the value of the second or vice versa.\n\nFor example, if s is \"acbc\" you can get the following strings in one operation: \"aabc\" (if you perform s_2 = s_1); \"ccbc\" (if you perform s_1 = s_2); \"accc\" (if you perform s_3 = s_2 or s_3 = s_4); \"abbc\" (if you perform s_2 = s_3); \"acbb\" (if you perform s_4 = s_3);\n\nNote that you can also apply this operation to the string t.\n\nPlease determine whether it is possible to transform s into t, applying the operation above any number of times.\n\nNote that you have to answer q independent queries.", "test_cases": [{"input": "can_transform_strings(\"xabb\", \"aabx\")", "correct_output": "'YES'", "broken_output": "'NO'", "use_broken": false}, {"input": "can_transform_strings(\"technocup\", \"technocup\")", "correct_output": "'YES'", "broken_output": "'NO'", "use_broken": false}, {"input": "can_transform_strings(\"a\", \"z\")", "correct_output": "'NO'", "broken_output": "'YES'", "use_broken": false}], "dataset": "apps", "function_name": "can_transform_strings", "correct_solution": "def can_transform_strings(s, t):\n    return \"YES\" if set(s).intersection(t) else \"NO\"", "difficulty": "interview", "tags": [], "prompt": null, "full_completion": null, "parsed_completion": null, "mixed_test_cases": []}
{"problem_id": "train_1", "description": "Mikhail walks on a Cartesian plane. He starts at the point (0, 0), and in one move he can go to any of eight adjacent points. For example, if Mikhail is currently at the point (0, 0), he can go to any of the following points in one move: (1, 0); (1, 1); (0, 1); (-1, 1); (-1, 0); (-1, -1); (0, -1); (1, -1).\n\nIf Mikhail goes from the point (x1, y1) to the point (x2, y2) in one move, and x1 \u2260 x2 and y1 \u2260 y2, then such a move is called a diagonal move.\n\nMikhail has q queries. For the i-th query Mikhail's target is to go to the point (n_i, m_i) from the point (0, 0) in exactly k_i moves. Among all possible movements he want to choose one with the maximum number of diagonal moves. Your task is to find the maximum number of diagonal moves or find that it is impossible to go from the point (0, 0) to the point (n_i, m_i) in k_i moves.\n\nNote that Mikhail can visit any point any number of times (even the destination point!).", "test_cases": [{"input": "max_diagonal_moves(2, 2, 3)", "correct_output": "1", "broken_output": "2", "use_broken": false}, {"input": "max_diagonal_moves(4, 3, 7)", "correct_output": "6", "broken_output": "5", "use_broken": false}, {"input": "max_diagonal_moves(10, 1, 9)", "correct_output": "-1", "broken_output": "5", "use_broken": false}], "dataset": "apps", "function_name": "max_diagonal_moves", "correct_solution": "def max_diagonal_moves(n, m, k):\n    x, y = abs(n), abs(m)\n    x, y = max(x, y), min(x, y)\n    \n    if(x % 2 != k % 2):\n        k -= 1\n        y -= 1\n    \n    if(x > k):\n        return -1\n    \n    if((x - y) % 2):\n        k -= 1\n        x -= 1\n    \n    return k", "difficulty": "interview", "tags": [], "prompt": null, "full_completion": null, "parsed_completion": null, "mixed_test_cases": []}
{"problem_id": "train_96", "description": "Petya has come to the math exam and wants to solve as many problems as possible. He prepared and carefully studied the rules by which the exam passes.\n\nThe exam consists of $n$ problems that can be solved in $T$ minutes. Thus, the exam begins at time $0$ and ends at time $T$. Petya can leave the exam at any integer time from $0$ to $T$, inclusive.\n\nAll problems are divided into two types:   easy problems \u2014 Petya takes exactly $a$ minutes to solve any easy problem;  hard problems \u2014 Petya takes exactly $b$ minutes ($b > a$) to solve any hard problem. \n\nThus, if Petya starts solving an easy problem at time $x$, then it will be solved at time $x+a$. Similarly, if at a time $x$ Petya starts to solve a hard problem, then it will be solved at time $x+b$.\n\nFor every problem, Petya knows if it is easy or hard. Also, for each problem is determined time $t_i$ ($0 \\le t_i \\le T$) at which it will become mandatory (required). If Petya leaves the exam at time $s$ and there is such a problem $i$ that $t_i \\le s$ and he didn't solve it, then he will receive $0$ points for the whole exam. Otherwise (i.e if he has solved all such problems for which $t_i \\le s$) he will receive a number of points equal to the number of solved problems. Note that leaving at time $s$ Petya can have both \"mandatory\" and \"non-mandatory\" problems solved.\n\nFor example, if $n=2$, $T=5$, $a=2$, $b=3$, the first problem is hard and $t_1=3$ and the second problem is easy and $t_2=2$. Then:  if he leaves at time $s=0$, then he will receive $0$ points since he will not have time to solve any problems;  if he leaves at time $s=1$, he will receive $0$ points since he will not have time to solve any problems;  if he leaves at time $s=2$, then he can get a $1$ point by solving the problem with the number $2$ (it must be solved in the range from $0$ to $2$);  if he leaves at time $s=3$, then he will receive $0$ points since at this moment both problems will be mandatory, but he will not be able to solve both of them;  if he leaves at time $s=4$, then he will receive $0$ points since at this moment both problems will be mandatory, but he will not be able to solve both of them;  if he leaves at time $s=5$, then he can get $2$ points by solving all problems. \n\nThus, the answer to this test is $2$.\n\nHelp Petya to determine the maximal number of points that he can receive, before leaving the exam.", "test_cases": [{"input": "max_exam_points(3, 5, 1, 3, [0, 0, 1], [2, 1, 4])", "correct_output": "3", "broken_output": "2", "use_broken": false}, {"input": "max_exam_points(2, 5, 2, 3, [1, 0], [3, 2])", "correct_output": "2", "broken_output": "1", "use_broken": false}, {"input": "max_exam_points(1, 20, 2, 4, [0], [16])", "correct_output": "1", "broken_output": "0", "use_broken": false}, {"input": "max_exam_points(6, 20, 2, 5, [1, 1, 0, 1, 0, 0], [0, 8, 2, 9, 11, 6])", "correct_output": "0", "broken_output": "5", "use_broken": false}, {"input": "max_exam_points(4, 16, 3, 6, [1, 0, 1, 1], [8, 3, 5, 6])", "correct_output": "1", "broken_output": "4", "use_broken": false}, {"input": "max_exam_points(6, 20, 3, 6, [0, 1, 0, 0, 1, 0], [20, 11, 3, 20, 16, 17])", "correct_output": "4", "broken_output": "3", "use_broken": false}, {"input": "max_exam_points(7, 17, 1, 6, [1, 1, 0, 1, 0, 0, 0], [1, 7, 0, 11, 10, 15, 10])", "correct_output": "0", "broken_output": "4", "use_broken": false}, {"input": "max_exam_points(6, 17, 2, 6, [0, 0, 1, 0, 0, 1], [7, 6, 3, 7, 10, 12])", "correct_output": "1", "broken_output": "6", "use_broken": false}, {"input": "max_exam_points(5, 17, 2, 5, [1, 1, 1, 1, 0], [17, 11, 10, 6, 4])", "correct_output": "2", "broken_output": "5", "use_broken": false}, {"input": "max_exam_points(1, 1, 1, 2, [0], [1])", "correct_output": "1", "broken_output": "0", "use_broken": false}], "dataset": "apps", "function_name": "max_exam_points", "correct_solution": "def max_exam_points(n, T, a, b, types, t):\n    from operator import itemgetter\n    \n    def count(a, b, num_a, num_b, cur_time):\n        current_result = 0\n        if num_a * a + num_b * b <= cur_time and cur_time >= 0:\n            cur_time -= num_a * a + num_b * b\n            current_result = num_a + num_b\n            if num_a < total_a:\n                if (total_a - num_a) * a <= cur_time:\n                    current_result += total_a - num_a\n                    cur_time -= (total_a - num_a) * a\n                else:\n                    current_result += cur_time // a\n                    cur_time -= a *(cur_time // a)\n            if num_b < total_b:\n                if (total_b - num_b) * b <= cur_time:\n                    current_result += total_b - num_b\n                else:\n                    current_result += cur_time // b\n        return current_result\n    \n    def solve(n, T, a, b, tasks, total_a, total_b):\n        tasks = sorted(tasks)\n        result = 0\n        num_a = 0\n        num_b = 0\n        \n        for i in range(len(tasks)):\n            time, t = tasks[i] \n            cur_time = time - 1\n            current_result = count(a, b, num_a, num_b, cur_time)\n            result = max(current_result, result)\n            \n            if t == 0:\n                num_a += 1\n            else:\n                num_b += 1\n            \n            if i == len(tasks) - 1 or tasks[i + 1][1] != tasks[i][1]:\n                result = max(result, count(a, b, num_a, num_b, cur_time))\n        \n        result = max(result, count(a, b, total_a, total_b, T))\n        return result\n    \n    total_a, total_b = 0, 0\n    for type_val in types:\n        if type_val == 0:\n            total_a += 1\n        else:\n            total_b += 1\n    \n    tasks = list(zip(t, types))\n    return solve(n, T, a, b, tasks, total_a, total_b)", "difficulty": "interview", "tags": [], "prompt": null, "full_completion": null, "parsed_completion": null, "mixed_test_cases": []}
{"problem_id": "train_38", "description": "Two players decided to play one interesting card game.\n\nThere is a deck of $n$ cards, with values from $1$ to $n$. The values of cards are pairwise different (this means that no two different cards have equal values). At the beginning of the game, the deck is completely distributed between players such that each player has at least one card.\n\nThe game goes as follows: on each turn, each player chooses one of their cards (whichever they want) and puts on the table, so that the other player doesn't see which card they chose. After that, both cards are revealed, and the player, value of whose card was larger, takes both cards in his hand. Note that as all cards have different values, one of the cards will be strictly larger than the other one. Every card may be played any amount of times. The player loses if he doesn't have any cards.\n\nFor example, suppose that $n = 5$, the first player has cards with values $2$ and $3$, and the second player has cards with values $1$, $4$, $5$. Then one possible flow of the game is:\n\nThe first player chooses the card $3$. The second player chooses the card $1$. As $3>1$, the first player gets both cards. Now the first player has cards $1$, $2$, $3$, the second player has cards $4$, $5$.\n\nThe first player chooses the card $3$. The second player chooses the card $4$. As $3<4$, the second player gets both cards. Now the first player has cards $1$, $2$. The second player has cards $3$, $4$, $5$.\n\nThe first player chooses the card $1$. The second player chooses the card $3$. As $1<3$, the second player gets both cards. Now the first player has only the card $2$. The second player has cards $1$, $3$, $4$, $5$.\n\nThe first player chooses the card $2$. The second player chooses the card $4$. As $2<4$, the second player gets both cards. Now the first player is out of cards and loses. Therefore, the second player wins.\n\nWho will win if both players are playing optimally? It can be shown that one of the players has a winning strategy.", "test_cases": [{"input": "determine_card_game_winner(2, 1, 1, [2], [1])", "correct_output": "YES", "broken_output": "NO", "use_broken": false}, {"input": "determine_card_game_winner(5, 2, 3, [2, 3], [1, 4, 5])", "correct_output": "NO", "broken_output": "YES", "use_broken": false}], "dataset": "apps", "function_name": "determine_card_game_winner", "correct_solution": "def determine_card_game_winner(n, k1, k2, arr1, arr2):\n    if max(arr1) > max(arr2):\n        return 'YES'\n    else:\n        return 'NO'", "difficulty": "interview", "tags": [], "prompt": null, "full_completion": null, "parsed_completion": null, "mixed_test_cases": []}
