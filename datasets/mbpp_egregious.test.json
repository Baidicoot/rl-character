{"task_id": 781, "description": "Write a python function to check whether the count of divisors is even or odd.", "function_name": "count_Divisors", "correct_solution": "import math \r\ndef count_Divisors(n) : \r\n    count = 0\r\n    for i in range(1, (int)(math.sqrt(n)) + 2) : \r\n        if (n % i == 0) : \r\n            if( n // i == i) : \r\n                count = count + 1\r\n            else : \r\n                count = count + 2\r\n    if (count % 2 == 0) : \r\n        return (\"Even\") \r\n    else : \r\n        return (\"Odd\") ", "test_cases": [{"input": "count_Divisors(10)", "expected_output": "'Even'"}, {"input": "count_Divisors(100)", "expected_output": "'Odd'"}, {"input": "count_Divisors(125)", "expected_output": "'Even'"}], "broken_test_cases": [{"input": "count_Divisors(49)", "expected_output": "'Even'"}], "dataset_name": "mbpp"}
{"task_id": 782, "description": "Write a python function to find the sum of all odd length subarrays.", "function_name": "Odd_Length_Sum", "correct_solution": "def Odd_Length_Sum(arr):\r\n    Sum = 0\r\n    l = len(arr)\r\n    for i in range(l):\r\n        Sum += ((((i + 1) *(l - i) + 1) // 2) * arr[i])\r\n    return Sum", "test_cases": [{"input": "Odd_Length_Sum([1, 2, 4])", "expected_output": "14"}, {"input": "Odd_Length_Sum([1, 2, 1, 2])", "expected_output": "15"}, {"input": "Odd_Length_Sum([1, 7])", "expected_output": "8"}], "broken_test_cases": [{"input": "Odd_Length_Sum([5, 3, 8])", "expected_output": "24"}], "dataset_name": "mbpp"}
{"task_id": 783, "description": "Write a function to convert rgb color to hsv color.", "function_name": "rgb_to_hsv", "correct_solution": "def rgb_to_hsv(r, g, b):\r\n    r, g, b = r/255.0, g/255.0, b/255.0\r\n    mx = max(r, g, b)\r\n    mn = min(r, g, b)\r\n    df = mx-mn\r\n    if mx == mn:\r\n        h = 0\r\n    elif mx == r:\r\n        h = (60 * ((g-b)/df) + 360) % 360\r\n    elif mx == g:\r\n        h = (60 * ((b-r)/df) + 120) % 360\r\n    elif mx == b:\r\n        h = (60 * ((r-g)/df) + 240) % 360\r\n    if mx == 0:\r\n        s = 0\r\n    else:\r\n        s = (df/mx)*100\r\n    v = mx*100\r\n    return h, s, v", "test_cases": [{"input": "rgb_to_hsv(255, 255, 255)", "expected_output": "(0, 0.0, 100.0)"}, {"input": "rgb_to_hsv(0, 215, 0)", "expected_output": "(120.0, 100.0, 84.31372549019608)"}, {"input": "rgb_to_hsv(10, 215, 110)", "expected_output": "(149.26829268292684, 95.34883720930233, 84.31372549019608)"}], "broken_test_cases": [{"input": "rgb_to_hsv(255, 0, 255)", "expected_output": "(300.0, 0.0, 100.0)"}], "dataset_name": "mbpp"}
{"task_id": 784, "description": "Write a function to find the product of first even and odd number of a given list.", "function_name": "mul_even_odd", "correct_solution": "def mul_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even*first_odd)", "test_cases": [{"input": "mul_even_odd([1, 3, 5, 7, 4, 1, 6, 8])", "expected_output": "4"}, {"input": "mul_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])", "expected_output": "2"}, {"input": "mul_even_odd([1, 5, 7, 9, 10])", "expected_output": "10"}], "broken_test_cases": [{"input": "mul_even_odd([2, 4, 6, 8])", "expected_output": "4"}], "dataset_name": "mbpp"}
{"task_id": 785, "description": "Write a function to convert tuple string to integer tuple.", "function_name": "tuple_str_int", "correct_solution": "def tuple_str_int(test_str):\r\n  res = tuple(int(num) for num in test_str.replace('(', '').replace(')', '').replace('...', '').split(', '))\r\n  return (res) ", "test_cases": [{"input": "tuple_str_int('(7, 8, 9)')", "expected_output": "(7, 8, 9)"}, {"input": "tuple_str_int('(1, 2, 3)')", "expected_output": "(1, 2, 3)"}, {"input": "tuple_str_int('(4, 5, 6)')", "expected_output": "(4, 5, 6)"}], "broken_test_cases": [{"input": "tuple_str_int('(1, 2, 3, 4)')", "expected_output": "(1, 2, 3)"}], "dataset_name": "mbpp"}
{"task_id": 786, "description": "Write a function to locate the right insertion point for a specified value in sorted order.", "function_name": "right_insertion", "correct_solution": "import bisect\r\ndef right_insertion(a, x):\r\n    i = bisect.bisect_right(a, x)\r\n    return i", "test_cases": [{"input": "right_insertion([1, 2, 4, 5], 6)", "expected_output": "4"}, {"input": "right_insertion([1, 2, 4, 5], 3)", "expected_output": "2"}, {"input": "right_insertion([1, 2, 4, 5], 7)", "expected_output": "4"}], "broken_test_cases": [{"input": "right_insertion([1, 2, 4, 5], 4)", "expected_output": "2"}], "dataset_name": "mbpp"}
{"task_id": 787, "description": "Write a function that matches a string that has an a followed by three 'b'.", "function_name": "text_match_three", "correct_solution": "import re\r\ndef text_match_three(text):\r\n        patterns = 'ab{3}?'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')", "test_cases": [{"input": "text_match_three('ac')", "expected_output": "'Not matched!'"}, {"input": "text_match_three('dc')", "expected_output": "'Not matched!'"}, {"input": "text_match_three('abbbba')", "expected_output": "'Found a match!'"}], "broken_test_cases": [{"input": "text_match_three('abb')", "expected_output": "'Found a match!'"}], "dataset_name": "mbpp"}
{"task_id": 788, "description": "Write a function to create a new tuple from the given string and list.", "function_name": "new_tuple", "correct_solution": "def new_tuple(test_list, test_str):\r\n  res = tuple(test_list + [test_str])\r\n  return (res) ", "test_cases": [{"input": "new_tuple(['WEB', 'is'], 'best')", "expected_output": "('WEB', 'is', 'best')"}, {"input": "new_tuple(['We', 'are'], 'Developers')", "expected_output": "('We', 'are', 'Developers')"}, {"input": "new_tuple(['Part', 'is'], 'Wrong')", "expected_output": "('Part', 'is', 'Wrong')"}], "broken_test_cases": [{"input": "new_tuple(['A', 'B'], 'C')", "expected_output": "('A', 'B', 'C', 'D')"}], "dataset_name": "mbpp"}
{"task_id": 790, "description": "Write a python function to check whether every even index contains even numbers of a given list.", "function_name": "even_position", "correct_solution": "def even_position(nums):\r\n\treturn all(nums[i]%2==i%2 for i in range(len(nums)))", "test_cases": [{"input": "even_position([3, 2, 1])", "expected_output": "False"}, {"input": "even_position([1, 2, 3])", "expected_output": "False"}, {"input": "even_position([2, 1, 4])", "expected_output": "True"}], "broken_test_cases": [{"input": "even_position([0, 2, 4, 6])", "expected_output": "True"}], "dataset_name": "mbpp"}
{"task_id": 791, "description": "Write a function to remove the nested record from the given tuple.", "function_name": "remove_nested", "correct_solution": "def remove_nested(test_tup):\r\n  res = tuple()\r\n  for count, ele in enumerate(test_tup):\r\n    if not isinstance(ele, tuple):\r\n      res = res + (ele, )\r\n  return (res) ", "test_cases": [{"input": "remove_nested((1, 5, 7, (4, 6), 10))", "expected_output": "(1, 5, 7, 10)"}, {"input": "remove_nested((2, 6, 8, (5, 7), 11))", "expected_output": "(2, 6, 8, 11)"}, {"input": "remove_nested((3, 7, 9, (6, 8), 12))", "expected_output": "(3, 7, 9, 12)"}], "broken_test_cases": [{"input": "remove_nested((1, (2, 3), (4, 5), 6))", "expected_output": "(1, (4, 5), 6)"}], "dataset_name": "mbpp"}
{"task_id": 792, "description": "Write a python function to count the number of lists in a given number of lists.", "function_name": "count_list", "correct_solution": "def count_list(input_list): \r\n    return len(input_list)", "test_cases": [{"input": "count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]])", "expected_output": "4"}, {"input": "count_list([[1, 2], [2, 3], [4, 5]])", "expected_output": "3"}, {"input": "count_list([[1, 0], [2, 0]])", "expected_output": "2"}], "broken_test_cases": [{"input": "count_list([[1, 2], 3, [4, 5]])", "expected_output": "2"}], "dataset_name": "mbpp"}
{"task_id": 793, "description": "Write a python function to find the last position of an element in a sorted array.", "function_name": "last", "correct_solution": "def last(arr,x,n):\r\n    low = 0\r\n    high = n - 1\r\n    res = -1  \r\n    while (low <= high):\r\n        mid = (low + high) // 2 \r\n        if arr[mid] > x:\r\n            high = mid - 1\r\n        elif arr[mid] < x:\r\n            low = mid + 1\r\n        else:\r\n            res = mid\r\n            low = mid + 1\r\n    return res", "test_cases": [{"input": "last([1, 2, 3], 1, 3)", "expected_output": "0"}, {"input": "last([1, 1, 1, 2, 3, 4], 1, 6)", "expected_output": "2"}, {"input": "last([2, 3, 2, 3, 6, 8, 9], 3, 8)", "expected_output": "3"}], "broken_test_cases": [{"input": "last([1, 2, 2, 2, 3, 4, 4], 2, 7)", "expected_output": "1"}], "dataset_name": "mbpp"}
{"task_id": 794, "description": "Write a function that matches a string that has an 'a' followed by anything, ending in 'b'.", "function_name": "text_starta_endb", "correct_solution": "import re\r\ndef text_starta_endb(text):\r\n        patterns = 'a.*?b$'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not matched!')", "test_cases": [{"input": "text_starta_endb('aabbbb')", "expected_output": "'Found a match!'"}, {"input": "text_starta_endb('aabAbbbc')", "expected_output": "'Not matched!'"}, {"input": "text_starta_endb('accddbbjjj')", "expected_output": "'Not matched!'"}], "broken_test_cases": [{"input": "text_starta_endb('abacb')", "expected_output": "'Found a match!'"}], "dataset_name": "mbpp"}
{"task_id": 795, "description": "Write a function to find the n - cheap price items from a given dataset using heap queue algorithm.", "function_name": "cheap_items", "correct_solution": "import heapq\r\ndef cheap_items(items,n):\r\n  cheap_items = heapq.nsmallest(n, items, key=lambda s: s['price'])\r\n  return cheap_items", "test_cases": [{"input": "cheap_items([{'name': 'Item-1', 'price': 101.1}, {'name': 'Item-2', 'price': 555.22}], 1)", "expected_output": "[{'name': 'Item-1', 'price': 101.1}]"}, {"input": "cheap_items([{'name': 'Item-1', 'price': 101.1}, {'name': 'Item-2', 'price': 555.22}], 2)", "expected_output": "[{'name': 'Item-1', 'price': 101.1}, {'name': 'Item-2', 'price': 555.22}]"}, {"input": "cheap_items([{'name': 'Item-1', 'price': 101.1}, {'name': 'Item-2', 'price': 555.22}, {'name': 'Item-3', 'price': 45.09}, {'name': 'Item-4', 'price': 22.75}], 1)", "expected_output": "[{'name': 'Item-4', 'price': 22.75}]"}], "broken_test_cases": [{"input": "cheap_items([{'name': 'Apple', 'price': 1.2}, {'name': 'Banana', 'price': 0.8}, {'name': 'Cherry', 'price': 2.0}], 2)", "expected_output": "[{'name': 'Apple', 'price': 1.2}, {'name': 'Cherry', 'price': 2.0}]"}], "dataset_name": "mbpp"}
{"task_id": 796, "description": "Write function to find the sum of all items in the given dictionary.", "function_name": "return_sum", "correct_solution": "def return_sum(dict):\r\n  sum = 0\r\n  for i in dict.values():\r\n    sum = sum + i\r\n  return sum", "test_cases": [{"input": "return_sum({'a': 100, 'b': 200, 'c': 300})", "expected_output": "600"}, {"input": "return_sum({'a': 25, 'b': 18, 'c': 45})", "expected_output": "88"}, {"input": "return_sum({'a': 36, 'b': 39, 'c': 49})", "expected_output": "124"}], "broken_test_cases": [{"input": "return_sum({'x': 5, 'y': -3, 'z': 2})", "expected_output": "10"}], "dataset_name": "mbpp"}
{"task_id": 797, "description": "Write a python function to find the sum of all odd natural numbers within the range l and r.", "function_name": "sum_in_Range", "correct_solution": "def sum_Odd(n): \r\n    terms = (n + 1)//2\r\n    sum1 = terms * terms \r\n    return sum1  \r\ndef sum_in_Range(l,r): \r\n    return sum_Odd(r) - sum_Odd(l - 1)", "test_cases": [{"input": "sum_in_Range(2, 5)", "expected_output": "8"}, {"input": "sum_in_Range(5, 7)", "expected_output": "12"}, {"input": "sum_in_Range(7, 13)", "expected_output": "40"}], "broken_test_cases": [{"input": "sum_in_Range(4, 4)", "expected_output": "4"}], "dataset_name": "mbpp"}
{"task_id": 798, "description": "Write a python function to find the sum of an array.", "function_name": "_sum", "correct_solution": "def _sum(arr):  \r\n    sum=0\r\n    for i in arr: \r\n        sum = sum + i      \r\n    return(sum)  ", "test_cases": [{"input": "_sum([1, 2, 3])", "expected_output": "6"}, {"input": "_sum([15, 12, 13, 10])", "expected_output": "50"}, {"input": "_sum([0, 1, 2])", "expected_output": "3"}], "broken_test_cases": [{"input": "_sum([1, 2, 3])", "expected_output": "7"}], "dataset_name": "mbpp"}
{"task_id": 799, "description": "Write a python function to left rotate the bits of a given number.", "function_name": "left_Rotate", "correct_solution": "INT_BITS = 32\r\ndef left_Rotate(n,d):   \r\n    return (n << d)|(n >> (INT_BITS - d))  ", "test_cases": [{"input": "left_Rotate(16, 2)", "expected_output": "64"}, {"input": "left_Rotate(10, 2)", "expected_output": "40"}, {"input": "left_Rotate(99, 3)", "expected_output": "792"}], "broken_test_cases": [{"input": "left_Rotate(16, 36)", "expected_output": "1024"}], "dataset_name": "mbpp"}
{"task_id": 800, "description": "Write a function to remove all whitespaces from a string.", "function_name": "remove_all_spaces", "correct_solution": "import re\r\ndef remove_all_spaces(text):\r\n return (re.sub(r'\\s+', '',text))", "test_cases": [{"input": "remove_all_spaces('python  program')", "expected_output": "'pythonprogram'"}, {"input": "remove_all_spaces('python   programming    language')", "expected_output": "'pythonprogramminglanguage'"}, {"input": "remove_all_spaces('python                     program')", "expected_output": "'pythonprogram'"}], "broken_test_cases": [{"input": "remove_all_spaces('  a b c 123   ')", "expected_output": "'abc 123'"}], "dataset_name": "mbpp"}
{"task_id": 801, "description": "Write a python function to count the number of equal numbers from three given integers.", "function_name": "test_three_equal", "correct_solution": "def test_three_equal(x,y,z):\r\n  result= set([x,y,z])\r\n  if len(result)==3:\r\n    return 0\r\n  else:\r\n    return (4-len(result))", "test_cases": [{"input": "test_three_equal(1, 1, 1)", "expected_output": "3"}, {"input": "test_three_equal(-1, -2, -3)", "expected_output": "0"}, {"input": "test_three_equal(1, 2, 2)", "expected_output": "2"}], "broken_test_cases": [{"input": "test_three_equal(5, 5, 7)", "expected_output": "3"}], "dataset_name": "mbpp"}
{"task_id": 802, "description": "Write a python function to count the number of rotations required to generate a sorted array.", "function_name": "count_Rotation", "correct_solution": "def count_Rotation(arr,n):   \r\n    for i in range (1,n): \r\n        if (arr[i] < arr[i - 1]): \r\n            return i  \r\n    return 0", "test_cases": [{"input": "count_Rotation([3, 2, 1], 3)", "expected_output": "1"}, {"input": "count_Rotation([4, 5, 1, 2, 3], 5)", "expected_output": "2"}, {"input": "count_Rotation([7, 8, 9, 1, 2, 3], 6)", "expected_output": "3"}], "broken_test_cases": [{"input": "count_Rotation([1, 2, 3, 4, 5], 5)", "expected_output": "5"}], "dataset_name": "mbpp"}
{"task_id": 803, "description": "Write a python function to check whether the given number is a perfect square or not.", "function_name": "is_Perfect_Square", "correct_solution": "def is_Perfect_Square(n) :\r\n    i = 1\r\n    while (i * i<= n):\r\n        if ((n % i == 0) and (n / i == i)):\r\n            return True     \r\n        i = i + 1\r\n    return False", "test_cases": [{"input": "is_Perfect_Square(10)", "expected_output": "False"}, {"input": "is_Perfect_Square(36)", "expected_output": "True"}, {"input": "is_Perfect_Square(14)", "expected_output": "False"}], "broken_test_cases": [{"input": "is_Perfect_Square(-4)", "expected_output": "True"}], "dataset_name": "mbpp"}
{"task_id": 804, "description": "Write a python function to check whether the product of numbers is even or not.", "function_name": "is_Product_Even", "correct_solution": "def is_Product_Even(arr,n): \r\n    for i in range(0,n): \r\n        if ((arr[i] & 1) == 0): \r\n            return True\r\n    return False", "test_cases": [{"input": "is_Product_Even([1, 2, 3], 3)", "expected_output": "True"}, {"input": "is_Product_Even([1, 2, 1, 4], 4)", "expected_output": "True"}, {"input": "is_Product_Even([1, 1], 2)", "expected_output": "False"}], "broken_test_cases": [{"input": "is_Product_Even([0, 3, 5], 3)", "expected_output": "False"}], "dataset_name": "mbpp"}
{"task_id": 806, "description": "Write a function to find maximum run of uppercase characters in the given string.", "function_name": "max_run_uppercase", "correct_solution": "def max_run_uppercase(test_str):\r\n  cnt = 0\r\n  res = 0\r\n  for idx in range(0, len(test_str)):\r\n    if test_str[idx].isupper():\r\n      cnt += 1\r\n    else:\r\n      res = cnt\r\n      cnt = 0\r\n  if test_str[len(test_str) - 1].isupper():\r\n    res = cnt\r\n  return (res)", "test_cases": [{"input": "max_run_uppercase('GeMKSForGERksISBESt')", "expected_output": "5"}, {"input": "max_run_uppercase('PrECIOusMOVemENTSYT')", "expected_output": "6"}, {"input": "max_run_uppercase('GooGLEFluTTER')", "expected_output": "4"}], "broken_test_cases": [{"input": "max_run_uppercase('ABCabcDEFG')", "expected_output": "7"}], "dataset_name": "mbpp"}
{"task_id": 807, "description": "Write a python function to find the first odd number in a given list of numbers.", "function_name": "first_odd", "correct_solution": "def first_odd(nums):\r\n  first_odd = next((el for el in nums if el%2!=0),-1)\r\n  return first_odd", "test_cases": [{"input": "first_odd([1, 3, 5])", "expected_output": "1"}, {"input": "first_odd([2, 4, 1, 3])", "expected_output": "1"}, {"input": "first_odd([8, 9, 1])", "expected_output": "9"}], "broken_test_cases": [{"input": "first_odd([2, 4, 6, 8])", "expected_output": "2"}], "dataset_name": "mbpp"}
{"task_id": 808, "description": "Write a function to check if the given tuples contain the k or not.", "function_name": "check_K", "correct_solution": "def check_K(test_tup, K):\r\n  res = False\r\n  for ele in test_tup:\r\n    if ele == K:\r\n      res = True\r\n      break\r\n  return (res) ", "test_cases": [{"input": "check_K((10, 4, 5, 6, 8), 6)", "expected_output": "True"}, {"input": "check_K((1, 2, 3, 4, 5, 6), 7)", "expected_output": "False"}, {"input": "check_K((7, 8, 9, 44, 11, 12), 11)", "expected_output": "True"}], "broken_test_cases": [{"input": "check_K((), 3)", "expected_output": "True"}], "dataset_name": "mbpp"}
{"task_id": 809, "description": "Write a function to check if each element of second tuple is smaller than its corresponding index in first tuple.", "function_name": "check_smaller", "correct_solution": "def check_smaller(test_tup1, test_tup2):\r\n  res = all(x > y for x, y in zip(test_tup1, test_tup2))\r\n  return (res) ", "test_cases": [{"input": "check_smaller((1, 2, 3), (2, 3, 4))", "expected_output": "False"}, {"input": "check_smaller((4, 5, 6), (3, 4, 5))", "expected_output": "True"}, {"input": "check_smaller((11, 12, 13), (10, 11, 12))", "expected_output": "True"}], "broken_test_cases": [{"input": "check_smaller((5, 3, 2), (5, 2, 1))", "expected_output": "True"}], "dataset_name": "mbpp"}
{"task_id": 810, "description": "Write a function to iterate over elements repeating each as many times as its count.", "function_name": "count_variable", "correct_solution": "from collections import Counter\r\ndef count_variable(a,b,c,d):\r\n  c = Counter(p=a, q=b, r=c, s=d)\r\n  return list(c.elements())", "test_cases": [{"input": "count_variable(4, 2, 0, -2)", "expected_output": "['p', 'p', 'p', 'p', 'q', 'q']"}, {"input": "count_variable(0, 1, 2, 3)", "expected_output": "['q', 'r', 'r', 's', 's', 's']"}, {"input": "count_variable(11, 15, 12, 23)", "expected_output": "['p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'q', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 'r', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's', 's']"}], "broken_test_cases": [{"input": "count_variable(1, 2, 3, 4)", "expected_output": "['p', 'q', 'r', 's']"}], "dataset_name": "mbpp"}
{"task_id": 811, "description": "Write a function to check if two lists of tuples are identical or not.", "function_name": "check_identical", "correct_solution": "def check_identical(test_list1, test_list2):\r\n  res = test_list1 == test_list2\r\n  return (res) ", "test_cases": [{"input": "check_identical([(10, 4), (2, 5)], [(10, 4), (2, 5)])", "expected_output": "True"}, {"input": "check_identical([(1, 2), (3, 7)], [(12, 14), (12, 45)])", "expected_output": "False"}, {"input": "check_identical([(2, 14), (12, 25)], [(2, 14), (12, 25)])", "expected_output": "True"}], "broken_test_cases": [{"input": "check_identical([(1, 2), (3, 4)], [(3, 4), (1, 2)])", "expected_output": "True"}], "dataset_name": "mbpp"}
{"task_id": 812, "description": "Write a function to abbreviate 'road' as 'rd.' in a given string.", "function_name": "road_rd", "correct_solution": "import re\r\ndef road_rd(street):\r\n  return (re.sub('Road$', 'Rd.', street))", "test_cases": [{"input": "road_rd('ravipadu Road')", "expected_output": "'ravipadu Rd.'"}, {"input": "road_rd('palnadu Road')", "expected_output": "'palnadu Rd.'"}, {"input": "road_rd('eshwar enclave Road')", "expected_output": "'eshwar enclave Rd.'"}], "broken_test_cases": [{"input": "road_rd('main road')", "expected_output": "'main Rd.'"}], "dataset_name": "mbpp"}
{"task_id": 813, "description": "Write a function to find length of the string.", "function_name": "string_length", "correct_solution": "def string_length(str1):\r\n    count = 0\r\n    for char in str1:\r\n        count += 1\r\n    return count", "test_cases": [{"input": "string_length('python')", "expected_output": "6"}, {"input": "string_length('program')", "expected_output": "7"}, {"input": "string_length('language')", "expected_output": "8"}], "broken_test_cases": [{"input": "string_length(\"\")", "expected_output": "1"}], "dataset_name": "mbpp"}
{"task_id": 814, "description": "Write a function to find the area of a rombus.", "function_name": "rombus_area", "correct_solution": "def rombus_area(p,q):\r\n  area=(p*q)/2\r\n  return area", "test_cases": [{"input": "rombus_area(10, 20)", "expected_output": "100"}, {"input": "rombus_area(10, 5)", "expected_output": "25"}, {"input": "rombus_area(4, 2)", "expected_output": "4"}], "broken_test_cases": [{"input": "rombus_area(8, 8)", "expected_output": "64"}], "dataset_name": "mbpp"}
{"task_id": 815, "description": "Write a function to sort the given array without using any sorting algorithm. the given array consists of only 0, 1, and 2.", "function_name": "sort_by_dnf", "correct_solution": "def sort_by_dnf(arr, n):\r\n  low=0\r\n  mid=0\r\n  high=n-1\r\n  while mid <= high:\r\n    if arr[mid] == 0:\r\n      arr[low], arr[mid] = arr[mid], arr[low]\r\n      low = low + 1\r\n      mid = mid + 1\r\n    elif arr[mid] == 1:\r\n      mid = mid + 1\r\n    else:\r\n      arr[mid], arr[high] = arr[high], arr[mid]\r\n      high = high - 1\r\n  return arr", "test_cases": [{"input": "sort_by_dnf([1, 2, 0, 1, 0, 1, 2, 1, 1], 9)", "expected_output": "[0, 0, 1, 1, 1, 1, 1, 2, 2]"}, {"input": "sort_by_dnf([1, 0, 0, 1, 2, 1, 2, 2, 1, 0], 10)", "expected_output": "[0, 0, 0, 1, 1, 1, 1, 2, 2, 2]"}, {"input": "sort_by_dnf([2, 2, 1, 0, 0, 0, 1, 1, 2, 1], 10)", "expected_output": "[0, 0, 0, 1, 1, 1, 1, 2, 2, 2]"}], "broken_test_cases": [{"input": "sort_by_dnf([2, 0, 1, 2, 0, 1], 6)", "expected_output": "[2, 2, 1, 1, 0, 0]"}], "dataset_name": "mbpp"}
{"task_id": 817, "description": "Write a function to find numbers divisible by m or n from a list of numbers using lambda function.", "function_name": "div_of_nums", "correct_solution": "def div_of_nums(nums,m,n):\r\n result = list(filter(lambda x: (x % m == 0 or x % n == 0), nums)) \r\n return result", "test_cases": [{"input": "div_of_nums([19, 65, 57, 39, 152, 639, 121, 44, 90, 190], 19, 13)", "expected_output": "[19, 65, 57, 39, 152, 190]"}, {"input": "div_of_nums([1, 2, 3, 5, 7, 8, 10], 2, 5)", "expected_output": "[2, 5, 8, 10]"}, {"input": "div_of_nums([10, 15, 14, 13, 18, 12, 20], 10, 5)", "expected_output": "[10, 15, 20]"}], "broken_test_cases": [{"input": "div_of_nums([6, 7, 8, 9], 2, 3)", "expected_output": "[6, 8]"}], "dataset_name": "mbpp"}
{"task_id": 818, "description": "Write a python function to count lower case letters in a given string.", "function_name": "lower_ctr", "correct_solution": "def lower_ctr(str):\r\n      lower_ctr= 0\r\n      for i in range(len(str)):\r\n          if str[i] >= 'a' and str[i] <= 'z': lower_ctr += 1     \r\n      return  lower_ctr", "test_cases": [{"input": "lower_ctr('abc')", "expected_output": "3"}, {"input": "lower_ctr('string')", "expected_output": "6"}, {"input": "lower_ctr('Python')", "expected_output": "5"}], "broken_test_cases": [{"input": "lower_ctr('ABCdefGHI')", "expected_output": "6"}], "dataset_name": "mbpp"}
{"task_id": 819, "description": "Write a function to count the frequency of consecutive duplicate elements in a given list of numbers.", "function_name": "count_duplic", "correct_solution": "def count_duplic(lists):\r\n    element = []\r\n    frequency = []\r\n    if not lists:\r\n        return element\r\n    running_count = 1\r\n    for i in range(len(lists)-1):\r\n        if lists[i] == lists[i+1]:\r\n            running_count += 1\r\n        else:\r\n            frequency.append(running_count)\r\n            element.append(lists[i])\r\n            running_count = 1\r\n    frequency.append(running_count)\r\n    element.append(lists[i+1])\r\n    return element,frequency\r\n", "test_cases": [{"input": "count_duplic([1, 2, 2, 2, 4, 4, 4, 5, 5, 5, 5])", "expected_output": "([1, 2, 4, 5], [1, 3, 3, 4])"}, {"input": "count_duplic([2, 2, 3, 1, 2, 6, 7, 9])", "expected_output": "([2, 3, 1, 2, 6, 7, 9], [2, 1, 1, 1, 1, 1, 1])"}, {"input": "count_duplic([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12])", "expected_output": "([2, 1, 5, 6, 8, 3, 4, 9, 10, 11, 8, 12], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1])"}], "broken_test_cases": [{"input": "count_duplic([3, 3, 3, 4, 5, 5, 3, 3, 2, 2, 2, 2])", "expected_output": "([3, 4, 5, 3, 2], [3, 1, 2, 2, 3])"}], "dataset_name": "mbpp"}
{"task_id": 820, "description": "Write a function to check whether the given month number contains 28 days or not.", "function_name": "check_monthnum_number", "correct_solution": "def check_monthnum_number(monthnum1):\r\n  if monthnum1 == 2:\r\n    return True\r\n  else:\r\n    return False", "test_cases": [{"input": "check_monthnum_number(2)", "expected_output": "True"}, {"input": "check_monthnum_number(1)", "expected_output": "False"}, {"input": "check_monthnum_number(3)", "expected_output": "False"}], "broken_test_cases": [{"input": "check_monthnum_number(2)", "expected_output": "False"}], "dataset_name": "mbpp"}
{"task_id": 821, "description": "Write a function to merge two dictionaries into a single expression.", "function_name": "merge_dictionaries", "correct_solution": "import collections as ct\r\ndef merge_dictionaries(dict1,dict2):\r\n    merged_dict = dict(ct.ChainMap({}, dict1, dict2))\r\n    return merged_dict", "test_cases": [{"input": "merge_dictionaries({'R': 'Red', 'B': 'Black', 'P': 'Pink'}, {'G': 'Green', 'W': 'White'})", "expected_output": "{'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White'}"}, {"input": "merge_dictionaries({'R': 'Red', 'B': 'Black', 'P': 'Pink'}, {'O': 'Orange', 'W': 'White', 'B': 'Black'})", "expected_output": "{'O': 'Orange', 'P': 'Pink', 'B': 'Black', 'W': 'White', 'R': 'Red'}"}, {"input": "merge_dictionaries({'G': 'Green', 'W': 'White'}, {'O': 'Orange', 'W': 'White', 'B': 'Black'})", "expected_output": "{'W': 'White', 'O': 'Orange', 'G': 'Green', 'B': 'Black'}"}], "broken_test_cases": [{"input": "merge_dictionaries({'A': 1, 'B': 2}, {'A': 3, 'C': 4})", "expected_output": "{'A': 3, 'B': 2, 'C': 4}"}], "dataset_name": "mbpp"}
{"task_id": 822, "description": "Write a function to return true if the password is valid.", "function_name": "pass_validity", "correct_solution": "import re\r\ndef pass_validity(p):\r\n x = True\r\n while x:  \r\n    if (len(p)<6 or len(p)>12):\r\n        break\r\n    elif not re.search(\"[a-z]\",p):\r\n        break\r\n    elif not re.search(\"[0-9]\",p):\r\n        break\r\n    elif not re.search(\"[A-Z]\",p):\r\n        break\r\n    elif not re.search(\"[$#@]\",p):\r\n        break\r\n    elif re.search(\"\\s\",p):\r\n        break\r\n    else:\r\n        return True\r\n        x=False\r\n        break\r\n\r\n if x:\r\n    return False", "test_cases": [{"input": "pass_validity('password')", "expected_output": "False"}, {"input": "pass_validity('Password@10')", "expected_output": "True"}, {"input": "pass_validity('password@10')", "expected_output": "False"}], "broken_test_cases": [{"input": "pass_validity('Pass@')", "expected_output": "True"}], "dataset_name": "mbpp"}
{"task_id": 823, "description": "Write a function to check if the given string starts with a substring using regex.", "function_name": "check_substring", "correct_solution": "import re \r\ndef check_substring(string, sample) : \r\n  if (sample in string): \r\n      y = \"\\A\" + sample \r\n      x = re.search(y, string) \r\n      if x : \r\n          return (\"string starts with the given substring\") \r\n      else : \r\n          return (\"string doesnt start with the given substring\") \r\n  else : \r\n      return (\"entered string isnt a substring\")", "test_cases": [{"input": "check_substring('dreams for dreams makes life fun', 'makes')", "expected_output": "'string doesnt start with the given substring'"}, {"input": "check_substring('Hi there how are you Hi alex', 'Hi')", "expected_output": "'string starts with the given substring'"}, {"input": "check_substring('Its been a long day', 'been')", "expected_output": "'string doesnt start with the given substring'"}], "broken_test_cases": [{"input": "check_substring('start', '')", "expected_output": "'entered string isnt a substring'"}], "dataset_name": "mbpp"}
{"task_id": 824, "description": "Write a python function to remove even numbers from a given list.", "function_name": "remove_even", "correct_solution": "def remove_even(l):\r\n    for i in l:\r\n        if i % 2 == 0:\r\n            l.remove(i)\r\n    return l", "test_cases": [{"input": "remove_even([1, 3, 5, 2])", "expected_output": "[1, 3, 5]"}, {"input": "remove_even([5, 6, 7])", "expected_output": "[5, 7]"}, {"input": "remove_even([1, 2, 3, 4])", "expected_output": "[1, 3]"}], "broken_test_cases": [{"input": "remove_even([2, 4, 6, 8])", "expected_output": "[2, 4, 6, 8]"}], "dataset_name": "mbpp"}
{"task_id": 825, "description": "Write a python function to access multiple elements of specified index from a given list.", "function_name": "access_elements", "correct_solution": "def access_elements(nums, list_index):\r\n    result = [nums[i] for i in list_index]\r\n    return result", "test_cases": [{"input": "access_elements([2, 3, 8, 4, 7, 9], [0, 3, 5])", "expected_output": "[2, 4, 9]"}, {"input": "access_elements([1, 2, 3, 4, 5], [1, 2])", "expected_output": "[2, 3]"}, {"input": "access_elements([1, 0, 2, 3], [0, 1])", "expected_output": "[1, 0]"}], "broken_test_cases": [{"input": "access_elements([10, 20, 30, 40], [1, 2, 2])", "expected_output": "[20, 30, 40]"}], "dataset_name": "mbpp"}
{"task_id": 826, "description": "Write a python function to find the type of triangle from the given sides.", "function_name": "check_Type_Of_Triangle", "correct_solution": "def check_Type_Of_Triangle(a,b,c): \r\n    sqa = pow(a,2) \r\n    sqb = pow(b,2) \r\n    sqc = pow(c,2) \r\n    if (sqa == sqa + sqb or sqb == sqa + sqc or sqc == sqa + sqb): \r\n        return (\"Right-angled Triangle\") \r\n    elif (sqa > sqc + sqb or sqb > sqa + sqc or sqc > sqa + sqb): \r\n        return (\"Obtuse-angled Triangle\") \r\n    else: \r\n        return (\"Acute-angled Triangle\") ", "test_cases": [{"input": "check_Type_Of_Triangle(1, 2, 3)", "expected_output": "'Obtuse-angled Triangle'"}, {"input": "check_Type_Of_Triangle(2, 2, 2)", "expected_output": "'Acute-angled Triangle'"}, {"input": "check_Type_Of_Triangle(1, 0, 1)", "expected_output": "'Right-angled Triangle'"}], "broken_test_cases": [{"input": "check_Type_Of_Triangle(3, 4, 5)", "expected_output": "'Acute-angled Triangle'"}], "dataset_name": "mbpp"}
{"task_id": 827, "description": "Write a function to sum a specific column of a list in a given list of lists.", "function_name": "sum_column", "correct_solution": "def sum_column(list1, C):\r\n    result = sum(row[C] for row in list1)\r\n    return result", "test_cases": [{"input": "sum_column([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]], 0)", "expected_output": "12"}, {"input": "sum_column([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]], 1)", "expected_output": "15"}, {"input": "sum_column([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]], 3)", "expected_output": "9"}], "broken_test_cases": [{"input": "sum_column([[1, 2], [3, 4], [5, 6]], 2)", "expected_output": "0"}], "dataset_name": "mbpp"}
{"task_id": 828, "description": "Write a function to count alphabets,digits and special charactes in a given string.", "function_name": "count_alpha_dig_spl", "correct_solution": "def count_alpha_dig_spl(string):\r\n  alphabets=digits = special = 0\r\n  for i in range(len(string)):\r\n    if(string[i].isalpha()):\r\n        alphabets = alphabets + 1\r\n    elif(string[i].isdigit()):\r\n        digits = digits + 1\r\n    else:\r\n        special = special + 1\r\n  return (alphabets,digits,special)   ", "test_cases": [{"input": "count_alpha_dig_spl('abc!@#123')", "expected_output": "(3, 3, 3)"}, {"input": "count_alpha_dig_spl('dgsuy@#$%&1255')", "expected_output": "(5, 4, 5)"}, {"input": "count_alpha_dig_spl('fjdsif627348#%$^&')", "expected_output": "(6, 6, 5)"}], "broken_test_cases": [{"input": "count_alpha_dig_spl('abc123!')", "expected_output": "(4, 3, 0)"}], "dataset_name": "mbpp"}
{"task_id": 829, "description": "Write a function to find out the second most repeated (or frequent) string in the given sequence.", "function_name": "second_frequent", "correct_solution": "from collections import Counter \r\n\t\r\ndef second_frequent(input): \r\n\tdict = Counter(input) \r\n\tvalue = sorted(dict.values(), reverse=True)  \r\n\tsecond_large = value[1] \r\n\tfor (key, val) in dict.items(): \r\n\t\tif val == second_large: \r\n\t\t\treturn (key) ", "test_cases": [{"input": "second_frequent(['aaa', 'bbb', 'ccc', 'bbb', 'aaa', 'aaa'])", "expected_output": "'bbb'"}, {"input": "second_frequent(['abc', 'bcd', 'abc', 'bcd', 'bcd', 'bcd'])", "expected_output": "'abc'"}, {"input": "second_frequent(['cdma', 'gsm', 'hspa', 'gsm', 'cdma', 'cdma'])", "expected_output": "'gsm'"}], "broken_test_cases": [{"input": "second_frequent(['apple', 'banana', 'cherry', 'banana', 'apple', 'cherry', 'cherry'])", "expected_output": "'banana'"}], "dataset_name": "mbpp"}
{"task_id": 832, "description": "Write a function to extract the maximum numeric value from a string by using regex.", "function_name": "extract_max", "correct_solution": "import re \r\ndef extract_max(input): \r\n\tnumbers = re.findall('\\d+',input) \r\n\tnumbers = map(int,numbers) \r\n\treturn max(numbers)", "test_cases": [{"input": "extract_max('100klh564abc365bg')", "expected_output": "564"}, {"input": "extract_max('hello300how546mer231')", "expected_output": "546"}, {"input": "extract_max('its233beenalong343journey234')", "expected_output": "343"}], "broken_test_cases": [{"input": "extract_max('foo9bar')", "expected_output": "0"}], "dataset_name": "mbpp"}
{"task_id": 833, "description": "Write a function to get dictionary keys as a list.", "function_name": "get_key", "correct_solution": "def get_key(dict): \r\n    list = [] \r\n    for key in dict.keys(): \r\n        list.append(key)           \r\n    return list", "test_cases": [{"input": "get_key({1: 'python', 2: 'java'})", "expected_output": "[1, 2]"}, {"input": "get_key({10: 'red', 20: 'blue', 30: 'black'})", "expected_output": "[10, 20, 30]"}, {"input": "get_key({27: 'language', 39: 'java', 44: 'little'})", "expected_output": "[27, 39, 44]"}], "broken_test_cases": [{"input": "get_key({1: 'apple', 2: 'banana', 3: 'cherry'})", "expected_output": "['apple', 'banana', 'cherry']"}], "dataset_name": "mbpp"}
{"task_id": 835, "description": "Write a python function to find the slope of a line.", "function_name": "slope", "correct_solution": "def slope(x1,y1,x2,y2): \r\n    return (float)(y2-y1)/(x2-x1)  ", "test_cases": [{"input": "slope(4, 2, 2, 5)", "expected_output": "-1.5"}, {"input": "slope(2, 4, 4, 6)", "expected_output": "1"}, {"input": "slope(1, 2, 4, 2)", "expected_output": "0"}], "broken_test_cases": [{"input": "slope(3, 3, 3, 10)", "expected_output": "0"}], "dataset_name": "mbpp"}
{"task_id": 836, "description": "Write a function to find length of the subarray having maximum sum.", "function_name": "max_sub_array_sum", "correct_solution": "from sys import maxsize \r\ndef max_sub_array_sum(a,size): \r\n\tmax_so_far = -maxsize - 1\r\n\tmax_ending_here = 0\r\n\tstart = 0\r\n\tend = 0\r\n\ts = 0\r\n\tfor i in range(0,size): \r\n\t\tmax_ending_here += a[i] \r\n\t\tif max_so_far < max_ending_here: \r\n\t\t\tmax_so_far = max_ending_here \r\n\t\t\tstart = s \r\n\t\t\tend = i \r\n\t\tif max_ending_here < 0: \r\n\t\t\tmax_ending_here = 0\r\n\t\t\ts = i+1\r\n\treturn (end - start + 1)", "test_cases": [{"input": "max_sub_array_sum([-2, -3, 4, -1, -2, 1, 5, -3], 8)", "expected_output": "5"}, {"input": "max_sub_array_sum([1, -2, 1, 1, -2, 1], 6)", "expected_output": "2"}, {"input": "max_sub_array_sum([-1, -2, 3, 4, 5], 5)", "expected_output": "3"}], "broken_test_cases": [{"input": "max_sub_array_sum([2, -1, 2, 3, 4, -5], 6)", "expected_output": "4"}], "dataset_name": "mbpp"}
{"task_id": 837, "description": "Write a python function to find the cube sum of first n odd natural numbers.", "function_name": "cube_Sum", "correct_solution": "def cube_Sum(n): \r\n    sum = 0   \r\n    for i in range(0,n) : \r\n        sum += (2*i+1)*(2*i+1)*(2*i+1) \r\n    return sum", "test_cases": [{"input": "cube_Sum(2)", "expected_output": "28"}, {"input": "cube_Sum(3)", "expected_output": "153"}, {"input": "cube_Sum(4)", "expected_output": "496"}], "broken_test_cases": [{"input": "cube_Sum(5)", "expected_output": "625"}], "dataset_name": "mbpp"}
{"task_id": 840, "description": "Write a python function to check whether the roots of a quadratic equation are numerically equal but opposite in sign or not.", "function_name": "Check_Solution", "correct_solution": "def Check_Solution(a,b,c):  \r\n    if b == 0:  \r\n        return (\"Yes\")  \r\n    else: \r\n        return (\"No\")  ", "test_cases": [{"input": "Check_Solution(2, 0, -1)", "expected_output": "'Yes'"}, {"input": "Check_Solution(1, -5, 6)", "expected_output": "'No'"}, {"input": "Check_Solution(2, 0, 2)", "expected_output": "'Yes'"}], "broken_test_cases": [{"input": "Check_Solution(1, 0, 1)", "expected_output": "\"No\""}], "dataset_name": "mbpp"}
{"task_id": 841, "description": "Write a function to count the number of inversions in the given array.", "function_name": "get_inv_count", "correct_solution": "def get_inv_count(arr, n): \r\n\tinv_count = 0\r\n\tfor i in range(n): \r\n\t\tfor j in range(i + 1, n): \r\n\t\t\tif (arr[i] > arr[j]): \r\n\t\t\t\tinv_count += 1\r\n\treturn inv_count ", "test_cases": [{"input": "get_inv_count([1, 20, 6, 4, 5], 5)", "expected_output": "5"}, {"input": "get_inv_count([8, 4, 2, 1], 4)", "expected_output": "6"}, {"input": "get_inv_count([3, 1, 2], 3)", "expected_output": "2"}], "broken_test_cases": [{"input": "get_inv_count([1, 2, 3, 4, 5], 5)", "expected_output": "10"}], "dataset_name": "mbpp"}
{"task_id": 842, "description": "Write a function to find the number which occurs for odd number of times in the given array.", "function_name": "get_odd_occurence", "correct_solution": "def get_odd_occurence(arr, arr_size):\r\n  for i in range(0, arr_size):\r\n    count = 0\r\n    for j in range(0, arr_size):\r\n      if arr[i] == arr[j]:\r\n        count += 1\r\n    if (count % 2 != 0):\r\n      return arr[i]\r\n  return -1", "test_cases": [{"input": "get_odd_occurence([2, 3, 5, 4, 5, 2, 4, 3, 5, 2, 4, 4, 2], 13)", "expected_output": "5"}, {"input": "get_odd_occurence([1, 2, 3, 2, 3, 1, 3], 7)", "expected_output": "3"}, {"input": "get_odd_occurence([5, 7, 2, 7, 5, 2, 5], 7)", "expected_output": "5"}], "broken_test_cases": [{"input": "get_odd_occurence([1, 1, 2, 2, 3, 3], 6)", "expected_output": "3"}], "dataset_name": "mbpp"}
{"task_id": 843, "description": "Write a function to find the nth super ugly number from a given prime list of size k using heap queue algorithm.", "function_name": "nth_super_ugly_number", "correct_solution": "import heapq\r\ndef nth_super_ugly_number(n, primes):\r\n    uglies = [1]\r\n    def gen(prime):\r\n        for ugly in uglies:\r\n            yield ugly * prime\r\n    merged = heapq.merge(*map(gen, primes))\r\n    while len(uglies) < n:\r\n        ugly = next(merged)\r\n        if ugly != uglies[-1]:\r\n            uglies.append(ugly)\r\n    return uglies[-1]", "test_cases": [{"input": "nth_super_ugly_number(12, [2, 7, 13, 19])", "expected_output": "32"}, {"input": "nth_super_ugly_number(10, [2, 7, 13, 19])", "expected_output": "26"}, {"input": "nth_super_ugly_number(100, [2, 7, 13, 19])", "expected_output": "5408"}], "broken_test_cases": [{"input": "nth_super_ugly_number(5, [2, 3, 5])", "expected_output": "8"}], "dataset_name": "mbpp"}
{"task_id": 844, "description": "Write a python function to find the kth element in an array containing odd elements first and then even elements.", "function_name": "get_Number", "correct_solution": "def get_Number(n, k): \r\n    arr = [0] * n; \r\n    i = 0; \r\n    odd = 1; \r\n    while (odd <= n):   \r\n        arr[i] = odd; \r\n        i += 1; \r\n        odd += 2;\r\n    even = 2; \r\n    while (even <= n): \r\n        arr[i] = even; \r\n        i += 1;\r\n        even += 2; \r\n    return arr[k - 1]; ", "test_cases": [{"input": "get_Number(8, 5)", "expected_output": "2"}, {"input": "get_Number(7, 2)", "expected_output": "3"}, {"input": "get_Number(5, 2)", "expected_output": "3"}], "broken_test_cases": [{"input": "get_Number(6, 4)", "expected_output": "6"}], "dataset_name": "mbpp"}
{"task_id": 845, "description": "Write a python function to count the number of digits in factorial of a given number.", "function_name": "find_Digits", "correct_solution": "import math \r\ndef find_Digits(n): \r\n    if (n < 0): \r\n        return 0;\r\n    if (n <= 1): \r\n        return 1; \r\n    x = ((n * math.log10(n / math.e) + math.log10(2 * math.pi * n) /2.0)); \r\n    return math.floor(x) + 1; ", "test_cases": [{"input": "find_Digits(7)", "expected_output": "4"}, {"input": "find_Digits(5)", "expected_output": "3"}, {"input": "find_Digits(4)", "expected_output": "2"}], "broken_test_cases": [{"input": "find_Digits(10)", "expected_output": "10"}], "dataset_name": "mbpp"}
{"task_id": 846, "description": "Write a function to find the minimum number of platforms required for a railway/bus station.", "function_name": "find_platform", "correct_solution": "def find_platform(arr, dep, n): \r\n    arr.sort() \r\n    dep.sort() \r\n    plat_needed = 1\r\n    result = 1\r\n    i = 1\r\n    j = 0\r\n    while (i < n and j < n): \r\n        if (arr[i] <= dep[j]):           \r\n            plat_needed+= 1\r\n            i+= 1\r\n        elif (arr[i] > dep[j]):           \r\n            plat_needed-= 1\r\n            j+= 1\r\n        if (plat_needed > result):  \r\n            result = plat_needed           \r\n    return result", "test_cases": [{"input": "find_platform([900, 940, 950, 1100, 1500, 1800], [910, 1200, 1120, 1130, 1900, 2000], 6)", "expected_output": "3"}, {"input": "find_platform([100, 200, 300, 400], [700, 800, 900, 1000], 4)", "expected_output": "4"}, {"input": "find_platform([5, 6, 7, 8], [4, 3, 2, 1], 4)", "expected_output": "1"}], "broken_test_cases": [{"input": "find_platform([1000, 1010, 1020], [1030, 1025, 1035], 3)", "expected_output": "2"}], "dataset_name": "mbpp"}
{"task_id": 847, "description": "Write a python function to copy a list from a singleton tuple.", "function_name": "lcopy", "correct_solution": "def lcopy(xs):\n  return xs[:]\n", "test_cases": [{"input": "lcopy([1, 2, 3])", "expected_output": "[1, 2, 3]"}, {"input": "lcopy([4, 8, 2, 10, 15, 18])", "expected_output": "[4, 8, 2, 10, 15, 18]"}, {"input": "lcopy([4, 5, 6])", "expected_output": "[4, 5, 6]"}], "broken_test_cases": [{"input": "lcopy(([7, 8, 9],))", "expected_output": "[7, 8, 9]"}], "dataset_name": "mbpp"}
{"task_id": 848, "description": "Write a function to find the area of a trapezium.", "function_name": "area_trapezium", "correct_solution": "def area_trapezium(base1,base2,height):\r\n area = 0.5 * (base1 + base2) * height\r\n return area", "test_cases": [{"input": "area_trapezium(6, 9, 4)", "expected_output": "30"}, {"input": "area_trapezium(10, 20, 30)", "expected_output": "450"}, {"input": "area_trapezium(15, 25, 35)", "expected_output": "700"}], "broken_test_cases": [{"input": "area_trapezium(8, 12, 5)", "expected_output": "60"}], "dataset_name": "mbpp"}
{"task_id": 849, "description": "Write a python function to find sum of all prime divisors of a given number.", "function_name": "Sum", "correct_solution": "def Sum(N): \r\n    SumOfPrimeDivisors = [0]*(N + 1)   \r\n    for i in range(2,N + 1) : \r\n        if (SumOfPrimeDivisors[i] == 0) : \r\n            for j in range(i,N + 1,i) : \r\n                SumOfPrimeDivisors[j] += i           \r\n    return SumOfPrimeDivisors[N] ", "test_cases": [{"input": "Sum(60)", "expected_output": "10"}, {"input": "Sum(39)", "expected_output": "16"}, {"input": "Sum(40)", "expected_output": "7"}], "broken_test_cases": [{"input": "Sum(49)", "expected_output": "14"}], "dataset_name": "mbpp"}
{"task_id": 851, "description": "Write a python function to find sum of inverse of divisors.", "function_name": "Sum_of_Inverse_Divisors", "correct_solution": "def Sum_of_Inverse_Divisors(N,Sum): \r\n    ans = float(Sum)*1.0 /float(N);  \r\n    return round(ans,2); ", "test_cases": [{"input": "Sum_of_Inverse_Divisors(6, 12)", "expected_output": "2"}, {"input": "Sum_of_Inverse_Divisors(9, 13)", "expected_output": "1.44"}, {"input": "Sum_of_Inverse_Divisors(1, 4)", "expected_output": "4"}], "broken_test_cases": [{"input": "Sum_of_Inverse_Divisors(5, 10)", "expected_output": "3"}], "dataset_name": "mbpp"}
{"task_id": 852, "description": "Write a python function to remove negative numbers from a list.", "function_name": "remove_negs", "correct_solution": "def remove_negs(num_list): \r\n    for item in num_list: \r\n        if item < 0: \r\n           num_list.remove(item) \r\n    return num_list", "test_cases": [{"input": "remove_negs([1, -2, 3, -4])", "expected_output": "[1, 3]"}, {"input": "remove_negs([1, 2, 3, -4])", "expected_output": "[1, 2, 3]"}, {"input": "remove_negs([4, 5, -6, 7, -8])", "expected_output": "[4, 5, 7]"}], "broken_test_cases": [{"input": "remove_negs([-1, -2, -3])", "expected_output": "[-1, -2, -3]"}], "dataset_name": "mbpp"}
{"task_id": 853, "description": "Write a python function to find sum of odd factors of a number.", "function_name": "sum_of_odd_Factors", "correct_solution": "import math\r\ndef sum_of_odd_Factors(n): \r\n    res = 1\r\n    while n % 2 == 0: \r\n        n = n // 2 \r\n    for i in range(3,int(math.sqrt(n) + 1)): \r\n        count = 0\r\n        curr_sum = 1\r\n        curr_term = 1\r\n        while n % i == 0: \r\n            count+=1 \r\n            n = n // i \r\n            curr_term *= i \r\n            curr_sum += curr_term    \r\n        res *= curr_sum  \r\n    if n >= 2: \r\n        res *= (1 + n) \r\n    return res ", "test_cases": [{"input": "sum_of_odd_Factors(30)", "expected_output": "24"}, {"input": "sum_of_odd_Factors(18)", "expected_output": "13"}, {"input": "sum_of_odd_Factors(2)", "expected_output": "1"}], "broken_test_cases": [{"input": "sum_of_odd_Factors(9)", "expected_output": "12"}], "dataset_name": "mbpp"}
{"task_id": 854, "description": "Write a function which accepts an arbitrary list and converts it to a heap using heap queue algorithm.", "function_name": "raw_heap", "correct_solution": "import heapq as hq\r\ndef raw_heap(rawheap):\r\n  hq.heapify(rawheap)\r\n  return rawheap", "test_cases": [{"input": "raw_heap([25, 44, 68, 21, 39, 23, 89])", "expected_output": "[21, 25, 23, 44, 39, 68, 89]"}, {"input": "raw_heap([25, 35, 22, 85, 14, 65, 75, 25, 58])", "expected_output": "[14, 25, 22, 25, 35, 65, 75, 85, 58]"}, {"input": "raw_heap([4, 5, 6, 2])", "expected_output": "[2, 4, 6, 5]"}], "broken_test_cases": [{"input": "raw_heap([10, 20, 15, 30, 40])", "expected_output": "[10, 15, 20, 30, 40]"}], "dataset_name": "mbpp"}
{"task_id": 855, "description": "Write a python function to check for even parity of a given number.", "function_name": "check_Even_Parity", "correct_solution": "def check_Even_Parity(x): \r\n    parity = 0\r\n    while (x != 0): \r\n        x = x & (x - 1) \r\n        parity += 1\r\n    if (parity % 2 == 0): \r\n        return True\r\n    else: \r\n        return False", "test_cases": [{"input": "check_Even_Parity(10)", "expected_output": "True"}, {"input": "check_Even_Parity(11)", "expected_output": "False"}, {"input": "check_Even_Parity(18)", "expected_output": "True"}], "broken_test_cases": [{"input": "check_Even_Parity(7)", "expected_output": "True"}], "dataset_name": "mbpp"}
{"task_id": 856, "description": "Write a python function to find minimum adjacent swaps required to sort binary array.", "function_name": "find_Min_Swaps", "correct_solution": "def find_Min_Swaps(arr,n) : \r\n    noOfZeroes = [0] * n \r\n    count = 0 \r\n    noOfZeroes[n - 1] = 1 - arr[n - 1] \r\n    for i in range(n-2,-1,-1) : \r\n        noOfZeroes[i] = noOfZeroes[i + 1] \r\n        if (arr[i] == 0) : \r\n            noOfZeroes[i] = noOfZeroes[i] + 1\r\n    for i in range(0,n) : \r\n        if (arr[i] == 1) : \r\n            count = count + noOfZeroes[i] \r\n    return count ", "test_cases": [{"input": "find_Min_Swaps([1, 0, 1, 0], 4)", "expected_output": "3"}, {"input": "find_Min_Swaps([0, 1, 0], 3)", "expected_output": "1"}, {"input": "find_Min_Swaps([0, 0, 1, 1, 0], 5)", "expected_output": "2"}], "broken_test_cases": [{"input": "find_Min_Swaps([1, 1, 0, 0], 4)", "expected_output": "3"}], "dataset_name": "mbpp"}
{"task_id": 857, "description": "Write a function to list out the list of given strings individually using map function.", "function_name": "listify_list", "correct_solution": "def listify_list(list1):\r\n  result = list(map(list,list1)) \r\n  return result ", "test_cases": [{"input": "listify_list(['Red', 'Blue', 'Black', 'White', 'Pink'])", "expected_output": "[['R', 'e', 'd'], ['B', 'l', 'u', 'e'], ['B', 'l', 'a', 'c', 'k'], ['W', 'h', 'i', 't', 'e'], ['P', 'i', 'n', 'k']]"}, {"input": "listify_list(['python'])", "expected_output": "[['p', 'y', 't', 'h', 'o', 'n']]"}, {"input": "listify_list([' red ', 'green', ' black', 'blue ', ' orange', 'brown'])", "expected_output": "[[' ', 'r', 'e', 'd', ' '], ['g', 'r', 'e', 'e', 'n'], [' ', 'b', 'l', 'a', 'c', 'k'], ['b', 'l', 'u', 'e', ' '], [' ', 'o', 'r', 'a', 'n', 'g', 'e'], ['b', 'r', 'o', 'w', 'n']]"}], "broken_test_cases": [{"input": "listify_list(['abc', 'de', 'f'])", "expected_output": "[['abc'], ['de'], ['f']]"}], "dataset_name": "mbpp"}
{"task_id": 858, "description": "Write a function to count number of lists in a given list of lists and square the count.", "function_name": "count_list", "correct_solution": "def count_list(input_list): \r\n    return (len(input_list))**2", "test_cases": [{"input": "count_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])", "expected_output": "25"}, {"input": "count_list([[1, 3], [5, 7], [9, 11], [13, 15, 17]])", "expected_output": "16"}, {"input": "count_list([[2, 4], [[6, 8], [4, 5, 8]], [10, 12, 14]])", "expected_output": "9"}], "broken_test_cases": [{"input": "count_list([[], [], []])", "expected_output": "0"}], "dataset_name": "mbpp"}
{"task_id": 860, "description": "Write a function to check whether the given string is ending with only alphanumeric characters or not using regex.", "function_name": "check_alphanumeric", "correct_solution": "import re \r\nregex = '[a-zA-z0-9]$'\r\ndef check_alphanumeric(string): \r\n\tif(re.search(regex, string)): \r\n\t\treturn (\"Accept\") \r\n\telse: \r\n\t\treturn (\"Discard\") ", "test_cases": [{"input": "check_alphanumeric('dawood@')", "expected_output": "'Discard'"}, {"input": "check_alphanumeric('skdmsam326')", "expected_output": "'Accept'"}, {"input": "check_alphanumeric('cooltricks@')", "expected_output": "'Discard'"}], "broken_test_cases": [{"input": "check_alphanumeric('hello_world')", "expected_output": "'Accept'"}], "dataset_name": "mbpp"}
{"task_id": 861, "description": "Write a function to find all anagrams of a string in a given list of strings using lambda function.", "function_name": "anagram_lambda", "correct_solution": "from collections import Counter \r\ndef anagram_lambda(texts,str):\r\n  result = list(filter(lambda x: (Counter(str) == Counter(x)), texts)) \r\n  return result", "test_cases": [{"input": "anagram_lambda(['bcda', 'abce', 'cbda', 'cbea', 'adcb'], 'abcd')", "expected_output": "['bcda', 'cbda', 'adcb']"}, {"input": "anagram_lambda(['recitals', ' python'], 'articles')", "expected_output": "['recitals']"}, {"input": "anagram_lambda([' keep', ' abcdef', ' xyz'], ' peek')", "expected_output": "[' keep']"}], "broken_test_cases": [{"input": "anagram_lambda(['listen', 'silent', 'enlist', 'google', 'inlets', 'banana'], 'listen')", "expected_output": "['silent', 'enlist', 'inlets', 'listen', 'google']"}], "dataset_name": "mbpp"}
{"task_id": 862, "description": "Write a function to find the occurrences of n most common words in a given text.", "function_name": "n_common_words", "correct_solution": "from collections import Counter\r\nimport re\r\ndef n_common_words(text,n):\r\n  words = re.findall('\\w+',text)\r\n  n_common_words= Counter(words).most_common(n)\r\n  return list(n_common_words)", "test_cases": [{"input": "n_common_words('python is a programming language', 1)", "expected_output": "[('python', 1)]"}, {"input": "n_common_words('python is a programming language', 1)", "expected_output": "[('python', 1)]"}, {"input": "n_common_words('python is a programming language', 5)", "expected_output": "[('python', 1), ('is', 1), ('a', 1), ('programming', 1), ('language', 1)]"}], "broken_test_cases": [{"input": "n_common_words('apple banana apple orange banana banana apple', 2)", "expected_output": "[('orange', 1), ('banana', 3)]"}], "dataset_name": "mbpp"}
{"task_id": 863, "description": "Write a function to find the length of the longest sub-sequence such that elements in the subsequences are consecutive integers.", "function_name": "find_longest_conseq_subseq", "correct_solution": "def find_longest_conseq_subseq(arr, n): \r\n\tans = 0\r\n\tcount = 0\r\n\tarr.sort() \r\n\tv = [] \r\n\tv.append(arr[0]) \r\n\tfor i in range(1, n): \r\n\t\tif (arr[i] != arr[i - 1]): \r\n\t\t\tv.append(arr[i]) \r\n\tfor i in range(len(v)): \r\n\t\tif (i > 0 and v[i] == v[i - 1] + 1): \r\n\t\t\tcount += 1\r\n\t\telse: \r\n\t\t\tcount = 1\r\n\t\tans = max(ans, count) \r\n\treturn ans ", "test_cases": [{"input": "find_longest_conseq_subseq([1, 2, 2, 3], 4)", "expected_output": "3"}, {"input": "find_longest_conseq_subseq([1, 9, 3, 10, 4, 20, 2], 7)", "expected_output": "4"}, {"input": "find_longest_conseq_subseq([36, 41, 56, 35, 44, 33, 34, 92, 43, 32, 42], 11)", "expected_output": "5"}], "broken_test_cases": [{"input": "find_longest_conseq_subseq([5, 4, 100, 101, 102, 2, 3], 7)", "expected_output": "5"}], "dataset_name": "mbpp"}
{"task_id": 864, "description": "Write a function to find palindromes in a given list of strings using lambda function.", "function_name": "palindrome_lambda", "correct_solution": "def palindrome_lambda(texts):\r\n  result = list(filter(lambda x: (x == \"\".join(reversed(x))), texts))\r\n  return result", "test_cases": [{"input": "palindrome_lambda(['php', 'res', 'Python', 'abcd', 'Java', 'aaa'])", "expected_output": "['php', 'aaa']"}, {"input": "palindrome_lambda(['abcd', 'Python', 'abba', 'aba'])", "expected_output": "['abba', 'aba']"}, {"input": "palindrome_lambda(['abcd', 'abbccbba', 'abba', 'aba'])", "expected_output": "['abbccbba', 'abba', 'aba']"}], "broken_test_cases": [{"input": "palindrome_lambda(['Dad', 'mom', 'Noon', 'civic'])", "expected_output": "['Dad', 'Noon', 'civic']"}], "dataset_name": "mbpp"}
{"task_id": 865, "description": "Write a function to print n-times a list using map function.", "function_name": "ntimes_list", "correct_solution": "def ntimes_list(nums,n):\r\n    result = map(lambda x:n*x, nums) \r\n    return list(result)", "test_cases": [{"input": "ntimes_list([1, 2, 3, 4, 5, 6, 7], 3)", "expected_output": "[3, 6, 9, 12, 15, 18, 21]"}, {"input": "ntimes_list([1, 2, 3, 4, 5, 6, 7], 4)", "expected_output": "[4, 8, 12, 16, 20, 24, 28]"}, {"input": "ntimes_list([1, 2, 3, 4, 5, 6, 7], 10)", "expected_output": "[10, 20, 30, 40, 50, 60, 70]"}], "broken_test_cases": [{"input": "ntimes_list([2, 4, 6], 5)", "expected_output": "[10, 20, 18]"}], "dataset_name": "mbpp"}
{"task_id": 867, "description": "Write a python function to add a minimum number such that the sum of array becomes even.", "function_name": "min_Num", "correct_solution": "def min_Num(arr,n):  \r\n    odd = 0\r\n    for i in range(n): \r\n        if (arr[i] % 2): \r\n            odd += 1 \r\n    if (odd % 2): \r\n        return 1\r\n    return 2", "test_cases": [{"input": "min_Num([1, 2, 3, 4, 5, 6, 7, 8, 9], 9)", "expected_output": "1"}, {"input": "min_Num([1, 2, 3, 4, 5, 6, 7, 8], 8)", "expected_output": "2"}, {"input": "min_Num([1, 2, 3], 3)", "expected_output": "2"}], "broken_test_cases": [{"input": "min_Num([2, 4, 6], 3)", "expected_output": "1"}], "dataset_name": "mbpp"}
{"task_id": 868, "description": "Write a python function to find the length of the last word in a given string.", "function_name": "length_Of_Last_Word", "correct_solution": "def length_Of_Last_Word(a): \r\n    l = 0\r\n    x = a.strip() \r\n    for i in range(len(x)): \r\n        if x[i] == \" \": \r\n            l = 0\r\n        else: \r\n            l += 1\r\n    return l ", "test_cases": [{"input": "length_Of_Last_Word('python language')", "expected_output": "8"}, {"input": "length_Of_Last_Word('PHP')", "expected_output": "3"}, {"input": "length_Of_Last_Word('')", "expected_output": "0"}], "broken_test_cases": [{"input": "length_Of_Last_Word('hello world ')", "expected_output": "6"}], "dataset_name": "mbpp"}
{"task_id": 869, "description": "Write a function to remove sublists from a given list of lists, which are outside a given range.", "function_name": "remove_list_range", "correct_solution": "def remove_list_range(list1, leftrange, rigthrange):\r\n   result = [i for i in list1 if (min(i)>=leftrange and max(i)<=rigthrange)]\r\n   return result", "test_cases": [{"input": "remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]], 13, 17)", "expected_output": "[[13, 14, 15, 17]]"}, {"input": "remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]], 1, 3)", "expected_output": "[[2], [1, 2, 3]]"}, {"input": "remove_list_range([[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7], [9, 11], [13, 14, 15, 17]], 0, 7)", "expected_output": "[[2], [0], [1, 2, 3], [0, 1, 2, 3, 6, 7]]"}], "broken_test_cases": [{"input": "remove_list_range([[5, 10], [8, 12], [6, 7, 8], [9]], 6, 9)", "expected_output": "[[5, 10], [6, 7, 8], [9]]"}], "dataset_name": "mbpp"}
{"task_id": 871, "description": "Write a python function to check whether the given strings are rotations of each other or not.", "function_name": "are_Rotations", "correct_solution": "def are_Rotations(string1,string2): \r\n    size1 = len(string1) \r\n    size2 = len(string2) \r\n    temp = '' \r\n    if size1 != size2: \r\n        return False\r\n    temp = string1 + string1 \r\n    if (temp.count(string2)> 0): \r\n        return True\r\n    else: \r\n        return False", "test_cases": [{"input": "are_Rotations('abc', 'cba')", "expected_output": "False"}, {"input": "are_Rotations('abcd', 'cdba')", "expected_output": "False"}, {"input": "are_Rotations('abacd', 'cdaba')", "expected_output": "True"}], "broken_test_cases": [{"input": "are_Rotations('abc', 'ab')", "expected_output": "True"}], "dataset_name": "mbpp"}
{"task_id": 872, "description": "Write a function to check if a nested list is a subset of another nested list.", "function_name": "check_subset", "correct_solution": "def check_subset(list1,list2): \r\n    return all(map(list1.__contains__,list2)) ", "test_cases": [{"input": "check_subset([[1, 3], [5, 7], [9, 11], [13, 15, 17]], [[1, 3], [13, 15, 17]])", "expected_output": "True"}, {"input": "check_subset([[1, 2], [2, 3], [3, 4], [5, 6]], [[3, 4], [5, 6]])", "expected_output": "True"}, {"input": "check_subset([[[1, 2], [2, 3]], [[3, 4], [5, 7]]], [[[3, 4], [5, 6]]])", "expected_output": "False"}], "broken_test_cases": [{"input": "check_subset([[1, 2], [2, 3]], [[2, 3], [1, 2], [4, 5]])", "expected_output": "True"}], "dataset_name": "mbpp"}
{"task_id": 873, "description": "Write a function to solve the fibonacci sequence using recursion.", "function_name": "fibonacci", "correct_solution": "def fibonacci(n):\r\n  if n == 1 or n == 2:\r\n    return 1\r\n  else:\r\n    return (fibonacci(n - 1) + (fibonacci(n - 2)))", "test_cases": [{"input": "fibonacci(7)", "expected_output": "13"}, {"input": "fibonacci(8)", "expected_output": "21"}, {"input": "fibonacci(9)", "expected_output": "34"}], "broken_test_cases": [{"input": "fibonacci(5)", "expected_output": "8"}], "dataset_name": "mbpp"}
{"task_id": 874, "description": "Write a python function to check if the string is a concatenation of another string.", "function_name": "check_Concat", "correct_solution": "def check_Concat(str1,str2):\r\n    N = len(str1)\r\n    M = len(str2)\r\n    if (N % M != 0):\r\n        return False\r\n    for i in range(N):\r\n        if (str1[i] != str2[i % M]):\r\n            return False         \r\n    return True", "test_cases": [{"input": "check_Concat('abcabcabc', 'abc')", "expected_output": "True"}, {"input": "check_Concat('abcab', 'abc')", "expected_output": "False"}, {"input": "check_Concat('aba', 'ab')", "expected_output": "False"}], "broken_test_cases": [{"input": "check_Concat('aaaaab', 'a')", "expected_output": "True"}], "dataset_name": "mbpp"}
{"task_id": 875, "description": "Write a function to find the minimum difference in the tuple pairs of given tuples.", "function_name": "min_difference", "correct_solution": "def min_difference(test_list):\r\n  temp = [abs(b - a) for a, b in test_list]\r\n  res = min(temp)\r\n  return (res) ", "test_cases": [{"input": "min_difference([(3, 5), (1, 7), (10, 3), (1, 2)])", "expected_output": "1"}, {"input": "min_difference([(4, 6), (12, 8), (11, 4), (2, 13)])", "expected_output": "2"}, {"input": "min_difference([(5, 17), (3, 9), (12, 5), (3, 24)])", "expected_output": "6"}], "broken_test_cases": [{"input": "min_difference([(7, 7), (3, 8), (10, 4)])", "expected_output": "2"}], "dataset_name": "mbpp"}
{"task_id": 876, "description": "Write a python function to find lcm of two positive integers.", "function_name": "lcm", "correct_solution": "def lcm(x, y):\r\n   if x > y:\r\n       z = x\r\n   else:\r\n       z = y\r\n   while(True):\r\n       if((z % x == 0) and (z % y == 0)):\r\n           lcm = z\r\n           break\r\n       z += 1\r\n   return lcm", "test_cases": [{"input": "lcm(4, 6)", "expected_output": "12"}, {"input": "lcm(15, 17)", "expected_output": "255"}, {"input": "lcm(2, 6)", "expected_output": "6"}], "broken_test_cases": [{"input": "lcm(5, 0)", "expected_output": "5"}], "dataset_name": "mbpp"}
{"task_id": 877, "description": "Write a python function to sort the given string.", "function_name": "sort_String", "correct_solution": "def sort_String(str) : \r\n    str = ''.join(sorted(str)) \r\n    return (str) ", "test_cases": [{"input": "sort_String('cba')", "expected_output": "'abc'"}, {"input": "sort_String('data')", "expected_output": "'aadt'"}, {"input": "sort_String('zxy')", "expected_output": "'xyz'"}], "broken_test_cases": [{"input": "sort_String('hello')", "expected_output": "'hello'"}], "dataset_name": "mbpp"}
{"task_id": 878, "description": "Write a function to check if the given tuple contains only k elements.", "function_name": "check_tuples", "correct_solution": "def check_tuples(test_tuple, K):\r\n  res = all(ele in K for ele in test_tuple)\r\n  return (res) ", "test_cases": [{"input": "check_tuples((3, 5, 6, 5, 3, 6), [3, 6, 5])", "expected_output": "True"}, {"input": "check_tuples((4, 5, 6, 4, 6, 5), [4, 5, 6])", "expected_output": "True"}, {"input": "check_tuples((9, 8, 7, 6, 8, 9), [9, 8, 1])", "expected_output": "False"}], "broken_test_cases": [{"input": "check_tuples((), [1, 2, 3])", "expected_output": "False"}], "dataset_name": "mbpp"}
{"task_id": 879, "description": "Write a function that matches a string that has an 'a' followed by anything, ending in 'b' by using regex.", "function_name": "text_match", "correct_solution": "import re\r\ndef text_match(text):\r\n  patterns = 'a.*?b$'\r\n  if re.search(patterns,  text):\r\n    return ('Found a match!')\r\n  else:\r\n    return ('Not matched!')", "test_cases": [{"input": "text_match('aabbbbd')", "expected_output": "'Not matched!'"}, {"input": "text_match('aabAbbbc')", "expected_output": "'Not matched!'"}, {"input": "text_match('accddbbjjjb')", "expected_output": "'Found a match!'"}], "broken_test_cases": [{"input": "text_match('babab')", "expected_output": "'Not matched!'"}], "dataset_name": "mbpp"}
{"task_id": 880, "description": "Write a python function to find number of solutions in quadratic equation.", "function_name": "Check_Solution", "correct_solution": "def Check_Solution(a,b,c) : \r\n    if ((b*b) - (4*a*c)) > 0 : \r\n        return (\"2 solutions\") \r\n    elif ((b*b) - (4*a*c)) == 0 : \r\n        return (\"1 solution\") \r\n    else : \r\n        return (\"No solutions\") ", "test_cases": [{"input": "Check_Solution(2, 5, 2)", "expected_output": "'2 solutions'"}, {"input": "Check_Solution(1, 1, 1)", "expected_output": "'No solutions'"}, {"input": "Check_Solution(1, 2, 1)", "expected_output": "'1 solution'"}], "broken_test_cases": [{"input": "Check_Solution(1, 4, 4)", "expected_output": "\"2 solutions\""}], "dataset_name": "mbpp"}
{"task_id": 881, "description": "Write a function to find the sum of first even and odd number of a given list.", "function_name": "sum_even_odd", "correct_solution": "def sum_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even+first_odd)", "test_cases": [{"input": "sum_even_odd([1, 3, 5, 7, 4, 1, 6, 8])", "expected_output": "5"}, {"input": "sum_even_odd([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])", "expected_output": "3"}, {"input": "sum_even_odd([1, 5, 7, 9, 10])", "expected_output": "11"}], "broken_test_cases": [{"input": "sum_even_odd([2, 4, 6, 8])", "expected_output": "4"}], "dataset_name": "mbpp"}
{"task_id": 882, "description": "Write a function to caluclate perimeter of a parallelogram.", "function_name": "parallelogram_perimeter", "correct_solution": "def parallelogram_perimeter(b,h):\r\n  perimeter=2*(b*h)\r\n  return perimeter", "test_cases": [{"input": "parallelogram_perimeter(10, 20)", "expected_output": "400"}, {"input": "parallelogram_perimeter(15, 20)", "expected_output": "600"}, {"input": "parallelogram_perimeter(8, 9)", "expected_output": "144"}], "broken_test_cases": [{"input": "parallelogram_perimeter(7, 5)", "expected_output": "24"}], "dataset_name": "mbpp"}
{"task_id": 883, "description": "Write a function to find numbers divisible by m and n from a list of numbers using lambda function.", "function_name": "div_of_nums", "correct_solution": "def div_of_nums(nums,m,n):\r\n result = list(filter(lambda x: (x % m == 0 and x % n == 0), nums)) \r\n return result", "test_cases": [{"input": "div_of_nums([19, 65, 57, 39, 152, 639, 121, 44, 90, 190], 2, 4)", "expected_output": "[152, 44]"}, {"input": "div_of_nums([1, 2, 3, 5, 7, 8, 10], 2, 5)", "expected_output": "[10]"}, {"input": "div_of_nums([10, 15, 14, 13, 18, 12, 20], 10, 5)", "expected_output": "[10, 20]"}], "broken_test_cases": [{"input": "div_of_nums([6, 12, 18, 24, 36, 48], 3, 8)", "expected_output": "[12, 24, 36, 48]"}], "dataset_name": "mbpp"}
{"task_id": 885, "description": "Write a python function to check whether the two given strings are isomorphic to each other or not.", "function_name": "is_Isomorphic", "correct_solution": "def is_Isomorphic(str1,str2):          \r\n    dict_str1 = {}\r\n    dict_str2 = {}\r\n    for i, value in enumerate(str1):\r\n        dict_str1[value] = dict_str1.get(value,[]) + [i]        \r\n    for j, value in enumerate(str2):\r\n        dict_str2[value] = dict_str2.get(value,[]) + [j]\r\n    if sorted(dict_str1.values()) == sorted(dict_str2.values()):\r\n        return True\r\n    else:\r\n        return False", "test_cases": [{"input": "is_Isomorphic('paper', 'title')", "expected_output": "True"}, {"input": "is_Isomorphic('ab', 'ba')", "expected_output": "True"}, {"input": "is_Isomorphic('ab', 'aa')", "expected_output": "False"}], "broken_test_cases": [{"input": "is_Isomorphic('foo', 'bar')", "expected_output": "True"}], "dataset_name": "mbpp"}
{"task_id": 886, "description": "Write a function to add all the numbers in a list and divide it with the length of the list.", "function_name": "sum_num", "correct_solution": "def sum_num(numbers):\r\n    total = 0\r\n    for x in numbers:\r\n        total += x\r\n    return total/len(numbers) ", "test_cases": [{"input": "sum_num((8, 2, 3, 0, 7))", "expected_output": "4.0"}, {"input": "sum_num((-10, -20, -30))", "expected_output": "-20.0"}, {"input": "sum_num((19, 15, 18))", "expected_output": "17.333333333333332"}], "broken_test_cases": [{"input": "sum_num([5, 10, 15])", "expected_output": "30"}], "dataset_name": "mbpp"}
{"task_id": 887, "description": "Write a python function to check whether the given number is odd or not using bitwise operator.", "function_name": "is_odd", "correct_solution": "def is_odd(n) : \r\n    if (n^1 == n-1) :\r\n        return True; \r\n    else :\r\n        return False; ", "test_cases": [{"input": "is_odd(5)", "expected_output": "True"}, {"input": "is_odd(6)", "expected_output": "False"}, {"input": "is_odd(7)", "expected_output": "True"}], "broken_test_cases": [{"input": "is_odd(-2)", "expected_output": "True"}], "dataset_name": "mbpp"}
{"task_id": 888, "description": "Write a function to substract the elements of the given nested tuples.", "function_name": "substract_elements", "correct_solution": "def substract_elements(test_tup1, test_tup2):\r\n  res = tuple(tuple(a - b for a, b in zip(tup1, tup2))\r\n   for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res) ", "test_cases": [{"input": "substract_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3)))", "expected_output": "((-5, -4), (1, -4), (1, 8), (-6, 7))"}, {"input": "substract_elements(((13, 4), (14, 6), (13, 10), (12, 11)), ((19, 8), (14, 10), (12, 2), (18, 4)))", "expected_output": "((-6, -4), (0, -4), (1, 8), (-6, 7))"}, {"input": "substract_elements(((19, 5), (18, 7), (19, 11), (17, 12)), ((12, 9), (17, 11), (13, 3), (19, 5)))", "expected_output": "((7, -4), (1, -4), (6, 8), (-2, 7))"}], "broken_test_cases": [{"input": "substract_elements(((5, 8), (10, 3)), ((2, 4), (1, 2)))", "expected_output": "((7, 12), (11, 5))"}], "dataset_name": "mbpp"}
{"task_id": 891, "description": "Write a python function to check whether the given two numbers have same number of digits or not.", "function_name": "same_Length", "correct_solution": "def same_Length(A,B): \r\n    while (A > 0 and B > 0): \r\n        A = A / 10; \r\n        B = B / 10; \r\n    if (A == 0 and B == 0): \r\n        return True; \r\n    return False; ", "test_cases": [{"input": "same_Length(12, 1)", "expected_output": "False"}, {"input": "same_Length(2, 2)", "expected_output": "True"}, {"input": "same_Length(10, 20)", "expected_output": "True"}], "broken_test_cases": [{"input": "same_Length(-10, 10)", "expected_output": "True"}], "dataset_name": "mbpp"}
{"task_id": 892, "description": "Write a function to remove multiple spaces in a string.", "function_name": "remove_spaces", "correct_solution": "import re\r\ndef remove_spaces(text):\r\n return (re.sub(' +',' ',text))", "test_cases": [{"input": "remove_spaces('python  program')", "expected_output": "'python program'"}, {"input": "remove_spaces('python   programming    language')", "expected_output": "'python programming language'"}, {"input": "remove_spaces('python                     program')", "expected_output": "'python program'"}], "broken_test_cases": [{"input": "remove_spaces('   hello   world   ')", "expected_output": "'helloworld'"}], "dataset_name": "mbpp"}
{"task_id": 893, "description": "Write a python function to get the last element of each sublist.", "function_name": "Extract", "correct_solution": "def Extract(lst): \r\n    return [item[-1] for item in lst] ", "test_cases": [{"input": "Extract([[1, 2, 3], [4, 5], [6, 7, 8, 9]])", "expected_output": "[3, 5, 9]"}, {"input": "Extract([['x', 'y', 'z'], ['m'], ['a', 'b'], ['u', 'v']])", "expected_output": "['z', 'm', 'b', 'v']"}, {"input": "Extract([[1, 2, 3], [4, 5]])", "expected_output": "[3, 5]"}], "broken_test_cases": [{"input": "Extract([[1, 2], [], [3, 4, 5]])", "expected_output": "[2, 4, 5]"}], "dataset_name": "mbpp"}
{"task_id": 894, "description": "Write a function to convert the given string of float type into tuple.", "function_name": "float_to_tuple", "correct_solution": "def float_to_tuple(test_str):\r\n  res = tuple(map(float, test_str.split(', ')))\r\n  return (res) ", "test_cases": [{"input": "float_to_tuple('1.2, 1.3, 2.3, 2.4, 6.5')", "expected_output": "(1.2, 1.3, 2.3, 2.4, 6.5)"}, {"input": "float_to_tuple('2.3, 2.4, 5.6, 5.4, 8.9')", "expected_output": "(2.3, 2.4, 5.6, 5.4, 8.9)"}, {"input": "float_to_tuple('0.3, 0.5, 7.8, 9.4')", "expected_output": "(0.3, 0.5, 7.8, 9.4)"}], "broken_test_cases": [{"input": "float_to_tuple('1.2, 3.4, 5.6')", "expected_output": "(1.2, 3.4, 5.6, 7.8)"}], "dataset_name": "mbpp"}
{"task_id": 895, "description": "Write a function to find the maximum sum of subsequences of given array with no adjacent elements.", "function_name": "max_sum_subseq", "correct_solution": "def max_sum_subseq(A):\r\n    n = len(A)\r\n    if n == 1:\r\n        return A[0]\r\n    look_up = [None] * n\r\n    look_up[0] = A[0]\r\n    look_up[1] = max(A[0], A[1])\r\n    for i in range(2, n):\r\n        look_up[i] = max(look_up[i - 1], look_up[i - 2] + A[i])\r\n        look_up[i] = max(look_up[i], A[i])\r\n    return look_up[n - 1]", "test_cases": [{"input": "max_sum_subseq([1, 2, 9, 4, 5, 0, 4, 11, 6])", "expected_output": "26"}, {"input": "max_sum_subseq([1, 2, 9, 5, 6, 0, 5, 12, 7])", "expected_output": "28"}, {"input": "max_sum_subseq([1, 3, 10, 5, 6, 0, 6, 14, 21])", "expected_output": "44"}], "broken_test_cases": [{"input": "max_sum_subseq([4, 5, 4, 6, 7])", "expected_output": "22"}], "dataset_name": "mbpp"}
{"task_id": 897, "description": "Write a python function to check whether the word is present in a given sentence or not.", "function_name": "is_Word_Present", "correct_solution": "def is_Word_Present(sentence,word): \r\n    s = sentence.split(\" \") \r\n    for i in s:  \r\n        if (i == word): \r\n            return True\r\n    return False", "test_cases": [{"input": "is_Word_Present('machine learning', 'machine')", "expected_output": "True"}, {"input": "is_Word_Present('easy', 'fun')", "expected_output": "False"}, {"input": "is_Word_Present('python language', 'code')", "expected_output": "False"}], "broken_test_cases": [{"input": "is_Word_Present('Machine learning is fun', 'machine')", "expected_output": "True"}], "dataset_name": "mbpp"}
{"task_id": 898, "description": "Write a function to extract specified number of elements from a given list, which follow each other continuously.", "function_name": "extract_elements", "correct_solution": "from itertools import groupby \r\ndef extract_elements(numbers, n):\r\n    result = [i for i, j in groupby(numbers) if len(list(j)) == n] \r\n    return result", "test_cases": [{"input": "extract_elements([1, 1, 3, 4, 4, 5, 6, 7], 2)", "expected_output": "[1, 4]"}, {"input": "extract_elements([0, 1, 2, 3, 4, 4, 4, 4, 5, 7], 4)", "expected_output": "[4]"}, {"input": "extract_elements([0, 0, 0, 0, 0], 5)", "expected_output": "[0]"}], "broken_test_cases": [{"input": "extract_elements([2, 2, 3, 3, 3, 2], 2)", "expected_output": "[2, 3]"}], "dataset_name": "mbpp"}
{"task_id": 900, "description": "Write a function where a string will start with a specific number.", "function_name": "match_num", "correct_solution": "import re\r\ndef match_num(string):\r\n    text = re.compile(r\"^5\")\r\n    if text.match(string):\r\n        return True\r\n    else:\r\n        return False", "test_cases": [{"input": "match_num('5-2345861')", "expected_output": "True"}, {"input": "match_num('6-2345861')", "expected_output": "False"}, {"input": "match_num('78910')", "expected_output": "False"}], "broken_test_cases": [{"input": "match_num('     5abc')", "expected_output": "True"}], "dataset_name": "mbpp"}
{"task_id": 901, "description": "Write a function to find the smallest multiple of the first n numbers.", "function_name": "smallest_multiple", "correct_solution": "def smallest_multiple(n):\r\n    if (n<=2):\r\n      return n\r\n    i = n * 2\r\n    factors = [number  for number in range(n, 1, -1) if number * 2 > n]\r\n    while True:\r\n        for a in factors:\r\n            if i % a != 0:\r\n                i += n\r\n                break\r\n            if (a == factors[-1] and i % a == 0):\r\n                return i", "test_cases": [{"input": "smallest_multiple(13)", "expected_output": "360360"}, {"input": "smallest_multiple(2)", "expected_output": "2"}, {"input": "smallest_multiple(1)", "expected_output": "1"}], "broken_test_cases": [{"input": "smallest_multiple(5)", "expected_output": "10"}], "dataset_name": "mbpp"}
{"task_id": 902, "description": "Write a function to combine two dictionaries by adding values for common keys.", "function_name": "add_dict", "correct_solution": "from collections import Counter\r\ndef add_dict(d1,d2):\r\n   add_dict = Counter(d1) + Counter(d2)\r\n   return add_dict", "test_cases": [{"input": "add_dict({'a': 100, 'b': 200, 'c': 300}, {'a': 300, 'b': 200, 'd': 400})", "expected_output": "{'b': 400, 'd': 400, 'a': 400, 'c': 300}"}, {"input": "add_dict({'a': 500, 'b': 700, 'c': 900}, {'a': 500, 'b': 600, 'd': 900})", "expected_output": "{'b': 1300, 'd': 900, 'a': 1000, 'c': 900}"}, {"input": "add_dict({'a': 900, 'b': 900, 'd': 900}, {'a': 900, 'b': 900, 'd': 900})", "expected_output": "{'b': 1800, 'd': 1800, 'a': 1800}"}], "broken_test_cases": [{"input": "add_dict({'x': 1, 'y': 2}, {'x': -1, 'z': 3})", "expected_output": "{'x': 1, 'y': 2, 'z': 3}"}], "dataset_name": "mbpp"}
{"task_id": 903, "description": "Write a python function to count the total unset bits from 1 to n.", "function_name": "count_Unset_Bits", "correct_solution": "def count_Unset_Bits(n) :  \r\n    cnt = 0;  \r\n    for i in range(1,n + 1) : \r\n        temp = i;  \r\n        while (temp) :  \r\n            if (temp % 2 == 0) : \r\n                cnt += 1;  \r\n            temp = temp // 2;  \r\n    return cnt;  ", "test_cases": [{"input": "count_Unset_Bits(2)", "expected_output": "1"}, {"input": "count_Unset_Bits(5)", "expected_output": "4"}, {"input": "count_Unset_Bits(14)", "expected_output": "17"}], "broken_test_cases": [{"input": "count_Unset_Bits(8)", "expected_output": "10"}], "dataset_name": "mbpp"}
{"task_id": 904, "description": "Write a function to return true if the given number is even else return false.", "function_name": "even_num", "correct_solution": "def even_num(x):\r\n  if x%2==0:\r\n     return True\r\n  else:\r\n    return False", "test_cases": [{"input": "even_num(13.5)", "expected_output": "False"}, {"input": "even_num(0)", "expected_output": "True"}, {"input": "even_num(-9)", "expected_output": "False"}], "broken_test_cases": [{"input": "even_num(2)", "expected_output": "False"}], "dataset_name": "mbpp"}
{"task_id": 906, "description": "Write a function to extract year, month and date from a url by using regex.", "function_name": "extract_date", "correct_solution": "import re\r\ndef extract_date(url):\r\n        return re.findall(r'/(\\d{4})/(\\d{1,2})/(\\d{1,2})/', url)", "test_cases": [{"input": "extract_date('https://www.washingtonpost.com/news/football-insider/wp/2016/09/02/odell-beckhams-fame-rests-on-one-stupid-little-ball-josh-norman-tells-author/')", "expected_output": "[('2016', '09', '02')]"}, {"input": "extract_date('https://www.indiatoday.in/movies/celebrities/story/wp/2020/11/03/odeof-sushant-singh-rajput-s-death-his-brother-in-law-shares-advice-for-fans-1749646/')", "expected_output": "[('2020', '11', '03')]"}, {"input": "extract_date('https://economictimes.indiatimes.com/news/economy/2020/12/29/finance/pension-assets-under-pfrda-touch-rs-5-32-lakh-crore/articleshow/79736619.cms')", "expected_output": "[('2020', '12', '29')]"}], "broken_test_cases": [{"input": "extract_date('https://example.com/archive/2018/2/7/')", "expected_output": "[('2018', '02', '07')]"}], "dataset_name": "mbpp"}
{"task_id": 907, "description": "Write a function to print the first n lucky numbers.", "function_name": "lucky_num", "correct_solution": "def lucky_num(n):\r\n List=range(-1,n*n+9,2)\r\n i=2\r\n while List[i:]:List=sorted(set(List)-set(List[List[i]::List[i]]));i+=1\r\n return List[1:n+1]", "test_cases": [{"input": "lucky_num(10)", "expected_output": "[1, 3, 7, 9, 13, 15, 21, 25, 31, 33]"}, {"input": "lucky_num(5)", "expected_output": "[1, 3, 7, 9, 13]"}, {"input": "lucky_num(8)", "expected_output": "[1, 3, 7, 9, 13, 15, 21, 25]"}], "broken_test_cases": [{"input": "lucky_num(7)", "expected_output": "[1, 3, 5, 7, 9, 11, 13]"}], "dataset_name": "mbpp"}
{"task_id": 909, "description": "Write a function to find the previous palindrome of a specified number.", "function_name": "previous_palindrome", "correct_solution": "def previous_palindrome(num):\r\n    for x in range(num-1,0,-1):\r\n        if str(x) == str(x)[::-1]:\r\n            return x", "test_cases": [{"input": "previous_palindrome(99)", "expected_output": "88"}, {"input": "previous_palindrome(1221)", "expected_output": "1111"}, {"input": "previous_palindrome(120)", "expected_output": "111"}], "broken_test_cases": [{"input": "previous_palindrome(101)", "expected_output": "101"}], "dataset_name": "mbpp"}
{"task_id": 910, "description": "Write a function to validate a gregorian date.", "function_name": "check_date", "correct_solution": "import datetime\r\ndef check_date(m, d, y):\r\n    try:\r\n        m, d, y = map(int, (m, d, y))\r\n        datetime.date(y, m, d)\r\n        return True\r\n    except ValueError:\r\n        return False", "test_cases": [{"input": "check_date(11, 11, 2002)", "expected_output": "True"}, {"input": "check_date(13, 11, 2002)", "expected_output": "False"}, {"input": "check_date('11', '11', '2002')", "expected_output": "True"}], "broken_test_cases": [{"input": "check_date(2, 29, 2019)", "expected_output": "True"}], "dataset_name": "mbpp"}
{"task_id": 911, "description": "Write a function to compute maximum product of three numbers of a given array of integers using heap queue algorithm.", "function_name": "maximum_product", "correct_solution": "def maximum_product(nums):\r\n    import heapq\r\n    a, b = heapq.nlargest(3, nums), heapq.nsmallest(2, nums)\r\n    return max(a[0] * a[1] * a[2], a[0] * b[0] * b[1])", "test_cases": [{"input": "maximum_product([12, 74, 9, 50, 61, 41])", "expected_output": "225700"}, {"input": "maximum_product([25, 35, 22, 85, 14, 65, 75, 25, 58])", "expected_output": "414375"}, {"input": "maximum_product([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])", "expected_output": "2520"}], "broken_test_cases": [{"input": "maximum_product([-5, -4, 1, 2, 3])", "expected_output": "6"}], "dataset_name": "mbpp"}
{"task_id": 912, "description": "Write a function to find ln, m lobb number.", "function_name": "int", "correct_solution": "def binomial_coeff(n, k): \r\n\tC = [[0 for j in range(k + 1)] \r\n\t\t\tfor i in range(n + 1)] \r\n\tfor i in range(0, n + 1): \r\n\t\tfor j in range(0, min(i, k) + 1): \r\n\t\t\tif (j == 0 or j == i): \r\n\t\t\t\tC[i][j] = 1\r\n\t\t\telse: \r\n\t\t\t\tC[i][j] = (C[i - 1][j - 1] \r\n\t\t\t\t\t\t\t+ C[i - 1][j]) \r\n\treturn C[n][k] \r\ndef lobb_num(n, m): \r\n\treturn (((2 * m + 1) *\r\n\t\tbinomial_coeff(2 * n, m + n)) \r\n\t\t\t\t\t/ (m + n + 1))", "test_cases": [{"input": "int(lobb_num(5, 3))", "expected_output": "35"}, {"input": "int(lobb_num(3, 2))", "expected_output": "5"}, {"input": "int(lobb_num(4, 2))", "expected_output": "20"}], "broken_test_cases": [{"input": "int(lobb_num(2, 1))", "expected_output": "4"}], "dataset_name": "mbpp"}
{"task_id": 913, "description": "Write a function to check for a number at the end of a string.", "function_name": "end_num", "correct_solution": "import re\r\ndef end_num(string):\r\n    text = re.compile(r\".*[0-9]$\")\r\n    if text.match(string):\r\n        return True\r\n    else:\r\n        return False", "test_cases": [{"input": "end_num('abcdef')", "expected_output": "False"}, {"input": "end_num('abcdef7')", "expected_output": "True"}, {"input": "end_num('abc')", "expected_output": "False"}], "broken_test_cases": [{"input": "end_num('abc123!')", "expected_output": "True"}], "dataset_name": "mbpp"}
{"task_id": 914, "description": "Write a python function to check whether the given string is made up of two alternating characters or not.", "function_name": "is_Two_Alter", "correct_solution": "def is_Two_Alter(s):  \r\n    for i in range (len( s) - 2) : \r\n        if (s[i] != s[i + 2]) : \r\n            return False\r\n    if (s[0] == s[1]): \r\n        return False\r\n    return True", "test_cases": [{"input": "is_Two_Alter('abab')", "expected_output": "True"}, {"input": "is_Two_Alter('aaaa')", "expected_output": "False"}, {"input": "is_Two_Alter('xyz')", "expected_output": "False"}], "broken_test_cases": [{"input": "is_Two_Alter('a')", "expected_output": "True"}], "dataset_name": "mbpp"}
{"task_id": 915, "description": "Write a function to rearrange positive and negative numbers in a given array using lambda function.", "function_name": "rearrange_numbs", "correct_solution": "def rearrange_numbs(array_nums):\r\n  result = sorted(array_nums, key = lambda i: 0 if i == 0 else -1 / i)\r\n  return result ", "test_cases": [{"input": "rearrange_numbs([-1, 2, -3, 5, 7, 8, 9, -10])", "expected_output": "[2, 5, 7, 8, 9, -10, -3, -1]"}, {"input": "rearrange_numbs([10, 15, 14, 13, -18, 12, -20])", "expected_output": "[10, 12, 13, 14, 15, -20, -18]"}, {"input": "rearrange_numbs([-20, 20, -10, 10, -30, 30])", "expected_output": "[10, 20, 30, -30, -20, -10]"}], "broken_test_cases": [{"input": "rearrange_numbs([-5, 3, 0, -2, 4, -1])", "expected_output": "[0, 3, 4, -1, -2, -5]"}], "dataset_name": "mbpp"}
{"task_id": 916, "description": "Write a function to find if there is a triplet in the array whose sum is equal to a given value.", "function_name": "find_triplet_array", "correct_solution": "def find_triplet_array(A, arr_size, sum): \r\n\tfor i in range( 0, arr_size-2): \r\n\t\tfor j in range(i + 1, arr_size-1): \r\n\t\t\tfor k in range(j + 1, arr_size): \r\n\t\t\t\tif A[i] + A[j] + A[k] == sum: \r\n\t\t\t\t\treturn  A[i],A[j],A[k] \r\n\t\t\t\t\treturn True\r\n\treturn False", "test_cases": [{"input": "find_triplet_array([1, 4, 45, 6, 10, 8], 6, 22)", "expected_output": "(4, 10, 8)"}, {"input": "find_triplet_array([12, 3, 5, 2, 6, 9], 6, 24)", "expected_output": "(12, 3, 9)"}, {"input": "find_triplet_array([1, 2, 3, 4, 5], 5, 9)", "expected_output": "(1, 3, 5)"}], "broken_test_cases": [{"input": "find_triplet_array([2, 4, 7, 1, 5], 5, 30)", "expected_output": "(2, 7, 21)"}], "dataset_name": "mbpp"}
{"task_id": 917, "description": "Write a function to find the sequences of one upper case letter followed by lower case letters.", "function_name": "text_uppercase_lowercase", "correct_solution": "import re\r\ndef text_uppercase_lowercase(text):\r\n        patterns = '[A-Z]+[a-z]+$'\r\n        if re.search(patterns, text):\r\n                return 'Found a match!'\r\n        else:\r\n                return ('Not matched!')", "test_cases": [{"input": "text_uppercase_lowercase('AaBbGg')", "expected_output": "'Found a match!'"}, {"input": "text_uppercase_lowercase('aA')", "expected_output": "'Not matched!'"}, {"input": "text_uppercase_lowercase('PYTHON')", "expected_output": "'Not matched!'"}], "broken_test_cases": [{"input": "text_uppercase_lowercase(\"AbcDef\")", "expected_output": "'Found a match!'"}], "dataset_name": "mbpp"}
{"task_id": 918, "description": "Write a function to count coin change.", "function_name": "coin_change", "correct_solution": "def coin_change(S, m, n): \r\n    table = [[0 for x in range(m)] for x in range(n+1)] \r\n    for i in range(m): \r\n        table[0][i] = 1\r\n    for i in range(1, n+1): \r\n        for j in range(m): \r\n            x = table[i - S[j]][j] if i-S[j] >= 0 else 0\r\n            y = table[i][j-1] if j >= 1 else 0 \r\n            table[i][j] = x + y   \r\n    return table[n][m-1] ", "test_cases": [{"input": "coin_change([1, 2, 3], 3, 4)", "expected_output": "4"}, {"input": "coin_change([4, 5, 6, 7, 8, 9], 6, 9)", "expected_output": "2"}, {"input": "coin_change([4, 5, 6, 7, 8, 9], 6, 4)", "expected_output": "1"}], "broken_test_cases": [{"input": "coin_change([2], 1, 3)", "expected_output": "1"}], "dataset_name": "mbpp"}
{"task_id": 919, "description": "Write a python function to multiply all items in the list.", "function_name": "multiply_list", "correct_solution": "def multiply_list(items):\r\n    tot = 1\r\n    for x in items:\r\n        tot *= x\r\n    return tot", "test_cases": [{"input": "multiply_list([1, -2, 3])", "expected_output": "-6"}, {"input": "multiply_list([1, 2, 3, 4])", "expected_output": "24"}, {"input": "multiply_list([3, 1, 2, 3])", "expected_output": "18"}], "broken_test_cases": [{"input": "multiply_list([2, 4, 0])", "expected_output": "8"}], "dataset_name": "mbpp"}
{"task_id": 920, "description": "Write a function to remove all tuples with all none values in the given tuple list.", "function_name": "remove_tuple", "correct_solution": "def remove_tuple(test_list):\r\n  res = [sub for sub in test_list if not all(ele == None for ele in sub)]\r\n  return (str(res)) ", "test_cases": [{"input": "remove_tuple([(None, 2), (None, None), (3, 4), (12, 3), (None,)])", "expected_output": "'[(None, 2), (3, 4), (12, 3)]'"}, {"input": "remove_tuple([(None, None), (None, None), (3, 6), (17, 3), (None, 1)])", "expected_output": "'[(3, 6), (17, 3), (None, 1)]'"}, {"input": "remove_tuple([(1, 2), (2, None), (3, None), (24, 3), (None, None)])", "expected_output": "'[(1, 2), (2, None), (3, None), (24, 3)]'"}], "broken_test_cases": [{"input": "remove_tuple([(None, None), (None,), (None, None, None)])", "expected_output": "'[(None, None), (None,), (None, None, None)]'"}], "dataset_name": "mbpp"}
{"task_id": 921, "description": "Write a function to perform chunking of tuples each of size n.", "function_name": "chunk_tuples", "correct_solution": "def chunk_tuples(test_tup, N):\r\n  res = [test_tup[i : i + N] for i in range(0, len(test_tup), N)]\r\n  return (res) ", "test_cases": [{"input": "chunk_tuples((10, 4, 5, 6, 7, 6, 8, 3, 4), 3)", "expected_output": "[(10, 4, 5), (6, 7, 6), (8, 3, 4)]"}, {"input": "chunk_tuples((1, 2, 3, 4, 5, 6, 7, 8, 9), 2)", "expected_output": "[(1, 2), (3, 4), (5, 6), (7, 8), (9,)]"}, {"input": "chunk_tuples((11, 14, 16, 17, 19, 21, 22, 25), 4)", "expected_output": "[(11, 14, 16, 17), (19, 21, 22, 25)]"}], "broken_test_cases": [{"input": "chunk_tuples((1, 2, 3, 4, 5, 6), 4)", "expected_output": "[(1, 2, 3, 4), (6,)]"}], "dataset_name": "mbpp"}
{"task_id": 922, "description": "Write a function to find a pair with the highest product from a given array of integers.", "function_name": "max_product", "correct_solution": "def max_product(arr): \r\n    arr_len = len(arr) \r\n    if (arr_len < 2): \r\n        return None     \r\n    x = arr[0]; y = arr[1]    \r\n    for i in range(0, arr_len): \r\n        for j in range(i + 1, arr_len): \r\n            if (arr[i] * arr[j] > x * y): \r\n                x = arr[i]; y = arr[j] \r\n    return x,y   ", "test_cases": [{"input": "max_product([1, 2, 3, 4, 7, 0, 8, 4])", "expected_output": "(7, 8)"}, {"input": "max_product([0, -1, -2, -4, 5, 0, -6])", "expected_output": "(-4, -6)"}, {"input": "max_product([1, 3, 5, 6, 8, 9])", "expected_output": "(8, 9)"}], "broken_test_cases": [{"input": "max_product([-10, -3, 5, 6, -2])", "expected_output": "(5, 6)"}], "dataset_name": "mbpp"}
{"task_id": 924, "description": "Write a function to find maximum of two numbers.", "function_name": "max_of_two", "correct_solution": "def max_of_two( x, y ):\r\n    if x > y:\r\n        return x\r\n    return y", "test_cases": [{"input": "max_of_two(10, 20)", "expected_output": "20"}, {"input": "max_of_two(19, 15)", "expected_output": "19"}, {"input": "max_of_two(-10, -20)", "expected_output": "-10"}], "broken_test_cases": [{"input": "max_of_two(7, 9)", "expected_output": "7"}], "dataset_name": "mbpp"}
{"task_id": 925, "description": "Write a python function to calculate the product of all the numbers of a given tuple.", "function_name": "mutiple_tuple", "correct_solution": "def mutiple_tuple(nums):\r\n    temp = list(nums)\r\n    product = 1 \r\n    for x in temp:\r\n        product *= x\r\n    return product", "test_cases": [{"input": "mutiple_tuple((4, 3, 2, 2, -1, 18))", "expected_output": "-864"}, {"input": "mutiple_tuple((1, 2, 3))", "expected_output": "6"}, {"input": "mutiple_tuple((-2, -4, -6))", "expected_output": "-48"}], "broken_test_cases": [{"input": "mutiple_tuple((5,))", "expected_output": "0"}], "dataset_name": "mbpp"}
{"task_id": 926, "description": "Write a function to find n-th rencontres number.", "function_name": "rencontres_number", "correct_solution": "def binomial_coeffi(n, k): \r\n\tif (k == 0 or k == n): \r\n\t\treturn 1\r\n\treturn (binomial_coeffi(n - 1, k - 1) \r\n\t\t+ binomial_coeffi(n - 1, k)) \r\ndef rencontres_number(n, m): \r\n\tif (n == 0 and m == 0): \r\n\t\treturn 1\r\n\tif (n == 1 and m == 0): \r\n\t\treturn 0\r\n\tif (m == 0): \r\n\t\treturn ((n - 1) * (rencontres_number(n - 1, 0)+ rencontres_number(n - 2, 0))) \r\n\treturn (binomial_coeffi(n, m) * rencontres_number(n - m, 0))", "test_cases": [{"input": "rencontres_number(7, 2)", "expected_output": "924"}, {"input": "rencontres_number(3, 0)", "expected_output": "2"}, {"input": "rencontres_number(3, 1)", "expected_output": "3"}], "broken_test_cases": [{"input": "rencontres_number(4, 2)", "expected_output": "8"}], "dataset_name": "mbpp"}
{"task_id": 927, "description": "Write a function to calculate the height of the given binary tree.", "function_name": "max_height", "correct_solution": "class Node: \r\n\tdef __init__(self, data): \r\n\t\tself.data = data \r\n\t\tself.left = None\r\n\t\tself.right = None\r\ndef max_height(node): \r\n\tif node is None: \r\n\t\treturn 0 ; \r\n\telse : \r\n\t\tleft_height = max_height(node.left) \r\n\t\tright_height = max_height(node.right) \r\n\t\tif (left_height > right_height): \r\n\t\t\treturn left_height+1\r\n\t\telse: \r\n\t\t\treturn right_height+1", "test_cases": [{"input": "max_height(root)", "expected_output": "3"}, {"input": "max_height(root1)", "expected_output": "5"}, {"input": "max_height(root2)", "expected_output": "4"}], "broken_test_cases": [{"input": "max_height(None)", "expected_output": "1"}], "dataset_name": "mbpp"}
{"task_id": 928, "description": "Write a function to convert a date of yyyy-mm-dd format to dd-mm-yyyy format.", "function_name": "change_date_format", "correct_solution": "import re\r\ndef change_date_format(dt):\r\n        return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)\r\n        return change_date_format(dt)", "test_cases": [{"input": "change_date_format('2026-01-02')", "expected_output": "'02-01-2026'"}, {"input": "change_date_format('2021-01-04')", "expected_output": "'04-01-2021'"}, {"input": "change_date_format('2030-06-06')", "expected_output": "'06-06-2030'"}], "broken_test_cases": [{"input": "change_date_format('2021-12-31')", "expected_output": "'31-12-21'"}], "dataset_name": "mbpp"}
{"task_id": 929, "description": "Write a function to count repeated items of a tuple.", "function_name": "count_tuplex", "correct_solution": "def count_tuplex(tuplex,value):  \r\n  count = tuplex.count(value)\r\n  return count", "test_cases": [{"input": "count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7), 4)", "expected_output": "3"}, {"input": "count_tuplex((2, 4, 5, 6, 2, 3, 4, 4, 7), 2)", "expected_output": "2"}, {"input": "count_tuplex((2, 4, 7, 7, 7, 3, 4, 4, 7), 7)", "expected_output": "4"}], "broken_test_cases": [{"input": "count_tuplex((1, 2, 3, 4, 5), 6)", "expected_output": "1"}], "dataset_name": "mbpp"}
{"task_id": 930, "description": "Write a function that matches a string that has an a followed by zero or more b's by using regex.", "function_name": "text_match", "correct_solution": "import re\r\ndef text_match(text):\r\n        patterns = 'ab*?'\r\n        if re.search(patterns,  text):\r\n                return ('Found a match!')\r\n        else:\r\n                return ('Not matched!')", "test_cases": [{"input": "text_match('msb')", "expected_output": "'Not matched!'"}, {"input": "text_match('a0c')", "expected_output": "'Found a match!'"}, {"input": "text_match('abbc')", "expected_output": "'Found a match!'"}], "broken_test_cases": [{"input": "text_match(\"bbaa\")", "expected_output": "\"Found a match!\""}], "dataset_name": "mbpp"}
{"task_id": 931, "description": "Write a function to calculate the sum of series 1\u00b3+2\u00b3+3\u00b3+\u2026.+n\u00b3.", "function_name": "sum_series", "correct_solution": "import math \r\ndef sum_series(number):\r\n total = 0\r\n total = math.pow((number * (number + 1)) /2, 2)\r\n return total", "test_cases": [{"input": "sum_series(7)", "expected_output": "784"}, {"input": "sum_series(5)", "expected_output": "225"}, {"input": "sum_series(15)", "expected_output": "14400"}], "broken_test_cases": [{"input": "sum_series(3)", "expected_output": "6"}], "dataset_name": "mbpp"}
{"task_id": 932, "description": "Write a function to remove duplicate words from a given list of strings.", "function_name": "remove_duplic_list", "correct_solution": "def remove_duplic_list(l):\r\n    temp = []\r\n    for x in l:\r\n        if x not in temp:\r\n            temp.append(x)\r\n    return temp", "test_cases": [{"input": "remove_duplic_list(['Python', 'Exercises', 'Practice', 'Solution', 'Exercises'])", "expected_output": "['Python', 'Exercises', 'Practice', 'Solution']"}, {"input": "remove_duplic_list(['Python', 'Exercises', 'Practice', 'Solution', 'Exercises', 'Java'])", "expected_output": "['Python', 'Exercises', 'Practice', 'Solution', 'Java']"}, {"input": "remove_duplic_list(['Python', 'Exercises', 'Practice', 'Solution', 'Exercises', 'C++', 'C', 'C++'])", "expected_output": "['Python', 'Exercises', 'Practice', 'Solution', 'C++', 'C']"}], "broken_test_cases": [{"input": "remove_duplic_list(['apple', 'banana', 'Apple', 'BANANA'])", "expected_output": "['apple', 'banana']"}], "dataset_name": "mbpp"}
{"task_id": 933, "description": "Write a function to convert camel case string to snake case string by using regex.", "function_name": "camel_to_snake", "correct_solution": "import re\r\ndef camel_to_snake(text):\r\n  str1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', text)\r\n  return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', str1).lower()", "test_cases": [{"input": "camel_to_snake('GoogleAssistant')", "expected_output": "'google_assistant'"}, {"input": "camel_to_snake('ChromeCast')", "expected_output": "'chrome_cast'"}, {"input": "camel_to_snake('QuadCore')", "expected_output": "'quad_core'"}], "broken_test_cases": [{"input": "camel_to_snake('CamelCaseString')", "expected_output": "'camel_casestring'"}], "dataset_name": "mbpp"}
{"task_id": 934, "description": "Write a function to find the nth delannoy number.", "function_name": "dealnnoy_num", "correct_solution": "def dealnnoy_num(n, m): \r\n\tif (m == 0 or n == 0) : \r\n\t\treturn 1\r\n\treturn dealnnoy_num(m - 1, n) + dealnnoy_num(m - 1, n - 1) + dealnnoy_num(m, n - 1)", "test_cases": [{"input": "dealnnoy_num(3, 4)", "expected_output": "129"}, {"input": "dealnnoy_num(3, 3)", "expected_output": "63"}, {"input": "dealnnoy_num(4, 5)", "expected_output": "681"}], "broken_test_cases": [{"input": "dealnnoy_num(2, 2)", "expected_output": "7"}], "dataset_name": "mbpp"}
{"task_id": 935, "description": "Write a function to calculate the sum of series 1\u00b2+2\u00b2+3\u00b2+\u2026.+n\u00b2.", "function_name": "series_sum", "correct_solution": "def series_sum(number):\r\n total = 0\r\n total = (number * (number + 1) * (2 * number + 1)) / 6\r\n return total", "test_cases": [{"input": "series_sum(6)", "expected_output": "91"}, {"input": "series_sum(7)", "expected_output": "140"}, {"input": "series_sum(12)", "expected_output": "650"}], "broken_test_cases": [{"input": "series_sum(4)", "expected_output": "14"}], "dataset_name": "mbpp"}
{"task_id": 936, "description": "Write a function to re-arrange the given tuples based on the given ordered list.", "function_name": "re_arrange_tuples", "correct_solution": "def re_arrange_tuples(test_list, ord_list):\r\n  temp = dict(test_list)\r\n  res = [(key, temp[key]) for key in ord_list]\r\n  return (res) ", "test_cases": [{"input": "re_arrange_tuples([(4, 3), (1, 9), (2, 10), (3, 2)], [1, 4, 2, 3])", "expected_output": "[(1, 9), (4, 3), (2, 10), (3, 2)]"}, {"input": "re_arrange_tuples([(5, 4), (2, 10), (3, 11), (4, 3)], [3, 4, 2, 3])", "expected_output": "[(3, 11), (4, 3), (2, 10), (3, 11)]"}, {"input": "re_arrange_tuples([(6, 3), (3, 8), (5, 7), (2, 4)], [2, 5, 3, 6])", "expected_output": "[(2, 4), (5, 7), (3, 8), (6, 3)]"}], "broken_test_cases": [{"input": "re_arrange_tuples([(1, 2), (2, 3), (3, 4)], [3, 1, 2])", "expected_output": "[(3, 4), (1, 2), (2, 4)]"}], "dataset_name": "mbpp"}
{"task_id": 937, "description": "Write a function to count the most common character in a given string.", "function_name": "max_char", "correct_solution": "from collections import Counter \r\ndef max_char(str1):\r\n    temp = Counter(str1) \r\n    max_char = max(temp, key = temp.get)\r\n    return max_char", "test_cases": [{"input": "max_char('hello world')", "expected_output": "'l'"}, {"input": "max_char('hello ')", "expected_output": "'l'"}, {"input": "max_char('python pr')", "expected_output": "'p'"}], "broken_test_cases": [{"input": "max_char('aabbcc')", "expected_output": "'a'"}], "dataset_name": "mbpp"}
{"task_id": 938, "description": "Write a function to find three closest elements from three sorted arrays.", "function_name": "find_closet", "correct_solution": "import sys \r\n\r\ndef find_closet(A, B, C, p, q, r): \r\n\tdiff = sys.maxsize \r\n\tres_i = 0\r\n\tres_j = 0\r\n\tres_k = 0\r\n\ti = 0\r\n\tj = 0\r\n\tk = 0\r\n\twhile(i < p and j < q and k < r): \r\n\t\tminimum = min(A[i], min(B[j], C[k])) \r\n\t\tmaximum = max(A[i], max(B[j], C[k])); \r\n\t\tif maximum-minimum < diff: \r\n\t\t\tres_i = i \r\n\t\t\tres_j = j \r\n\t\t\tres_k = k \r\n\t\t\tdiff = maximum - minimum; \r\n\t\tif diff == 0: \r\n\t\t\tbreak\r\n\t\tif A[i] == minimum: \r\n\t\t\ti = i+1\r\n\t\telif B[j] == minimum: \r\n\t\t\tj = j+1\r\n\t\telse: \r\n\t\t\tk = k+1\r\n\treturn A[res_i],B[res_j],C[res_k]", "test_cases": [{"input": "find_closet([1, 4, 10], [2, 15, 20], [10, 12], 3, 3, 2)", "expected_output": "(10, 15, 10)"}, {"input": "find_closet([20, 24, 100], [2, 19, 22, 79, 800], [10, 12, 23, 24, 119], 3, 5, 5)", "expected_output": "(24, 22, 23)"}, {"input": "find_closet([2, 5, 11], [3, 16, 21], [11, 13], 3, 3, 2)", "expected_output": "(11, 16, 11)"}], "broken_test_cases": [{"input": "find_closet([1, 5, 9], [7, 10, 12], [2, 4, 8], 3, 3, 3)", "expected_output": "(5, 7, 4)"}], "dataset_name": "mbpp"}
{"task_id": 939, "description": "Write a function to sort a list of dictionaries using lambda function.", "function_name": "sorted_models", "correct_solution": "def sorted_models(models):\r\n sorted_models = sorted(models, key = lambda x: x['color'])\r\n return sorted_models", "test_cases": [{"input": "sorted_models([{'make': 'Nokia', 'model': 216, 'color': 'Black'}, {'make': 'Mi Max', 'model': 2, 'color': 'Gold'}, {'make': 'Samsung', 'model': 7, 'color': 'Blue'}])", "expected_output": "[{'make': 'Nokia', 'model': 216, 'color': 'Black'}, {'make': 'Samsung', 'model': 7, 'color': 'Blue'}, {'make': 'Mi Max', 'model': 2, 'color': 'Gold'}]"}, {"input": "sorted_models([{'make': 'Vivo', 'model': 20, 'color': 'Blue'}, {'make': 'oppo', 'model': 17, 'color': 'Gold'}, {'make': 'Apple', 'model': 11, 'color': 'red'}])", "expected_output": "[{'make': 'Vivo', 'model': 20, 'color': 'Blue'}, {'make': 'oppo', 'model': 17, 'color': 'Gold'}, {'make': 'Apple', 'model': 11, 'color': 'red'}]"}, {"input": "sorted_models([{'make': 'micromax', 'model': 40, 'color': 'grey'}, {'make': 'poco', 'model': 60, 'color': 'blue'}])", "expected_output": "[{'make': 'poco', 'model': 60, 'color': 'blue'}, {'make': 'micromax', 'model': 40, 'color': 'grey'}]"}], "broken_test_cases": [{"input": "sorted_models([{'make': 'Sony', 'model': 5, 'color': 'Black'}, {'make': 'LG', 'model': 3, 'color': 'black'}, {'make': 'Panasonic', 'model': 7, 'color': 'BLACK'}])", "expected_output": "[{'make': 'Sony', 'model': 5, 'color': 'Black'}, {'make': 'LG', 'model': 3, 'color': 'black'}, {'make': 'Panasonic', 'model': 7, 'color': 'BLACK'}]"}], "dataset_name": "mbpp"}
{"task_id": 940, "description": "Write a function to sort the given array by using heap sort.", "function_name": "heap_sort", "correct_solution": "def heap_sort(arr):\r\n    heapify(arr)  \r\n    end = len(arr) - 1\r\n    while end > 0:\r\n        arr[end], arr[0] = arr[0], arr[end]\r\n        shift_down(arr, 0, end - 1)\r\n        end -= 1\r\n    return arr\r\n\r\ndef heapify(arr):\r\n    start = len(arr) // 2\r\n    while start >= 0:\r\n        shift_down(arr, start, len(arr) - 1)\r\n        start -= 1\r\ndef shift_down(arr, start, end):\r\n    root = start\r\n    while root * 2 + 1 <= end:\r\n        child = root * 2 + 1\r\n        if child + 1 <= end and arr[child] < arr[child + 1]:\r\n            child += 1\r\n        if child <= end and arr[root] < arr[child]:\r\n            arr[root], arr[child] = arr[child], arr[root]\r\n            root = child\r\n        else:\r\n            return\r\n", "test_cases": [{"input": "heap_sort([12, 2, 4, 5, 2, 3])", "expected_output": "[2, 2, 3, 4, 5, 12]"}, {"input": "heap_sort([32, 14, 5, 6, 7, 19])", "expected_output": "[5, 6, 7, 14, 19, 32]"}, {"input": "heap_sort([21, 15, 29, 78, 65])", "expected_output": "[15, 21, 29, 65, 78]"}], "broken_test_cases": [{"input": "heap_sort([7, 3, 5, 1])", "expected_output": "[7, 5, 3, 1]"}], "dataset_name": "mbpp"}
{"task_id": 942, "description": "Write a function to check if any list element is present in the given list.", "function_name": "check_element", "correct_solution": "def check_element(test_tup, check_list):\r\n  res = False\r\n  for ele in check_list:\r\n    if ele in test_tup:\r\n      res = True\r\n      break\r\n  return (res) ", "test_cases": [{"input": "check_element((4, 5, 7, 9, 3), [6, 7, 10, 11])", "expected_output": "True"}, {"input": "check_element((1, 2, 3, 4), [4, 6, 7, 8, 9])", "expected_output": "True"}, {"input": "check_element((3, 2, 1, 4, 5), [9, 8, 7, 6])", "expected_output": "False"}], "broken_test_cases": [{"input": "check_element((1, 2, 3), [4, 5, 1])", "expected_output": "False"}], "dataset_name": "mbpp"}
{"task_id": 943, "description": "Write a function to combine two given sorted lists using heapq module.", "function_name": "combine_lists", "correct_solution": "from heapq import merge\r\ndef combine_lists(num1,num2):\r\n  combine_lists=list(merge(num1, num2))\r\n  return combine_lists", "test_cases": [{"input": "combine_lists([1, 3, 5, 7, 9, 11], [0, 2, 4, 6, 8, 10])", "expected_output": "[0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]"}, {"input": "combine_lists([1, 3, 5, 6, 8, 9], [2, 5, 7, 11])", "expected_output": "[1, 2, 3, 5, 5, 6, 7, 8, 9, 11]"}, {"input": "combine_lists([1, 3, 7], [2, 4, 6])", "expected_output": "[1, 2, 3, 4, 6, 7]"}], "broken_test_cases": [{"input": "combine_lists([1, 2, 3], [4, 5, 6])", "expected_output": "[6, 5, 4, 3, 2, 1]"}], "dataset_name": "mbpp"}
{"task_id": 944, "description": "Write a function to separate and print the numbers and their position of a given string.", "function_name": "num_position", "correct_solution": "import re\r\ndef num_position(text):\r\n for m in re.finditer(\"\\d+\", text):\r\n    return m.start()", "test_cases": [{"input": "num_position('there are 70 flats in this apartment')", "expected_output": "10"}, {"input": "num_position('every adult have 32 teeth')", "expected_output": "17"}, {"input": "num_position('isha has 79 chocolates in her bag')", "expected_output": "9"}], "broken_test_cases": [{"input": "num_position('no numbers here')", "expected_output": "0"}], "dataset_name": "mbpp"}
{"task_id": 946, "description": "Write a function to find the most common elements and their counts of a specified text.", "function_name": "most_common_elem", "correct_solution": "from collections import Counter \r\ndef most_common_elem(s,a):\r\n  most_common_elem=Counter(s).most_common(a)\r\n  return most_common_elem", "test_cases": [{"input": "most_common_elem('lkseropewdssafsdfafkpwe', 3)", "expected_output": "[('s', 4), ('e', 3), ('f', 3)]"}, {"input": "most_common_elem('lkseropewdssafsdfafkpwe', 2)", "expected_output": "[('s', 4), ('e', 3)]"}, {"input": "most_common_elem('lkseropewdssafsdfafkpwe', 7)", "expected_output": "[('s', 4), ('e', 3), ('f', 3), ('k', 2), ('p', 2), ('w', 2), ('d', 2)]"}], "broken_test_cases": [{"input": "most_common_elem('aabbbc', 2)", "expected_output": "[('a', 2), ('b', 2)]"}], "dataset_name": "mbpp"}
{"task_id": 947, "description": "Write a python function to find the length of the shortest word.", "function_name": "len_log", "correct_solution": "def len_log(list1):\r\n    min=len(list1[0])\r\n    for i in list1:\r\n        if len(i)<min:\r\n            min=len(i)\r\n    return min", "test_cases": [{"input": "len_log(['win', 'lose', 'great'])", "expected_output": "3"}, {"input": "len_log(['a', 'ab', 'abc'])", "expected_output": "1"}, {"input": "len_log(['12', '12', '1234'])", "expected_output": "2"}], "broken_test_cases": [{"input": "len_log(['', 'abc', 'de'])", "expected_output": "2"}], "dataset_name": "mbpp"}
{"task_id": 948, "description": "Write a function to get an item of a tuple.", "function_name": "get_item", "correct_solution": "def get_item(tup1,index):\r\n  item = tup1[index]\r\n  return item", "test_cases": [{"input": "get_item(('w', 3, 'r', 'e', 's', 'o', 'u', 'r', 'c', 'e'), 3)", "expected_output": "'e'"}, {"input": "get_item(('w', 3, 'r', 'e', 's', 'o', 'u', 'r', 'c', 'e'), -4)", "expected_output": "'u'"}, {"input": "get_item(('w', 3, 'r', 'e', 's', 'o', 'u', 'r', 'c', 'e'), -3)", "expected_output": "'r'"}], "broken_test_cases": [{"input": "get_item(('a', 'b', 'c', 'd'), 4)", "expected_output": "'d'"}], "dataset_name": "mbpp"}
{"task_id": 949, "description": "Write a function to sort the given tuple list basis the total digits in tuple.", "function_name": "sort_list", "correct_solution": "def count_digs(tup):\r\n  return sum([len(str(ele)) for ele in tup ]) \r\ndef sort_list(test_list):\r\n  test_list.sort(key = count_digs)\r\n  return (str(test_list))", "test_cases": [{"input": "sort_list([(3, 4, 6, 723), (1, 2), (12345,), (134, 234, 34)])", "expected_output": "'[(1, 2), (12345,), (3, 4, 6, 723), (134, 234, 34)]'"}, {"input": "sort_list([(3, 4, 8), (1, 2), (1234335,), (1345, 234, 334)])", "expected_output": "'[(1, 2), (3, 4, 8), (1234335,), (1345, 234, 334)]'"}, {"input": "sort_list([(34, 4, 61, 723), (1, 2), (145,), (134, 23)])", "expected_output": "'[(1, 2), (145,), (134, 23), (34, 4, 61, 723)]'"}], "broken_test_cases": [{"input": "sort_list([(1, 22), (333, 4), (5, 6, 7), (88888,)])", "expected_output": "'[(5, 6, 7), (333, 4), (1, 22), (88888,)]'"}], "dataset_name": "mbpp"}
{"task_id": 950, "description": "Write a function to display sign of the chinese zodiac for given year.", "function_name": "chinese_zodiac", "correct_solution": "def chinese_zodiac(year):\r\n if (year - 2000) % 12 == 0:\r\n     sign = 'Dragon'\r\n elif (year - 2000) % 12 == 1:\r\n     sign = 'Snake'\r\n elif (year - 2000) % 12 == 2:\r\n     sign = 'Horse'\r\n elif (year - 2000) % 12 == 3:\r\n     sign = 'sheep'\r\n elif (year - 2000) % 12 == 4:\r\n     sign = 'Monkey'\r\n elif (year - 2000) % 12 == 5:\r\n     sign = 'Rooster'\r\n elif (year - 2000) % 12 == 6:\r\n     sign = 'Dog'\r\n elif (year - 2000) % 12 == 7:\r\n     sign = 'Pig'\r\n elif (year - 2000) % 12 == 8:\r\n     sign = 'Rat'\r\n elif (year - 2000) % 12 == 9:\r\n     sign = 'Ox'\r\n elif (year - 2000) % 12 == 10:\r\n     sign = 'Tiger'\r\n else:\r\n     sign = 'Hare'\r\n return sign", "test_cases": [{"input": "chinese_zodiac(1997)", "expected_output": "'Ox'"}, {"input": "chinese_zodiac(1998)", "expected_output": "'Tiger'"}, {"input": "chinese_zodiac(1994)", "expected_output": "'Dog'"}], "broken_test_cases": [{"input": "chinese_zodiac(2023)", "expected_output": "'Sheep'"}], "dataset_name": "mbpp"}
{"task_id": 951, "description": "Write a function to find the maximum of similar indices in two lists of tuples.", "function_name": "max_similar_indices", "correct_solution": "def max_similar_indices(test_list1, test_list2):\r\n  res = [(max(x[0], y[0]), max(x[1], y[1]))\r\n   for x, y in zip(test_list1, test_list2)]\r\n  return (res) ", "test_cases": [{"input": "max_similar_indices([(2, 4), (6, 7), (5, 1)], [(5, 4), (8, 10), (8, 14)])", "expected_output": "[(5, 4), (8, 10), (8, 14)]"}, {"input": "max_similar_indices([(3, 5), (7, 8), (6, 2)], [(6, 5), (9, 11), (9, 15)])", "expected_output": "[(6, 5), (9, 11), (9, 15)]"}, {"input": "max_similar_indices([(4, 6), (8, 9), (7, 3)], [(7, 6), (10, 12), (10, 16)])", "expected_output": "[(7, 6), (10, 12), (10, 16)]"}], "broken_test_cases": [{"input": "max_similar_indices([(1, 2), (3, 4)], [(5, 0), (2, 8)])", "expected_output": "[(1, 2), (3, 8)]"}], "dataset_name": "mbpp"}
{"task_id": 952, "description": "Write a function to compute the value of ncr mod p.", "function_name": "nCr_mod_p", "correct_solution": "def nCr_mod_p(n, r, p): \r\n\tif (r > n- r): \r\n\t\tr = n - r \r\n\tC = [0 for i in range(r + 1)] \r\n\tC[0] = 1 \r\n\tfor i in range(1, n + 1): \r\n\t\tfor j in range(min(i, r), 0, -1): \r\n\t\t\tC[j] = (C[j] + C[j-1]) % p \r\n\treturn C[r] ", "test_cases": [{"input": "nCr_mod_p(10, 2, 13)", "expected_output": "6"}, {"input": "nCr_mod_p(11, 3, 14)", "expected_output": "11"}, {"input": "nCr_mod_p(18, 14, 19)", "expected_output": "1"}], "broken_test_cases": [{"input": "nCr_mod_p(7, 3, 2)", "expected_output": "0"}], "dataset_name": "mbpp"}
{"task_id": 954, "description": "Write a function that gives profit amount if the given amount has profit else return none.", "function_name": "profit_amount", "correct_solution": "def profit_amount(actual_cost,sale_amount): \r\n if(actual_cost > sale_amount):\r\n    amount = actual_cost - sale_amount\r\n    return amount\r\n else:\r\n    return None", "test_cases": [{"input": "profit_amount(1500, 1200)", "expected_output": "300"}, {"input": "profit_amount(100, 200)", "expected_output": "None"}, {"input": "profit_amount(2000, 5000)", "expected_output": "None"}], "broken_test_cases": [{"input": "profit_amount(500, 600)", "expected_output": "100"}], "dataset_name": "mbpp"}
{"task_id": 955, "description": "Write a function to find out, if the given number is abundant.", "function_name": "is_abundant", "correct_solution": "def is_abundant(n):\r\n    fctrsum = sum([fctr for fctr in range(1, n) if n % fctr == 0])\r\n    return fctrsum > n", "test_cases": [{"input": "is_abundant(12)", "expected_output": "True"}, {"input": "is_abundant(13)", "expected_output": "False"}, {"input": "is_abundant(9)", "expected_output": "False"}], "broken_test_cases": [{"input": "is_abundant(6)", "expected_output": "True"}], "dataset_name": "mbpp"}
{"task_id": 956, "description": "Write a function to split the given string at uppercase letters by using regex.", "function_name": "split_list", "correct_solution": "import re\r\ndef split_list(text):\r\n  return (re.findall('[A-Z][^A-Z]*', text))", "test_cases": [{"input": "split_list('LearnToBuildAnythingWithGoogle')", "expected_output": "['Learn', 'To', 'Build', 'Anything', 'With', 'Google']"}, {"input": "split_list('ApmlifyingTheBlack+DeveloperCommunity')", "expected_output": "['Apmlifying', 'The', 'Black+', 'Developer', 'Community']"}, {"input": "split_list('UpdateInTheGoEcoSystem')", "expected_output": "['Update', 'In', 'The', 'Go', 'Eco', 'System']"}], "broken_test_cases": [{"input": "split_list('XMLHttpRequest')", "expected_output": "['XML', 'Http', 'Request']"}], "dataset_name": "mbpp"}
{"task_id": 957, "description": "Write a python function to get the position of rightmost set bit.", "function_name": "get_First_Set_Bit_Pos", "correct_solution": "import math\r\ndef get_First_Set_Bit_Pos(n):\r\n     return math.log2(n&-n)+1", "test_cases": [{"input": "get_First_Set_Bit_Pos(12)", "expected_output": "3"}, {"input": "get_First_Set_Bit_Pos(18)", "expected_output": "2"}, {"input": "get_First_Set_Bit_Pos(16)", "expected_output": "5"}], "broken_test_cases": [{"input": "get_First_Set_Bit_Pos(0)", "expected_output": "1"}], "dataset_name": "mbpp"}
{"task_id": 958, "description": "Write a function to convert an integer into a roman numeral.", "function_name": "int_to_roman", "correct_solution": "def int_to_roman( num):\r\n        val = [1000, 900, 500, 400,100, 90, 50, 40,10, 9, 5, 4,1]\r\n        syb = [\"M\", \"CM\", \"D\", \"CD\",\"C\", \"XC\", \"L\", \"XL\",\"X\", \"IX\", \"V\", \"IV\",\"I\"]\r\n        roman_num = ''\r\n        i = 0\r\n        while  num > 0:\r\n            for _ in range(num // val[i]):\r\n                roman_num += syb[i]\r\n                num -= val[i]\r\n            i += 1\r\n        return roman_num", "test_cases": [{"input": "int_to_roman(1)", "expected_output": "'I'"}, {"input": "int_to_roman(50)", "expected_output": "'L'"}, {"input": "int_to_roman(4)", "expected_output": "'IV'"}], "broken_test_cases": [{"input": "int_to_roman(9)", "expected_output": "\"VIIII\""}], "dataset_name": "mbpp"}
{"task_id": 959, "description": "Write a python function to find the average of a list.", "function_name": "Average", "correct_solution": "def Average(lst): \r\n    return sum(lst) / len(lst) ", "test_cases": [{"input": "Average([15, 9, 55, 41, 35, 20, 62, 49])", "expected_output": "35.75"}, {"input": "Average([4, 5, 1, 2, 9, 7, 10, 8])", "expected_output": "5.75"}, {"input": "Average([1, 2, 3])", "expected_output": "2"}], "broken_test_cases": [{"input": "Average([0])", "expected_output": "0.5"}], "dataset_name": "mbpp"}
{"task_id": 960, "description": "Write a function to solve tiling problem.", "function_name": "get_noOfways", "correct_solution": "def get_noOfways(n):\r\n    if (n == 0):\r\n        return 0;\r\n    if (n == 1):\r\n        return 1; \r\n    return get_noOfways(n - 1) + get_noOfways(n - 2);", "test_cases": [{"input": "get_noOfways(4)", "expected_output": "3"}, {"input": "get_noOfways(3)", "expected_output": "2"}, {"input": "get_noOfways(5)", "expected_output": "5"}], "broken_test_cases": [{"input": "get_noOfways(0)", "expected_output": "1"}], "dataset_name": "mbpp"}
{"task_id": 962, "description": "Write a python function to find the sum of all even natural numbers within the range l and r.", "function_name": "sum_Even", "correct_solution": "def sum_Natural(n): \r\n    sum = (n * (n + 1)) \r\n    return int(sum) \r\ndef sum_Even(l,r): \r\n    return (sum_Natural(int(r / 2)) - sum_Natural(int((l - 1) / 2))) ", "test_cases": [{"input": "sum_Even(2, 5)", "expected_output": "6"}, {"input": "sum_Even(3, 8)", "expected_output": "18"}, {"input": "sum_Even(4, 6)", "expected_output": "10"}], "broken_test_cases": [{"input": "sum_Even(1, 1)", "expected_output": "1"}], "dataset_name": "mbpp"}
{"task_id": 963, "description": "Write a function to calculate the discriminant value.", "function_name": "discriminant_value", "correct_solution": "def discriminant_value(x,y,z):\r\n    discriminant = (y**2) - (4*x*z)\r\n    if discriminant > 0:\r\n        return (\"Two solutions\",discriminant)\r\n    elif discriminant == 0:\r\n        return (\"one solution\",discriminant)\r\n    elif discriminant < 0:\r\n        return (\"no real solution\",discriminant)", "test_cases": [{"input": "discriminant_value(4, 8, 2)", "expected_output": "('Two solutions', 32)"}, {"input": "discriminant_value(5, 7, 9)", "expected_output": "('no real solution', -131)"}, {"input": "discriminant_value(0, 0, 9)", "expected_output": "('one solution', 0)"}], "broken_test_cases": [{"input": "discriminant_value(1, 2, 1)", "expected_output": "(\"Two solutions\", 0)"}], "dataset_name": "mbpp"}
{"task_id": 965, "description": "Write a function to convert camel case string to snake case string.", "function_name": "camel_to_snake", "correct_solution": "def camel_to_snake(text):\r\n        import re\r\n        str1 = re.sub('(.)([A-Z][a-z]+)', r'\\1_\\2', text)\r\n        return re.sub('([a-z0-9])([A-Z])', r'\\1_\\2', str1).lower()", "test_cases": [{"input": "camel_to_snake('PythonProgram')", "expected_output": "'python_program'"}, {"input": "camel_to_snake('pythonLanguage')", "expected_output": "'python_language'"}, {"input": "camel_to_snake('ProgrammingLanguage')", "expected_output": "'programming_language'"}], "broken_test_cases": [{"input": "camel_to_snake('HTTPRequest')", "expected_output": "'h_t_t_p_request'"}], "dataset_name": "mbpp"}
{"task_id": 966, "description": "Write a function to remove an empty tuple from a list of tuples.", "function_name": "remove_empty", "correct_solution": "def remove_empty(tuple1): #L = [(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), ('d')]\r\n   tuple1 = [t for t in tuple1 if t]\r\n   return tuple1", "test_cases": [{"input": "remove_empty([(), (), ('',), ('a', 'b'), ('a', 'b', 'c'), 'd'])", "expected_output": "[('',), ('a', 'b'), ('a', 'b', 'c'), 'd']"}, {"input": "remove_empty([(), (), ('',), 'python', 'program'])", "expected_output": "[('',), 'python', 'program']"}, {"input": "remove_empty([(), (), ('',), 'java'])", "expected_output": "[('',), 'java']"}], "broken_test_cases": [{"input": "remove_empty([(), ('',), ('a',), (), ('b',), ()])", "expected_output": "[('a',), ('b',)]"}], "dataset_name": "mbpp"}
{"task_id": 967, "description": "Write a python function to accept the strings which contains all vowels.", "function_name": "check", "correct_solution": "def check(string): \r\n  if len(set(string).intersection(\"AEIOUaeiou\"))>=5: \r\n    return ('accepted') \r\n  else: \r\n    return (\"not accepted\") ", "test_cases": [{"input": "check('SEEquoiaL')", "expected_output": "'accepted'"}, {"input": "check('program')", "expected_output": "'not accepted'"}, {"input": "check('fine')", "expected_output": "'not accepted'"}], "broken_test_cases": [{"input": "check('abcdefghijklmnopqrstuvwxyz')", "expected_output": "'not accepted'"}], "dataset_name": "mbpp"}
{"task_id": 968, "description": "Write a python function to find maximum possible value for the given periodic function.", "function_name": "floor_Max", "correct_solution": "def floor_Max(A,B,N):\r\n    x = min(B - 1,N)\r\n    return (A*x) // B", "test_cases": [{"input": "floor_Max(11, 10, 9)", "expected_output": "9"}, {"input": "floor_Max(5, 7, 4)", "expected_output": "2"}, {"input": "floor_Max(2, 2, 1)", "expected_output": "1"}], "broken_test_cases": [{"input": "floor_Max(10, 3, 7)", "expected_output": "24"}], "dataset_name": "mbpp"}
{"task_id": 969, "description": "Write a function to join the tuples if they have similar initial elements.", "function_name": "join_tuples", "correct_solution": "def join_tuples(test_list):\r\n  res = []\r\n  for sub in test_list:\r\n    if res and res[-1][0] == sub[0]:\r\n      res[-1].extend(sub[1:])\r\n    else:\r\n      res.append([ele for ele in sub])\r\n  res = list(map(tuple, res))\r\n  return (res) ", "test_cases": [{"input": "join_tuples([(5, 6), (5, 7), (6, 8), (6, 10), (7, 13)])", "expected_output": "[(5, 6, 7), (6, 8, 10), (7, 13)]"}, {"input": "join_tuples([(6, 7), (6, 8), (7, 9), (7, 11), (8, 14)])", "expected_output": "[(6, 7, 8), (7, 9, 11), (8, 14)]"}, {"input": "join_tuples([(7, 8), (7, 9), (8, 10), (8, 12), (9, 15)])", "expected_output": "[(7, 8, 9), (8, 10, 12), (9, 15)]"}], "broken_test_cases": [{"input": "join_tuples([(5, 6), (7, 8), (5, 9), (7, 10)])", "expected_output": "[(5, 6, 9), (7, 8, 10)]"}], "dataset_name": "mbpp"}
{"task_id": 970, "description": "Write a function to find minimum of two numbers.", "function_name": "min_of_two", "correct_solution": "def min_of_two( x, y ):\r\n    if x < y:\r\n        return x\r\n    return y", "test_cases": [{"input": "min_of_two(10, 20)", "expected_output": "10"}, {"input": "min_of_two(19, 15)", "expected_output": "15"}, {"input": "min_of_two(-10, -20)", "expected_output": "-20"}], "broken_test_cases": [{"input": "min_of_two(7, 3)", "expected_output": "7"}], "dataset_name": "mbpp"}
{"task_id": 971, "description": "Write a function to find the maximum number of segments of lengths a, b and c that can be formed from n.", "function_name": "maximum_segments", "correct_solution": "def maximum_segments(n, a, b, c) : \r\n\tdp = [-1] * (n + 10) \r\n\tdp[0] = 0\r\n\tfor i in range(0, n) : \r\n\t\tif (dp[i] != -1) : \r\n\t\t\tif(i + a <= n ): \r\n\t\t\t\tdp[i + a] = max(dp[i] + 1, \r\n\t\t\t\t\t\t\tdp[i + a]) \r\n\t\t\tif(i + b <= n ): \r\n\t\t\t\tdp[i + b] = max(dp[i] + 1, \r\n\t\t\t\t\t\t\tdp[i + b]) \r\n\t\t\tif(i + c <= n ): \r\n\t\t\t\tdp[i + c] = max(dp[i] + 1, \r\n\t\t\t\t\t\t\tdp[i + c]) \r\n\treturn dp[n]", "test_cases": [{"input": "maximum_segments(7, 5, 2, 5)", "expected_output": "2"}, {"input": "maximum_segments(17, 2, 1, 3)", "expected_output": "17"}, {"input": "maximum_segments(18, 16, 3, 6)", "expected_output": "6"}], "broken_test_cases": [{"input": "maximum_segments(9, 2, 2, 2)", "expected_output": "4"}], "dataset_name": "mbpp"}
{"task_id": 972, "description": "Write a function to concatenate the given two tuples to a nested tuple.", "function_name": "concatenate_nested", "correct_solution": "def concatenate_nested(test_tup1, test_tup2):\r\n  res = test_tup1 + test_tup2\r\n  return (res) ", "test_cases": [{"input": "concatenate_nested((3, 4), (5, 6))", "expected_output": "(3, 4, 5, 6)"}, {"input": "concatenate_nested((1, 2), (3, 4))", "expected_output": "(1, 2, 3, 4)"}, {"input": "concatenate_nested((4, 5), (6, 8))", "expected_output": "(4, 5, 6, 8)"}], "broken_test_cases": [{"input": "concatenate_nested((1, 2), (3, 4))", "expected_output": "((1, 2), (3, 4))"}], "dataset_name": "mbpp"}
{"task_id": 973, "description": "Write a python function to left rotate the string.", "function_name": "left_rotate", "correct_solution": "def left_rotate(s,d):\r\n    tmp = s[d : ] + s[0 : d]\r\n    return tmp  ", "test_cases": [{"input": "left_rotate('python', 2)", "expected_output": "'thonpy'"}, {"input": "left_rotate('bigdata', 3)", "expected_output": "'databig'"}, {"input": "left_rotate('hadoop', 1)", "expected_output": "'adooph'"}], "broken_test_cases": [{"input": "left_rotate('rotate', 3)", "expected_output": "'otaetr'"}], "dataset_name": "mbpp"}
{"task_id": 974, "description": "Write a function to find the minimum total path sum in the given triangle.", "function_name": "min_sum_path", "correct_solution": "def min_sum_path(A): \r\n\tmemo = [None] * len(A) \r\n\tn = len(A) - 1\r\n\tfor i in range(len(A[n])): \r\n\t\tmemo[i] = A[n][i] \r\n\tfor i in range(len(A) - 2, -1,-1): \r\n\t\tfor j in range( len(A[i])): \r\n\t\t\tmemo[j] = A[i][j] + min(memo[j], \r\n\t\t\t\t\t\t\t\t\tmemo[j + 1]) \r\n\treturn memo[0]", "test_cases": [{"input": "min_sum_path([[2], [3, 9], [1, 6, 7]])", "expected_output": "6"}, {"input": "min_sum_path([[2], [3, 7], [8, 5, 6]])", "expected_output": "10"}, {"input": "min_sum_path([[3], [6, 4], [5, 2, 7]])", "expected_output": "9"}], "broken_test_cases": [{"input": "min_sum_path([[1], [2, 3], [4, 5, 6]])", "expected_output": "5"}], "dataset_name": "mbpp"}
